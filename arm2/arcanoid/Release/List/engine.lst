##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    03/Aug/2009  21:15:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\programming\мои проекты\ArcanoidStudio\engine.c   #
#    Command line    =  "D:\programming\мои проекты\ArcanoidStudio\engine.c" #
#                        -D NEWSGOLD -D ELKA -lC "D:\programming\мои         #
#                       проекты\ArcanoidStudio\Release\List\" -o             #
#                       "D:\programming\мои проекты\ArcanoidStudio\Release\O #
#                       bj\" -s9 --cpu_mode arm --endian little --cpu        #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "D:\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  D:\programming\мои проекты\ArcanoidStudio\Release\Li #
#                       st\engine.lst                                        #
#    Object file     =  D:\programming\мои проекты\ArcanoidStudio\Release\Ob #
#                       j\engine.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

D:\programming\мои проекты\ArcanoidStudio\engine.c
      1          #include "..\inc\swilib.h"
      2          #include "engine.h"
      3          #include "config.h"
      4          #include "SpriteLoader.h"
      5          #include "menu.h"
      6          
      7          
      8          //#define NO_LOG
      9          
     10          
     11          extern char *pwd;  //путь к папке с эльфом типа 4:\\windows\\ 
     12          signed char state; //статус игры(смотри дефайны)
     13          short score = 0;
     14          char UsedLevel[MAX_HEIGHT][MAX_WIDTH]; //сюда копим загруженный левел
     15          IMGHDR *level_bg; //фон для текущего уровня
     16          short clean_bricks = 0; //кооличество бриков,которые разбили на текущий момент
     17          short bricks_of_clean = 0; //кооличество бриков,которое надо разбить для завершения левела
     18          char total_levels = 0; //сколько левелов нашли
     19          char ball_max_speed = 6;
     20          char ball_min_speed = 2;
     21          char total_lives = 3;
     22          char levelcounter = 1;
     23          
     24          char press_msg[128];
     25          char press_type;
     26          
     27          
     28          
     29          int PLAY_ID=0xFFFF;
     30          char SoundRepeat = 1;
     31          /*
     32          by ilya90. замена функции на открывающую из папки с елфом.
     33          вынужден заменить функцию библиотеки fopen на аналогичную,
     34          открывающую файлы из папки с елфом. Функцию в библе 
     35          переименовать в fopenA.
     36          */

   \                                 In segment CODE, align 4, keep-with-next
     37          int fopen(const char * filename, unsigned int fileflags, unsigned int filemode, unsigned int *errornumber)
     38          {
   \                     fopen:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     39          char *realpath=malloc(512);
   \   00000014   800FA0E3           MOV      R0,#+512
   \   00000018   140000EF           SWI      +20
     40          sprintf(realpath,"%s%s",pwd,filename);
   \   0000001C   ........           LDR      R1,??DataTable0  ;; `?<Constant "called function init">` + 228
   \   00000020   0080A0E1           MOV      R8,R0
   \   00000024   ........           LDR      R0,??DataTable26  ;; pwd
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   002090E5           LDR      R2,[R0, #+0]
   \   00000030   0800A0E1           MOV      R0,R8
   \   00000034   160000EF           SWI      +22
     41          int f=fopenA(realpath,fileflags,filemode,errornumber);
   \   00000038   0730A0E1           MOV      R3,R7
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   0A0000EF           SWI      +10
   \   0000004C   0040A0E1           MOV      R4,R0
     42          mfree(realpath);
   \   00000050   0800A0E1           MOV      R0,R8
   \   00000054   150000EF           SWI      +21
     43          return(f);
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   F081BDE8           POP      {R4-R8,PC}       ;; return
     44          }
     45          
     46          FSTATS fstats;
     47          unsigned int err;
     48          
     49          char DEBUG;
     50          TDate date; TTime time;
     51          #ifndef NO_LOG

   \                                 In segment CODE, align 4, keep-with-next
     52          void log (char *string)
     53          {
   \                     log:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     54            if(!DEBUG) return;
   \   00000004   ........           LDR      R4,??DataTable25  ;; ball
   \   00000008   0090A0E1           MOV      R9,R0
   \   0000000C   7007D4E5           LDRB     R0,[R4, #+1904]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   F087BD08           POPEQ    {R4-R10,PC}
     55            int logfile=fopen("ArcanoidStudio_1.4.log",A_ReadWrite+A_TXT+A_Append+A_Create,P_READ+P_WRITE,0);
   \   00000018   C8509FE5           LDR      R5,??log_0       ;; `?<Constant "ArcanoidStudio_1.4.log">`
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   0A10A0E3           MOV      R1,#+10
   \   00000028   411C81E3           ORR      R1,R1,#0x4100
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       fopen
   \   00000034   0060A0E1           MOV      R6,R0
     56            char *data=malloc(4096);
   \   00000038   400DA0E3           MOV      R0,#+4096
   \   0000003C   140000EF           SWI      +20
   \   00000040   0070A0E1           MOV      R7,R0
     57            GetDateTime(&date,&time); 
   \   00000044   68A0A0E3           MOV      R10,#+104
   \   00000048   40AE8AE3           ORR      R10,R10,#0x400
   \   0000004C   768EA0E3           MOV      R8,#+1888
   \   00000050   041088E0           ADD      R1,R8,R4
   \   00000054   04008AE0           ADD      R0,R10,R4
   \   00000058   B40000EF           SWI      +180
     58            sprintf(data,">%d:%02d:%02d/%02d-%02d-%04d< >kernel<   %s\n",time.hour,time.min,time.sec,date.day, date.month,date.year,string);
   \   0000005C   00022DE9           PUSH     {R9}
   \   00000060   04009AE7           LDR      R0,[R10, +R4]
   \   00000064   181085E2           ADD      R1,R5,#+24
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   6C04D4E5           LDRB     R0,[R4, #+1132]
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   6D04D4E5           LDRB     R0,[R4, #+1133]
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   6207D4E5           LDRB     R0,[R4, #+1890]
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   6137D4E5           LDRB     R3,[R4, #+1889]
   \   00000088   0420D8E7           LDRB     R2,[R8, +R4]
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   160000EF           SWI      +22
     59            lseek(logfile, 0x0, S_END, 0, 0);
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0030A0E3           MOV      R3,#+0
   \   000000A0   0220A0E3           MOV      R2,#+2
   \   000000A4   0010A0E1           MOV      R1,R0
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   0F0000EF           SWI      +15
     60            fwrite(logfile,data,strlen(data),0);
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   1B0000EF           SWI      +27
   \   000000B8   0030A0E3           MOV      R3,#+0
   \   000000BC   0020A0E1           MOV      R2,R0
   \   000000C0   0710A0E1           MOV      R1,R7
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   0C0000EF           SWI      +12
     61            mfree(data);
   \   000000CC   0700A0E1           MOV      R0,R7
   \   000000D0   150000EF           SWI      +21
     62            fclose(logfile,0);
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   0600A0E1           MOV      R0,R6
   \   000000DC   0D0000EF           SWI      +13
     63          }
   \   000000E0   18D08DE2           ADD      SP,SP,#+24
   \   000000E4   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??log_0:
   \   000000E8   ........           DC32     `?<Constant "ArcanoidStudio_1.4.log">`
     64          #else 
     65          void log (char *string){}
     66          #endif
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          void DrwImg(IMGHDR *img, int x, int y)
     69          {
   \                     DrwImg:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
     70            //LCD_DrawImage(img,x,y);
     71            RECT rc;
     72            DRWOBJ drwobj;
     73            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \   0000000C   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   B030D4E1           LDRH     R3,[R4, #+0]
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   330100EF           SWI      +307
     74            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000020   0430A0E1           MOV      R3,R4
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0C008DE2           ADD      R0,SP,#+12
   \   00000030   510100EF           SWI      +337
     75            DrawObject(&drwobj);
   \   00000034   0C008DE2           ADD      R0,SP,#+12
   \   00000038   2A0100EF           SWI      +298
     76          }
   \   0000003C   30D08DE2           ADD      SP,SP,#+48
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
     77          
     78          char perc_t[]="%t";
     79          char perc_s[]="%s";
     80          char perc_d[]="%d"; //для избежания галимого глюка :)
     81          
     82          typedef struct
     83          {
     84            IMGHDR *img;
     85            short x;
     86            short y;
     87            char stats;
     88          }image;
     89          ////////////////////////////////////////////////////////////////////////////////////////
     90          ////////////////////////////////////////////////////////////////////////////////////////
     91          ////////////////////////////////////////////////////////////////////////////////////////
     92          ////////////////////////////////////////////////////////////////////////////////////////
     93          ////////////////////////////////////////////////////////////////////////////////////////
     94          image brick[10];
     95          
     96          
     97          image ball[3][3]; //3 типа мяча,у каждого типа по 3 размерности(большой,средний малый)
     98          short ball_x,ball_y,ball_spx,ball_spy;
     99          char ball_s; //размерность
    100          char ball_type; //тип(обычный,"невидимка","все пробивающий")
    101          
    102          
    103          TSPRITE user[4][3];
    104          char user_l=0,user_r=0,user_sp=5;
    105          short user_x,user_y;
    106          short user_c; //время,которое платформа находится в движении
    107          char user_s;
    108          char user_type;
    109          short user_N;
    110          
    111          
    112          
    113          
    114          
    115          TSPRITE brick_sparks;
    116          TSPRITE mine_sparks;
    117          TSPRITE rocket_sparks;
    118          
    119          
    120          //uid от 0 до 15 зарезервирован на бонусы!!
    121          #define UID_WEAPON_PISTOL 25
    122          #define UID_WEAPON_ROCKET 26
    123          #define UID_OTHER 666
    124          
    125          
    126          TSPRITE weapon_shot[2]; //rocket and pistol
    127          signed char bonus_shot_type = -1; //-1 - не стреляем
    128          
    129          image boss;
    130          
    131          char offset1; //основной оффсет прорисовки
    132          
    133          
    134          #define NUM_OF_BONUSES 16
    135          typedef struct
    136          {
    137            TSPRITE spr;
    138            char num; //номер бонуса,задается при создании бонуса
    139          }BONUS;
    140          BONUS bonus[NUM_OF_BONUSES];
    141          char bonus_active[NUM_OF_BONUSES];
    142          short bonus_counter[NUM_OF_BONUSES];
    143          short bonus_time[NUM_OF_BONUSES];
    144          
    145          ///////////////////
    146          char mem_ball_spx; 
    147          char mem_ball_spy;
    148          char bon_slime_use; //прилеплен ли шар к юзеру?
    149          ////////////////////
    150          
    151          void SetCell(char x,char y,char value,unsigned int *err);
    152          char GetCell(char x,char y);
    153          void InitBoom(char x,char y);
    154          void DestroyBrick(char x,char y);
    155          ////////////////////////////////////////////////////////////////////////////////////////
    156          ////////////////////////////////////////////////////////////////////////////////////////
    157          ////////////////////////////////////////////////////////////////////////////////////////
    158          ////////////////////////////////////////////////////////////////////////////////////////
    159          ////////////////////////////////////////////////////////////////////////////////////////
    160          ////////////////////////////////////////////////////////////////////////////////////////
    161          ////////////////////////////////////////////////////////////////////////////////////////
    162          #define abs(x) (((x)>0)?(x):-(x))

   \                                 In segment CODE, align 4, keep-with-next
    163          char BossBallHit()
    164          {
    165            if(ball_x>=boss.x-6 && ball_x+ball[ball_type][ball_s].img->w<=boss.x+boss.img->w && ball_y<=boss.y+boss.img->h) return 1;
   \                     BossBallHit:
   \   00000000   ........           LDR      R0,??DataTable3  ;; boss
   \   00000004   ........           LDR      R1,??DataTable7  ;; ball
   \   00000008   F0002DE9           PUSH     {R4-R7}
   \   0000000C   F4C0D0E1           LDRSH    R12,[R0, #+4]
   \   00000010   F22BD1E1           LDRSH    R2,[R1, #+178]
   \   00000014   06304CE2           SUB      R3,R12,#+6
   \   00000018   030052E1           CMP      R2,R3
   \   0000001C   140000BA           BLT      ??BossBallHit_0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   7267D1E5           LDRB     R6,[R1, #+1906]
   \   00000028   B040D3E1           LDRH     R4,[R3, #+0]
   \   0000002C   0C50A0E3           MOV      R5,#+12
   \   00000030   2470A0E3           MOV      R7,#+36
   \   00000034   0C4084E0           ADD      R4,R4,R12
   \   00000038   71C7D1E5           LDRB     R12,[R1, #+1905]
   \   0000003C   971626E0           MLA      R6,R7,R6,R1
   \   00000040   956C26E0           MLA      R6,R5,R12,R6
   \   00000044   005096E5           LDR      R5,[R6, #+0]
   \   00000048   B050D5E1           LDRH     R5,[R5, #+0]
   \   0000004C   022085E0           ADD      R2,R5,R2
   \   00000050   020054E1           CMP      R4,R2
   \   00000054   060000BA           BLT      ??BossBallHit_0
   \   00000058   F600D0E1           LDRSH    R0,[R0, #+6]
   \   0000005C   B220D3E1           LDRH     R2,[R3, #+2]
   \   00000060   F41BD1E1           LDRSH    R1,[R1, #+180]
   \   00000064   000082E0           ADD      R0,R2,R0
   \   00000068   010050E1           CMP      R0,R1
   \   0000006C   0100A0A3           MOVGE    R0,#+1
   \   00000070   000000AA           BGE      ??BossBallHit_1
    166            else return 0;
   \                     ??BossBallHit_0:
   \   00000074   0000A0E3           MOV      R0,#+0
   \                     ??BossBallHit_1:
   \   00000078   F000BDE8           POP      {R4-R7}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
    167          }
    168          
    169          
    170          

   \                                 In segment CODE, align 4, keep-with-next
    171          char SBhit(image brick,char num) //проверка на столкновение пульки(или ракеты) с бриком.Стену(num==7) пулька не разрушит,а ракета вполне
    172          {
   \                     SBhit:
   \   00000000   0F002DE9           PUSH     {R0-R3}
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
    173            //проверка только на нижнюю сторону брика 
    174            RECT br;
    175            br.x = brick.x;
    176            br.y = brick.y;
    177            br.x2 = br.x+brick.img->w;
    178            br.y2 = br.y+brick.img->h;
    179            short x,y;
    180            
    181            for(short i=0;i<MAX_SPRITES;i++)
   \   00000008   ........           LDR      R10,??DataTable5  ;; sprites
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   F842DDE1           LDRSH    R4,[SP, #+40]
   \   00000014   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000018   FA52DDE1           LDRSH    R5,[SP, #+42]
   \   0000001C   0080A0E3           MOV      R8,#+0
   \   00000020   046080E0           ADD      R6,R0,R4
   \   00000024   24009DE5           LDR      R0,[SP, #+36]
   \   00000028   F200D0E1           LDRSH    R0,[R0, #+2]
   \   0000002C   057080E0           ADD      R7,R0,R5
    182            {
    183              if(!sprites[i].active) continue;
   \                     ??SBhit_0:
   \   00000030   2410A0E3           MOV      R1,#+36
   \   00000034   00009AE5           LDR      R0,[R10, #+0]
   \   00000038   910809E0           MUL      R9,R1,R8
   \   0000003C   000089E0           ADD      R0,R9,R0
   \   00000040   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   2E00000A           BEQ      ??SBhit_1
    184              if(sprites[i].uid==UID_WEAPON_PISTOL || sprites[i].uid==UID_WEAPON_ROCKET) //вычисляем наши пульки и рокеты среди реестра спрайтов
   \   0000004C   F012D0E1           LDRSH    R1,[R0, #+32]
   \   00000050   190051E3           CMP      R1,#+25
   \   00000054   1A005113           CMPNE    R1,#+26
   \   00000058   2A00001A           BNE      ??SBhit_1
    185              {
    186                GetSpriteCoordinaties(sprites[i].N,&x,&y);
   \   0000005C   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000060   02208DE2           ADD      R2,SP,#+2
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
    187                short x2 = x+GetSpriteWidth(sprites[i].N);
   \   0000006C   00009AE5           LDR      R0,[R10, #+0]
   \   00000070   000089E0           ADD      R0,R9,R0
   \   00000074   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000078   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   0000007C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000080   010080E0           ADD      R0,R0,R1
   \   00000084   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000088   4008A0E1           MOV      R0,R0, ASR #+16
    188                if(((x2>=br.x && x2<=br.x2) || (x>=br.x && x<=br.x2)) && y>=br.y && y<=br.y2) //берем по крайним иксам
   \   0000008C   040050E1           CMP      R0,R4
   \   00000090   020000BA           BLT      ??SBhit_2
   \   00000094   0618A0E1           MOV      R1,R6, LSL #+16
   \   00000098   410850E1           CMP      R0,R1, ASR #+16
   \   0000009C   060000DA           BLE      ??SBhit_3
   \                     ??SBhit_2:
   \   000000A0   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000A4   040050E1           CMP      R0,R4
   \   000000A8   160000BA           BLT      ??SBhit_1
   \   000000AC   0668A0E1           MOV      R6,R6, LSL #+16
   \   000000B0   4668A0E1           MOV      R6,R6, ASR #+16
   \   000000B4   000056E1           CMP      R6,R0
   \   000000B8   120000BA           BLT      ??SBhit_1
   \                     ??SBhit_3:
   \   000000BC   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000C0   050050E1           CMP      R0,R5
   \   000000C4   0F0000BA           BLT      ??SBhit_1
   \   000000C8   0778A0E1           MOV      R7,R7, LSL #+16
   \   000000CC   4778A0E1           MOV      R7,R7, ASR #+16
   \   000000D0   000057E1           CMP      R7,R0
   \   000000D4   0B0000BA           BLT      ??SBhit_1
    189                {
    190                  StopSprite(sprites[i].N);
   \   000000D8   00009AE5           LDR      R0,[R10, #+0]
   \   000000DC   000089E0           ADD      R0,R9,R0
   \   000000E0   F401D0E1           LDRSH    R0,[R0, #+20]
   \   000000E4   ........           _BLF     StopSprite,??StopSprite??rA
    191                  if(sprites[i].uid==UID_WEAPON_PISTOL) return 1;
   \   000000E8   00009AE5           LDR      R0,[R10, #+0]
   \   000000EC   000089E0           ADD      R0,R9,R0
   \   000000F0   F002D0E1           LDRSH    R0,[R0, #+32]
   \   000000F4   F247BDE8           POP      {R1,R4-R10,LR}
   \   000000F8   190050E3           CMP      R0,#+25
   \   000000FC   0200A013           MOVNE    R0,#+2
   \   00000100   0100A003           MOVEQ    R0,#+1
   \   00000104   060000EA           B        ??SBhit_4
    192                  else return 2;
    193                }
    194              }
    195            }
   \                     ??SBhit_1:
   \   00000108   018088E2           ADD      R8,R8,#+1
   \   0000010C   0888A0E1           MOV      R8,R8, LSL #+16
   \   00000110   4888A0E1           MOV      R8,R8, ASR #+16
   \   00000114   800058E3           CMP      R8,#+128
   \   00000118   C4FFFFBA           BLT      ??SBhit_0
    196            return 0;
   \   0000011C   F247BDE8           POP      {R1,R4-R10,LR}
   \   00000120   0000A0E3           MOV      R0,#+0
   \                     ??SBhit_4:
   \   00000124   10D08DE2           ADD      SP,SP,#+16
   \   00000128   1EFF2FE1           BX       LR               ;; return
    197          }
    198          
    199          
    200          
    201          
    202          
    203          
    204          short sx=0,sy=0;
    205          
    206          
    207          
    208          
    209          
    210          
    211          //палево это снизу,добавим дефайнов,оптимизнем код,и будет рулез
    212          /*char BBhit(image brick) //пофиксить!!
    213          {
    214            //int sx,sy;
    215            //sx=0;
    216            //sy=0;
    217            
    218            RECT bl,br;
    219            bl.x=ball_x;
    220            bl.y=ball_y;
    221            bl.x2=ball_x+ball[ball_s].img->w;
    222            bl.y2=ball_y+ball[ball_s].img->h;
    223            br.x=brick.x;
    224            br.y=brick.y;
    225            br.x2=brick.x+brick.img->w;
    226            br.y2=brick.y+brick.img->h;
    227            
    228            if(bl.x2>br.x && bl.x<br.x2)
    229            {
    230              if(bl.y2>br.y && bl.y<br.y) return 1; //верхняя часть
    231              if(bl.y<br.y2 && bl.y2>br.y2) return 2; //нижняя часть
    232            }
    233            if(bl.y2>br.y && bl.y<br.y2)
    234            {
    235              if(bl.x2>br.x && bl.x<br.x) {return 3;} //левая часть
    236              if(bl.x<br.x2 && bl.x2>br.x2) {return 4;} //правая часть
    237            }
    238            
    239            
    240            
    241            if(bl.x>br.x && bl.x<br.x2) //внутри брика по иксам
    242            {
    243              if(bl.y>br.y && bl.y<br.y2) return
    244            }
    245            
    246            
    247            
    248            
    249            
    250            
    251            
    252            return 0;
    253          }*/
    254          
    255          
    256          /////////////////////////////////////////////////////////////////////////////////////////////
    257          /////////////////////////////////////////////////////////////////////////////////////////////
    258          /////////////////////////////////////////////////////////////////////////////////////////////
    259          /////////////////////////////////////////////////////////////////////////////////////////////
    260          /////////////////////////////////////////////////////////////////////////////////////////////
    261          /////////////////////////////////////////////////////////////////////////////////////////////
    262          /////////////////////////////////////////////////////////////////////////////////////////////
    263          #define BB_DOWN_RIGHT 0
    264          #define BB_DOWN_LEFT 1
    265          #define BB_UP_RIGHT 2
    266          #define BB_UP_LEFT 3
    267          
    268          #define BB_RET_RIGHT 0
    269          #define BB_RET_LEFT 1
    270          #define BB_RET_DOWN 2
    271          #define BB_RET_UP 3
    272          #define BB_RET_NEGATIVE 4
    273          
    274          //если мяч летит вверх+влево,то чекаем на    BB_DOWN_RIGHT
    275          //если мяч летит вниз+влево,то чекаем на     BB_UP_RIGHT
    276          //если мяч летит вверх+вправо,то чекаем на   BB_DOWN_LEFT
    277          //если мяч летит вниз+вправо,то чекаем на    BB_UP_LEFT

   \                                 In segment CODE, align 4, keep-with-next
    278          char BBhit(image brick,char type)
    279          {
   \                     BBhit:
   \   00000000   0F002DE9           PUSH     {R0-R3}
   \   00000004   F0072DE9           PUSH     {R4-R10}
    280            RECT br; //это непосредственные координаты нашего брика(кирпичика то есть)
    281            br.x = brick.x;
    282            br.y = brick.y;
    283            br.x2 = br.x+brick.img->w;
    284            br.y2 = br.y+brick.img->h;
   \   00000008   1C409DE5           LDR      R4,[SP, #+28]
    285            
    286            RECT bl; //непосредственные координаты мяча
    287            bl.x = ball_x;
   \   0000000C   ........           LDR      R6,??DataTable7  ;; ball
   \   00000010   F222DDE1           LDRSH    R2,[SP, #+34]
   \   00000014   F240D4E1           LDRSH    R4,[R4, #+2]
    288            bl.y = ball_y;
   \   00000018   7177D6E5           LDRB     R7,[R6, #+1905]
   \   0000001C   7297D6E5           LDRB     R9,[R6, #+1906]
   \   00000020   F45BD6E1           LDRSH    R5,[R6, #+180]
   \   00000024   02C084E0           ADD      R12,R4,R2
   \   00000028   F24BD6E1           LDRSH    R4,[R6, #+178]
   \   0000002C   0C80A0E3           MOV      R8,#+12
   \   00000030   2800DDE5           LDRB     R0,[SP, #+40]
   \   00000034   F012DDE1           LDRSH    R1,[SP, #+32]
   \   00000038   1C309DE5           LDR      R3,[SP, #+28]
   \   0000003C   24A0A0E3           MOV      R10,#+36
   \   00000040   F030D3E1           LDRSH    R3,[R3, #+0]
   \   00000044   9A6926E0           MLA      R6,R10,R9,R6
   \   00000048   013083E0           ADD      R3,R3,R1
   \   0000004C   986726E0           MLA      R6,R8,R7,R6
    289            bl.x2 = bl.x+ball[ball_type][ball_s].img->w;
    290            bl.y2 = bl.y+ball[ball_type][ball_s].img->h;
    291            
    292            
    293            
    294            if(type==BB_DOWN_RIGHT) //проверка на столкновение только с нижней и правой частью брика
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   007096E5           LDR      R7,[R6, #+0]
   \   00000058   F060D7E1           LDRSH    R6,[R7, #+0]
   \   0000005C   F270D7E1           LDRSH    R7,[R7, #+2]
   \   00000060   046086E0           ADD      R6,R6,R4
   \   00000064   057087E0           ADD      R7,R7,R5
   \   00000068   2B00001A           BNE      ??BBhit_0
    295            {
    296              if((bl.x>=br.x && bl.x<=br.x2 && bl.y>=br.y && bl.y<=br.y2) //мяч левым верхним краем внутри брика
    297              || (bl.x>=br.x && bl.x<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2)
    298              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y>=br.y && bl.y<=br.y2))
   \   0000006C   010054E1           CMP      R4,R1
   \   00000070   110000BA           BLT      ??BBhit_1
   \   00000074   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000078   4338A0E1           MOV      R3,R3, ASR #+16
   \   0000007C   040053E1           CMP      R3,R4
   \   00000080   0D0000BA           BLT      ??BBhit_1
   \   00000084   020055E1           CMP      R5,R2
   \   00000088   030000BA           BLT      ??BBhit_2
   \   0000008C   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   00000090   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000094   05005CE1           CMP      R12,R5
   \   00000098   140000AA           BGE      ??BBhit_3
   \                     ??BBhit_2:
   \   0000009C   0778A0E1           MOV      R7,R7, LSL #+16
   \   000000A0   4778A0E1           MOV      R7,R7, ASR #+16
   \   000000A4   020057E1           CMP      R7,R2
   \   000000A8   030000BA           BLT      ??BBhit_1
   \   000000AC   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000000B0   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000000B4   07005CE1           CMP      R12,R7
   \   000000B8   0C0000AA           BGE      ??BBhit_3
   \                     ??BBhit_1:
   \   000000BC   0668A0E1           MOV      R6,R6, LSL #+16
   \   000000C0   4668A0E1           MOV      R6,R6, ASR #+16
   \   000000C4   010056E1           CMP      R6,R1
   \   000000C8   940000BA           BLT      ??BBhit_4
   \   000000CC   0338A0E1           MOV      R3,R3, LSL #+16
   \   000000D0   4338A0E1           MOV      R3,R3, ASR #+16
   \   000000D4   060053E1           CMP      R3,R6
   \   000000D8   020055A1           CMPGE    R5,R2
   \   000000DC   8F0000BA           BLT      ??BBhit_4
   \   000000E0   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000000E4   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000000E8   05005CE1           CMP      R12,R5
   \   000000EC   8B0000BA           BLT      ??BBhit_4
    299              {
    300                //теперь проверим к чему мяч ближе - к низу или к правой стороне брика?
    301                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    302                if(br.y2-bl.y>br.x2-bl.x) return BB_RET_RIGHT;
   \                     ??BBhit_3:
   \   000000F0   040043E0           SUB      R0,R3,R4
   \   000000F4   05104CE0           SUB      R1,R12,R5
   \   000000F8   010050E1           CMP      R0,R1
   \   000000FC   020000AA           BGE      ??BBhit_5
   \                     ??BBhit_6:
   \   00000100   F007BDE8           POP      {R4-R10}
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   010000EA           B        ??BBhit_7
    303                else return BB_RET_DOWN;
   \                     ??BBhit_5:
   \   0000010C   F007BDE8           POP      {R4-R10}
   \   00000110   0200A0E3           MOV      R0,#+2
   \                     ??BBhit_7:
   \   00000114   10D08DE2           ADD      SP,SP,#+16
   \   00000118   1EFF2FE1           BX       LR
    304              }
    305            }
    306            
    307            if(type==BB_DOWN_LEFT) //проверка на столкновение только с нижней и левой частью брика
   \                     ??BBhit_0:
   \   0000011C   0688A0E1           MOV      R8,R6, LSL #+16
   \   00000120   4888A0E1           MOV      R8,R8, ASR #+16
   \   00000124   018048E0           SUB      R8,R8,R1
   \   00000128   010050E3           CMP      R0,#+1
   \   0000012C   2600001A           BNE      ??BBhit_8
    308            {
    309              if((bl.x2>=br.x && bl.x2<=br.x2 && bl.y>=br.y && bl.y<=br.y2) //мяч правым верхним краем внутри брика
    310              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2)
    311              || (bl.x>=br.x && bl.x<=br.x2 && bl.y>=br.y && bl.y<=br.y2))
   \   00000130   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000134   4668A0E1           MOV      R6,R6, ASR #+16
   \   00000138   010056E1           CMP      R6,R1
   \   0000013C   110000BA           BLT      ??BBhit_9
   \   00000140   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000144   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000148   060053E1           CMP      R3,R6
   \   0000014C   0D0000BA           BLT      ??BBhit_9
   \   00000150   020055E1           CMP      R5,R2
   \   00000154   030000BA           BLT      ??BBhit_10
   \   00000158   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000015C   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000160   05005CE1           CMP      R12,R5
   \   00000164   120000AA           BGE      ??BBhit_11
   \                     ??BBhit_10:
   \   00000168   0778A0E1           MOV      R7,R7, LSL #+16
   \   0000016C   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000170   020057E1           CMP      R7,R2
   \   00000174   030000BA           BLT      ??BBhit_9
   \   00000178   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000017C   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000180   07005CE1           CMP      R12,R7
   \   00000184   0A0000AA           BGE      ??BBhit_11
   \                     ??BBhit_9:
   \   00000188   010054E1           CMP      R4,R1
   \   0000018C   630000BA           BLT      ??BBhit_4
   \   00000190   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000194   430854E1           CMP      R4,R3, ASR #+16
   \   00000198   600000CA           BGT      ??BBhit_4
   \   0000019C   020055E1           CMP      R5,R2
   \   000001A0   5E0000BA           BLT      ??BBhit_4
   \   000001A4   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000001A8   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000001AC   05005CE1           CMP      R12,R5
   \   000001B0   5A0000BA           BLT      ??BBhit_4
    312              {
    313                //теперь проверим к чему мяч ближе - к низу или к левой стороне брика?
    314                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    315                if(br.y2-bl.y>bl.x2-br.x) return BB_RET_LEFT;
   \                     ??BBhit_11:
   \   000001B4   05004CE0           SUB      R0,R12,R5
   \   000001B8   000058E1           CMP      R8,R0
   \   000001BC   D2FFFFAA           BGE      ??BBhit_5
   \                     ??BBhit_12:
   \   000001C0   F007BDE8           POP      {R4-R10}
   \   000001C4   0100A0E3           MOV      R0,#+1
   \   000001C8   D1FFFFEA           B        ??BBhit_7
    316                else return BB_RET_DOWN;
    317              }
    318            }
    319            
    320            if(type==BB_UP_RIGHT) //проверка на столкновение только с верхней и правой частью брика
   \                     ??BBhit_8:
   \   000001CC   0798A0E1           MOV      R9,R7, LSL #+16
   \   000001D0   4998A0E1           MOV      R9,R9, ASR #+16
   \   000001D4   029049E0           SUB      R9,R9,R2
   \   000001D8   020050E3           CMP      R0,#+2
   \   000001DC   2800001A           BNE      ??BBhit_13
    321            {
    322              if((bl.x>=br.x && bl.x<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2) //мяч левым нижним краем внутри брика
    323              || (bl.x>=br.x && bl.x<=br.x2 && bl.y>=br.y && bl.y<=br.y2)
    324              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2))
   \   000001E0   010054E1           CMP      R4,R1
   \   000001E4   110000BA           BLT      ??BBhit_14
   \   000001E8   0338A0E1           MOV      R3,R3, LSL #+16
   \   000001EC   4338A0E1           MOV      R3,R3, ASR #+16
   \   000001F0   040053E1           CMP      R3,R4
   \   000001F4   0D0000BA           BLT      ??BBhit_14
   \   000001F8   0778A0E1           MOV      R7,R7, LSL #+16
   \   000001FC   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000200   020057E1           CMP      R7,R2
   \   00000204   030000BA           BLT      ??BBhit_15
   \   00000208   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000020C   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000210   07005CE1           CMP      R12,R7
   \   00000214   140000AA           BGE      ??BBhit_16
   \                     ??BBhit_15:
   \   00000218   020055E1           CMP      R5,R2
   \   0000021C   030000BA           BLT      ??BBhit_14
   \   00000220   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   00000224   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000228   05005CE1           CMP      R12,R5
   \   0000022C   0E0000AA           BGE      ??BBhit_16
   \                     ??BBhit_14:
   \   00000230   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000234   4668A0E1           MOV      R6,R6, ASR #+16
   \   00000238   010056E1           CMP      R6,R1
   \   0000023C   370000BA           BLT      ??BBhit_4
   \   00000240   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000244   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000248   060053E1           CMP      R3,R6
   \   0000024C   330000BA           BLT      ??BBhit_4
   \   00000250   0778A0E1           MOV      R7,R7, LSL #+16
   \   00000254   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000258   020057E1           CMP      R7,R2
   \   0000025C   2F0000BA           BLT      ??BBhit_4
   \   00000260   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   00000264   4C0857E1           CMP      R7,R12, ASR #+16
   \   00000268   2C0000CA           BGT      ??BBhit_4
    325              {
    326                //теперь проверим к чему мяч ближе - к низу или к правой стороне брика?
    327                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    328                if(bl.y2-br.y>br.x2-bl.x) return BB_RET_RIGHT;
   \                     ??BBhit_16:
   \   0000026C   040043E0           SUB      R0,R3,R4
   \   00000270   090050E1           CMP      R0,R9
   \   00000274   A1FFFFBA           BLT      ??BBhit_6
    329                else return BB_RET_UP;
   \   00000278   F007BDE8           POP      {R4-R10}
   \   0000027C   0300A0E3           MOV      R0,#+3
   \   00000280   A3FFFFEA           B        ??BBhit_7
    330              }
    331            }
    332            
    333            if(type==BB_UP_LEFT) //проверка на столкновение только с верхней и левой частью брика
   \                     ??BBhit_13:
   \   00000284   030050E3           CMP      R0,#+3
   \   00000288   2400001A           BNE      ??BBhit_4
    334            {
    335              if((bl.x2>=br.x && bl.x2<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2) //мяч правым нижним краем внутри брика
    336              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y>=br.y && bl.y<=br.y2)
    337              || (bl.x>=br.x && bl.x<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2))
   \   0000028C   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000290   4668A0E1           MOV      R6,R6, ASR #+16
   \   00000294   010056E1           CMP      R6,R1
   \   00000298   110000BA           BLT      ??BBhit_17
   \   0000029C   0338A0E1           MOV      R3,R3, LSL #+16
   \   000002A0   4338A0E1           MOV      R3,R3, ASR #+16
   \   000002A4   060053E1           CMP      R3,R6
   \   000002A8   0D0000BA           BLT      ??BBhit_17
   \   000002AC   0778A0E1           MOV      R7,R7, LSL #+16
   \   000002B0   4778A0E1           MOV      R7,R7, ASR #+16
   \   000002B4   020057E1           CMP      R7,R2
   \   000002B8   030000BA           BLT      ??BBhit_18
   \   000002BC   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000002C0   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000002C4   07005CE1           CMP      R12,R7
   \   000002C8   110000AA           BGE      ??BBhit_19
   \                     ??BBhit_18:
   \   000002CC   020055E1           CMP      R5,R2
   \   000002D0   030000BA           BLT      ??BBhit_17
   \   000002D4   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000002D8   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000002DC   05005CE1           CMP      R12,R5
   \   000002E0   0B0000AA           BGE      ??BBhit_19
   \                     ??BBhit_17:
   \   000002E4   010054E1           CMP      R4,R1
   \   000002E8   0C0000BA           BLT      ??BBhit_4
   \   000002EC   0338A0E1           MOV      R3,R3, LSL #+16
   \   000002F0   430854E1           CMP      R4,R3, ASR #+16
   \   000002F4   090000CA           BGT      ??BBhit_4
   \   000002F8   0778A0E1           MOV      R7,R7, LSL #+16
   \   000002FC   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000300   020057E1           CMP      R7,R2
   \   00000304   050000BA           BLT      ??BBhit_4
   \   00000308   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000030C   4C0857E1           CMP      R7,R12, ASR #+16
   \   00000310   020000CA           BGT      ??BBhit_4
    338              {
    339                //теперь проверим к чему мяч ближе - к низу или к левой стороне брика?
    340                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    341                if(bl.y2-br.y>bl.x2-br.x) return BB_RET_LEFT;
   \                     ??BBhit_19:
   \   00000314   090058E1           CMP      R8,R9
   \   00000318   010000AA           BGE      ??BBhit_20
   \   0000031C   A7FFFFEA           B        ??BBhit_12
    342                else return BB_RET_UP;
    343              }
    344            }
    345            
    346            return BB_RET_NEGATIVE;
   \                     ??BBhit_4:
   \   00000320   0400A0E3           MOV      R0,#+4
   \                     ??BBhit_20:
   \   00000324   F007BDE8           POP      {R4-R10}
   \   00000328   79FFFFEA           B        ??BBhit_7
    347          }
    348          /////////////////////////////////////////////////////////////////////////////////////////////
    349          /////////////////////////////////////////////////////////////////////////////////////////////
    350          /////////////////////////////////////////////////////////////////////////////////////////////
    351          /////////////////////////////////////////////////////////////////////////////////////////////
    352          /////////////////////////////////////////////////////////////////////////////////////////////
    353          /////////////////////////////////////////////////////////////////////////////////////////////
    354          /////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    355          char UBhit()
    356          {
   \                     UBhit:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    357            short ux,uy,uw;
    358            GetSpriteCoordinaties(user_N,&ux,&uy);
   \   00000004   ........           LDR      R4,??DataTable7  ;; ball
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   F00CD4E1           LDRSH    R0,[R4, #+192]
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   02108DE2           ADD      R1,SP,#+2
   \   00000018   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
    359            uw = GetSpriteWidth(user_N);
   \   0000001C   F00CD4E1           LDRSH    R0,[R4, #+192]
   \   00000020   2450A0E3           MOV      R5,#+36
   \   00000024   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   00000028   7117D4E5           LDRB     R1,[R4, #+1905]
   \   0000002C   7237D4E5           LDRB     R3,[R4, #+1906]
   \   00000030   0C20A0E3           MOV      R2,#+12
   \   00000034   954323E0           MLA      R3,R5,R3,R4
   \   00000038   923121E0           MLA      R1,R2,R1,R3
   \   0000003C   F22BD4E1           LDRSH    R2,[R4, #+178]
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   F230DDE1           LDRSH    R3,[SP, #+2]
   \   00000048   B050D1E1           LDRH     R5,[R1, #+0]
   \   0000004C   A550A0E1           LSR      R5,R5,#+1
   \   00000050   025085E0           ADD      R5,R5,R2
   \   00000054   050053E1           CMP      R3,R5
   \   00000058   0E0000AA           BGE      ??UBhit_0
   \   0000005C   B050D1E1           LDRH     R5,[R1, #+0]
   \   00000060   C0C0A0E1           ASR      R12,R0,#+1
   \   00000064   2CCF80E0           ADD      R12,R0,R12, LSR #+30
   \   00000068   A550A0E1           LSR      R5,R5,#+1
   \   0000006C   025085E0           ADD      R5,R5,R2
   \   00000070   4CC183E0           ADD      R12,R3,R12, ASR #+2
   \   00000074   0C0055E1           CMP      R5,R12
   \   00000078   060000AA           BGE      ??UBhit_0
   \   0000007C   F050DDE1           LDRSH    R5,[SP, #+0]
   \   00000080   F4CBD4E1           LDRSH    R12,[R4, #+180]
   \   00000084   B2E0D1E1           LDRH     LR,[R1, #+2]
   \   00000088   0CC08EE0           ADD      R12,LR,R12
   \   0000008C   0C0055E1           CMP      R5,R12
    360            
    361            //столкновение с левым краем
    362            if(ball_x+(ball[ball_type][ball_s].img->w/2) > ux  &&  ball_x+(ball[ball_type][ball_s].img->w/2) < ux+(uw/4) && ball_y+ball[ball_type][ball_s].img->h > uy) return 1;
   \   00000090   0100A0B3           MOVLT    R0,#+1
   \   00000094   7280BDB8           POPLT    {R1,R4-R6,PC}
    363            //столкновение с центром платформы
    364            if(ball_x+(ball[ball_type][ball_s].img->w/2) > ux+(uw/4)  &&  ball_x+(ball[ball_type][ball_s].img->w/2) < ux+((uw/4)*3) && ball_y+ball[ball_type][ball_s].img->h > uy) return 2;
   \                     ??UBhit_0:
   \   00000098   B060D1E1           LDRH     R6,[R1, #+0]
   \   0000009C   F44BD4E1           LDRSH    R4,[R4, #+180]
   \   000000A0   F0E0DDE1           LDRSH    LR,[SP, #+0]
   \   000000A4   C050A0E1           ASR      R5,R0,#+1
   \   000000A8   255F80E0           ADD      R5,R0,R5, LSR #+30
   \   000000AC   4551A0E1           ASR      R5,R5,#+2
   \   000000B0   85C085E0           ADD      R12,R5,R5, LSL #+1
   \   000000B4   03C08CE0           ADD      R12,R12,R3
   \   000000B8   035085E0           ADD      R5,R5,R3
   \   000000BC   A660A0E1           LSR      R6,R6,#+1
   \   000000C0   026086E0           ADD      R6,R6,R2
   \   000000C4   060055E1           CMP      R5,R6
   \   000000C8   090000AA           BGE      ??UBhit_1
   \   000000CC   B050D1E1           LDRH     R5,[R1, #+0]
   \   000000D0   A550A0E1           LSR      R5,R5,#+1
   \   000000D4   025085E0           ADD      R5,R5,R2
   \   000000D8   0C0055E1           CMP      R5,R12
   \   000000DC   040000AA           BGE      ??UBhit_1
   \   000000E0   B250D1E1           LDRH     R5,[R1, #+2]
   \   000000E4   045085E0           ADD      R5,R5,R4
   \   000000E8   05005EE1           CMP      LR,R5
   \   000000EC   0200A0B3           MOVLT    R0,#+2
   \   000000F0   7280BDB8           POPLT    {R1,R4-R6,PC}
    365            //столкновение с правым краем
    366            if(ball_x+(ball[ball_type][ball_s].img->w/2) > ux+((uw/4)*3)  &&  ball_x+(ball[ball_type][ball_s].img->w/2) < ux+uw && ball_y+ball[ball_type][ball_s].img->h > uy) return 3;
   \                     ??UBhit_1:
   \   000000F4   B050D1E1           LDRH     R5,[R1, #+0]
   \   000000F8   A550A0E1           LSR      R5,R5,#+1
   \   000000FC   025085E0           ADD      R5,R5,R2
   \   00000100   05005CE1           CMP      R12,R5
   \   00000104   0A0000AA           BGE      ??UBhit_2
   \   00000108   B050D1E1           LDRH     R5,[R1, #+0]
   \   0000010C   030080E0           ADD      R0,R0,R3
   \   00000110   A550A0E1           LSR      R5,R5,#+1
   \   00000114   022085E0           ADD      R2,R5,R2
   \   00000118   000052E1           CMP      R2,R0
   \   0000011C   040000AA           BGE      ??UBhit_2
   \   00000120   B200D1E1           LDRH     R0,[R1, #+2]
   \   00000124   040080E0           ADD      R0,R0,R4
   \   00000128   00005EE1           CMP      LR,R0
   \   0000012C   0300A0B3           MOVLT    R0,#+3
   \   00000130   7280BDB8           POPLT    {R1,R4-R6,PC}
    367            return 0; //если не столкнулись,то выходим с нулем
   \                     ??UBhit_2:
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    368          }

   \                                 In segment CODE, align 4, keep-with-next
    369          char UBNhit(short bx,short bx2,short by2) //столкновение юзера с бонусами
    370          {
   \                     UBNhit:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    371            short ux,uy,uw,uh;
    372            GetSpriteCoordinaties(user_N,&ux,&uy);
   \   00000004   ........           LDR      R8,??DataTable25  ;; ball
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   F00CD8E1           LDRSH    R0,[R8, #+192]
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   02208DE2           ADD      R2,SP,#+2
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
    373            uw = GetSpriteWidth(user_N);
   \   00000028   F00CD8E1           LDRSH    R0,[R8, #+192]
   \   0000002C   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   00000030   0050A0E1           MOV      R5,R0
    374            uh = GetSpriteHeight(user_N);
   \   00000034   F00CD8E1           LDRSH    R0,[R8, #+192]
   \   00000038   ........           _BLF     GetSpriteHeight,??GetSpriteHeight??rA
    375            
    376            if(bx2>ux && bx<ux+uw && by2>uy && by2<uy+uh) return 1;
   \   0000003C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000040   070051E1           CMP      R1,R7
   \   00000044   011085B0           ADDLT    R1,R5,R1
   \   00000048   010056B1           CMPLT    R6,R1
   \   0000004C   F210DDB1           LDRSHLT  R1,[SP, #+2]
   \   00000050   040051B1           CMPLT    R1,R4
   \   00000054   010080B0           ADDLT    R0,R0,R1
   \   00000058   000054B1           CMPLT    R4,R0
   \   0000005C   0100A0B3           MOVLT    R0,#+1
   \   00000060   F281BDB8           POPLT    {R1,R4-R8,PC}
    377            return 0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    378          }
    379          ////////////////////////////////////////////////////////////////////////////////////////
    380          ////////////////////////////////////////////////////////////////////////////////////////
    381          ////////////////////////////////////////////////////////////////////////////////////////
    382          ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    383          ////////////////////////////////////////////////////////////////////////////////////////
    384          ////////////////////////////////////////////////////////////////////////////////////////
    385          ////////////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    386          void SetDifficulty()
    387          {
    388            if(savedata.difficulty==DIFF_EASY)
   \                     SetDifficulty:
   \   00000000   ........           LDR      R0,??DataTable31  ;; savedata
   \   00000004   ........           LDR      R1,??DataTable25  ;; ball
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0300001A           BNE      ??SetDifficulty_0
    389            {
    390              ball_max_speed = 4;
   \   00000014   0400A0E3           MOV      R0,#+4
   \   00000018   6A07C1E5           STRB     R0,[R1, #+1898]
    391              ball_min_speed = 1;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   040000EA           B        ??SetDifficulty_1
    392            }
    393            else if(savedata.difficulty==DIFF_NORMAL)
   \                     ??SetDifficulty_0:
   \   00000024   010050E3           CMP      R0,#+1
   \   00000028   0400001A           BNE      ??SetDifficulty_2
    394            {
    395              ball_max_speed = 6;
   \   0000002C   0600A0E3           MOV      R0,#+6
   \   00000030   6A07C1E5           STRB     R0,[R1, #+1898]
    396              ball_min_speed = 2;
   \   00000034   0200A0E3           MOV      R0,#+2
   \                     ??SetDifficulty_1:
   \   00000038   6B07C1E5           STRB     R0,[R1, #+1899]
   \   0000003C   1EFF2FE1           BX       LR
    397            }
    398            else if(savedata.difficulty==DIFF_HARD)
   \                     ??SetDifficulty_2:
   \   00000040   020050E3           CMP      R0,#+2
   \   00000044   1EFF2F11           BXNE     LR
    399            {
    400              ball_max_speed = 8;
   \   00000048   0800A0E3           MOV      R0,#+8
   \   0000004C   6A07C1E5           STRB     R0,[R1, #+1898]
    401              ball_min_speed = 3;
   \   00000050   0300A0E3           MOV      R0,#+3
   \   00000054   F7FFFFEA           B        ??SetDifficulty_1
    402            }
    403          }
    404          
    405          char cont; // 1-пишем в меню "продолжить" 0-"новая игра"
    406          

   \                                 In segment CODE, align 4, keep-with-next
    407          void SetDefaultGameParameters()
    408          {
    409            user_type = 0; //normal user
   \                     SetDefaultGameParameters:
   \   00000000   ........           LDR      R0,??DataTable25  ;; ball
   \   00000004   10402DE9           PUSH     {R4,LR}
    410            user_s = 1; //normal length
   \   00000008   0120A0E3           MOV      R2,#+1
   \   0000000C   7627C0E5           STRB     R2,[R0, #+1910]
    411            ball_type = 0; //normal ball
    412            ball_s = 0; //small size
    413            
    414            total_lives = 3;
   \   00000010   0320A0E3           MOV      R2,#+3
   \   00000014   6C27C0E5           STRB     R2,[R0, #+1900]
    415            //score = 0;
    416            cont = 0;
    417            ball_x=sw/2;
    418            ball_y=sh/2;
   \   00000018   ........           LDR      R2,??DataTable47  ;; sh
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   F020D2E1           LDRSH    R2,[R2, #+0]
   \   00000024   7717C0E5           STRB     R1,[R0, #+1911]
   \   00000028   7217C0E5           STRB     R1,[R0, #+1906]
   \   0000002C   7117C0E5           STRB     R1,[R0, #+1905]
   \   00000030   7D17C0E5           STRB     R1,[R0, #+1917]
   \   00000034   ........           LDR      R1,??DataTable46  ;; sw
   \   00000038   A23F82E0           ADD      R3,R2,R2, LSR #+31
   \   0000003C   F040D1E1           LDRSH    R4,[R1, #+0]
   \   00000040   C330A0E1           ASR      R3,R3,#+1
   \   00000044   B43BC0E1           STRH     R3,[R0, #+180]
    419            user_x=(sw/2)-(user[user_type][user_s].img[0]->w/2);
   \   00000048   EC3090E5           LDR      R3,[R0, #+236]
   \   0000004C   A41F84E0           ADD      R1,R4,R4, LSR #+31
   \   00000050   C110A0E1           ASR      R1,R1,#+1
   \   00000054   B21BC0E1           STRH     R1,[R0, #+178]
   \   00000058   00C093E5           LDR      R12,[R3, #+0]
   \   0000005C   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   00000060   AC1041E0           SUB      R1,R1,R12, LSR #+1
   \   00000064   BA1BC0E1           STRH     R1,[R0, #+186]
    420            user_y=sh-user[user_type][user_s].img[0]->h-1;
   \   00000068   001093E5           LDR      R1,[R3, #+0]
   \   0000006C   F210D1E1           LDRSH    R1,[R1, #+2]
   \   00000070   011042E0           SUB      R1,R2,R1
   \   00000074   011041E2           SUB      R1,R1,#+1
   \   00000078   BC1BC0E1           STRH     R1,[R0, #+188]
    421            ball_spx=2;
   \   0000007C   0210A0E3           MOV      R1,#+2
   \   00000080   B61BC0E1           STRH     R1,[R0, #+182]
    422            ball_spy=2;
   \   00000084   B81BC0E1           STRH     R1,[R0, #+184]
    423            SetDifficulty();
   \   00000088   ........           BL       SetDifficulty
    424          }
   \   0000008C   1080BDE8           POP      {R4,PC}          ;; return
    425          
    426          
    427          extern void CreateTextEditDialog(int type,char *src,int maxlen);
    428          
    429          
    430          
    431          

   \                                 In segment CODE, align 4, keep-with-next
    432          void Play(const char *fname)
    433          {
   \                     Play:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   A4D04DE2           SUB      SP,SP,#+164
   \   00000008   0080A0E1           MOV      R8,R0
    434            if ((!IsCalling()) && savedata.SoundsEnable)
   \   0000000C   6E0000EF           SWI      +110
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4500001A           BNE      ??Play_0
   \   00000018   ........           LDR      R7,??DataTable40  ;; savedata
   \   0000001C   0300D7E5           LDRB     R0,[R7, #+3]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   4100000A           BEQ      ??Play_0
    435            {
    436              if(GetFileStats(fname,&fstats,&err)!=-1)
   \   00000028   ........           LDR      R4,??DataTable25  ;; ball
   \   0000002C   7800A0E3           MOV      R0,#+120
   \   00000030   400E80E3           ORR      R0,R0,#0x400
   \   00000034   042080E0           ADD      R2,R0,R4
   \   00000038   821E84E2           ADD      R1,R4,#+2080
   \   0000003C   0800A0E1           MOV      R0,R8
   \   00000040   840000EF           SWI      +132
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   3800000A           BEQ      ??Play_0
    437              {
    438                PLAYFILE_OPT _sfo1;
    439                WSHDR* sndPath=AllocWS(128);
   \   0000004C   8000A0E3           MOV      R0,#+128
   \   00000050   250100EF           SWI      +293
   \   00000054   0050A0E1           MOV      R5,R0
    440                WSHDR* sndFName=AllocWS(128);
   \   00000058   8000A0E3           MOV      R0,#+128
   \   0000005C   250100EF           SWI      +293
   \   00000060   0060A0E1           MOV      R6,R0
    441                char s[128];
    442                const char *p=strrchr(fname,'\\')+1;
   \   00000064   5C10A0E3           MOV      R1,#+92
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   170100EF           SWI      +279
   \   00000070   019080E2           ADD      R9,R0,#+1
    443                str_2ws(sndFName,p,128);
   \   00000074   8020A0E3           MOV      R2,#+128
   \   00000078   0910A0E1           MOV      R1,R9
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   6C0100EF           SWI      +364
    444                strncpy(s,fname,p-fname);
   \   00000084   089049E0           SUB      R9,R9,R8
   \   00000088   0920A0E1           MOV      R2,R9
   \   0000008C   0810A0E1           MOV      R1,R8
   \   00000090   24008DE2           ADD      R0,SP,#+36
   \   00000094   160100EF           SWI      +278
    445                s[p-fname]='\0';
   \   00000098   0080A0E3           MOV      R8,#+0
   \   0000009C   24008DE2           ADD      R0,SP,#+36
   \   000000A0   0080C9E7           STRB     R8,[R9, +R0]
    446                str_2ws(sndPath,s,128);
   \   000000A4   8020A0E3           MOV      R2,#+128
   \   000000A8   24108DE2           ADD      R1,SP,#+36
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   6C0100EF           SWI      +364
    447          
    448                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   000000B4   2410A0E3           MOV      R1,#+36
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   1D0100EF           SWI      +285
    449                _sfo1.repeat_num=SoundRepeat;
   \   000000C0   6F17D4E5           LDRB     R1,[R4, #+1903]
    450                _sfo1.time_between_play=0;
    451                _sfo1.play_first=0;
    452                _sfo1.volume=savedata.SndVolume;
    453          #ifdef NEWSGOLD
    454                _sfo1.unk6=1;
   \   000000C4   0100A0E3           MOV      R0,#+1
   \   000000C8   B010CDE1           STRH     R1,[SP, #+0]
   \   000000CC   04808DE5           STR      R8,[SP, #+4]
   \   000000D0   08808DE5           STR      R8,[SP, #+8]
   \   000000D4   0B10D7E5           LDRB     R1,[R7, #+11]
   \   000000D8   0C108DE5           STR      R1,[SP, #+12]
   \   000000DC   14008DE5           STR      R0,[SP, #+20]
    455                _sfo1.unk7=1;
   \   000000E0   18008DE5           STR      R0,[SP, #+24]
    456                _sfo1.unk9=2;
   \   000000E4   0210A0E3           MOV      R1,#+2
   \   000000E8   20108DE5           STR      R1,[SP, #+32]
    457                PLAY_ID = PlayFile(0x10, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
   \   000000EC   450100EF           SWI      +325
   \   000000F0   0D10A0E1           MOV      R1,SP
   \   000000F4   02002DE9           PUSH     {R1}
   \   000000F8   0030A0E1           MOV      R3,R0
   \   000000FC   0620A0E1           MOV      R2,R6
   \   00000100   1000A0E3           MOV      R0,#+16
   \   00000104   BC10A0E3           MOV      R1,#+188
   \   00000108   701C81E3           ORR      R1,R1,#0x7000
   \   0000010C   02002DE9           PUSH     {R1}
   \   00000110   0510A0E1           MOV      R1,R5
   \   00000114   4A0000EF           SWI      +74
   \   00000118   740484E5           STR      R0,[R4, #+1140]
    458          #else
    459          #ifdef X75
    460                _sfo1.unk4=0x80000000;
    461                _sfo1.unk5=1;
    462                PLAY_ID = PlayFile(0xC, sndPath, sndFName, 0,MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
    463          #else
    464                _sfo1.unk5=1;
    465                PLAY_ID = PlayFile(0xC, sndPath, sndFName, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
    466          #endif
    467          #endif
    468                FreeWS(sndPath);
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   290100EF           SWI      +297
    469                FreeWS(sndFName);
   \   00000124   0600A0E1           MOV      R0,R6
   \   00000128   290100EF           SWI      +297
   \   0000012C   08D08DE2           ADD      SP,SP,#+8
    470              }
    471            }
    472          }
   \                     ??Play_0:
   \   00000130   A4D08DE2           ADD      SP,SP,#+164      ;; stack cleaning
   \   00000134   F083BDE8           POP      {R4-R9,PC}       ;; return
    473          
    474          
    475          
    476          

   \                                 In segment CODE, align 4, keep-with-next
    477          void PlayMusic(char id)
    478          {
   \                     PlayMusic:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    479            char *temp = malloc(512);
   \   00000008   800FA0E3           MOV      R0,#+512
   \   0000000C   140000EF           SWI      +20
    480            
    481            if(id==MENU_MUSIC)
   \   00000010   9C109FE5           LDR      R1,??PlayMusic_0  ;; `?<Constant "%ssounds\\\\end.mid">`
   \   00000014   ........           LDR      R3,??DataTable25  ;; ball
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   1400A0E3           MOV      R0,#+20
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   0400001A           BNE      ??PlayMusic_1
    482            {
    483              SoundRepeat = 20;
   \   00000028   6F07C3E5           STRB     R0,[R3, #+1903]
    484              sprintf(temp,"%ssounds\\menu.mid",pwd);
   \   0000002C   ........           LDR      R0,??DataTable26  ;; pwd
   \   00000030   4C1081E2           ADD      R1,R1,#+76
   \   00000034   002090E5           LDR      R2,[R0, #+0]
   \   00000038   160000EA           B        ??PlayMusic_2
    485            }
    486            else if(id==GAME_MUSIC)
   \                     ??PlayMusic_1:
   \   0000003C   ........           LDR      R2,??DataTable26  ;; pwd
   \   00000040   010054E3           CMP      R4,#+1
   \   00000044   002092E5           LDR      R2,[R2, #+0]
   \   00000048   0600001A           BNE      ??PlayMusic_3
    487            {
    488              SoundRepeat = 20;
   \   0000004C   6F07C3E5           STRB     R0,[R3, #+1903]
    489              sprintf(temp,"%ssounds\\%d.mid",pwd,map.snd_num);
   \   00000050   60009FE5           LDR      R0,??PlayMusic_0+0x4  ;; map + 9
   \   00000054   3C1081E2           ADD      R1,R1,#+60
   \   00000058   0030D0E5           LDRB     R3,[R0, #+0]
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   160000EF           SWI      +22
   \   00000064   0D0000EA           B        ??PlayMusic_4
    490            }
    491            else if(id==LOSE_MUSIC)
   \                     ??PlayMusic_3:
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   020054E3           CMP      R4,#+2
    492            {
    493              SoundRepeat = 1;
   \   00000070   6F07C305           STRBEQ   R0,[R3, #+1903]
    494              sprintf(temp,"%ssounds\\lose.mid",pwd);
   \   00000074   28108102           ADDEQ    R1,R1,#+40
   \   00000078   0600000A           BEQ      ??PlayMusic_2
    495            }
    496            else if(id==WIN_MUSIC)
   \   0000007C   030054E3           CMP      R4,#+3
    497            {
    498              SoundRepeat = 1;
   \   00000080   6F07C305           STRBEQ   R0,[R3, #+1903]
    499              sprintf(temp,"%ssounds\\win.mid",pwd);
   \   00000084   14108102           ADDEQ    R1,R1,#+20
   \   00000088   0200000A           BEQ      ??PlayMusic_2
    500            }
    501            else if(id==END_MUSIC)
   \   0000008C   040054E3           CMP      R4,#+4
   \   00000090   0200001A           BNE      ??PlayMusic_4
    502            {
    503              SoundRepeat = 1;
   \   00000094   6F07C3E5           STRB     R0,[R3, #+1903]
    504              sprintf(temp,"%ssounds\\end.mid",pwd);
   \                     ??PlayMusic_2:
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   160000EF           SWI      +22
    505            }
    506            Play(temp);
   \                     ??PlayMusic_4:
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       Play
    507            mfree(temp);
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   150000EF           SWI      +21
    508          }
   \   000000B0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??PlayMusic_0:
   \   000000B4   ........           DC32     `?<Constant "%ssounds\\\\end.mid">`
   \   000000B8   ........           DC32     map + 9
    509          
    510          
    511          
    512          
    513          #define STD_SND
    514          
    515          #define SND_USER 0
    516          #define SND_BRICK 1
    517          
    518          #ifndef STD_SND
    519          void PlaySnd(char id)
    520          {
    521            char *temp = malloc(512);
    522            SoundRepeat = 1;
    523            if(id==SND_USER)
    524            {
    525              sprintf(temp,"%ssounds\\user.amr",pwd);
    526            }
    527            else if(id==SND_BRICK)
    528            {
    529              sprintf(temp,"%ssounds\\brick.amr",pwd);
    530            }
    531            Play(temp);
    532            mfree(temp);
    533          }
    534          #else
    535          

   \                                 In segment CODE, align 4, keep-with-next
    536          void PlaySnd(char id)
    537          {
    538            if(savedata.SndEnable)
   \                     PlaySnd:
   \   00000000   ........           LDR      R1,??DataTable40  ;; savedata
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0420D1E5           LDRB     R2,[R1, #+4]
   \   0000000C   000052E3           CMP      R2,#+0
   \   00000010   0080BD08           POPEQ    {PC}
    539            {
    540              if(id==SND_USER) PlaySound(1,0,0,savedata.StdSnd_user,0);
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0400001A           BNE      ??PlaySnd_0
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   F630D1E1           LDRSH    R3,[R1, #+6]
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   060000EA           B        ??PlaySnd_1
    541              if(id==SND_BRICK) PlaySound(1,0,0,savedata.StdSnd_brick,0);
   \                     ??PlaySnd_0:
   \   00000030   010050E3           CMP      R0,#+1
   \   00000034   0080BD18           POPNE    {PC}
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   F830D1E1           LDRSH    R3,[R1, #+8]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0010A0E1           MOV      R1,R0
   \                     ??PlaySnd_1:
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   320000EF           SWI      +50
   \   00000054   04D08DE2           ADD      SP,SP,#+4
    542            }
    543          }
   \   00000058   0080BDE8           POP      {PC}             ;; return
    544          #endif
    545          
    546          GBSTMR vtmr;

   \                                 In segment CODE, align 4, keep-with-next
    547          void StopVibra()
    548          {
   \                     StopVibra:
   \   00000000   10402DE9           PUSH     {R4,LR}
    549            SetVibration(0);
    550            if(IsTimerProc(&vtmr))
   \   00000004   ........           LDR      R4,??DataTable21  ;; vtmr
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   7C0000EF           SWI      +124
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   A60100EF           SWI      +422
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1080BD08           POPEQ    {R4,PC}
    551            {
    552             GBS_StopTimer(&vtmr);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   440100EF           SWI      +324
    553             GBS_DelTimer(&vtmr);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   8C0100EF           SWI      +396
    554            }
    555          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    556          void StartVibra(char value,char len)
    557          {
   \                     StartVibra:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    558            if(savedata.VibraEnable)
   \   00000008   20109FE5           LDR      R1,??StartVibra_0  ;; savedata + 10
   \   0000000C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   1080BD08           POPEQ    {R4,PC}
    559            {
    560             SetVibration(value);
   \   00000018   7C0000EF           SWI      +124
    561             GBS_StartTimerProc(&vtmr,len,StopVibra);
   \   0000001C   10209FE5           LDR      R2,??StartVibra_0+0x4  ;; StopVibra
   \   00000020   ........           LDR      R0,??DataTable21  ;; vtmr
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   4D0000EF           SWI      +77
    562            }
    563          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??StartVibra_0:
   \   00000030   ........           DC32     savedata + 10
   \   00000034   ........           DC32     StopVibra
    564          
    565          
    566          
    567          GBSTMR press_tmr;

   \                                 In segment CODE, align 4, keep-with-next
    568          void PressTimerFunc() //для корректной работы надо время на отрисовку,а потом по таймеру пускаем эту функцию
    569          {
    570            state = STATE_PRESS;
   \                     PressTimerFunc:
   \   00000000   ........           LDR      R0,??DataTable25  ;; ball
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   6817C0E5           STRB     R1,[R0, #+1896]
    571            GBS_DelTimer(&press_tmr);
   \   00000010   B410A0E3           MOV      R1,#+180
   \   00000014   801E81E3           ORR      R1,R1,#0x800
   \   00000018   000081E0           ADD      R0,R1,R0
   \   0000001C   8C0100EF           SWI      +396
    572            TimerRedrawScreen();
   \   00000020   0040BDE8           POP      {LR}             ;; Pop
   \   00000024   ........           B        TimerRedrawScreen  ;; tailcall
    573          }
    574          
    575          
    576          
    577          

   \                                 In segment CODE, align 4, keep-with-next
    578          void DumpMap(char lev[MAX_HEIGHT][MAX_WIDTH],char num)
    579          {
   \                     DumpMap:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    580            char *temp = malloc(256);
    581            sprintf(temp,"%smaps\\level%d.log",pwd,num);
    582            int file = fopenA(temp,A_WriteOnly+A_BIN+A_Create,P_WRITE,0);
    583            
    584            
    585            for(int y=0;y<MAX_HEIGHT;y++)
   \   0000000C   ........           LDR      R9,??DataTable25  ;; ball
   \   00000010   400FA0E3           MOV      R0,#+256
   \   00000014   140000EF           SWI      +20
   \   00000018   14119FE5           LDR      R1,??DumpMap_0+0xC  ;; `?<Constant "%smaps\\\\level%d.log">`
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   ........           LDR      R0,??DataTable26  ;; pwd
   \   00000024   0630A0E1           MOV      R3,R6
   \   00000028   002090E5           LDR      R2,[R0, #+0]
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   160000EF           SWI      +22
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   402FA0E3           MOV      R2,#+256
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   811C81E3           ORR      R1,R1,#0x8100
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   0A0000EF           SWI      +10
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   0070A0E3           MOV      R7,#+0
   \   00000054   9B80A0E3           MOV      R8,#+155
   \   00000058   708E88E3           ORR      R8,R8,#0x700
    586            {
    587              sprintf(temp,perc_s,"{");
   \                     ??DumpMap_1:
   \   0000005C   312F8FE2           ADR      R2,??DumpMap_0   ;; "{"
   \   00000060   091088E0           ADD      R1,R8,R9
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   160000EF           SWI      +22
    588              fwrite(file,temp,1,0);
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   0120A0E3           MOV      R2,#+1
   \   00000074   0510A0E1           MOV      R1,R5
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   0C0000EF           SWI      +12
    589              for(int x=0;x<MAX_WIDTH;x++)
   \   00000080   00A0A0E3           MOV      R10,#+0
    590              {
    591                sprintf(temp,"%d,",lev[y][x]);
   \                     ??DumpMap_2:
   \   00000084   070267E0           RSB      R0,R7,R7, LSL #+4
   \   00000088   040080E0           ADD      R0,R0,R4
   \   0000008C   0020DAE7           LDRB     R2,[R10, +R0]
   \   00000090   251F8FE2           ADR      R1,??DumpMap_0+0x4  ;; "%d,"
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   160000EF           SWI      +22
    592                fwrite(file,temp,strlen(temp),0);
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   1B0000EF           SWI      +27
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   0020A0E1           MOV      R2,R0
   \   000000AC   0510A0E1           MOV      R1,R5
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   0C0000EF           SWI      +12
    593              }
   \   000000B8   01A08AE2           ADD      R10,R10,#+1
   \   000000BC   0F005AE3           CMP      R10,#+15
   \   000000C0   EFFFFFBA           BLT      ??DumpMap_2
    594              sprintf(temp,perc_s,"}");
   \   000000C4   192F8FE2           ADR      R2,??DumpMap_0+0x8  ;; "}"
   \   000000C8   091088E0           ADD      R1,R8,R9
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   160000EF           SWI      +22
    595              fwrite(file,temp,1,0);
   \   000000D4   0030A0E3           MOV      R3,#+0
   \   000000D8   0120A0E3           MOV      R2,#+1
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   0C0000EF           SWI      +12
    596              temp[0]=0x0D;
   \   000000E8   0D00A0E3           MOV      R0,#+13
   \   000000EC   0000C5E5           STRB     R0,[R5, #+0]
    597              fwrite(file,&temp[0],1,0);
   \   000000F0   0030A0E3           MOV      R3,#+0
   \   000000F4   0120A0E3           MOV      R2,#+1
   \   000000F8   0510A0E1           MOV      R1,R5
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   0C0000EF           SWI      +12
    598            }
   \   00000104   017087E2           ADD      R7,R7,#+1
   \   00000108   200057E3           CMP      R7,#+32
   \   0000010C   D2FFFFBA           BLT      ??DumpMap_1
    599            
    600            fclose(file,0);
   \   00000110   0010A0E3           MOV      R1,#+0
   \   00000114   0600A0E1           MOV      R0,R6
   \   00000118   0D0000EF           SWI      +13
    601            mfree(temp);
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   150000EF           SWI      +21
    602          }
   \   00000124   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??DumpMap_0:
   \   00000128   7B000000           DC8      "{",+0,+0
   \   0000012C   25642C00           DC8      "%d,"
   \   00000130   7D000000           DC8      "}",+0,+0
   \   00000134   ........           DC32     `?<Constant "%smaps\\\\level%d.log">`
    603          
    604          
    605          
    606          
    607          char TestLevel[MAX_HEIGHT] [MAX_WIDTH] =
    608              {
    609                {1,1,1,1,1,1,2,2,2,1,1,1,1,1,1},
    610                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    611                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    612                {0,0,0,0,0,0,7,7,7,0,0,0,0,0,0},
    613                {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    614                {5,5,5,5,5,0,0,0,0,0,5,5,5,5,5},
    615                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    616                {30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
    617                {30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
    618                {30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
    619                {25,25,25,25,25,25,25,25,25,25,25,25,25,25,25},
    620                {26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
    621                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    622                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    623                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    624                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    625                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    626                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    627                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    628                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    629                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    630                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    631                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    632                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    633                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    634                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    635                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    636                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    637                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    638                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    639                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    640                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    641              };
    642          
    643          

   \                                 In segment CODE, align 4, keep-with-next
    644          void LoadTestLevel(char **level)
    645          {
   \                     LoadTestLevel:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    646            char *temp = malloc(256);
    647            memcpy(level,&TestLevel,MAX_WIDTH*MAX_HEIGHT);
   \   00000004   ........           LDR      R6,??DataTable25  ;; ball
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   140000EF           SWI      +20
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   782FA0E3           MOV      R2,#+480
   \   0000001C   C400A0E3           MOV      R0,#+196
   \   00000020   800E80E3           ORR      R0,R0,#0x800
   \   00000024   061080E0           ADD      R1,R0,R6
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   1E0100EF           SWI      +286
    648            ifree(level_bg);
   \   00000030   700496E5           LDR      R0,[R6, #+1136]
   \   00000034   ........           BL       ifree
    649            sprintf(temp,"%spics\\0.png",pwd);
   \   00000038   ........           LDR      R0,??DataTable26  ;; pwd
   \   0000003C   44109FE5           LDR      R1,??LoadTestLevel_0  ;; `?<Constant "%spics\\\\0.png">`
   \   00000040   002090E5           LDR      R2,[R0, #+0]
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   160000EF           SWI      +22
    650            level_bg = CreateIMGHDRFromPngFile(temp,2);
   \   0000004C   0210A0E3           MOV      R1,#+2
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   E90100EF           SWI      +489
   \   00000058   700486E5           STR      R0,[R6, #+1136]
    651            mfree(temp);
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   150000EF           SWI      +21
    652            map.snd_num = 0;
   \   00000064   ........           LDR      R0,??DataTable27  ;; map
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0910C0E5           STRB     R1,[R0, #+9]
    653            map.type = TYPE_NORMAL;
   \   00000070   0A10C0E5           STRB     R1,[R0, #+10]
    654            map.boss_diff = DIFF_NORMAL;
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0B10C0E5           STRB     R1,[R0, #+11]
    655            map.boss_lives = 2;
   \   0000007C   0210A0E3           MOV      R1,#+2
   \   00000080   0C10C0E5           STRB     R1,[R0, #+12]
    656          }
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??LoadTestLevel_0:
   \   00000088   ........           DC32     `?<Constant "%spics\\\\0.png">`
    657          
    658          
    659          
    660          
    661          
    662          
    663          
    664          
    665          
    666          
    667          

   \                                 In segment CODE, align 4, keep-with-next
    668          char PrepareLevel(char levelnum)
    669          {
   \                     PrepareLevel:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    670            extern void LoadMapFromFile(char level[MAX_HEIGHT][MAX_WIDTH],char num,char *err);
    671            char level[MAX_HEIGHT][MAX_WIDTH];
    672            sprintf(lgn,"PrepareLevel(%d)...",levelnum);log(lgn);
   \   00000004   ........           LDR      R5,??DataTable62  ;; lgn
   \   00000008   38629FE5           LDR      R6,??PrepareLevel_0  ;; `?<Constant "\\363\\360\\356\\342\\345\\355\\374 %d\\n\\`
    673            
    674            /*if(rand_level)
    675            {
    676              int trigger; //меняется по рандому от 0 до 2
    677              int value; //записываемое значение в левел
    678              for(int ly=0; ly<32;ly++) //тут все упрощенно)
    679              {
    680               for(int lx=0;lx<15;lx++)
    681               {
    682                  trigger=rnd(0); //присваиваем триггеру 1, 0, или 2
    683                  if(trigger==0) value=0; //делаем в левеле пустое место(типа нету тут ничо)
    684                  if(trigger==1) value=rnd(1); //пихаем рандомный бонус
    685                  if(trigger==2) value=rnd(2); //пихаем рандомный брик
    686                  level[ly][lx] = value; //записываем полученное значение поячейково
    687               }
    688              }
    689              
    690              
    691            } //и получилось у нас хз что =))
    692            else*/
    693            char err=0;
   \   0000000C   ........           LDR      R10,??DataTable61  ;; ball
   \   00000010   79DF4DE2           SUB      SP,SP,#+484
   \   00000014   00B0A0E1           MOV      R11,R0
   \   00000018   0B40A0E1           MOV      R4,R11
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   BC1086E2           ADD      R1,R6,#+188
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   160000EF           SWI      +22
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       log
   \   00000034   ........           LDR      R8,??DataTable52  ;; PressTimerFunc
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   0070CDE5           STRB     R7,[SP, #+0]
   \   00000040   6907DAE5           LDRB     R0,[R10, #+1897]
   \   00000044   7A9EA0E3           MOV      R9,#+1952
   \   00000048   0B0050E1           CMP      R0,R11
   \   0000004C   0F00002A           BCS      ??PrepareLevel_1
    694            if(levelnum>total_levels)
    695            {
    696              sprintf(press_msg,"Все уровни завершены\nПобеда!");
   \   00000050   9C1086E2           ADD      R1,R6,#+156
   \   00000054   0A0089E0           ADD      R0,R9,R10
   \   00000058   160000EF           SWI      +22
    697              press_type = PRESS_GAMEOVER;
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   6E07CAE5           STRB     R0,[R10, #+1902]
    698              cont=0;
   \   00000064   7D77CAE5           STRB     R7,[R10, #+1917]
    699              GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   0610A0E3           MOV      R1,#+6
   \   00000070   450F89E2           ADD      R0,R9,#+276
   \   00000074   0A0080E0           ADD      R0,R0,R10
   \   00000078   4D0000EF           SWI      +77
    700              log("levels completed");
   \   0000007C   880086E2           ADD      R0,R6,#+136
   \                     ??PrepareLevel_2:
   \   00000080   ........           BL       log
    701              return 0;
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   79DF8DE2           ADD      SP,SP,#+484
   \   0000008C   F08FBDE8           POP      {R4-R11,PC}
    702            }
    703            else LoadMapFromFile(level,levelnum,&err); //грузим из файла
   \                     ??PrepareLevel_1:
   \   00000090   0D20A0E1           MOV      R2,SP
   \   00000094   0B10A0E1           MOV      R1,R11
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   ........           _BLF     LoadMapFromFile,??LoadMapFromFile??rA
    704            sprintf(lgn,"start preparing[%d]",levelnum);log(lgn);
   \   000000A0   0420A0E1           MOV      R2,R4
   \   000000A4   741086E2           ADD      R1,R6,#+116
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   160000EF           SWI      +22
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   ........           BL       log
    705            bricks_of_clean=0;
   \   000000B8   B07BCAE1           STRH     R7,[R10, #+176]
    706            clean_bricks=0;
   \   000000BC   BE7ACAE1           STRH     R7,[R10, #+174]
    707            if(err) {sprintf(lgn,"PrepareLevel: Error while loading map");log(lgn);return 0;}
   \   000000C0   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0400000A           BEQ      ??PrepareLevel_3
   \   000000CC   4C1086E2           ADD      R1,R6,#+76
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   160000EF           SWI      +22
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   E7FFFFEA           B        ??PrepareLevel_2
    708            if(savedata.opened_levels<levelnum) savedata.opened_levels = levelnum;
   \                     ??PrepareLevel_3:
   \   000000E0   ........           LDR      R0,??DataTable31  ;; savedata
   \   000000E4   0110D0E5           LDRB     R1,[R0, #+1]
   \   000000E8   0B0051E1           CMP      R1,R11
   \   000000EC   01B0C035           STRBCC   R11,[R0, #+1]
    709            //DumpMap(level,levelcounter);
    710            
    711            
    712            for(int ly=0; ly<MAX_HEIGHT;ly++)
   \   000000F0   0000A0E3           MOV      R0,#+0
    713            {
    714             for(int lx=0;lx<MAX_WIDTH;lx++)
   \                     ??PrepareLevel_4:
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   003260E0           RSB      R3,R0,R0, LSL #+4
    715             {
    716               if(level[ly][lx]==1 || level[ly][lx]==2 || level[ly][lx]==3) bricks_of_clean+=1; //normal bricks
   \                     ??PrepareLevel_5:
   \   000000FC   F02BDAE1           LDRSH    R2,[R10, #+176]
   \   00000100   04B08DE2           ADD      R11,SP,#+4
   \   00000104   0BB083E0           ADD      R11,R3,R11
   \   00000108   0BB0D1E7           LDRB     R11,[R1, +R11]
   \   0000010C   01005BE3           CMP      R11,#+1
   \   00000110   02005B13           CMPNE    R11,#+2
   \   00000114   03005B13           CMPNE    R11,#+3
   \   00000118   01208202           ADDEQ    R2,R2,#+1
    717               if(level[ly][lx]>=20 && level[ly][lx]<=35) bricks_of_clean+=1; //bonus bricks
   \   0000011C   14005BE3           CMP      R11,#+20
   \   00000120   0300003A           BCC      ??PrepareLevel_6
   \   00000124   24005BE3           CMP      R11,#+36
   \   00000128   0600002A           BCS      ??PrepareLevel_7
   \   0000012C   012082E2           ADD      R2,R2,#+1
   \   00000130   040000EA           B        ??PrepareLevel_7
    718               
    719               if(level[ly][lx]==4) bricks_of_clean+=2; //брик,требующий двойное попадание,следовательно увеличиваем bricks_of_clean на 2
   \                     ??PrepareLevel_6:
   \   00000134   04005BE3           CMP      R11,#+4
   \   00000138   02208202           ADDEQ    R2,R2,#+2
   \   0000013C   0100000A           BEQ      ??PrepareLevel_7
    720               if(level[ly][lx]==5) bricks_of_clean+=3; //брик,требующий тройное попадание,следовательно увеличиваем bricks_of_clean на 3
   \   00000140   05005BE3           CMP      R11,#+5
   \   00000144   03208202           ADDEQ    R2,R2,#+3
   \                     ??PrepareLevel_7:
   \   00000148   B02BCAE1           STRH     R2,[R10, #+176]
    721               UsedLevel[ly][lx]=level[ly][lx];
   \   0000014C   0A2083E0           ADD      R2,R3,R10
   \   00000150   022081E0           ADD      R2,R1,R2
   \   00000154   78B2C2E5           STRB     R11,[R2, #+632]
    722             }
   \   00000158   011081E2           ADD      R1,R1,#+1
   \   0000015C   0F0051E3           CMP      R1,#+15
   \   00000160   E5FFFFBA           BLT      ??PrepareLevel_5
    723            }
   \   00000164   010080E2           ADD      R0,R0,#+1
   \   00000168   200050E3           CMP      R0,#+32
   \   0000016C   E0FFFFBA           BLT      ??PrepareLevel_4
    724            
    725            user_x = (sw/2)-(user[user_type][user_s].img[0]->w/2);
   \   00000170   7617DAE5           LDRB     R1,[R10, #+1910]
   \   00000174   7737DAE5           LDRB     R3,[R10, #+1911]
   \   00000178   2420A0E3           MOV      R2,#+36
   \   0000017C   ........           LDR      R0,??DataTable46  ;; sw
   \   00000180   6CB0A0E3           MOV      R11,#+108
   \   00000184   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000188   9BA323E0           MLA      R3,R11,R3,R10
   \   0000018C   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000190   923121E0           MLA      R1,R2,R1,R3
    726            user_y = sh-user[user_type][user_s].img[0]->h;
    727            ball_x=W/2;
    728            ball_y=H-20;
    729            if(ball_spy>0) ball_spy=-ball_min_speed; //шарик двигается вверх на минималке
    730            sprintf(lgn,"[level %d]bricks_of_clean:%d",levelnum,bricks_of_clean);log(lgn);
   \   00000194   F03BDAE1           LDRSH    R3,[R10, #+176]
   \   00000198   C81091E5           LDR      R1,[R1, #+200]
   \   0000019C   C000A0E1           ASR      R0,R0,#+1
   \   000001A0   002091E5           LDR      R2,[R1, #+0]
   \   000001A4   B020D2E1           LDRH     R2,[R2, #+0]
   \   000001A8   A20040E0           SUB      R0,R0,R2, LSR #+1
   \   000001AC   BA0BCAE1           STRH     R0,[R10, #+186]
   \   000001B0   ........           LDR      R0,??DataTable47  ;; sh
   \   000001B4   001091E5           LDR      R1,[R1, #+0]
   \   000001B8   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000001BC   F210D1E1           LDRSH    R1,[R1, #+2]
   \   000001C0   0420A0E1           MOV      R2,R4
   \   000001C4   010040E0           SUB      R0,R0,R1
   \   000001C8   BC0BCAE1           STRH     R0,[R10, #+188]
   \   000001CC   7800A0E3           MOV      R0,#+120
   \   000001D0   B20BCAE1           STRH     R0,[R10, #+178]
   \   000001D4   4B0FA0E3           MOV      R0,#+300
   \   000001D8   B40BCAE1           STRH     R0,[R10, #+180]
   \   000001DC   F80BDAE1           LDRSH    R0,[R10, #+184]
   \   000001E0   2C1086E2           ADD      R1,R6,#+44
   \   000001E4   010050E3           CMP      R0,#+1
   \   000001E8   6B07DAA5           LDRBGE   R0,[R10, #+1899]
   \   000001EC   000060A2           RSBGE    R0,R0,#+0
   \   000001F0   B80BCAA1           STRHGE   R0,[R10, #+184]
   \   000001F4   0500A0E1           MOV      R0,R5
   \   000001F8   160000EF           SWI      +22
   \   000001FC   0500A0E1           MOV      R0,R5
   \   00000200   ........           BL       log
    731            
    732            PlayMusic(GAME_MUSIC);
   \   00000204   0100A0E3           MOV      R0,#+1
   \   00000208   ........           BL       PlayMusic
    733            press_type = PRESS_NEWLEVEL;
    734            sprintf(press_msg,"уровень %d\nна очереди %d попаданий!\nготовы?",levelnum,bricks_of_clean);
   \   0000020C   F03BDAE1           LDRSH    R3,[R10, #+176]
   \   00000210   6E77CAE5           STRB     R7,[R10, #+1902]
   \   00000214   0420A0E1           MOV      R2,R4
   \   00000218   0610A0E1           MOV      R1,R6
   \   0000021C   0A0089E0           ADD      R0,R9,R10
   \   00000220   160000EF           SWI      +22
    735            TimerRedrawScreen();
   \   00000224   ........           BL       TimerRedrawScreen
    736            GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   00000228   0820A0E1           MOV      R2,R8
   \   0000022C   0610A0E3           MOV      R1,#+6
   \   00000230   450F89E2           ADD      R0,R9,#+276
   \   00000234   0A0080E0           ADD      R0,R0,R10
   \   00000238   4D0000EF           SWI      +77
    737            return 1;
   \   0000023C   0100A0E3           MOV      R0,#+1
   \   00000240   79DF8DE2           ADD      SP,SP,#+484
   \   00000244   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??PrepareLevel_0:
   \   00000248   ........           DC32     `?<Constant "\\363\\360\\356\\342\\345\\355\\374 %d\\n\\`
    738          }
    739          
    740          
    741          

   \                                 In segment CODE, align 4, keep-with-next
    742          void GetCoordinatiesByLevelPos(char x,char y,short *px,short *py)
    743          {
    744            *px = 0+brick[0].img->w*x;
   \                     GetCoordinatiesByLevelPos:
   \   00000000   ........           LDR      R12,??DataTable64  ;; brick
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   00409CE5           LDR      R4,[R12, #+0]
   \   0000000C   F040D4E1           LDRSH    R4,[R4, #+0]
   \   00000010   840060E1           SMULBB   R0,R4,R0
   \   00000014   B000C2E1           STRH     R0,[R2, #+0]
    745            *py = 0+brick[0].img->h*y;
   \   00000018   00009CE5           LDR      R0,[R12, #+0]
   \   0000001C   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000020   800160E1           SMULBB   R0,R0,R1
   \   00000024   B000C3E1           STRH     R0,[R3, #+0]
    746          }
   \   00000028   1000BDE8           POP      {R4}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    747          
    748          

   \                                 In segment CODE, align 4, keep-with-next
    749          void GetCellState(char x,char y,unsigned int *err)
    750          {
    751            if(x>=MAX_WIDTH || y>=MAX_HEIGHT) *err=1;
   \                     GetCellState:
   \   00000000   0F0050E3           CMP      R0,#+15
   \   00000004   20005133           CMPCC    R1,#+32
   \   00000008   0100A023           MOVCS    R0,#+1
    752            else *err=0;
   \   0000000C   0000A033           MOVCC    R0,#+0
   \   00000010   000082E5           STR      R0,[R2, #+0]
    753          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
    754          
    755          
    756          
    757          
    758          
    759          
    760          //епт падает по watch_dog_min_time(перегрузка видимо) если миной подрываются соседние мины((

   \                                 In segment CODE, align 4, keep-with-next
    761          void InitBoom(char x,char y) //x и y - координаты в левеле.
    762          {
   \                     InitBoom:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    763            asm("nop"); //это так,палево какое-то (:
   \   0000000C   0000A0E1           nop              
    764            asm("nop");
   \   00000010   0000A0E1           nop              
    765            asm("nop");
   \   00000014   0000A0E1           nop              
    766            
    767            short px,py;
    768            //эти 2 массива для сокращения писанины,внимательно смотри первый закомментированный код ниже(длинный :))
    769            static signed char x_line[9] = {0,1,-1,0,0,-1,1,1,-1};
    770            static signed char y_line[9] = {0,0,0,-1,1,-1,1,-1,1};
    771            
    772            for(char i=0;i<9;i++)
   \   00000018   ........           LDR      R7,??DataTable61  ;; ball
   \   0000001C   0060A0E3           MOV      R6,#+0
    773            {
    774              char cx = x+x_line[i];
   \                     ??InitBoom_0:
   \   00000020   070086E0           ADD      R0,R6,R7
   \   00000024   8017D0E5           LDRB     R1,[R0, #+1920]
    775              char cy = y+y_line[i];
   \   00000028   8C07D0E5           LDRB     R0,[R0, #+1932]
   \   0000002C   048081E0           ADD      R8,R1,R4
   \   00000030   FF8008E2           AND      R8,R8,#0xFF
   \   00000034   059080E0           ADD      R9,R0,R5
   \   00000038   FF9009E2           AND      R9,R9,#0xFF
    776              
    777              GetCellState(cx,cy,&err);
   \   0000003C   0F0058E3           CMP      R8,#+15
   \   00000040   20005933           CMPCC    R9,#+32
   \   00000044   0100A023           MOVCS    R0,#+1
   \   00000048   0000A033           MOVCC    R0,#+0
   \   0000004C   780487E5           STR      R0,[R7, #+1144]
    778              if(!err)
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   2400001A           BNE      ??InitBoom_1
    779              {
    780                GetCoordinatiesByLevelPos(cx,cy,&px,&py);
   \   00000058   ........           LDR      R0,??DataTable64  ;; brick
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000064   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000068   81086AE1           SMULBB   R10,R1,R8
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   80016BE1           SMULBB   R11,R0,R1
   \   00000074   0AA8A0E1           MOV      R10,R10, LSL #+16
   \   00000078   4AA8A0E1           MOV      R10,R10, ASR #+16
   \   0000007C   0BB8A0E1           MOV      R11,R11, LSL #+16
   \   00000080   4BB8A0E1           MOV      R11,R11, ASR #+16
    781                if(GetCell(cx,cy)==7) {SetCell(cx,cy,0,&err);} //если это мина,то киляем ее нахъ
   \   00000084   0800A0E1           MOV      R0,R8
   \   00000088   ........           BL       GetCell
   \   0000008C   070050E3           CMP      R0,#+7
   \   00000090   0700001A           BNE      ??InitBoom_2
   \   00000094   7800A0E3           MOV      R0,#+120
   \   00000098   400E80E3           ORR      R0,R0,#0x400
   \   0000009C   073080E0           ADD      R3,R0,R7
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0910A0E1           MOV      R1,R9
   \   000000A8   0800A0E1           MOV      R0,R8
   \   000000AC   ........           BL       SetCell
   \   000000B0   020000EA           B        ??InitBoom_3
    782                else DestroyBrick(cx,cy); //не мина,знач все сделает функция DestroyBrick.Надо это для избежания той левой фигни с перегрузкой
   \                     ??InitBoom_2:
   \   000000B4   0910A0E1           MOV      R1,R9
   \   000000B8   0800A0E1           MOV      R0,R8
   \   000000BC   ........           BL       DestroyBrick
    783                InitSprite(&mine_sparks,UID_OTHER,px,py,1);
   \                     ??InitBoom_3:
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   0B30A0E1           MOV      R3,R11
   \   000000CC   0A20A0E1           MOV      R2,R10
   \   000000D0   9A10A0E3           MOV      R1,#+154
   \   000000D4   801F81E3           ORR      R1,R1,#0x200
   \   000000D8   6C00A0E3           MOV      R0,#+108
   \   000000DC   800E80E3           ORR      R0,R0,#0x800
   \   000000E0   070080E0           ADD      R0,R0,R7
   \   000000E4   ........           _BLF     InitSprite,??InitSprite??rA
   \   000000E8   04D08DE2           ADD      SP,SP,#+4
    784              }
    785            }
   \                     ??InitBoom_1:
   \   000000EC   016086E2           ADD      R6,R6,#+1
   \   000000F0   090056E3           CMP      R6,#+9
   \   000000F4   C9FFFF3A           BCC      ??InitBoom_0
    786            /*
    787            GetCellState(x,y,&err);
    788            if(!err)
    789            {
    790              GetCoordinatiesByLevelPos(x,y,&px,&py);
    791              DestroyBrick(x,y);
    792              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    793            }
    794            
    795            GetCellState(x+1,y,&err);
    796            if(!err)
    797            {
    798              GetCoordinatiesByLevelPos(x+1,y,&px,&py);
    799              DestroyBrick(x+1,y);
    800              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    801            }
    802            
    803            GetCellState(x-1,y,&err);
    804            if(!err)
    805            {
    806              GetCoordinatiesByLevelPos(x-1,y,&px,&py);
    807              DestroyBrick(x-1,y);
    808              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    809            }
    810            
    811            GetCellState(x,y-1,&err);
    812            if(!err)
    813            {
    814              GetCoordinatiesByLevelPos(x,y-1,&px,&py);
    815              DestroyBrick(x,y-1);
    816              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    817            }
    818            
    819            GetCellState(x,y+1,&err);
    820            if(!err)
    821            {
    822              GetCoordinatiesByLevelPos(x,y+1,&px,&py);
    823              DestroyBrick(x,y+1);
    824              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    825            }
    826            
    827            GetCellState(x-1,y-1,&err);
    828            if(!err)
    829            {
    830              GetCoordinatiesByLevelPos(x-1,y-1,&px,&py);
    831              DestroyBrick(x-1,y-1);
    832              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    833            }
    834            
    835            GetCellState(x+1,y+1,&err);
    836            if(!err)
    837            {
    838              GetCoordinatiesByLevelPos(x+1,y+1,&px,&py);
    839              DestroyBrick(x+1,y+1);
    840              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    841            }
    842            
    843            GetCellState(x+1,y-1,&err);
    844            if(!err)
    845            {
    846              GetCoordinatiesByLevelPos(x+1,y-1,&px,&py);
    847              DestroyBrick(x+1,y-1);
    848              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    849            }
    850            
    851            GetCellState(x-1,y+1,&err);
    852            if(!err)
    853            {
    854              GetCoordinatiesByLevelPos(x-1,y+1,&px,&py);
    855              DestroyBrick(x-1,y+1);
    856              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    857            }*/
    858            //log("Boom OK");
    859          }
   \   000000F8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    860          
    861          
    862          
    863          
    864          
    865          
    866          
    867          
    868          
    869          
    870          
    871          
    872          
    873          
    874          
    875          //калечный код(
    876          char blocks_trigger; //если около брика,с кот. столкнулся мяч,есть соседние брики,то ставим на 1,и после столкновения не учитываем одновременное столкновение
    877          //с ними,иначе шар будет лететь куда попало
    878          
    879          
    880          
    881          
    882          
    883          int ball_check_only_pos_x=0;
    884          int ball_check_only_pos_y=0;

   \                                 In segment CODE, align 4, keep-with-next
    885          int CheckAndChangeBallState(image brick,int xnum,int ynum,int bonus) //xnym и ynum это координаты брика в массиве
    886          {
   \                     CheckAndChangeBallState:
   \   00000000   0F002DE9           PUSH     {R0-R3}
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
    887            if(ball_check_only_pos_x>100) {ball_check_only_pos_x=0;ball_spy+=1;} //для выхода из тупикового зацикливания шарика на одной оси :)
   \   00000008   ........           LDR      R6,??DataTable61  ;; ball
   \   0000000C   34009DE5           LDR      R0,[SP, #+52]
   \   00000010   441796E5           LDR      R1,[R6, #+1860]
   \   00000014   0340A0E1           MOV      R4,R3
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   650051E3           CMP      R1,#+101
   \   00000020   030000BA           BLT      ??CheckAndChangeBallState_0
   \   00000024   F81BD6E1           LDRSH    R1,[R6, #+184]
   \   00000028   445786E5           STR      R5,[R6, #+1860]
   \   0000002C   011081E2           ADD      R1,R1,#+1
   \   00000030   B81BC6E1           STRH     R1,[R6, #+184]
    888            if(ball_check_only_pos_y>100) {ball_check_only_pos_y=0;ball_spx+=1;} //для выхода из тупикового зацикливания шарика на одной оси :)
   \                     ??CheckAndChangeBallState_0:
   \   00000034   481796E5           LDR      R1,[R6, #+1864]
   \   00000038   650051E3           CMP      R1,#+101
   \   0000003C   030000BA           BLT      ??CheckAndChangeBallState_1
   \   00000040   F61BD6E1           LDRSH    R1,[R6, #+182]
   \   00000044   485786E5           STR      R5,[R6, #+1864]
   \   00000048   011081E2           ADD      R1,R1,#+1
   \   0000004C   B61BC6E1           STRH     R1,[R6, #+182]
    889            char mode;
    890            
    891            if(ball_spx<0 && ball_spy<0) //если двигался до столкновения влево+вверх
   \                     ??CheckAndChangeBallState_1:
   \   00000050   F6ABD6E1           LDRSH    R10,[R6, #+182]
   \   00000054   7E77D6E5           LDRB     R7,[R6, #+1918]
   \   00000058   F89BD6E1           LDRSH    R9,[R6, #+184]
   \   0000005C   000260E0           RSB      R0,R0,R0, LSL #+4
   \   00000060   068080E0           ADD      R8,R0,R6
   \   00000064   87B0A0E3           MOV      R11,#+135
   \   00000068   80BF8BE3           ORR      R11,R11,#0x200
   \   0000006C   00005AE3           CMP      R10,#+0
   \   00000070   2C00005A           BPL      ??CheckAndChangeBallState_2
   \   00000074   000059E3           CMP      R9,#+0
   \   00000078   7300005A           BPL      ??CheckAndChangeBallState_3
    892            {
    893              mode = BBhit(brick,BB_DOWN_RIGHT); //можем столкнуться только с низом и правой стороной
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   28008DE2           ADD      R0,SP,#+40
   \   00000088   0CD04DE2           SUB      SP,SP,#+12
   \   0000008C   001090E5           LDR      R1,[R0, #0]
   \   00000090   0D20A0E1           MOV      R2,SP
   \   00000094   001082E5           STR      R1,[R2, #+0]
   \   00000098   041090E5           LDR      R1,[R0, #+4]
   \   0000009C   041082E5           STR      R1,[R2, #+4]
   \   000000A0   081090E5           LDR      R1,[R0, #+8]
   \   000000A4   081082E5           STR      R1,[R2, #+8]
   \   000000A8   0F00BDE8           POP      {R0-R3}
   \   000000AC   ........           BL       BBhit
    894              
    895              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   000000B0   040050E3           CMP      R0,#+4
   \   000000B4   0B00001A           BNE      ??CheckAndChangeBallState_4
   \   000000B8   7E57C6E5           STRB     R5,[R6, #+1918]
    896              else
    897              {
    898                if(UsedLevel[ynum][xnum+1]>0) mode=BB_RET_DOWN; //если справо от нашего брика есть другой брик,то можем столкнуться только с нижней стороной брика,не так ли?
    899                else if(UsedLevel[ynum+1][xnum]>0) mode=BB_RET_RIGHT; //только с правой стороной
    900              }
    901              
    902              if(mode==BB_RET_DOWN && blocks_trigger==0)
    903              {
    904                ball_spx=ball_spx;  //продолжаем двигаться влево
    905                ball_spy=-ball_spy;  //теперь двигаемся не вверх,а вниз
    906                blocks_trigger=1;
    907                return 1;
    908              }
    909              if(mode==BB_RET_RIGHT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_5:
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   8500001A           BNE      ??CheckAndChangeBallState_6
   \                     ??CheckAndChangeBallState_7:
   \   000000C4   7E07D6E5           LDRB     R0,[R6, #+1918]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   8200001A           BNE      ??CheckAndChangeBallState_6
    910              {
    911                ball_spx=-ball_spx; //теперь двигаемся не влево,а вправо
   \                     ??CheckAndChangeBallState_8:
   \   000000D0   00006AE2           RSB      R0,R10,#+0
   \   000000D4   B60BC6E1           STRH     R0,[R6, #+182]
    912                ball_spy=ball_spy;  //продолжаем двигаться вверх
    913                blocks_trigger=1;
   \                     ??CheckAndChangeBallState_9:
   \   000000D8   0100A0E3           MOV      R0,#+1
   \   000000DC   7E07C6E5           STRB     R0,[R6, #+1918]
    914                return 1;
   \   000000E0   F04FBDE8           POP      {R4-R11,LR}
   \   000000E4   7E0000EA           B        ??CheckAndChangeBallState_10
    915              }
   \                     ??CheckAndChangeBallState_4:
   \   000000E8   081084E0           ADD      R1,R4,R8
   \   000000EC   7912D1E5           LDRB     R1,[R1, #+633]
   \   000000F0   000051E3           CMP      R1,#+0
   \   000000F4   0200A013           MOVNE    R0,#+2
   \   000000F8   0500001A           BNE      ??CheckAndChangeBallState_11
   \   000000FC   081084E0           ADD      R1,R4,R8
   \   00000100   0110DBE7           LDRB     R1,[R11, +R1]
   \   00000104   000051E3           CMP      R1,#+0
   \   00000108   EDFFFF1A           BNE      ??CheckAndChangeBallState_7
   \   0000010C   020050E3           CMP      R0,#+2
   \   00000110   E9FFFF1A           BNE      ??CheckAndChangeBallState_5
   \                     ??CheckAndChangeBallState_11:
   \   00000114   000057E3           CMP      R7,#+0
   \   00000118   E7FFFF1A           BNE      ??CheckAndChangeBallState_5
   \                     ??CheckAndChangeBallState_12:
   \   0000011C   000069E2           RSB      R0,R9,#+0
   \   00000120   B80BC6E1           STRH     R0,[R6, #+184]
   \   00000124   EBFFFFEA           B        ??CheckAndChangeBallState_9
    916            }
    917            
    918            if(ball_spx>0 && ball_spy>0) //если двигался до столкновения вправо+вниз
   \                     ??CheckAndChangeBallState_2:
   \   00000128   01005AE3           CMP      R10,#+1
   \   0000012C   6A0000BA           BLT      ??CheckAndChangeBallState_6
   \   00000130   010059E3           CMP      R9,#+1
   \   00000134   220000BA           BLT      ??CheckAndChangeBallState_13
    919            {
    920              mode = BBhit(brick,BB_UP_LEFT); //можем столкнуться только с верхом и левой стороной
   \   00000138   0300A0E3           MOV      R0,#+3
   \   0000013C   01002DE9           PUSH     {R0}
   \   00000140   28008DE2           ADD      R0,SP,#+40
   \   00000144   0CD04DE2           SUB      SP,SP,#+12
   \   00000148   001090E5           LDR      R1,[R0, #0]
   \   0000014C   0D20A0E1           MOV      R2,SP
   \   00000150   001082E5           STR      R1,[R2, #+0]
   \   00000154   041090E5           LDR      R1,[R0, #+4]
   \   00000158   041082E5           STR      R1,[R2, #+4]
   \   0000015C   081090E5           LDR      R1,[R0, #+8]
   \   00000160   081082E5           STR      R1,[R2, #+8]
   \   00000164   0F00BDE8           POP      {R0-R3}
   \   00000168   ........           BL       BBhit
    921              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   0000016C   040050E3           CMP      R0,#+4
   \   00000170   7E57C605           STRBEQ   R5,[R6, #+1918]
   \   00000174   0C00000A           BEQ      ??CheckAndChangeBallState_14
    922              else
    923              {
    924                if(UsedLevel[ynum][xnum-1]>0) mode=BB_RET_UP;
   \   00000178   081084E0           ADD      R1,R4,R8
   \   0000017C   7712D1E5           LDRB     R1,[R1, #+631]
   \   00000180   000051E3           CMP      R1,#+0
   \   00000184   0300A013           MOVNE    R0,#+3
   \   00000188   0500001A           BNE      ??CheckAndChangeBallState_15
    925                else if(UsedLevel[ynum-1][xnum]>0) mode=BB_RET_LEFT;
   \   0000018C   081084E0           ADD      R1,R4,R8
   \   00000190   6912D1E5           LDRB     R1,[R1, #+617]
   \   00000194   000051E3           CMP      R1,#+0
   \   00000198   0500001A           BNE      ??CheckAndChangeBallState_16
    926              }
    927              
    928              if(mode==BB_RET_UP && blocks_trigger==0)
   \   0000019C   030050E3           CMP      R0,#+3
   \   000001A0   0100001A           BNE      ??CheckAndChangeBallState_14
   \                     ??CheckAndChangeBallState_15:
   \   000001A4   000057E3           CMP      R7,#+0
   \   000001A8   DBFFFF0A           BEQ      ??CheckAndChangeBallState_12
    929              {
    930                ball_spx=ball_spx;  //продолжаем двигаться вправо
    931                ball_spy=-ball_spy;  //теперь двигаемся не вниз,а вверх
    932                blocks_trigger=1;
    933                return 1;
    934              }
    935              if(mode==BB_RET_LEFT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_14:
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4900001A           BNE      ??CheckAndChangeBallState_6
   \                     ??CheckAndChangeBallState_16:
   \   000001B4   7E07D6E5           LDRB     R0,[R6, #+1918]
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   4600001A           BNE      ??CheckAndChangeBallState_6
   \   000001C0   C2FFFFEA           B        ??CheckAndChangeBallState_8
    936              {
    937                ball_spx=-ball_spx; //теперь двигаемся не вправо,а влево
    938                ball_spy=ball_spy;  //продолжаем двигаться вниз
    939                blocks_trigger=1;
    940                return 1;
    941              }
    942            }
   \                     ??CheckAndChangeBallState_13:
   \   000001C4   000059E3           CMP      R9,#+0
   \   000001C8   4300005A           BPL      ??CheckAndChangeBallState_6
    943            
    944            if(ball_spx>0 && ball_spy<0) //если двигался до столкновения вправо+вверх
    945            {
    946              mode = BBhit(brick,BB_DOWN_LEFT); //можем столкнуться только с низом и левой стороной
   \   000001CC   0100A0E3           MOV      R0,#+1
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   28008DE2           ADD      R0,SP,#+40
   \   000001D8   0CD04DE2           SUB      SP,SP,#+12
   \   000001DC   001090E5           LDR      R1,[R0, #0]
   \   000001E0   0D20A0E1           MOV      R2,SP
   \   000001E4   001082E5           STR      R1,[R2, #+0]
   \   000001E8   041090E5           LDR      R1,[R0, #+4]
   \   000001EC   041082E5           STR      R1,[R2, #+4]
   \   000001F0   081090E5           LDR      R1,[R0, #+8]
   \   000001F4   081082E5           STR      R1,[R2, #+8]
   \   000001F8   0F00BDE8           POP      {R0-R3}
   \   000001FC   ........           BL       BBhit
    947              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   00000200   040050E3           CMP      R0,#+4
   \   00000204   7E57C605           STRBEQ   R5,[R6, #+1918]
   \   00000208   0C00000A           BEQ      ??CheckAndChangeBallState_17
    948              else
    949              {
    950                if(UsedLevel[ynum][xnum-1]>0) mode=BB_RET_DOWN; //если справо от нашего брика есть другой брик,то можем столкнуться только с нижней стороной брика,не так ли?
   \   0000020C   081084E0           ADD      R1,R4,R8
   \   00000210   7712D1E5           LDRB     R1,[R1, #+631]
   \   00000214   000051E3           CMP      R1,#+0
   \   00000218   0200A013           MOVNE    R0,#+2
   \   0000021C   0500001A           BNE      ??CheckAndChangeBallState_18
    951                else if(UsedLevel[ynum+1][xnum]>0) mode=BB_RET_LEFT; //только с правой стороной
   \   00000220   081084E0           ADD      R1,R4,R8
   \   00000224   0110DBE7           LDRB     R1,[R11, +R1]
   \   00000228   000051E3           CMP      R1,#+0
   \   0000022C   E0FFFF1A           BNE      ??CheckAndChangeBallState_16
    952              }
    953              
    954              if(mode==BB_RET_DOWN && blocks_trigger==0)
   \   00000230   020050E3           CMP      R0,#+2
   \   00000234   0100001A           BNE      ??CheckAndChangeBallState_17
   \                     ??CheckAndChangeBallState_18:
   \   00000238   000057E3           CMP      R7,#+0
   \   0000023C   B6FFFF0A           BEQ      ??CheckAndChangeBallState_12
    955              {
    956                ball_spx=ball_spx;  //продолжаем двигаться вправо
    957                ball_spy=-ball_spy;  //теперь двигаемся не вверх,а вниз
    958                blocks_trigger=1;
    959                return 1;
    960              }
    961              if(mode==BB_RET_LEFT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_17:
   \   00000240   010050E3           CMP      R0,#+1
   \   00000244   2400001A           BNE      ??CheckAndChangeBallState_6
   \   00000248   D9FFFFEA           B        ??CheckAndChangeBallState_16
    962              {
    963                ball_spx=-ball_spx; //теперь двигаемся не влево,а вправо
    964                ball_spy=ball_spy;  //продолжаем двигаться вверх
    965                blocks_trigger=1;
    966                return 1;
    967              }
    968            }
   \                     ??CheckAndChangeBallState_3:
   \   0000024C   010059E3           CMP      R9,#+1
   \   00000250   210000BA           BLT      ??CheckAndChangeBallState_6
    969            
    970            if(ball_spx<0 && ball_spy>0) //если двигался до столкновения влево+вниз
    971            {
    972              mode = BBhit(brick,BB_UP_RIGHT); //можем столкнуться только с верхом и правой стороной
   \   00000254   0200A0E3           MOV      R0,#+2
   \   00000258   01002DE9           PUSH     {R0}
   \   0000025C   28008DE2           ADD      R0,SP,#+40
   \   00000260   0CD04DE2           SUB      SP,SP,#+12
   \   00000264   001090E5           LDR      R1,[R0, #0]
   \   00000268   0D20A0E1           MOV      R2,SP
   \   0000026C   001082E5           STR      R1,[R2, #+0]
   \   00000270   041090E5           LDR      R1,[R0, #+4]
   \   00000274   041082E5           STR      R1,[R2, #+4]
   \   00000278   081090E5           LDR      R1,[R0, #+8]
   \   0000027C   081082E5           STR      R1,[R2, #+8]
   \   00000280   0F00BDE8           POP      {R0-R3}
   \   00000284   ........           BL       BBhit
    973              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   00000288   040050E3           CMP      R0,#+4
   \   0000028C   7E57C605           STRBEQ   R5,[R6, #+1918]
   \   00000290   0C00000A           BEQ      ??CheckAndChangeBallState_19
    974              else
    975              {
    976                if(UsedLevel[ynum][xnum+1]>0) mode=BB_RET_UP;
   \   00000294   081084E0           ADD      R1,R4,R8
   \   00000298   7912D1E5           LDRB     R1,[R1, #+633]
   \   0000029C   000051E3           CMP      R1,#+0
   \   000002A0   0300A013           MOVNE    R0,#+3
   \   000002A4   0500001A           BNE      ??CheckAndChangeBallState_20
    977                else if(UsedLevel[ynum-1][xnum]>0) mode=BB_RET_RIGHT;
   \   000002A8   081084E0           ADD      R1,R4,R8
   \   000002AC   6912D1E5           LDRB     R1,[R1, #+617]
   \   000002B0   000051E3           CMP      R1,#+0
   \   000002B4   0500001A           BNE      ??CheckAndChangeBallState_21
    978              }
    979              
    980              if(mode==BB_RET_UP && blocks_trigger==0)
   \   000002B8   030050E3           CMP      R0,#+3
   \   000002BC   0100001A           BNE      ??CheckAndChangeBallState_19
   \                     ??CheckAndChangeBallState_20:
   \   000002C0   000057E3           CMP      R7,#+0
   \   000002C4   94FFFF0A           BEQ      ??CheckAndChangeBallState_12
    981              {
    982                ball_spx=ball_spx;  //продолжаем двигаться влево
    983                ball_spy=-ball_spy;  //теперь двигаемся не вниз,а вверх
    984                blocks_trigger=1;
    985                return 1;
    986              }
    987              if(mode==BB_RET_RIGHT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_19:
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   0200001A           BNE      ??CheckAndChangeBallState_6
   \                     ??CheckAndChangeBallState_21:
   \   000002D0   7E07D6E5           LDRB     R0,[R6, #+1918]
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   7CFFFF0A           BEQ      ??CheckAndChangeBallState_8
    988              {
    989                ball_spx=-ball_spx; //теперь двигаемся не влево,а вправо
    990                ball_spy=ball_spy;  //продолжаем двигаться вниз
    991                blocks_trigger=1;
    992                return 1;
    993              }
    994            }
    995            
    996            
    997            return 0;
   \                     ??CheckAndChangeBallState_6:
   \   000002DC   F04FBDE8           POP      {R4-R11,LR}
   \   000002E0   0000A0E3           MOV      R0,#+0
   \                     ??CheckAndChangeBallState_10:
   \   000002E4   10D08DE2           ADD      SP,SP,#+16
   \   000002E8   1EFF2FE1           BX       LR               ;; return
    998          }
    999          
   1000          
   1001          
   1002          
   1003          
   1004          
   1005          
   1006          

   \                                 In segment CODE, align 4, keep-with-next
   1007          void CopyRecords(char *dest)
   1008          {
   \                     CopyRecords:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1009            sprintf(lgn,"CopyRecords(%s)..[score=%d]",dest,score);log(lgn);
   \   00000004   ........           LDR      R4,??DataTable62  ;; lgn
   \   00000008   A4609FE5           LDR      R6,??CopyRecords_0  ;; `?<Constant "CopyRecords(%s)..[sco...">`
   \   0000000C   ........           LDR      R7,??DataTable61  ;; ball
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   FC3AD7E1           LDRSH    R3,[R7, #+172]
   \   00000018   0520A0E1           MOV      R2,R5
   \   0000001C   0610A0E1           MOV      R1,R6
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   160000EF           SWI      +22
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       log
   1010            if(score==0) return;
   \   00000030   FC0AD7E1           LDRSH    R0,[R7, #+172]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F080BD08           POPEQ    {R4-R7,PC}
   1011            char *t = malloc(128);
   \   0000003C   8000A0E3           MOV      R0,#+128
   \   00000040   140000EF           SWI      +20
   1012            sprintf(t,"%s - %d",dest,score);
   \   00000044   FC3AD7E1           LDRSH    R3,[R7, #+172]
   \   00000048   0040A0E1           MOV      R4,R0
   \   0000004C   0520A0E1           MOV      R2,R5
   1013            
   1014            char i = 0;
   \   00000050   ........           LDR      R5,??DataTable40  ;; savedata
   \   00000054   1C1086E2           ADD      R1,R6,#+28
   \   00000058   160000EF           SWI      +22
   \   0000005C   0000A0E3           MOV      R0,#+0
   1015            char e = 0;
   1016            while(i<MAX_RECORDS)
   1017            {
   1018              if(!savedata.recs[i].use) 
   \                     ??CopyRecords_1:
   \   00000060   801280E0           ADD      R1,R0,R0, LSL #+5
   \   00000064   056081E0           ADD      R6,R1,R5
   \   00000068   3110D6E5           LDRB     R1,[R6, #+49]
   \   0000006C   000051E3           CMP      R1,#+0
   \   00000070   0500001A           BNE      ??CopyRecords_2
   1019              {
   1020                strcpy(savedata.recs[i].name,t);
   \   00000074   0410A0E1           MOV      R1,R4
   \   00000078   110086E2           ADD      R0,R6,#+17
   \   0000007C   1A0000EF           SWI      +26
   1021                savedata.recs[i].use = 1;
   \   00000080   0100A0E3           MOV      R0,#+1
   \   00000084   3100C6E5           STRB     R0,[R6, #+49]
   1022                e=1;
   1023                break;
   \   00000088   F080BDE8           POP      {R4-R7,PC}
   1024              }
   1025              i++;
   \                     ??CopyRecords_2:
   \   0000008C   010080E2           ADD      R0,R0,#+1
   \   00000090   FF0000E2           AND      R0,R0,#0xFF
   1026            }
   \   00000094   0A0050E3           CMP      R0,#+10
   \   00000098   F0FFFF3A           BCC      ??CopyRecords_1
   1027            if(e==0) //все рекорды уже заняты,пишем в первый
   1028            {
   1029               strcpy(savedata.recs[0].name,t);
   \   0000009C   0410A0E1           MOV      R1,R4
   \   000000A0   110085E2           ADD      R0,R5,#+17
   \   000000A4   1A0000EF           SWI      +26
   1030               savedata.recs[0].use = 1;
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   3100C5E5           STRB     R0,[R5, #+49]
   \   000000B0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??CopyRecords_0:
   \   000000B4   ........           DC32     `?<Constant "CopyRecords(%s)..[sco...">`
   1031            }
   1032          }
   1033          
   1034          
   1035          
   1036          
   1037          

   \                                 In segment CODE, align 4, keep-with-next
   1038          void Edit_endproc(int type,char *dest)
   1039          {
   \                     Edit_endproc:
   \   00000000   00402DE9           PUSH     {LR}
   1040            if(type==0) //имя для рекорда
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0080BD18           POPNE    {PC}
   1041            {
   1042              CopyRecords(dest);
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   ........           BL       CopyRecords
   1043            }
   1044            
   1045          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   1046          
   1047          
   1048          
   1049          
   1050          
   1051          GBSTMR ptmr;

   \                                 In segment CODE, align 4, keep-with-next
   1052          void PlayMusicOfTime()
   1053          {
   \                     PlayMusicOfTime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1054            GBS_StopTimer(&ptmr);
   \   00000004   ........           LDR      R5,??DataTable61  ;; ball
   \   00000008   A440A0E3           MOV      R4,#+164
   \   0000000C   A04E84E3           ORR      R4,R4,#0xA00
   \   00000010   050084E0           ADD      R0,R4,R5
   \   00000014   440100EF           SWI      +324
   1055            GBS_DelTimer(&ptmr);
   \   00000018   050084E0           ADD      R0,R4,R5
   \   0000001C   8C0100EF           SWI      +396
   1056            PlayMusic(GAME_MUSIC);
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000028   ........           B        PlayMusic        ;; tailcall
   1057          }
   1058          
   1059          

   \                                 In segment CODE, align 4, keep-with-next
   1060          void LoseLife()
   1061          {
   \                     LoseLife:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   1062            PlayMusic(LOSE_MUSIC);
   1063            GBS_StartTimerProc(&ptmr,500,PlayMusicOfTime);
   \   00000004   ........           LDR      R4,??DataTable61  ;; ball
   \   00000008   0200A0E3           MOV      R0,#+2
   \   0000000C   ........           BL       PlayMusic
   \   00000010   ........           LDR      R2,??DataTable54  ;; PlayMusicOfTime
   \   00000014   7D1FA0E3           MOV      R1,#+500
   \   00000018   8B0E81E2           ADD      R0,R1,#+2224
   \   0000001C   040080E0           ADD      R0,R0,R4
   \   00000020   4D0000EF           SWI      +77
   \   00000024   68019FE5           LDR      R0,??LoseLife_0  ;; map + 10
   \   00000028   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0B00001A           BNE      ??LoseLife_1
   1064            
   1065            if(map.type==TYPE_NORMAL)
   1066            {
   1067             ball_x=sw/2;
   \   00000034   ........           LDR      R0,??DataTable46  ;; sw
   1068             ball_y=sh-sh/3;
   \   00000038   58219FE5           LDR      R2,??LoseLife_0+0x4  ;; 0x55555556
   \   0000003C   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000040   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000044   C000A0E1           ASR      R0,R0,#+1
   \   00000048   B20BC4E1           STRH     R0,[R4, #+178]
   \   0000004C   ........           LDR      R0,??DataTable47  ;; sh
   \   00000050   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000054   9230C5E0           SMULL    R3,R5,R2,R0
   \   00000058   A01F85E0           ADD      R1,R5,R0, LSR #+31
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   0A0000EA           B        ??LoseLife_2
   1069            }
   1070            else if(map.type==TYPE_BOSS)
   \                     ??LoseLife_1:
   \   00000064   010050E3           CMP      R0,#+1
   \   00000068   0900001A           BNE      ??LoseLife_3
   1071            {
   1072             ball_x=sw/2;
   \   0000006C   ........           LDR      R0,??DataTable46  ;; sw
   \   00000070   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000074   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000078   C000A0E1           ASR      R0,R0,#+1
   \   0000007C   B20BC4E1           STRH     R0,[R4, #+178]
   1073             ball_y=sh/2;
   \   00000080   ........           LDR      R0,??DataTable47  ;; sh
   \   00000084   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000088   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   0000008C   C000A0E1           ASR      R0,R0,#+1
   \                     ??LoseLife_2:
   \   00000090   B40BC4E1           STRH     R0,[R4, #+180]
   1074            }
   1075            if(ball_spy>0) ball_spy=-ball_min_speed; //шарик двигается вверх на минималке
   \                     ??LoseLife_3:
   \   00000094   F80BD4E1           LDRSH    R0,[R4, #+184]
   1076            total_lives--;
   1077            
   1078            if(total_lives<=0) //game over
   \   00000098   ........           LDR      R6,??DataTable52  ;; PressTimerFunc
   \   0000009C   ........           LDR      R7,??DataTable62  ;; lgn
   \   000000A0   F4909FE5           LDR      R9,??LoseLife_0+0x8  ;; `?<Constant "LoseLife[msg: %s]">`
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   6B07D4A5           LDRBGE   R0,[R4, #+1899]
   \   000000AC   B450A0E3           MOV      R5,#+180
   \   000000B0   805E85E3           ORR      R5,R5,#0x800
   \   000000B4   000060A2           RSBGE    R0,R0,#+0
   \   000000B8   B80BC4A1           STRHGE   R0,[R4, #+184]
   \   000000BC   6C07D4E5           LDRB     R0,[R4, #+1900]
   \   000000C0   7A8EA0E3           MOV      R8,#+1952
   \   000000C4   010040E2           SUB      R0,R0,#+1
   \   000000C8   6C07C4E5           STRB     R0,[R4, #+1900]
   \   000000CC   FF0010E2           ANDS     R0,R0,#0xFF
   \   000000D0   0C00001A           BNE      ??LoseLife_4
   1079            {
   1080              cont=0;
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   7D07C4E5           STRB     R0,[R4, #+1917]
   1081              PlayMusic(END_MUSIC);
   \   000000DC   0400A0E3           MOV      R0,#+4
   \   000000E0   ........           BL       PlayMusic
   1082              press_type = PRESS_GAMEOVER;
   1083              sprintf(press_msg,"игра закончена,ваши очки: %d",score);
   \   000000E4   FC2AD4E1           LDRSH    R2,[R4, #+172]
   \   000000E8   0100A0E3           MOV      R0,#+1
   \   000000EC   6E07C4E5           STRB     R0,[R4, #+1902]
   \   000000F0   701089E2           ADD      R1,R9,#+112
   \   000000F4   040088E0           ADD      R0,R8,R4
   \   000000F8   160000EF           SWI      +22
   1084              sprintf(lgn,"LoseLife - game over[msg: %s]",press_msg);log(lgn);
   \   000000FC   042088E0           ADD      R2,R8,R4
   \   00000100   501089E2           ADD      R1,R9,#+80
   \   00000104   180000EA           B        ??LoseLife_5
   1085              TimerRedrawScreen();
   1086              GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   1087              return;
   1088            }
   1089            
   1090            
   1091            press_type = PRESS_LOSELIFE;
   \                     ??LoseLife_4:
   \   00000108   0210A0E3           MOV      R1,#+2
   \   0000010C   6E17C4E5           STRB     R1,[R4, #+1902]
   1092            if(total_lives==1) sprintf(press_msg,perc_s,"осталась одна жизнь");
   \   00000110   010050E3           CMP      R0,#+1
   \   00000114   0400001A           BNE      ??LoseLife_6
   \   00000118   3C2089E2           ADD      R2,R9,#+60
   \   0000011C   050048E2           SUB      R0,R8,#+5
   \   00000120   041080E0           ADD      R1,R0,R4
   \   00000124   040088E0           ADD      R0,R8,R4
   \   00000128   160000EF           SWI      +22
   1093            if(total_lives==2 || total_lives==3 || total_lives==4) sprintf(press_msg,"осталось %d жизни",total_lives);
   \                     ??LoseLife_6:
   \   0000012C   6C27D4E5           LDRB     R2,[R4, #+1900]
   \   00000130   020052E3           CMP      R2,#+2
   \   00000134   03005213           CMPNE    R2,#+3
   \   00000138   04005213           CMPNE    R2,#+4
   \   0000013C   0200001A           BNE      ??LoseLife_7
   \   00000140   281089E2           ADD      R1,R9,#+40
   \   00000144   040088E0           ADD      R0,R8,R4
   \   00000148   160000EF           SWI      +22
   1094            if(total_lives>=5) sprintf(press_msg,"осталось %d жизней",total_lives);
   \                     ??LoseLife_7:
   \   0000014C   6C27D4E5           LDRB     R2,[R4, #+1900]
   \   00000150   050052E3           CMP      R2,#+5
   \   00000154   0200003A           BCC      ??LoseLife_8
   \   00000158   141089E2           ADD      R1,R9,#+20
   \   0000015C   040088E0           ADD      R0,R8,R4
   \   00000160   160000EF           SWI      +22
   1095            
   1096            sprintf(lgn,"LoseLife[msg: %s]",press_msg);log(lgn);
   \                     ??LoseLife_8:
   \   00000164   042088E0           ADD      R2,R8,R4
   \   00000168   0910A0E1           MOV      R1,R9
   \                     ??LoseLife_5:
   \   0000016C   0700A0E1           MOV      R0,R7
   \   00000170   160000EF           SWI      +22
   \   00000174   0700A0E1           MOV      R0,R7
   \   00000178   ........           BL       log
   1097            
   1098              TimerRedrawScreen();
   \   0000017C   ........           BL       TimerRedrawScreen
   1099              GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   \   00000180   0620A0E1           MOV      R2,R6
   \   00000184   0F10A0E3           MOV      R1,#+15
   \   00000188   040085E0           ADD      R0,R5,R4
   \   0000018C   4D0000EF           SWI      +77
   1100          }
   \   00000190   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??LoseLife_0:
   \   00000194   ........           DC32     map + 10
   \   00000198   56555555           DC32     0x55555556
   \   0000019C   ........           DC32     `?<Constant "LoseLife[msg: %s]">`
   1101          
   1102          

   \                                 In segment CODE, align 4, keep-with-next
   1103          void Boss_loselife()
   1104          {
   \                     Boss_loselife:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   1105            PlayMusic(WIN_MUSIC);
   1106            GBS_StartTimerProc(&ptmr,500,PlayMusicOfTime);
   \   00000004   ........           LDR      R4,??DataTable61  ;; ball
   1107            ball_x=W/2;
   1108            ball_y=H/3;
   1109            if(ball_spy<0) ball_spy=-ball_min_speed; //шарик двигается вниз на минималке
   1110            
   1111            map.boss_lives--;
   \   00000008   ........           LDR      R9,??DataTable51  ;; map
   1112            if(map.boss_lives<=0) //game over
   \   0000000C   ........           LDR      R6,??DataTable52  ;; PressTimerFunc
   \   00000010   ........           LDR      R8,??DataTable53  ;; `?<Constant {90, 90, 90, 90}>`
   \   00000014   0300A0E3           MOV      R0,#+3
   \   00000018   ........           BL       PlayMusic
   \   0000001C   ........           LDR      R2,??DataTable54  ;; PlayMusicOfTime
   \   00000020   7D1FA0E3           MOV      R1,#+500
   \   00000024   8B0E81E2           ADD      R0,R1,#+2224
   \   00000028   040080E0           ADD      R0,R0,R4
   \   0000002C   4D0000EF           SWI      +77
   \   00000030   7800A0E3           MOV      R0,#+120
   \   00000034   B20BC4E1           STRH     R0,[R4, #+178]
   \   00000038   6A00A0E3           MOV      R0,#+106
   \   0000003C   B40BC4E1           STRH     R0,[R4, #+180]
   \   00000040   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000044   B450A0E3           MOV      R5,#+180
   \   00000048   805E85E3           ORR      R5,R5,#0x800
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   6B07D445           LDRBMI   R0,[R4, #+1899]
   \   00000054   7A7EA0E3           MOV      R7,#+1952
   \   00000058   00006042           RSBMI    R0,R0,#+0
   \   0000005C   B80BC441           STRHMI   R0,[R4, #+184]
   \   00000060   0C00D9E5           LDRB     R0,[R9, #+12]
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   0C00C9E5           STRB     R0,[R9, #+12]
   \   0000006C   FF0010E2           ANDS     R0,R0,#0xFF
   \   00000070   0500001A           BNE      ??Boss_loselife_0
   1113            {
   1114              sprintf(press_msg,perc_s,"босс сдул");
   \   00000074   B42088E2           ADD      R2,R8,#+180
   \   00000078   050047E2           SUB      R0,R7,#+5
   \   0000007C   041080E0           ADD      R1,R0,R4
   \   00000080   040087E0           ADD      R0,R7,R4
   \   00000084   160000EF           SWI      +22
   1115               TimerRedrawScreen();
   \   00000088   230000EA           B        ??Boss_loselife_1
   1116               GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   1117              return;
   1118            }
   1119            if(map.boss_lives==1) sprintf(press_msg,perc_t,"у босса осталась одна жизнь");
   \                     ??Boss_loselife_0:
   \   0000008C   010050E3           CMP      R0,#+1
   \   00000090   0400001A           BNE      ??Boss_loselife_2
   \   00000094   982088E2           ADD      R2,R8,#+152
   \   00000098   470F45E2           SUB      R0,R5,#+284
   \   0000009C   041080E0           ADD      R1,R0,R4
   \   000000A0   040087E0           ADD      R0,R7,R4
   \   000000A4   160000EF           SWI      +22
   1120            if(map.boss_lives==2 || map.boss_lives==3 || map.boss_lives==4) sprintf(press_msg,"%t %d %t","у босса осталось",map.boss_lives,"жизни");
   \                     ??Boss_loselife_2:
   \   000000A8   0C30D9E5           LDRB     R3,[R9, #+12]
   \   000000AC   020053E3           CMP      R3,#+2
   \   000000B0   03005313           CMPNE    R3,#+3
   \   000000B4   04005313           CMPNE    R3,#+4
   \   000000B8   0600001A           BNE      ??Boss_loselife_3
   \   000000BC   700088E2           ADD      R0,R8,#+112
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   782088E2           ADD      R2,R8,#+120
   \   000000C8   8C1088E2           ADD      R1,R8,#+140
   \   000000CC   040087E0           ADD      R0,R7,R4
   \   000000D0   160000EF           SWI      +22
   \   000000D4   04D08DE2           ADD      SP,SP,#+4
   1121            if(map.boss_lives>=5) sprintf(press_msg,"%t %d %t","у босса осталось",map.boss_lives,"жизней");
   \                     ??Boss_loselife_3:
   \   000000D8   0C30D9E5           LDRB     R3,[R9, #+12]
   \   000000DC   050053E3           CMP      R3,#+5
   \   000000E0   0600003A           BCC      ??Boss_loselife_4
   \   000000E4   680088E2           ADD      R0,R8,#+104
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   782088E2           ADD      R2,R8,#+120
   \   000000F0   8C1088E2           ADD      R1,R8,#+140
   \   000000F4   040087E0           ADD      R0,R7,R4
   \   000000F8   160000EF           SWI      +22
   \   000000FC   04D08DE2           ADD      SP,SP,#+4
   1122            
   1123            sprintf(lgn,"Boss_LoseLife[msg: %s]",press_msg);log(lgn);
   \                     ??Boss_loselife_4:
   \   00000100   ........           LDR      R9,??DataTable62  ;; lgn
   \   00000104   042087E0           ADD      R2,R7,R4
   \   00000108   501088E2           ADD      R1,R8,#+80
   \   0000010C   0900A0E1           MOV      R0,R9
   \   00000110   160000EF           SWI      +22
   \   00000114   0900A0E1           MOV      R0,R9
   \   00000118   ........           BL       log
   1124            
   1125              TimerRedrawScreen();
   \                     ??Boss_loselife_1:
   \   0000011C   ........           BL       TimerRedrawScreen
   1126              GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   \   00000120   0620A0E1           MOV      R2,R6
   \   00000124   0F10A0E3           MOV      R1,#+15
   \   00000128   040085E0           ADD      R0,R5,R4
   \   0000012C   4D0000EF           SWI      +77
   1127          }
   \   00000130   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     brick:
   \   00000000                      DS8 120
   1128          
   1129          
   1130          
   1131          
   1132          int bon_ball; //1 - super ball;2 - ghost ball
   1133          int br_draw_offset;
   \                     br_draw_offset:
   \   00000078                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     boss:
   \   00000000                      DS8 12

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     vtmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     bon_ball:
   \   00000000                      DS8 4
   1134          
   1135          
   1136          
   1137          
   1138          #define NUM_BRICKS 9
   1139          
   1140          
   1141          
   1142          
   1143          
   1144          

   \                                 In segment CODE, align 4, keep-with-next
   1145          void DestroyBrick(char x,char y) //уничтожение брика.
   1146          {
   \                     DestroyBrick:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1147            
   1148            short px,py;
   1149            GetCoordinatiesByLevelPos(x,y,&px,&py);
   1150            char num = GetCell(x,y);
   1151            
   1152            sprintf(lgn,"DestroyBrick[x:%d,y:%d,px:%d,py:%d]",x,y,px,py);log(lgn);
   \   00000004   ........           LDR      R8,??DataTable62  ;; lgn
   1153            
   1154            if(num==1 || num==2 || num==3) {SetCell(x,y,0,&err);score+=20;clean_bricks++;InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;} //на месте исчезновения брика рисуем искры типа
   \   00000008   ........           LDR      R10,??DataTable61  ;; ball
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           LDR      R0,??DataTable64  ;; brick
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   9A90A0E3           MOV      R9,#+154
   \   00000020   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000024   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000028   809F89E3           ORR      R9,R9,#0x200
   \   0000002C   810466E1           SMULBB   R6,R1,R4
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   800167E1           SMULBB   R7,R0,R1
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       GetCell
   \   00000040   E0119FE5           LDR      R1,??DestroyBrick_0  ;; `?<Constant "DestroyBrick[x:%d,y:%...">`
   \   00000044   00B0A0E1           MOV      R11,R0
   \   00000048   0708A0E1           MOV      R0,R7, LSL #+16
   \   0000004C   4008A0E1           MOV      R0,R0, ASR #+16
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   0530A0E1           MOV      R3,R5
   \   00000058   0420A0E1           MOV      R2,R4
   \   0000005C   0608A0E1           MOV      R0,R6, LSL #+16
   \   00000060   4008A0E1           MOV      R0,R0, ASR #+16
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   160000EF           SWI      +22
   \   00000070   0800A0E1           MOV      R0,R8
   \   00000074   ........           BL       log
   \   00000078   4880A0E3           MOV      R8,#+72
   \   0000007C   808E88E3           ORR      R8,R8,#0x800
   \   00000080   01005BE3           CMP      R11,#+1
   \   00000084   08D08DE2           ADD      SP,SP,#+8
   \   00000088   02005B13           CMPNE    R11,#+2
   \   0000008C   03005B13           CMPNE    R11,#+3
   \   00000090   0300001A           BNE      ??DestroyBrick_1
   \   00000094   F40F48E2           SUB      R0,R8,#+976
   \   00000098   0A3080E0           ADD      R3,R0,R10
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   040000EA           B        ??DestroyBrick_2
   1155            if(num==4) {SetCell(x,y,3,&err);score+=20;clean_bricks++;InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;}
   \                     ??DestroyBrick_1:
   \   000000A4   04005BE3           CMP      R11,#+4
   \   000000A8   1600001A           BNE      ??DestroyBrick_3
   \   000000AC   F40F48E2           SUB      R0,R8,#+976
   \   000000B0   0A3080E0           ADD      R3,R0,R10
   \   000000B4   0320A0E3           MOV      R2,#+3
   \                     ??DestroyBrick_2:
   \   000000B8   0510A0E1           MOV      R1,R5
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       SetCell
   \   000000C4   FC0ADAE1           LDRSH    R0,[R10, #+172]
   \   000000C8   140080E2           ADD      R0,R0,#+20
   \   000000CC   BC0ACAE1           STRH     R0,[R10, #+172]
   \   000000D0   FE0ADAE1           LDRSH    R0,[R10, #+174]
   \   000000D4   010080E2           ADD      R0,R0,#+1
   \   000000D8   BE0ACAE1           STRH     R0,[R10, #+174]
   \                     ??DestroyBrick_4:
   \   000000DC   0100A0E3           MOV      R0,#+1
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   0738A0E1           MOV      R3,R7, LSL #+16
   \   000000E8   4338A0E1           MOV      R3,R3, ASR #+16
   \   000000EC   0628A0E1           MOV      R2,R6, LSL #+16
   \   000000F0   4228A0E1           MOV      R2,R2, ASR #+16
   \   000000F4   0910A0E1           MOV      R1,R9
   \   000000F8   0A0088E0           ADD      R0,R8,R10
   \   000000FC   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000100   04D08DE2           ADD      SP,SP,#+4
   \   00000104   F08FBDE8           POP      {R4-R11,PC}
   1156            if(num==5) {SetCell(x,y,4,&err);score+=20;clean_bricks++;InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;}
   \                     ??DestroyBrick_3:
   \   00000108   05005BE3           CMP      R11,#+5
   \   0000010C   0300001A           BNE      ??DestroyBrick_5
   \   00000110   F40F48E2           SUB      R0,R8,#+976
   \   00000114   0A3080E0           ADD      R3,R0,R10
   \   00000118   0420A0E3           MOV      R2,#+4
   \   0000011C   E5FFFFEA           B        ??DestroyBrick_2
   1157            if(num==6) {InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;} //стена
   \                     ??DestroyBrick_5:
   \   00000120   06005BE3           CMP      R11,#+6
   \   00000124   ECFFFF0A           BEQ      ??DestroyBrick_4
   1158            if(num==7) {score+=25;InitBoom(x,y);return;}
   \   00000128   07005BE3           CMP      R11,#+7
   \   0000012C   0600001A           BNE      ??DestroyBrick_6
   \   00000130   FC0ADAE1           LDRSH    R0,[R10, #+172]
   \   00000134   0510A0E1           MOV      R1,R5
   \   00000138   190080E2           ADD      R0,R0,#+25
   \   0000013C   BC0ACAE1           STRH     R0,[R10, #+172]
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   ........           BL       InitBoom
   \   00000148   F08FBDE8           POP      {R4-R11,PC}
   1159            if(num>=20 && num<=35) //бонусы
   \                     ??DestroyBrick_6:
   \   0000014C   14005BE3           CMP      R11,#+20
   \   00000150   F08FBD38           POPCC    {R4-R11,PC}
   \   00000154   24005BE3           CMP      R11,#+36
   \   00000158   F08FBD28           POPCS    {R4-R11,PC}
   1160            {
   1161              char bonusnumber = num-20;
   1162              SetCell(x,y,0,&err); //делаем брик,в который врезались невидимым
   \   0000015C   F40F48E2           SUB      R0,R8,#+976
   \   00000160   0A3080E0           ADD      R3,R0,R10
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0510A0E1           MOV      R1,R5
   \   0000016C   0400A0E1           MOV      R0,R4
   \   00000170   ........           BL       SetCell
   1163              clean_bricks++; //увеличиваем счетчик побитых бриков
   \   00000174   FE0ADAE1           LDRSH    R0,[R10, #+174]
   \   00000178   ECB08BE2           ADD      R11,R11,#+236
   \   0000017C   FFB00BE2           AND      R11,R11,#0xFF
   \   00000180   010080E2           ADD      R0,R0,#+1
   \   00000184   BE0ACAE1           STRH     R0,[R10, #+174]
   1164              score+=25;
   \   00000188   FC0ADAE1           LDRSH    R0,[R10, #+172]
   1165              InitSprite(&brick_sparks,UID_OTHER,px,py,1);
   \   0000018C   0738A0E1           MOV      R3,R7, LSL #+16
   \   00000190   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000194   190080E2           ADD      R0,R0,#+25
   \   00000198   BC0ACAE1           STRH     R0,[R10, #+172]
   \   0000019C   0100A0E3           MOV      R0,#+1
   \   000001A0   01002DE9           PUSH     {R0}
   \   000001A4   0628A0E1           MOV      R2,R6, LSL #+16
   \   000001A8   4228A0E1           MOV      R2,R2, ASR #+16
   \   000001AC   0910A0E1           MOV      R1,R9
   \   000001B0   0A0088E0           ADD      R0,R8,R10
   \   000001B4   ........           _BLF     InitSprite,??InitSprite??rA
   1166              //uid будет у нас номером бонуса :)
   1167              InitMSprite(&bonus[bonusnumber].spr,bonusnumber,px,py,0,3,0,sh-bonus[bonusnumber].spr.img[0]->h); //старт полета бонуса вниз
   \   000001B8   0B00A0E1           MOV      R0,R11
   \   000001BC   2810A0E3           MOV      R1,#+40
   \   000001C0   91A020E0           MLA      R0,R1,R0,R10
   \   000001C4   ........           LDR      R1,??DataTable59  ;; sh
   \   000001C8   E14F48E2           SUB      R4,R8,#+900
   \   000001CC   002094E7           LDR      R2,[R4, +R0]
   \   000001D0   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000001D4   002092E5           LDR      R2,[R2, #+0]
   \   000001D8   0738A0E1           MOV      R3,R7, LSL #+16
   \   000001DC   F220D2E1           LDRSH    R2,[R2, #+2]
   \   000001E0   4338A0E1           MOV      R3,R3, ASR #+16
   \   000001E4   000084E0           ADD      R0,R4,R0
   \   000001E8   021041E0           SUB      R1,R1,R2
   \   000001EC   0118A0E1           MOV      R1,R1, LSL #+16
   \   000001F0   4118A0E1           MOV      R1,R1, ASR #+16
   \   000001F4   02002DE9           PUSH     {R1}
   \   000001F8   0628A0E1           MOV      R2,R6, LSL #+16
   \   000001FC   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000200   0010A0E3           MOV      R1,#+0
   \   00000204   02002DE9           PUSH     {R1}
   \   00000208   0310A0E3           MOV      R1,#+3
   \   0000020C   02002DE9           PUSH     {R1}
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   02002DE9           PUSH     {R1}
   \   00000218   0B10A0E1           MOV      R1,R11
   \   0000021C   ........           _BLF     InitMSprite,??InitMSprite??rA
   \   00000220   14D08DE2           ADD      SP,SP,#+20
   \   00000224   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??DestroyBrick_0:
   \   00000228   ........           DC32     `?<Constant "DestroyBrick[x:%d,y:%...">`
   1168            }
   1169          }
   1170          
   1171          
   1172          
   1173          
   1174          
   1175          
   1176          
   1177          

   \                                 In segment CODE, align 4, keep-with-next
   1178          void SetCell(char x,char y,char value,unsigned int *err)
   1179          {
   1180            *err = 0;
   \                     SetCell:
   \   00000000   00C0A0E3           MOV      R12,#+0
   \   00000004   00C083E5           STR      R12,[R3, #+0]
   1181            if(x>=MAX_WIDTH || y>=MAX_HEIGHT) {*err = 1;return;}
   \   00000008   0F0050E3           CMP      R0,#+15
   \   0000000C   20005133           CMPCC    R1,#+32
   \   00000010   0100A023           MOVCS    R0,#+1
   \   00000014   00008325           STRCS    R0,[R3, #+0]
   \   00000018   1EFF2F21           BXCS     LR
   1182            UsedLevel[y][x] = value;
   \   0000001C   ........           LDR      R3,??DataTable61  ;; ball
   \   00000020   011261E0           RSB      R1,R1,R1, LSL #+4
   \   00000024   031081E0           ADD      R1,R1,R3
   \   00000028   010080E0           ADD      R0,R0,R1
   \   0000002C   7822C0E5           STRB     R2,[R0, #+632]
   1183          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
   1184          

   \                                 In segment CODE, align 4, keep-with-next
   1185          char GetCell(char x,char y)
   1186          {
   \                     GetCell:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1187            if(x<MAX_WIDTH && y<MAX_HEIGHT) return UsedLevel[y][x];
   \   00000004   0020A0E1           MOV      R2,R0
   \   00000008   0130A0E1           MOV      R3,R1
   \   0000000C   0F0050E3           CMP      R0,#+15
   \   00000010   20005133           CMPCC    R1,#+32
   \   00000014   0500002A           BCS      ??GetCell_0
   \   00000018   ........           LDR      R1,??DataTable61  ;; ball
   \   0000001C   030263E0           RSB      R0,R3,R3, LSL #+4
   \   00000020   010080E0           ADD      R0,R0,R1
   \   00000024   000082E0           ADD      R0,R2,R0
   \   00000028   7802D0E5           LDRB     R0,[R0, #+632]
   \   0000002C   1080BDE8           POP      {R4,PC}
   1188            sprintf(lgn,"GetCell(%d,%d) - Error!",x,y);log(lgn);
   \                     ??GetCell_0:
   \   00000030   ........           LDR      R4,??DataTable62  ;; lgn
   \   00000034   14109FE5           LDR      R1,??GetCell_1   ;; `?<Constant "GetCell(%d,%d) - Error!">`
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   160000EF           SWI      +22
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       log
   1189            return 0;
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??GetCell_1:
   \   00000050   ........           DC32     `?<Constant "GetCell(%d,%d) - Error!">`
   1190          }
   1191          
   1192          
   1193          
   1194          
   1195          
   1196          

   \                                 In segment CODE, align 4, keep-with-next
   1197          void DrawBricks()
   1198          {
   \                     DrawBricks:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1199            for(int y=0;y<MAX_HEIGHT;y++)
   \   00000004   ........           LDR      R7,??DataTable63  ;; ball
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   896EA0E3           MOV      R6,#+2192
   \   00000010   9A80A0E3           MOV      R8,#+154
   \   00000014   808F88E3           ORR      R8,R8,#0x200
   1200            {
   1201              for(int x=0;x<MAX_WIDTH;x++)
   \                     ??DrawBricks_0:
   \   00000018   0050A0E3           MOV      R5,#+0
   1202              {
   1203                char num = GetCell(x,y); //ячейка
   1204                if(num>0 && num<9) //норм. брики
   \                     ??DrawBricks_1:
   \   0000001C   ........           LDR      R10,??DataTable64  ;; brick
   \   00000020   FF1004E2           AND      R1,R4,#0xFF
   \   00000024   FF0005E2           AND      R0,R5,#0xFF
   \   00000028   ........           BL       GetCell
   \   0000002C   00B0B0E1           MOVS     R11,R0
   \   00000030   3D00000A           BEQ      ??DrawBricks_2
   \   00000034   090050E3           CMP      R0,#+9
   \   00000038   3B00002A           BCS      ??DrawBricks_2
   1205                {
   1206                  char b_num = num-1;
   \   0000003C   010040E2           SUB      R0,R0,#+1
   \   00000040   FF0000E2           AND      R0,R0,#0xFF
   1207                    brick[b_num].y = br_draw_offset+brick[b_num].img->h*y;
   \   00000044   0C10A0E3           MOV      R1,#+12
   \   00000048   91A029E0           MLA      R9,R1,R0,R10
   \   0000004C   78009AE5           LDR      R0,[R10, #+120]
   \   00000050   001099E5           LDR      R1,[R9, #+0]
   \   00000054   B210D1E1           LDRH     R1,[R1, #+2]
   \   00000058   940120E0           MLA      R0,R4,R1,R0
   \   0000005C   B600C9E1           STRH     R0,[R9, #+6]
   1208                    brick[b_num].x = 0+brick[b_num].img->w*x;
   \   00000060   000099E5           LDR      R0,[R9, #+0]
   \   00000064   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000068   800560E1           SMULBB   R0,R0,R5
   \   0000006C   B400C9E1           STRH     R0,[R9, #+4]
   1209                    DrwImg(brick[b_num].img,brick[b_num].x,brick[b_num].y);
   \   00000070   F410D9E1           LDRSH    R1,[R9, #+4]
   \   00000074   F620D9E1           LDRSH    R2,[R9, #+6]
   \   00000078   000099E5           LDR      R0,[R9, #+0]
   \   0000007C   ........           BL       DrwImg
   1210                    //чекаем шарик на скорость и направление +изменяем их на соответствующие
   1211                    char type = SBhit(brick[b_num],num);
   \   00000080   00082DE9           PUSH     {R11}
   \   00000084   0CD04DE2           SUB      SP,SP,#+12
   \   00000088   000099E5           LDR      R0,[R9, #0]
   \   0000008C   0D10A0E1           MOV      R1,SP
   \   00000090   000081E5           STR      R0,[R1, #+0]
   \   00000094   040099E5           LDR      R0,[R9, #+4]
   \   00000098   040081E5           STR      R0,[R1, #+4]
   \   0000009C   080099E5           LDR      R0,[R9, #+8]
   \   000000A0   080081E5           STR      R0,[R1, #+8]
   \   000000A4   0F00BDE8           POP      {R0-R3}
   \   000000A8   ........           BL       SBhit
   \   000000AC   00A0A0E1           MOV      R10,R0
   1212                    if(CheckAndChangeBallState(brick[b_num],x,y,0)==1 || type>0) //если столкнулись с бриком
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   01002DE9           PUSH     {R0}
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   0CD04DE2           SUB      SP,SP,#+12
   \   000000CC   000099E5           LDR      R0,[R9, #0]
   \   000000D0   0D10A0E1           MOV      R1,SP
   \   000000D4   000081E5           STR      R0,[R1, #+0]
   \   000000D8   040099E5           LDR      R0,[R9, #+4]
   \   000000DC   040081E5           STR      R0,[R1, #+4]
   \   000000E0   080099E5           LDR      R0,[R9, #+8]
   \   000000E4   080081E5           STR      R0,[R1, #+8]
   \   000000E8   0F00BDE8           POP      {R0-R3}
   \   000000EC   ........           BL       CheckAndChangeBallState
   \   000000F0   010050E3           CMP      R0,#+1
   \   000000F4   08D08DE2           ADD      SP,SP,#+8
   \   000000F8   0100000A           BEQ      ??DrawBricks_3
   \   000000FC   0A00B0E1           MOVS     R0,R10
   \   00000100   4C00000A           BEQ      ??DrawBricks_4
   1213                    {
   1214                      DestroyBrick(x,y); //киляем брик
   \                     ??DrawBricks_3:
   \   00000104   FF1004E2           AND      R1,R4,#0xFF
   \   00000108   FF0005E2           AND      R0,R5,#0xFF
   \   0000010C   ........           BL       DestroyBrick
   1215                      //если врезались ракетой,то мутим типа большой взрыв
   1216                      if(type==2) {InitSprite(&rocket_sparks,UID_OTHER,brick[b_num].x,brick[b_num].y,1);InitBoom(x,y);}
   \   00000110   02005AE3           CMP      R10,#+2
   \   00000114   4700001A           BNE      ??DrawBricks_4
   \   00000118   0100A0E3           MOV      R0,#+1
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   F630D9E1           LDRSH    R3,[R9, #+6]
   \   00000124   F420D9E1           LDRSH    R2,[R9, #+4]
   \   00000128   3B0000EA           B        ??DrawBricks_5
   1217                    }
   1218                }
   1219                else if(num>=20 && num<=35) //бонусы
   \                     ??DrawBricks_2:
   \   0000012C   140050E3           CMP      R0,#+20
   \   00000130   4000003A           BCC      ??DrawBricks_4
   \   00000134   240050E3           CMP      R0,#+36
   \   00000138   3E00002A           BCS      ??DrawBricks_4
   1220                {
   1221                  brick[8].y=br_draw_offset+brick[8].img->h*y;                          //установка позиции прорисовки бонусного брика
   \   0000013C   60009AE5           LDR      R0,[R10, #+96]
   \   00000140   78109AE5           LDR      R1,[R10, #+120]
   \   00000144   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000148   941221E0           MLA      R1,R4,R2,R1
   \   0000014C   B616CAE1           STRH     R1,[R10, #+102]
   1222                  brick[8].x=brick[8].img->w*x;                          //установка позиции прорисовки бонусного брика
   \   00000150   F010D0E1           LDRSH    R1,[R0, #+0]
   1223                  DrwImg(brick[8].img,brick[8].x,brick[8].y);   //сама прорисовка, как говорится по месту
   \   00000154   F626DAE1           LDRSH    R2,[R10, #+102]
   \   00000158   810561E1           SMULBB   R1,R1,R5
   \   0000015C   B416CAE1           STRH     R1,[R10, #+100]
   \   00000160   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000164   4118A0E1           MOV      R1,R1, ASR #+16
   \   00000168   ........           BL       DrwImg
   1224                  //чекаем шарик на скорость и направление +изменяем их на соответствующие
   1225                  char type = SBhit(brick[8],num);
   \   0000016C   00082DE9           PUSH     {R11}
   \   00000170   60008AE2           ADD      R0,R10,#+96
   \   00000174   0CD04DE2           SUB      SP,SP,#+12
   \   00000178   001090E5           LDR      R1,[R0, #0]
   \   0000017C   0D20A0E1           MOV      R2,SP
   \   00000180   001082E5           STR      R1,[R2, #+0]
   \   00000184   041090E5           LDR      R1,[R0, #+4]
   \   00000188   041082E5           STR      R1,[R2, #+4]
   \   0000018C   081090E5           LDR      R1,[R0, #+8]
   \   00000190   081082E5           STR      R1,[R2, #+8]
   \   00000194   0F00BDE8           POP      {R0-R3}
   \   00000198   ........           BL       SBhit
   \   0000019C   0090A0E1           MOV      R9,R0
   1226                  if(CheckAndChangeBallState(brick[8],x,y,0)==1 || type>0)
   \   000001A0   0000A0E3           MOV      R0,#+0
   \   000001A4   01002DE9           PUSH     {R0}
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   0500A0E1           MOV      R0,R5
   \   000001B4   01002DE9           PUSH     {R0}
   \   000001B8   0CD04DE2           SUB      SP,SP,#+12
   \   000001BC   0D20A0E1           MOV      R2,SP
   \   000001C0   60008AE2           ADD      R0,R10,#+96
   \   000001C4   001090E5           LDR      R1,[R0, #0]
   \   000001C8   001082E5           STR      R1,[R2, #+0]
   \   000001CC   041090E5           LDR      R1,[R0, #+4]
   \   000001D0   041082E5           STR      R1,[R2, #+4]
   \   000001D4   081090E5           LDR      R1,[R0, #+8]
   \   000001D8   081082E5           STR      R1,[R2, #+8]
   \   000001DC   0F00BDE8           POP      {R0-R3}
   \   000001E0   ........           BL       CheckAndChangeBallState
   \   000001E4   010050E3           CMP      R0,#+1
   \   000001E8   08D08DE2           ADD      SP,SP,#+8
   \   000001EC   0100000A           BEQ      ??DrawBricks_6
   \   000001F0   0900B0E1           MOVS     R0,R9
   \   000001F4   0F00000A           BEQ      ??DrawBricks_4
   1227                  {  
   1228                    DestroyBrick(x,y); //киляем брик
   \                     ??DrawBricks_6:
   \   000001F8   FF1004E2           AND      R1,R4,#0xFF
   \   000001FC   FF0005E2           AND      R0,R5,#0xFF
   \   00000200   ........           BL       DestroyBrick
   1229                    if(type==2) {InitSprite(&rocket_sparks,UID_OTHER,brick[8].x,brick[8].y,1);InitBoom(x,y);}
   \   00000204   020059E3           CMP      R9,#+2
   \   00000208   0A00001A           BNE      ??DrawBricks_4
   \   0000020C   0100A0E3           MOV      R0,#+1
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   F636DAE1           LDRSH    R3,[R10, #+102]
   \   00000218   F426DAE1           LDRSH    R2,[R10, #+100]
   \                     ??DrawBricks_5:
   \   0000021C   0810A0E1           MOV      R1,R8
   \   00000220   070086E0           ADD      R0,R6,R7
   \   00000224   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000228   FF1004E2           AND      R1,R4,#0xFF
   \   0000022C   FF0005E2           AND      R0,R5,#0xFF
   \   00000230   ........           BL       InitBoom
   \   00000234   04D08DE2           ADD      SP,SP,#+4
   1230                  }
   1231                }
   1232              }
   \                     ??DrawBricks_4:
   \   00000238   015085E2           ADD      R5,R5,#+1
   \   0000023C   0F0055E3           CMP      R5,#+15
   \   00000240   75FFFFBA           BLT      ??DrawBricks_1
   1233            }
   \   00000244   014084E2           ADD      R4,R4,#+1
   \   00000248   200054E3           CMP      R4,#+32
   \   0000024C   71FFFFBA           BLT      ??DrawBricks_0
   1234          }
   \   00000250   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1235          
   1236          
   1237          
   1238          
   1239          

   \                                 In segment DATA_Z, align 4, align-sorted
   1240          int ball_a=0; //ускорение шарика,0 - нет ускорения,отрицательные значения = ускорение--
   \                     ball_a:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   1241          int user_a=0;
   \                     user_a:
   \   00000000                      DS8 4
   1242          
   1243          #define NSM -2 //минусовая скорость
   1244          #define NSP 2 //плюсовая скорость
   1245          

   \                                 In segment DATA_Z, align 4, align-sorted
   1246          int ball_spx_accel; //типа изменение угла полета шарика
   \                     ball_spx_accel:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   1247          int ball_spy_accel;
   \                     ball_spy_accel:
   \   00000000                      DS8 4
   1248          
   1249          /*int UBhit()
   1250          {
   1251            //столкновение с левым краем
   1252            if(ball_x+(ball[ball_s].img->w/2) > user_x  &&  ball_x+(ball[ball_s].img->w/2) < user_x+(user[user_s].img->w/3) && ball_y+ball[ball_s].img->h > user_y) return 1;
   1253            //столкновение с центром платформы
   1254            if(ball_x+(ball[ball_s].img->w/2) > user_x+(user[user_s].img->w/3)  &&  ball_x+(ball[ball_s].img->w/2) < user_x+((user[user_s].img->w/3)*2) && ball_y+ball[ball_s].img->h > user_y) return 2;
   1255            //столкновение с правым краем
   1256            if(ball_x+(ball[ball_s].img->w/2) > user_x+((user[user_s].img->w/3)*2)  &&  ball_x+(ball[ball_s].img->w/2) < user_x+user[user_s].img->w && ball_y+ball[ball_s].img->h > user_y) return 3;
   1257            return 0; //если не столкнулись,то выходим с нулем
   1258          }*/
   1259          
   1260          
   1261          

   \                                 In segment CODE, align 4, keep-with-next
   1262          void DrawBall()
   1263          {
   \                     DrawBall:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1264            
   1265          
   1266             if(ball_spy<0 && ball_spx>0) //вправо+вверх
   \   00000004   ........           LDR      R4,??DataTable65  ;; ball
   \   00000008   ........           LDR      R6,??DataTable66  ;; savedata
   \   0000000C   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000010   ........           LDR      R5,??DataTable67  ;; map
   \   00000014   ........           LDR      R7,??DataTable70  ;; sw
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2B00005A           BPL      ??DrawBall_0
   \   00000020   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000024   010051E3           CMP      R1,#+1
   \   00000028   2B0000BA           BLT      ??DrawBall_1
   1267             {
   1268               if(ball_x>=sw-ball[ball_type][ball_s].img->w) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся влево+вверх
   \   0000002C   7187D4E5           LDRB     R8,[R4, #+1905]
   \   00000030   72A7D4E5           LDRB     R10,[R4, #+1906]
   \   00000034   0C90A0E3           MOV      R9,#+12
   \   00000038   F22BD4E1           LDRSH    R2,[R4, #+178]
   \   0000003C   F030D7E1           LDRSH    R3,[R7, #+0]
   \   00000040   24C0A0E3           MOV      R12,#+36
   \   00000044   9C4A2AE0           MLA      R10,R12,R10,R4
   \   00000048   99A828E0           MLA      R8,R9,R8,R10
   1269               
   1270               if(map.type==TYPE_NORMAL) //обычный левел
   \   0000004C   7997D4E5           LDRB     R9,[R4, #+1913]
   \   00000050   008098E5           LDR      R8,[R8, #+0]
   \   00000054   F4ABD4E1           LDRSH    R10,[R4, #+180]
   \   00000058   B080D8E1           LDRH     R8,[R8, #+0]
   \   0000005C   083043E0           SUB      R3,R3,R8
   \   00000060   008060E2           RSB      R8,R0,#+0
   \   00000064   0A00D5E5           LDRB     R0,[R5, #+10]
   \   00000068   030052E1           CMP      R2,R3
   \   0000006C   001061A2           RSBGE    R1,R1,#+0
   \   00000070   B61BC4A1           STRHGE   R1,[R4, #+182]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0300001A           BNE      ??DrawBall_2
   1271               {
   1272                 if(ball_y<=offset1) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вниз
   \   0000007C   0A0059E1           CMP      R9,R10
   \   00000080   150000BA           BLT      ??DrawBall_1
   \   00000084   B88BC4E1           STRH     R8,[R4, #+184]
   \   00000088   100000EA           B        ??DrawBall_0
   1273               }
   1274               else //левел-босс
   1275               {
   1276                 if(BossBallHit())
   \                     ??DrawBall_2:
   \   0000008C   ........           BL       BossBallHit
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0700000A           BEQ      ??DrawBall_3
   1277                 {
   1278                   ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вниз
   \   00000098   B88BC4E1           STRH     R8,[R4, #+184]
   1279                   PlaySnd(SND_USER);
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   ........           BL       PlaySnd
   1280                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   000000A4   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   000000A8   0C00D6E5           LDRB     R0,[R6, #+12]
   \   000000AC   FF1001E2           AND      R1,R1,#0xFF
   \   000000B0   ........           BL       StartVibra
   \   000000B4   050000EA           B        ??DrawBall_0
   1281                 }
   1282                 else
   1283                 if(ball_y<offset1) //босс запарил =)
   \                     ??DrawBall_3:
   \   000000B8   09005AE1           CMP      R10,R9
   \   000000BC   060000AA           BGE      ??DrawBall_1
   1284                 {
   1285                   score+=100;
   \   000000C0   FC0AD4E1           LDRSH    R0,[R4, #+172]
   \   000000C4   640080E2           ADD      R0,R0,#+100
   \   000000C8   BC0AC4E1           STRH     R0,[R4, #+172]
   1286                   Boss_loselife();
   \   000000CC   ........           BL       Boss_loselife
   1287                 }
   1288               }
   1289             }
   1290             
   1291            if(ball_spy<0 && ball_spx<0) //влево+вверх
   \                     ??DrawBall_0:
   \   000000D0   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   2200005A           BPL      ??DrawBall_4
   \                     ??DrawBall_1:
   \   000000DC   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   1F00005A           BPL      ??DrawBall_4
   1292            {
   1293              if(ball_x<=0) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся вправо+вверх
   \   000000E8   F21BD4E1           LDRSH    R1,[R4, #+178]
   1294              
   1295              if(map.type==TYPE_NORMAL) //обычный левел
   \   000000EC   7997D4E5           LDRB     R9,[R4, #+1913]
   \   000000F0   F4ABD4E1           LDRSH    R10,[R4, #+180]
   \   000000F4   010051E3           CMP      R1,#+1
   \   000000F8   000060B2           RSBLT    R0,R0,#+0
   \   000000FC   B60BC4B1           STRHLT   R0,[R4, #+182]
   \   00000100   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000104   008060E2           RSB      R8,R0,#+0
   \   00000108   0A00D5E5           LDRB     R0,[R5, #+10]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0300001A           BNE      ??DrawBall_5
   1296              {
   1297                if(ball_y<offset1) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся влево+вниз
   \   00000114   09005AE1           CMP      R10,R9
   \   00000118   120000AA           BGE      ??DrawBall_4
   \   0000011C   B88BC4E1           STRH     R8,[R4, #+184]
   \   00000120   100000EA           B        ??DrawBall_4
   1298              }
   1299              else
   1300              {
   1301                 if(BossBallHit())
   \                     ??DrawBall_5:
   \   00000124   ........           BL       BossBallHit
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   0700000A           BEQ      ??DrawBall_6
   1302                 {
   1303                   ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся влево+вниз
   \   00000130   B88BC4E1           STRH     R8,[R4, #+184]
   1304                   PlaySnd(SND_USER);
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   ........           BL       PlaySnd
   1305                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   0000013C   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   00000140   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000144   FF1001E2           AND      R1,R1,#0xFF
   \   00000148   ........           BL       StartVibra
   \   0000014C   050000EA           B        ??DrawBall_4
   1306                 }
   1307                 else
   1308                 if(ball_y<=offset1) //босс запарил =)
   \                     ??DrawBall_6:
   \   00000150   0A0059E1           CMP      R9,R10
   \   00000154   030000BA           BLT      ??DrawBall_4
   1309                 {
   1310                   score+=100;
   \   00000158   FC0AD4E1           LDRSH    R0,[R4, #+172]
   \   0000015C   640080E2           ADD      R0,R0,#+100
   \   00000160   BC0AC4E1           STRH     R0,[R4, #+172]
   1311                   Boss_loselife();
   \   00000164   ........           BL       Boss_loselife
   1312                 }
   1313                
   1314                
   1315              }
   1316            }
   1317             
   1318             
   1319            if(bonus_active[BON_SLIME]) //прилипалка активна
   \                     ??DrawBall_4:
   \   00000168   6204D4E5           LDRB     R0,[R4, #+1122]
   \   0000016C   0150A0E3           MOV      R5,#+1
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   1D00000A           BEQ      ??DrawBall_7
   1320            {
   1321              if(UBhit()>0) //столкнулся мяч с юзером
   \   00000178   ........           BL       UBhit
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   1A00000A           BEQ      ??DrawBall_7
   1322              {   
   1323                PlaySnd(SND_USER);
   \   00000184   0000A0E3           MOV      R0,#+0
   \   00000188   ........           BL       PlaySnd
   1324                StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   0000018C   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   00000190   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000194   FF1001E2           AND      R1,R1,#0xFF
   \   00000198   ........           BL       StartVibra
   1325                mem_ball_spx = ball_spx;
   \   0000019C   F60BD4E1           LDRSH    R0,[R4, #+182]
   1326                mem_ball_spy = ball_spy;
   1327                ball_spx = 0;
   1328                ball_spy = 0;
   1329                bon_slime_use = 1; //лишнее это,но так вроде понятнее
   \   000001A0   7C57C4E5           STRB     R5,[R4, #+1916]
   \   000001A4   7A07C4E5           STRB     R0,[R4, #+1914]
   \   000001A8   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   000001AC   7B07C4E5           STRB     R0,[R4, #+1915]
   \   000001B0   0000A0E3           MOV      R0,#+0
   \   000001B4   B60BC4E1           STRH     R0,[R4, #+182]
   \   000001B8   B80BC4E1           STRH     R0,[R4, #+184]
   \                     ??DrawBall_8:
   \   000001BC   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   000001C0   002060E2           RSB      R2,R0,#+0
   \                     ??DrawBall_9:
   \   000001C4   6A17D4E5           LDRB     R1,[R4, #+1898]
   \   000001C8   0100A0E1           MOV      R0,R1
   \   000001CC   010052E1           CMP      R2,R1
   \   000001D0   F82BD4A1           LDRSHGE  R2,[R4, #+184]
   \   000001D4   010052A3           CMPGE    R2,#+1
   1330              }
   1331            }
   1332            
   1333            //так как ^скорости равны нулям,то нижнее условие(и остальные три тоже) не выполнится :)
   1334            if(ball_spy>0 && ball_spx>0) //вправо+вниз
   1335            {
   1336              if(ball_x>=sw-ball[ball_type][ball_s].img->w) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся влево+вниз
   1337              
   1338              if(UBhit()==2)
   1339              {
   1340                   PlaySnd(SND_USER);
   1341                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   1342                
   1343                if(user_r)
   1344                { 
   1345                  //if(ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed)
   1346                  //{
   1347                    if(user_c>5 && user_c<15) {ball_spx+=1;ball_spy+=1;} //прибавляем,так как цикл движения=вправо+вниз(x++ y++)
   1348                    else if(user_c>15 && user_c<25) {ball_spx+=2;ball_spy+=2;} //ускорение шарика
   1349                    else if(user_c>25 && user_c<50) {ball_spx+=3;ball_spy+=3;}
   1350                    
   1351                    //изменяем угол полета по x после столкновения
   1352                    if(user_c>0 && user_c<10) {ball_spx+=1;ball_spy+=0;}
   1353                    else if(user_c>10 && user_c<20) {ball_spx+=2;ball_spy+=0;}
   1354                    else if(user_c>20 && user_c<30) {ball_spx+=3;ball_spy+=0;}
   1355                    else if(user_c>30 && user_c<40) {ball_spx+=4;ball_spy+=0;}
   1356                    else if(user_c>40 && user_c<50) {ball_spx+=5;ball_spy+=0;}
   1357                  //}
   1358                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1359                }
   1360                
   1361                if(user_l)
   1362                {
   1363                  //if(ABS(ball_spx)>ball_min_speed && ABS(ball_spy)>ball_min_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed)
   1364                  //{
   1365                    if(user_c>5 && user_c<15) {ball_spx-=1;ball_spy-=1;} //прибавляем,так как цикл движения=вправо+вниз(x++ y++)
   1366                    else if(user_c>15 && user_c<25) {ball_spx-=2;ball_spy-=2;} //замедление шарика
   1367                    else if(user_c>25 && user_c<50) {ball_spx-=3;ball_spy-=3;}
   1368                    
   1369                    //изменяем угол полета по x после столкновения
   1370                    if(user_c>0 && user_c<10) {ball_spx-=1;ball_spy+=0;}
   1371                    else if(user_c>10 && user_c<20) {ball_spx-=2;ball_spy+=0;}
   1372                    else if(user_c>20 && user_c<30) {ball_spx-=3;ball_spy+=0;}
   1373                    else if(user_c>30 && user_c<40) {ball_spx-=4;ball_spy+=0;}
   1374                    else if(user_c>40 && user_c<50) {ball_spx-=5;ball_spy+=0;}
   1375                  //}
   1376                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   1377                } 
   1378                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх
   1379              }
   1380              
   1381               if(UBhit()==1)
   1382               {
   1383                   PlaySnd(SND_USER);
   1384                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   1385                if(user_r)
   1386                {
   1387                    //изменяем угол полета по x после столкновения
   1388                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   1389                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   1390                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   1391                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   1392                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   1393                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1394                }
   1395                if(user_l)
   1396                {
   1397                     //изменяем угол полета по x после столкновения
   1398                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy-=1;}
   1399                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy-=2;}
   1400                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy-=3;}
   1401                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy-=4;}
   1402                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy-=5;}
   1403                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   1404                }
   1405                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   1406               }
   1407              
   1408               if(UBhit()==3)
   1409               {
   1410                   PlaySnd(SND_USER);
   1411                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   1412                 
   1413                if(user_r)
   1414                {
   1415                    //изменяем угол полета по x после столкновения
   1416                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   1417                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   1418                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   1419                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   1420                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   1421                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   1422                }
   1423                if(user_l)
   1424                {
   1425                     //изменяем угол полета по x после столкновения
   1426                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy-=1;}
   1427                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy-=2;}
   1428                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy-=3;}
   1429                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy-=4;}
   1430                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy-=5;}
   1431                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1432                }
   1433                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   1434               }
   1435            }
   1436            
   1437            
   1438            
   1439            
   1440            
   1441            if(ball_spy>0 && ball_spx<0) //влево+вниз
   1442            {
   1443              //if(ball_x>user_x && ball_x<user_x+user[user_s].img->w && ball_y>user_y-user[user_s].img->h) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся влево+вверх
   1444              
   1445              //if(ball_y>=H-ball[ball_s].img->h) {ball_spx=NSM-ball_a;ball_spy=NSM-ball_a;} //двигаемся влево+вверх
   1446              if(ball_x<=0) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся вправо+вниз
   1447              
   1448              if(UBhit()==2)
   1449              {
   1450                   PlaySnd(SND_USER);
   1451                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   1452                   
   1453                if(user_r)
   1454                {
   1455                  //if(ABS(ball_spx)>ball_min_speed && ABS(ball_spy)>ball_min_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed) 
   1456                  //{
   1457                    //замедляем шарик
   1458                    if(user_c>5 && user_c<15) {ball_spx+=1;ball_spy-=1;}
   1459                    else if(user_c>15 && user_c<25) {ball_spx+=2;ball_spy-=2;}
   1460                    else if(user_c>25 && user_c<50) {ball_spx+=3;ball_spy-=3;}
   1461                    
   1462                    //изменяем угол полета по x после столкновения
   1463                    if(user_c>0 && user_c<10) {ball_spx+=1;ball_spy+=0;}
   1464                    else if(user_c>10 && user_c<20) {ball_spx+=2;ball_spy+=0;}
   1465                    else if(user_c>20 && user_c<30) {ball_spx+=3;ball_spy+=0;}
   1466                    else if(user_c>30 && user_c<40) {ball_spx+=4;ball_spy+=0;}
   1467                    else if(user_c>40 && user_c<50) {ball_spx+=5;ball_spy+=0;}
   1468                    
   1469                  //}
   1470                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   1471                }
   1472                
   1473                if(user_l)
   1474                {
   1475                  //if(ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed) //а тут соответственно ускоряем
   1476                  //{  
   1477                    if(user_c>5 && user_c<15) {ball_spx-=1;ball_spy+=1;}
   1478                    else if(user_c>15 && user_c<25) {ball_spx-=2;ball_spy+=2;}
   1479                    else if(user_c>25 && user_c<50) {ball_spx-=3;ball_spy+=3;}
   1480                    
   1481                     //изменяем угол полета по x после столкновения
   1482                    if(user_c>0 && user_c<10) {ball_spx-=1;ball_spy+=0;}
   1483                    else if(user_c>10 && user_c<20) {ball_spx-=2;ball_spy+=0;}
   1484                    else if(user_c>20 && user_c<30) {ball_spx-=3;ball_spy+=0;}
   1485                    else if(user_c>30 && user_c<40) {ball_spx-=4;ball_spy+=0;}
   1486                    else if(user_c>40 && user_c<50) {ball_spx-=5;ball_spy+=0;}
   1487                  //}
   1488                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1489                } 
   1490                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх
   1491              }
   1492              
   1493               if(UBhit()==1)
   1494               {
   1495                   PlaySnd(SND_USER);
   1496                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   1497                   
   1498                if(user_r)
   1499                {
   1500                    //изменяем угол полета по x после столкновения
   1501                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   1502                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   1503                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   1504                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   1505                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   1506                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1507                }
   1508                if(user_l)
   1509                {
   1510                     //изменяем угол полета по x после столкновения
   1511                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy+=1;}
   1512                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy+=2;}
   1513                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy+=3;}
   1514                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy+=4;}
   1515                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy+=5;}
   1516                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1517                }
   1518                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   1519               }
   1520              
   1521               if(UBhit()==3)
   1522               {
   1523                   PlaySnd(SND_USER);
   1524                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   1525                   
   1526                if(user_r)
   1527                {
   1528                    //изменяем угол полета по x после столкновения
   1529                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   1530                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   1531                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   1532                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   1533                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   1534                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1535                }
   1536                
   1537                if(user_l)
   1538                {
   1539                     //изменяем угол полета по x после столкновения
   1540                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy+=1;}
   1541                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy+=2;}
   1542                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy+=3;}
   1543                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy+=4;}
   1544                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy+=5;}
   1545                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   1546                }
   1547                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   1548               }
   1549            }
   1550            
   1551            
   1552            if(abs(ball_spy)>=ball_max_speed && ball_spy>0) ball_spy=ball_max_speed;
   \   000001D8   B80BC4A1           STRHGE   R0,[R4, #+184]
   1553            if(abs(ball_spy)>=ball_max_speed && ball_spy<0) ball_spy=-ball_max_speed;
   \   000001DC   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000001E0   0360A0E1           MOV      R6,R3
   \   000001E4   010053E3           CMP      R3,#+1
   \   000001E8   006066B2           RSBLT    R6,R6,#+0
   \   000001EC   A80200EA           B        ??DrawBall_10
   \                     ??DrawBall_7:
   \   000001F0   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   000001F4   010050E3           CMP      R0,#+1
   \   000001F8   530100BA           BLT      ??DrawBall_11
   \   000001FC   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000200   010050E3           CMP      R0,#+1
   \   00000204   530100BA           BLT      ??DrawBall_12
   \   00000208   7137D4E5           LDRB     R3,[R4, #+1905]
   \   0000020C   7287D4E5           LDRB     R8,[R4, #+1906]
   \   00000210   F020D7E1           LDRSH    R2,[R7, #+0]
   \   00000214   0C70A0E3           MOV      R7,#+12
   \   00000218   F21BD4E1           LDRSH    R1,[R4, #+178]
   \   0000021C   2490A0E3           MOV      R9,#+36
   \   00000220   994828E0           MLA      R8,R9,R8,R4
   \   00000224   978323E0           MLA      R3,R7,R3,R8
   \   00000228   003093E5           LDR      R3,[R3, #+0]
   \   0000022C   B030D3E1           LDRH     R3,[R3, #+0]
   \   00000230   032042E0           SUB      R2,R2,R3
   \   00000234   020051E1           CMP      R1,R2
   \   00000238   000060A2           RSBGE    R0,R0,#+0
   \   0000023C   B60BC4A1           STRHGE   R0,[R4, #+182]
   \   00000240   ........           BL       UBhit
   \   00000244   020050E3           CMP      R0,#+2
   \   00000248   9500001A           BNE      ??DrawBall_13
   \   0000024C   0000A0E3           MOV      R0,#+0
   \   00000250   ........           BL       PlaySnd
   \   00000254   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   00000258   0C00D6E5           LDRB     R0,[R6, #+12]
   \   0000025C   FF1001E2           AND      R1,R1,#0xFF
   \   00000260   ........           BL       StartVibra
   \   00000264   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   4000000A           BEQ      ??DrawBall_14
   \   00000270   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   00000274   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   00000278   060051E3           CMP      R1,#+6
   \   0000027C   070000BA           BLT      ??DrawBall_15
   \   00000280   0F0051E3           CMP      R1,#+15
   \   00000284   050000AA           BGE      ??DrawBall_15
   \   00000288   012082E2           ADD      R2,R2,#+1
   \   0000028C   B62BC4E1           STRH     R2,[R4, #+182]
   \   00000290   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000294   012082E2           ADD      R2,R2,#+1
   \   00000298   B82BC4E1           STRH     R2,[R4, #+184]
   \   0000029C   150000EA           B        ??DrawBall_16
   \                     ??DrawBall_15:
   \   000002A0   100051E3           CMP      R1,#+16
   \   000002A4   070000BA           BLT      ??DrawBall_17
   \   000002A8   190051E3           CMP      R1,#+25
   \   000002AC   050000AA           BGE      ??DrawBall_17
   \   000002B0   022082E2           ADD      R2,R2,#+2
   \   000002B4   B62BC4E1           STRH     R2,[R4, #+182]
   \   000002B8   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   000002BC   022082E2           ADD      R2,R2,#+2
   \   000002C0   B82BC4E1           STRH     R2,[R4, #+184]
   \   000002C4   110000EA           B        ??DrawBall_18
   \                     ??DrawBall_17:
   \   000002C8   1A0051E3           CMP      R1,#+26
   \   000002CC   070000BA           BLT      ??DrawBall_19
   \   000002D0   320051E3           CMP      R1,#+50
   \   000002D4   130000AA           BGE      ??DrawBall_20
   \   000002D8   032082E2           ADD      R2,R2,#+3
   \   000002DC   B62BC4E1           STRH     R2,[R4, #+182]
   \   000002E0   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   000002E4   032082E2           ADD      R2,R2,#+3
   \   000002E8   B82BC4E1           STRH     R2,[R4, #+184]
   \   000002EC   0D0000EA           B        ??DrawBall_20
   \                     ??DrawBall_19:
   \   000002F0   010051E3           CMP      R1,#+1
   \   000002F4   030000BA           BLT      ??DrawBall_21
   \                     ??DrawBall_16:
   \   000002F8   0A0051E3           CMP      R1,#+10
   \   000002FC   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000300   011081B2           ADDLT    R1,R1,#+1
   \   00000304   160000BA           BLT      ??DrawBall_22
   \                     ??DrawBall_21:
   \   00000308   0B0051E3           CMP      R1,#+11
   \   0000030C   030000BA           BLT      ??DrawBall_23
   \                     ??DrawBall_18:
   \   00000310   140051E3           CMP      R1,#+20
   \   00000314   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000318   021081B2           ADDLT    R1,R1,#+2
   \   0000031C   100000BA           BLT      ??DrawBall_22
   \                     ??DrawBall_23:
   \   00000320   150051E3           CMP      R1,#+21
   \   00000324   030000BA           BLT      ??DrawBall_24
   \                     ??DrawBall_20:
   \   00000328   1E0051E3           CMP      R1,#+30
   \   0000032C   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000330   031081B2           ADDLT    R1,R1,#+3
   \   00000334   0A0000BA           BLT      ??DrawBall_22
   \                     ??DrawBall_24:
   \   00000338   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   0000033C   1F0051E3           CMP      R1,#+31
   \   00000340   020000BA           BLT      ??DrawBall_25
   \   00000344   280051E3           CMP      R1,#+40
   \   00000348   041082B2           ADDLT    R1,R2,#+4
   \   0000034C   040000BA           BLT      ??DrawBall_22
   \                     ??DrawBall_25:
   \   00000350   290051E3           CMP      R1,#+41
   \   00000354   030000BA           BLT      ??DrawBall_26
   \   00000358   320051E3           CMP      R1,#+50
   \   0000035C   010000AA           BGE      ??DrawBall_26
   \   00000360   051082E2           ADD      R1,R2,#+5
   \                     ??DrawBall_22:
   \   00000364   B61BC4E1           STRH     R1,[R4, #+182]
   \                     ??DrawBall_26:
   \   00000368   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   0000036C   001061E2           RSB      R1,R1,#+0
   \   00000370   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_14:
   \   00000374   7327D4E5           LDRB     R2,[R4, #+1907]
   \   00000378   000052E3           CMP      R2,#+0
   \   0000037C   4300000A           BEQ      ??DrawBall_27
   \   00000380   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   00000384   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   00000388   060051E3           CMP      R1,#+6
   \   0000038C   070000BA           BLT      ??DrawBall_28
   \   00000390   0F0051E3           CMP      R1,#+15
   \   00000394   050000AA           BGE      ??DrawBall_28
   \   00000398   013043E2           SUB      R3,R3,#+1
   \   0000039C   B63BC4E1           STRH     R3,[R4, #+182]
   \   000003A0   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000003A4   013043E2           SUB      R3,R3,#+1
   \   000003A8   B83BC4E1           STRH     R3,[R4, #+184]
   \   000003AC   150000EA           B        ??DrawBall_29
   \                     ??DrawBall_28:
   \   000003B0   100051E3           CMP      R1,#+16
   \   000003B4   070000BA           BLT      ??DrawBall_30
   \   000003B8   190051E3           CMP      R1,#+25
   \   000003BC   050000AA           BGE      ??DrawBall_30
   \   000003C0   023043E2           SUB      R3,R3,#+2
   \   000003C4   B63BC4E1           STRH     R3,[R4, #+182]
   \   000003C8   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000003CC   023043E2           SUB      R3,R3,#+2
   \   000003D0   B83BC4E1           STRH     R3,[R4, #+184]
   \   000003D4   110000EA           B        ??DrawBall_31
   \                     ??DrawBall_30:
   \   000003D8   1A0051E3           CMP      R1,#+26
   \   000003DC   070000BA           BLT      ??DrawBall_32
   \   000003E0   320051E3           CMP      R1,#+50
   \   000003E4   130000AA           BGE      ??DrawBall_33
   \   000003E8   033043E2           SUB      R3,R3,#+3
   \   000003EC   B63BC4E1           STRH     R3,[R4, #+182]
   \   000003F0   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000003F4   033043E2           SUB      R3,R3,#+3
   \   000003F8   B83BC4E1           STRH     R3,[R4, #+184]
   \   000003FC   0D0000EA           B        ??DrawBall_33
   \                     ??DrawBall_32:
   \   00000400   010051E3           CMP      R1,#+1
   \   00000404   030000BA           BLT      ??DrawBall_34
   \                     ??DrawBall_29:
   \   00000408   0A0051E3           CMP      R1,#+10
   \   0000040C   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000410   011041B2           SUBLT    R1,R1,#+1
   \   00000414   160000BA           BLT      ??DrawBall_35
   \                     ??DrawBall_34:
   \   00000418   0B0051E3           CMP      R1,#+11
   \   0000041C   030000BA           BLT      ??DrawBall_36
   \                     ??DrawBall_31:
   \   00000420   140051E3           CMP      R1,#+20
   \   00000424   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000428   021041B2           SUBLT    R1,R1,#+2
   \   0000042C   100000BA           BLT      ??DrawBall_35
   \                     ??DrawBall_36:
   \   00000430   150051E3           CMP      R1,#+21
   \   00000434   030000BA           BLT      ??DrawBall_37
   \                     ??DrawBall_33:
   \   00000438   1E0051E3           CMP      R1,#+30
   \   0000043C   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000440   031041B2           SUBLT    R1,R1,#+3
   \   00000444   0A0000BA           BLT      ??DrawBall_35
   \                     ??DrawBall_37:
   \   00000448   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   0000044C   1F0051E3           CMP      R1,#+31
   \   00000450   020000BA           BLT      ??DrawBall_38
   \   00000454   280051E3           CMP      R1,#+40
   \   00000458   041043B2           SUBLT    R1,R3,#+4
   \   0000045C   040000BA           BLT      ??DrawBall_35
   \                     ??DrawBall_38:
   \   00000460   290051E3           CMP      R1,#+41
   \   00000464   030000BA           BLT      ??DrawBall_39
   \   00000468   320051E3           CMP      R1,#+50
   \   0000046C   010000AA           BGE      ??DrawBall_39
   \   00000470   051043E2           SUB      R1,R3,#+5
   \                     ??DrawBall_35:
   \   00000474   B61BC4E1           STRH     R1,[R4, #+182]
   \                     ??DrawBall_39:
   \   00000478   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   0000047C   001061E2           RSB      R1,R1,#+0
   \   00000480   B61BC4E1           STRH     R1,[R4, #+182]
   \   00000484   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000488   001061E2           RSB      R1,R1,#+0
   \   0000048C   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_27:
   \   00000490   000050E3           CMP      R0,#+0
   \   00000494   00005203           CMPEQ    R2,#+0
   \   00000498   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   0000049C   00006002           RSBEQ    R0,R0,#+0
   \   000004A0   B80BC401           STRHEQ   R0,[R4, #+184]
   \                     ??DrawBall_13:
   \   000004A4   ........           BL       UBhit
   \   000004A8   010050E3           CMP      R0,#+1
   \   000004AC   5100001A           BNE      ??DrawBall_40
   \   000004B0   0000A0E3           MOV      R0,#+0
   \   000004B4   ........           BL       PlaySnd
   \   000004B8   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   000004BC   0C00D6E5           LDRB     R0,[R6, #+12]
   \   000004C0   FF1001E2           AND      R1,R1,#0xFF
   \   000004C4   ........           BL       StartVibra
   \   000004C8   7407D4E5           LDRB     R0,[R4, #+1908]
   \   000004CC   000050E3           CMP      R0,#+0
   \   000004D0   1E00000A           BEQ      ??DrawBall_41
   \   000004D4   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   000004D8   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   000004DC   010052E3           CMP      R2,#+1
   \   000004E0   020000BA           BLT      ??DrawBall_42
   \   000004E4   0A0052E3           CMP      R2,#+10
   \   000004E8   011081B2           ADDLT    R1,R1,#+1
   \   000004EC   130000BA           BLT      ??DrawBall_43
   \                     ??DrawBall_42:
   \   000004F0   0B0052E3           CMP      R2,#+11
   \   000004F4   020000BA           BLT      ??DrawBall_44
   \   000004F8   140052E3           CMP      R2,#+20
   \   000004FC   021081B2           ADDLT    R1,R1,#+2
   \   00000500   0E0000BA           BLT      ??DrawBall_43
   \                     ??DrawBall_44:
   \   00000504   150052E3           CMP      R2,#+21
   \   00000508   020000BA           BLT      ??DrawBall_45
   \   0000050C   1E0052E3           CMP      R2,#+30
   \   00000510   031081B2           ADDLT    R1,R1,#+3
   \   00000514   090000BA           BLT      ??DrawBall_43
   \                     ??DrawBall_45:
   \   00000518   1F0052E3           CMP      R2,#+31
   \   0000051C   020000BA           BLT      ??DrawBall_46
   \   00000520   280052E3           CMP      R2,#+40
   \   00000524   041081B2           ADDLT    R1,R1,#+4
   \   00000528   040000BA           BLT      ??DrawBall_43
   \                     ??DrawBall_46:
   \   0000052C   290052E3           CMP      R2,#+41
   \   00000530   030000BA           BLT      ??DrawBall_47
   \   00000534   320052E3           CMP      R2,#+50
   \   00000538   010000AA           BGE      ??DrawBall_47
   \   0000053C   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_43:
   \   00000540   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_47:
   \   00000544   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000548   001061E2           RSB      R1,R1,#+0
   \   0000054C   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_41:
   \   00000550   7317D4E5           LDRB     R1,[R4, #+1907]
   \   00000554   000051E3           CMP      R1,#+0
   \   00000558   2100000A           BEQ      ??DrawBall_48
   \   0000055C   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000560   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000564   010052E3           CMP      R2,#+1
   \   00000568   020000BA           BLT      ??DrawBall_49
   \   0000056C   0A0052E3           CMP      R2,#+10
   \   00000570   012043B2           SUBLT    R2,R3,#+1
   \   00000574   130000BA           BLT      ??DrawBall_50
   \                     ??DrawBall_49:
   \   00000578   0B0052E3           CMP      R2,#+11
   \   0000057C   020000BA           BLT      ??DrawBall_51
   \   00000580   140052E3           CMP      R2,#+20
   \   00000584   022043B2           SUBLT    R2,R3,#+2
   \   00000588   0E0000BA           BLT      ??DrawBall_50
   \                     ??DrawBall_51:
   \   0000058C   150052E3           CMP      R2,#+21
   \   00000590   020000BA           BLT      ??DrawBall_52
   \   00000594   1E0052E3           CMP      R2,#+30
   \   00000598   032043B2           SUBLT    R2,R3,#+3
   \   0000059C   090000BA           BLT      ??DrawBall_50
   \                     ??DrawBall_52:
   \   000005A0   1F0052E3           CMP      R2,#+31
   \   000005A4   020000BA           BLT      ??DrawBall_53
   \   000005A8   280052E3           CMP      R2,#+40
   \   000005AC   042043B2           SUBLT    R2,R3,#+4
   \   000005B0   040000BA           BLT      ??DrawBall_50
   \                     ??DrawBall_53:
   \   000005B4   290052E3           CMP      R2,#+41
   \   000005B8   030000BA           BLT      ??DrawBall_54
   \   000005BC   320052E3           CMP      R2,#+50
   \   000005C0   010000AA           BGE      ??DrawBall_54
   \   000005C4   052043E2           SUB      R2,R3,#+5
   \                     ??DrawBall_50:
   \   000005C8   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_54:
   \   000005CC   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   000005D0   002062E2           RSB      R2,R2,#+0
   \   000005D4   B62BC4E1           STRH     R2,[R4, #+182]
   \   000005D8   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   000005DC   002062E2           RSB      R2,R2,#+0
   \   000005E0   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_48:
   \   000005E4   000050E3           CMP      R0,#+0
   \   000005E8   00005103           CMPEQ    R1,#+0
   \   000005EC   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   000005F0   00006002           RSBEQ    R0,R0,#+0
   \   000005F4   B80BC401           STRHEQ   R0,[R4, #+184]
   \                     ??DrawBall_40:
   \   000005F8   ........           BL       UBhit
   \   000005FC   030050E3           CMP      R0,#+3
   \   00000600   5100001A           BNE      ??DrawBall_11
   \   00000604   0000A0E3           MOV      R0,#+0
   \   00000608   ........           BL       PlaySnd
   \   0000060C   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   00000610   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000614   FF1001E2           AND      R1,R1,#0xFF
   \   00000618   ........           BL       StartVibra
   \   0000061C   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000620   000050E3           CMP      R0,#+0
   \   00000624   1E00000A           BEQ      ??DrawBall_55
   \   00000628   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   0000062C   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000630   010052E3           CMP      R2,#+1
   \   00000634   020000BA           BLT      ??DrawBall_56
   \   00000638   0A0052E3           CMP      R2,#+10
   \   0000063C   011081B2           ADDLT    R1,R1,#+1
   \   00000640   130000BA           BLT      ??DrawBall_57
   \                     ??DrawBall_56:
   \   00000644   0B0052E3           CMP      R2,#+11
   \   00000648   020000BA           BLT      ??DrawBall_58
   \   0000064C   140052E3           CMP      R2,#+20
   \   00000650   021081B2           ADDLT    R1,R1,#+2
   \   00000654   0E0000BA           BLT      ??DrawBall_57
   \                     ??DrawBall_58:
   \   00000658   150052E3           CMP      R2,#+21
   \   0000065C   020000BA           BLT      ??DrawBall_59
   \   00000660   1E0052E3           CMP      R2,#+30
   \   00000664   031081B2           ADDLT    R1,R1,#+3
   \   00000668   090000BA           BLT      ??DrawBall_57
   \                     ??DrawBall_59:
   \   0000066C   1F0052E3           CMP      R2,#+31
   \   00000670   020000BA           BLT      ??DrawBall_60
   \   00000674   280052E3           CMP      R2,#+40
   \   00000678   041081B2           ADDLT    R1,R1,#+4
   \   0000067C   040000BA           BLT      ??DrawBall_57
   \                     ??DrawBall_60:
   \   00000680   290052E3           CMP      R2,#+41
   \   00000684   030000BA           BLT      ??DrawBall_61
   \   00000688   320052E3           CMP      R2,#+50
   \   0000068C   010000AA           BGE      ??DrawBall_61
   \   00000690   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_57:
   \   00000694   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_61:
   \   00000698   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   0000069C   001061E2           RSB      R1,R1,#+0
   \   000006A0   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_55:
   \   000006A4   7317D4E5           LDRB     R1,[R4, #+1907]
   \   000006A8   000051E3           CMP      R1,#+0
   \   000006AC   2100000A           BEQ      ??DrawBall_62
   \   000006B0   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   000006B4   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000006B8   010052E3           CMP      R2,#+1
   \   000006BC   020000BA           BLT      ??DrawBall_63
   \   000006C0   0A0052E3           CMP      R2,#+10
   \   000006C4   012043B2           SUBLT    R2,R3,#+1
   \   000006C8   130000BA           BLT      ??DrawBall_64
   \                     ??DrawBall_63:
   \   000006CC   0B0052E3           CMP      R2,#+11
   \   000006D0   020000BA           BLT      ??DrawBall_65
   \   000006D4   140052E3           CMP      R2,#+20
   \   000006D8   022043B2           SUBLT    R2,R3,#+2
   \   000006DC   0E0000BA           BLT      ??DrawBall_64
   \                     ??DrawBall_65:
   \   000006E0   150052E3           CMP      R2,#+21
   \   000006E4   020000BA           BLT      ??DrawBall_66
   \   000006E8   1E0052E3           CMP      R2,#+30
   \   000006EC   032043B2           SUBLT    R2,R3,#+3
   \   000006F0   090000BA           BLT      ??DrawBall_64
   \                     ??DrawBall_66:
   \   000006F4   1F0052E3           CMP      R2,#+31
   \   000006F8   020000BA           BLT      ??DrawBall_67
   \   000006FC   280052E3           CMP      R2,#+40
   \   00000700   042043B2           SUBLT    R2,R3,#+4
   \   00000704   040000BA           BLT      ??DrawBall_64
   \                     ??DrawBall_67:
   \   00000708   290052E3           CMP      R2,#+41
   \   0000070C   030000BA           BLT      ??DrawBall_68
   \   00000710   320052E3           CMP      R2,#+50
   \   00000714   010000AA           BGE      ??DrawBall_68
   \   00000718   052043E2           SUB      R2,R3,#+5
   \                     ??DrawBall_64:
   \   0000071C   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_68:
   \   00000720   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   00000724   002062E2           RSB      R2,R2,#+0
   \   00000728   B62BC4E1           STRH     R2,[R4, #+182]
   \   0000072C   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000730   002062E2           RSB      R2,R2,#+0
   \   00000734   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_62:
   \   00000738   000050E3           CMP      R0,#+0
   \   0000073C   00005103           CMPEQ    R1,#+0
   \   00000740   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000744   00006002           RSBEQ    R0,R0,#+0
   \   00000748   B80BC401           STRHEQ   R0,[R4, #+184]
   \                     ??DrawBall_11:
   \   0000074C   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000750   010050E3           CMP      R0,#+1
   \   00000754   490100BA           BLT      ??DrawBall_69
   \                     ??DrawBall_12:
   \   00000758   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   0000075C   000050E3           CMP      R0,#+0
   \   00000760   4901005A           BPL      ??DrawBall_70
   \   00000764   F21BD4E1           LDRSH    R1,[R4, #+178]
   \   00000768   010051E3           CMP      R1,#+1
   \   0000076C   000060B2           RSBLT    R0,R0,#+0
   \   00000770   B60BC4B1           STRHLT   R0,[R4, #+182]
   \   00000774   ........           BL       UBhit
   \   00000778   020050E3           CMP      R0,#+2
   \   0000077C   9500001A           BNE      ??DrawBall_71
   \   00000780   0000A0E3           MOV      R0,#+0
   \   00000784   ........           BL       PlaySnd
   \   00000788   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   0000078C   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000790   FF1001E2           AND      R1,R1,#0xFF
   \   00000794   ........           BL       StartVibra
   \   00000798   7407D4E5           LDRB     R0,[R4, #+1908]
   \   0000079C   000050E3           CMP      R0,#+0
   \   000007A0   4300000A           BEQ      ??DrawBall_72
   \   000007A4   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   000007A8   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   000007AC   060051E3           CMP      R1,#+6
   \   000007B0   070000BA           BLT      ??DrawBall_73
   \   000007B4   0F0051E3           CMP      R1,#+15
   \   000007B8   050000AA           BGE      ??DrawBall_73
   \   000007BC   012082E2           ADD      R2,R2,#+1
   \   000007C0   B62BC4E1           STRH     R2,[R4, #+182]
   \   000007C4   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   000007C8   012042E2           SUB      R2,R2,#+1
   \   000007CC   B82BC4E1           STRH     R2,[R4, #+184]
   \   000007D0   150000EA           B        ??DrawBall_74
   \                     ??DrawBall_73:
   \   000007D4   100051E3           CMP      R1,#+16
   \   000007D8   070000BA           BLT      ??DrawBall_75
   \   000007DC   190051E3           CMP      R1,#+25
   \   000007E0   050000AA           BGE      ??DrawBall_75
   \   000007E4   022082E2           ADD      R2,R2,#+2
   \   000007E8   B62BC4E1           STRH     R2,[R4, #+182]
   \   000007EC   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   000007F0   022042E2           SUB      R2,R2,#+2
   \   000007F4   B82BC4E1           STRH     R2,[R4, #+184]
   \   000007F8   110000EA           B        ??DrawBall_76
   \                     ??DrawBall_75:
   \   000007FC   1A0051E3           CMP      R1,#+26
   \   00000800   070000BA           BLT      ??DrawBall_77
   \   00000804   320051E3           CMP      R1,#+50
   \   00000808   130000AA           BGE      ??DrawBall_78
   \   0000080C   032082E2           ADD      R2,R2,#+3
   \   00000810   B62BC4E1           STRH     R2,[R4, #+182]
   \   00000814   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000818   032042E2           SUB      R2,R2,#+3
   \   0000081C   B82BC4E1           STRH     R2,[R4, #+184]
   \   00000820   0D0000EA           B        ??DrawBall_78
   \                     ??DrawBall_77:
   \   00000824   010051E3           CMP      R1,#+1
   \   00000828   030000BA           BLT      ??DrawBall_79
   \                     ??DrawBall_74:
   \   0000082C   0A0051E3           CMP      R1,#+10
   \   00000830   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000834   011081B2           ADDLT    R1,R1,#+1
   \   00000838   160000BA           BLT      ??DrawBall_80
   \                     ??DrawBall_79:
   \   0000083C   0B0051E3           CMP      R1,#+11
   \   00000840   030000BA           BLT      ??DrawBall_81
   \                     ??DrawBall_76:
   \   00000844   140051E3           CMP      R1,#+20
   \   00000848   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   0000084C   021081B2           ADDLT    R1,R1,#+2
   \   00000850   100000BA           BLT      ??DrawBall_80
   \                     ??DrawBall_81:
   \   00000854   150051E3           CMP      R1,#+21
   \   00000858   030000BA           BLT      ??DrawBall_82
   \                     ??DrawBall_78:
   \   0000085C   1E0051E3           CMP      R1,#+30
   \   00000860   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000864   031081B2           ADDLT    R1,R1,#+3
   \   00000868   0A0000BA           BLT      ??DrawBall_80
   \                     ??DrawBall_82:
   \   0000086C   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   00000870   1F0051E3           CMP      R1,#+31
   \   00000874   020000BA           BLT      ??DrawBall_83
   \   00000878   280051E3           CMP      R1,#+40
   \   0000087C   041082B2           ADDLT    R1,R2,#+4
   \   00000880   040000BA           BLT      ??DrawBall_80
   \                     ??DrawBall_83:
   \   00000884   290051E3           CMP      R1,#+41
   \   00000888   030000BA           BLT      ??DrawBall_84
   \   0000088C   320051E3           CMP      R1,#+50
   \   00000890   010000AA           BGE      ??DrawBall_84
   \   00000894   051082E2           ADD      R1,R2,#+5
   \                     ??DrawBall_80:
   \   00000898   B61BC4E1           STRH     R1,[R4, #+182]
   \                     ??DrawBall_84:
   \   0000089C   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   000008A0   001061E2           RSB      R1,R1,#+0
   \   000008A4   B61BC4E1           STRH     R1,[R4, #+182]
   \   000008A8   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   000008AC   001061E2           RSB      R1,R1,#+0
   \   000008B0   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_72:
   \   000008B4   7327D4E5           LDRB     R2,[R4, #+1907]
   \   000008B8   000052E3           CMP      R2,#+0
   \   000008BC   4000000A           BEQ      ??DrawBall_85
   \   000008C0   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   000008C4   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   000008C8   060051E3           CMP      R1,#+6
   \   000008CC   070000BA           BLT      ??DrawBall_86
   \   000008D0   0F0051E3           CMP      R1,#+15
   \   000008D4   050000AA           BGE      ??DrawBall_86
   \   000008D8   013043E2           SUB      R3,R3,#+1
   \   000008DC   B63BC4E1           STRH     R3,[R4, #+182]
   \   000008E0   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000008E4   013083E2           ADD      R3,R3,#+1
   \   000008E8   B83BC4E1           STRH     R3,[R4, #+184]
   \   000008EC   150000EA           B        ??DrawBall_87
   \                     ??DrawBall_86:
   \   000008F0   100051E3           CMP      R1,#+16
   \   000008F4   070000BA           BLT      ??DrawBall_88
   \   000008F8   190051E3           CMP      R1,#+25
   \   000008FC   050000AA           BGE      ??DrawBall_88
   \   00000900   023043E2           SUB      R3,R3,#+2
   \   00000904   B63BC4E1           STRH     R3,[R4, #+182]
   \   00000908   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   0000090C   023083E2           ADD      R3,R3,#+2
   \   00000910   B83BC4E1           STRH     R3,[R4, #+184]
   \   00000914   110000EA           B        ??DrawBall_89
   \                     ??DrawBall_88:
   \   00000918   1A0051E3           CMP      R1,#+26
   \   0000091C   070000BA           BLT      ??DrawBall_90
   \   00000920   320051E3           CMP      R1,#+50
   \   00000924   130000AA           BGE      ??DrawBall_91
   \   00000928   033043E2           SUB      R3,R3,#+3
   \   0000092C   B63BC4E1           STRH     R3,[R4, #+182]
   \   00000930   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000934   033083E2           ADD      R3,R3,#+3
   \   00000938   B83BC4E1           STRH     R3,[R4, #+184]
   \   0000093C   0D0000EA           B        ??DrawBall_91
   \                     ??DrawBall_90:
   \   00000940   010051E3           CMP      R1,#+1
   \   00000944   030000BA           BLT      ??DrawBall_92
   \                     ??DrawBall_87:
   \   00000948   0A0051E3           CMP      R1,#+10
   \   0000094C   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000950   011041B2           SUBLT    R1,R1,#+1
   \   00000954   160000BA           BLT      ??DrawBall_93
   \                     ??DrawBall_92:
   \   00000958   0B0051E3           CMP      R1,#+11
   \   0000095C   030000BA           BLT      ??DrawBall_94
   \                     ??DrawBall_89:
   \   00000960   140051E3           CMP      R1,#+20
   \   00000964   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000968   021041B2           SUBLT    R1,R1,#+2
   \   0000096C   100000BA           BLT      ??DrawBall_93
   \                     ??DrawBall_94:
   \   00000970   150051E3           CMP      R1,#+21
   \   00000974   030000BA           BLT      ??DrawBall_95
   \                     ??DrawBall_91:
   \   00000978   1E0051E3           CMP      R1,#+30
   \   0000097C   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000980   031041B2           SUBLT    R1,R1,#+3
   \   00000984   0A0000BA           BLT      ??DrawBall_93
   \                     ??DrawBall_95:
   \   00000988   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   0000098C   1F0051E3           CMP      R1,#+31
   \   00000990   020000BA           BLT      ??DrawBall_96
   \   00000994   280051E3           CMP      R1,#+40
   \   00000998   041043B2           SUBLT    R1,R3,#+4
   \   0000099C   040000BA           BLT      ??DrawBall_93
   \                     ??DrawBall_96:
   \   000009A0   290051E3           CMP      R1,#+41
   \   000009A4   030000BA           BLT      ??DrawBall_97
   \   000009A8   320051E3           CMP      R1,#+50
   \   000009AC   010000AA           BGE      ??DrawBall_97
   \   000009B0   051043E2           SUB      R1,R3,#+5
   \                     ??DrawBall_93:
   \   000009B4   B61BC4E1           STRH     R1,[R4, #+182]
   \                     ??DrawBall_97:
   \   000009B8   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   000009BC   001061E2           RSB      R1,R1,#+0
   \   000009C0   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_85:
   \   000009C4   000050E3           CMP      R0,#+0
   \   000009C8   00005203           CMPEQ    R2,#+0
   \   000009CC   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   000009D0   00006002           RSBEQ    R0,R0,#+0
   \   000009D4   B80BC401           STRHEQ   R0,[R4, #+184]
   \                     ??DrawBall_71:
   \   000009D8   ........           BL       UBhit
   \   000009DC   010050E3           CMP      R0,#+1
   \   000009E0   5100001A           BNE      ??DrawBall_98
   \   000009E4   0000A0E3           MOV      R0,#+0
   \   000009E8   ........           BL       PlaySnd
   \   000009EC   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   000009F0   0C00D6E5           LDRB     R0,[R6, #+12]
   \   000009F4   FF1001E2           AND      R1,R1,#0xFF
   \   000009F8   ........           BL       StartVibra
   \   000009FC   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000A00   000050E3           CMP      R0,#+0
   \   00000A04   2100000A           BEQ      ??DrawBall_99
   \   00000A08   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000A0C   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000A10   010052E3           CMP      R2,#+1
   \   00000A14   020000BA           BLT      ??DrawBall_100
   \   00000A18   0A0052E3           CMP      R2,#+10
   \   00000A1C   011081B2           ADDLT    R1,R1,#+1
   \   00000A20   130000BA           BLT      ??DrawBall_101
   \                     ??DrawBall_100:
   \   00000A24   0B0052E3           CMP      R2,#+11
   \   00000A28   020000BA           BLT      ??DrawBall_102
   \   00000A2C   140052E3           CMP      R2,#+20
   \   00000A30   021081B2           ADDLT    R1,R1,#+2
   \   00000A34   0E0000BA           BLT      ??DrawBall_101
   \                     ??DrawBall_102:
   \   00000A38   150052E3           CMP      R2,#+21
   \   00000A3C   020000BA           BLT      ??DrawBall_103
   \   00000A40   1E0052E3           CMP      R2,#+30
   \   00000A44   031081B2           ADDLT    R1,R1,#+3
   \   00000A48   090000BA           BLT      ??DrawBall_101
   \                     ??DrawBall_103:
   \   00000A4C   1F0052E3           CMP      R2,#+31
   \   00000A50   020000BA           BLT      ??DrawBall_104
   \   00000A54   280052E3           CMP      R2,#+40
   \   00000A58   041081B2           ADDLT    R1,R1,#+4
   \   00000A5C   040000BA           BLT      ??DrawBall_101
   \                     ??DrawBall_104:
   \   00000A60   290052E3           CMP      R2,#+41
   \   00000A64   030000BA           BLT      ??DrawBall_105
   \   00000A68   320052E3           CMP      R2,#+50
   \   00000A6C   010000AA           BGE      ??DrawBall_105
   \   00000A70   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_101:
   \   00000A74   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_105:
   \   00000A78   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000A7C   001061E2           RSB      R1,R1,#+0
   \   00000A80   B61BC4E1           STRH     R1,[R4, #+182]
   \   00000A84   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000A88   001061E2           RSB      R1,R1,#+0
   \   00000A8C   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_99:
   \   00000A90   7317D4E5           LDRB     R1,[R4, #+1907]
   \   00000A94   000051E3           CMP      R1,#+0
   \   00000A98   1E00000A           BEQ      ??DrawBall_106
   \   00000A9C   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000AA0   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000AA4   010052E3           CMP      R2,#+1
   \   00000AA8   020000BA           BLT      ??DrawBall_107
   \   00000AAC   0A0052E3           CMP      R2,#+10
   \   00000AB0   012083B2           ADDLT    R2,R3,#+1
   \   00000AB4   130000BA           BLT      ??DrawBall_108
   \                     ??DrawBall_107:
   \   00000AB8   0B0052E3           CMP      R2,#+11
   \   00000ABC   020000BA           BLT      ??DrawBall_109
   \   00000AC0   140052E3           CMP      R2,#+20
   \   00000AC4   022083B2           ADDLT    R2,R3,#+2
   \   00000AC8   0E0000BA           BLT      ??DrawBall_108
   \                     ??DrawBall_109:
   \   00000ACC   150052E3           CMP      R2,#+21
   \   00000AD0   020000BA           BLT      ??DrawBall_110
   \   00000AD4   1E0052E3           CMP      R2,#+30
   \   00000AD8   032083B2           ADDLT    R2,R3,#+3
   \   00000ADC   090000BA           BLT      ??DrawBall_108
   \                     ??DrawBall_110:
   \   00000AE0   1F0052E3           CMP      R2,#+31
   \   00000AE4   020000BA           BLT      ??DrawBall_111
   \   00000AE8   280052E3           CMP      R2,#+40
   \   00000AEC   042083B2           ADDLT    R2,R3,#+4
   \   00000AF0   040000BA           BLT      ??DrawBall_108
   \                     ??DrawBall_111:
   \   00000AF4   290052E3           CMP      R2,#+41
   \   00000AF8   030000BA           BLT      ??DrawBall_112
   \   00000AFC   320052E3           CMP      R2,#+50
   \   00000B00   010000AA           BGE      ??DrawBall_112
   \   00000B04   052083E2           ADD      R2,R3,#+5
   \                     ??DrawBall_108:
   \   00000B08   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_112:
   \   00000B0C   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000B10   002062E2           RSB      R2,R2,#+0
   \   00000B14   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_106:
   \   00000B18   000050E3           CMP      R0,#+0
   \   00000B1C   00005103           CMPEQ    R1,#+0
   \   00000B20   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000B24   00006002           RSBEQ    R0,R0,#+0
   \   00000B28   B80BC401           STRHEQ   R0,[R4, #+184]
   \                     ??DrawBall_98:
   \   00000B2C   ........           BL       UBhit
   \   00000B30   030050E3           CMP      R0,#+3
   \   00000B34   5100001A           BNE      ??DrawBall_69
   \   00000B38   0000A0E3           MOV      R0,#+0
   \   00000B3C   ........           BL       PlaySnd
   \   00000B40   FE10D6E1           LDRSH    R1,[R6, #+14]
   \   00000B44   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000B48   FF1001E2           AND      R1,R1,#0xFF
   \   00000B4C   ........           BL       StartVibra
   \   00000B50   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000B54   000050E3           CMP      R0,#+0
   \   00000B58   2100000A           BEQ      ??DrawBall_113
   \   00000B5C   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000B60   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000B64   010052E3           CMP      R2,#+1
   \   00000B68   020000BA           BLT      ??DrawBall_114
   \   00000B6C   0A0052E3           CMP      R2,#+10
   \   00000B70   011081B2           ADDLT    R1,R1,#+1
   \   00000B74   130000BA           BLT      ??DrawBall_115
   \                     ??DrawBall_114:
   \   00000B78   0B0052E3           CMP      R2,#+11
   \   00000B7C   020000BA           BLT      ??DrawBall_116
   \   00000B80   140052E3           CMP      R2,#+20
   \   00000B84   021081B2           ADDLT    R1,R1,#+2
   \   00000B88   0E0000BA           BLT      ??DrawBall_115
   \                     ??DrawBall_116:
   \   00000B8C   150052E3           CMP      R2,#+21
   \   00000B90   020000BA           BLT      ??DrawBall_117
   \   00000B94   1E0052E3           CMP      R2,#+30
   \   00000B98   031081B2           ADDLT    R1,R1,#+3
   \   00000B9C   090000BA           BLT      ??DrawBall_115
   \                     ??DrawBall_117:
   \   00000BA0   1F0052E3           CMP      R2,#+31
   \   00000BA4   020000BA           BLT      ??DrawBall_118
   \   00000BA8   280052E3           CMP      R2,#+40
   \   00000BAC   041081B2           ADDLT    R1,R1,#+4
   \   00000BB0   040000BA           BLT      ??DrawBall_115
   \                     ??DrawBall_118:
   \   00000BB4   290052E3           CMP      R2,#+41
   \   00000BB8   030000BA           BLT      ??DrawBall_119
   \   00000BBC   320052E3           CMP      R2,#+50
   \   00000BC0   010000AA           BGE      ??DrawBall_119
   \   00000BC4   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_115:
   \   00000BC8   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_119:
   \   00000BCC   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000BD0   001061E2           RSB      R1,R1,#+0
   \   00000BD4   B61BC4E1           STRH     R1,[R4, #+182]
   \   00000BD8   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000BDC   001061E2           RSB      R1,R1,#+0
   \   00000BE0   B81BC4E1           STRH     R1,[R4, #+184]
   \                     ??DrawBall_113:
   \   00000BE4   7317D4E5           LDRB     R1,[R4, #+1907]
   \   00000BE8   000051E3           CMP      R1,#+0
   \   00000BEC   1E00000A           BEQ      ??DrawBall_120
   \   00000BF0   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000BF4   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000BF8   010052E3           CMP      R2,#+1
   \   00000BFC   020000BA           BLT      ??DrawBall_121
   \   00000C00   0A0052E3           CMP      R2,#+10
   \   00000C04   012083B2           ADDLT    R2,R3,#+1
   \   00000C08   130000BA           BLT      ??DrawBall_122
   \                     ??DrawBall_121:
   \   00000C0C   0B0052E3           CMP      R2,#+11
   \   00000C10   020000BA           BLT      ??DrawBall_123
   \   00000C14   140052E3           CMP      R2,#+20
   \   00000C18   022083B2           ADDLT    R2,R3,#+2
   \   00000C1C   0E0000BA           BLT      ??DrawBall_122
   \                     ??DrawBall_123:
   \   00000C20   150052E3           CMP      R2,#+21
   \   00000C24   020000BA           BLT      ??DrawBall_124
   \   00000C28   1E0052E3           CMP      R2,#+30
   \   00000C2C   032083B2           ADDLT    R2,R3,#+3
   \   00000C30   090000BA           BLT      ??DrawBall_122
   \                     ??DrawBall_124:
   \   00000C34   1F0052E3           CMP      R2,#+31
   \   00000C38   020000BA           BLT      ??DrawBall_125
   \   00000C3C   280052E3           CMP      R2,#+40
   \   00000C40   042083B2           ADDLT    R2,R3,#+4
   \   00000C44   040000BA           BLT      ??DrawBall_122
   \                     ??DrawBall_125:
   \   00000C48   290052E3           CMP      R2,#+41
   \   00000C4C   030000BA           BLT      ??DrawBall_126
   \   00000C50   320052E3           CMP      R2,#+50
   \   00000C54   010000AA           BGE      ??DrawBall_126
   \   00000C58   052083E2           ADD      R2,R3,#+5
   \                     ??DrawBall_122:
   \   00000C5C   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_126:
   \   00000C60   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000C64   002062E2           RSB      R2,R2,#+0
   \   00000C68   B82BC4E1           STRH     R2,[R4, #+184]
   \                     ??DrawBall_120:
   \   00000C6C   000050E3           CMP      R0,#+0
   \   00000C70   00005103           CMPEQ    R1,#+0
   \   00000C74   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000C78   00006002           RSBEQ    R0,R0,#+0
   \   00000C7C   B80BC401           STRHEQ   R0,[R4, #+184]
   \                     ??DrawBall_69:
   \   00000C80   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000C84   010050E3           CMP      R0,#+1
   \   00000C88   4BFDFFBA           BLT      ??DrawBall_8
   \                     ??DrawBall_70:
   \   00000C8C   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000C90   4BFDFFEA           B        ??DrawBall_9
   \                     ??DrawBall_10:
   \   00000C94   0120A0E1           MOV      R2,R1
   \   00000C98   002062E2           RSB      R2,R2,#+0
   \   00000C9C   010056E1           CMP      R6,R1
   \   00000CA0   010000BA           BLT      ??DrawBall_127
   \   00000CA4   000053E3           CMP      R3,#+0
   \   00000CA8   B82BC441           STRHMI   R2,[R4, #+184]
   1554            if(abs(ball_spy)<=ball_min_speed && ball_spy>0) ball_spy=ball_min_speed;
   \                     ??DrawBall_127:
   \   00000CAC   F87BD4E1           LDRSH    R7,[R4, #+184]
   \   00000CB0   6B67D4E5           LDRB     R6,[R4, #+1899]
   \   00000CB4   0780A0E1           MOV      R8,R7
   \   00000CB8   010057E3           CMP      R7,#+1
   \   00000CBC   008068B2           RSBLT    R8,R8,#+0
   \   00000CC0   0630A0E1           MOV      R3,R6
   \   00000CC4   080056E1           CMP      R6,R8
   \   00000CC8   010057A3           CMPGE    R7,#+1
   \   00000CCC   B83BC4A1           STRHGE   R3,[R4, #+184]
   1555            if(abs(ball_spy)<=ball_min_speed && ball_spy<0) ball_spy=-ball_min_speed;
   \   00000CD0   F88BD4E1           LDRSH    R8,[R4, #+184]
   \   00000CD4   0670A0E1           MOV      R7,R6
   \   00000CD8   007067E2           RSB      R7,R7,#+0
   \   00000CDC   0890A0E1           MOV      R9,R8
   \   00000CE0   010058E3           CMP      R8,#+1
   \   00000CE4   009069B2           RSBLT    R9,R9,#+0
   \   00000CE8   090056E1           CMP      R6,R9
   \   00000CEC   010000BA           BLT      ??DrawBall_128
   \   00000CF0   000058E3           CMP      R8,#+0
   \   00000CF4   B87BC441           STRHMI   R7,[R4, #+184]
   1556            
   1557            if(abs(ball_spx)>=ball_max_speed && ball_spx>0) ball_spx=ball_max_speed;
   \                     ??DrawBall_128:
   \   00000CF8   F68BD4E1           LDRSH    R8,[R4, #+182]
   \   00000CFC   0890A0E1           MOV      R9,R8
   \   00000D00   010058E3           CMP      R8,#+1
   \   00000D04   009069B2           RSBLT    R9,R9,#+0
   \   00000D08   010059E1           CMP      R9,R1
   \   00000D0C   010058A3           CMPGE    R8,#+1
   \   00000D10   B60BC4A1           STRHGE   R0,[R4, #+182]
   1558            if(abs(ball_spx)>=ball_max_speed && ball_spx<0) ball_spx=-ball_max_speed;
   \   00000D14   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000D18   0080A0E1           MOV      R8,R0
   \   00000D1C   010050E3           CMP      R0,#+1
   \   00000D20   008068B2           RSBLT    R8,R8,#+0
   \   00000D24   010058E1           CMP      R8,R1
   \   00000D28   010000BA           BLT      ??DrawBall_129
   \   00000D2C   000050E3           CMP      R0,#+0
   \   00000D30   B62BC441           STRHMI   R2,[R4, #+182]
   1559            if(abs(ball_spx)<=ball_min_speed && ball_spx>0) ball_spx=ball_min_speed;
   \                     ??DrawBall_129:
   \   00000D34   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000D38   0010A0E1           MOV      R1,R0
   \   00000D3C   010050E3           CMP      R0,#+1
   \   00000D40   001061B2           RSBLT    R1,R1,#+0
   \   00000D44   010056E1           CMP      R6,R1
   \   00000D48   010050A3           CMPGE    R0,#+1
   \   00000D4C   B63BC4A1           STRHGE   R3,[R4, #+182]
   1560            if(abs(ball_spx)<=ball_min_speed && ball_spx<0) ball_spx=-ball_min_speed;
   \   00000D50   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000D54   0010A0E1           MOV      R1,R0
   \   00000D58   010050E3           CMP      R0,#+1
   \   00000D5C   001061B2           RSBLT    R1,R1,#+0
   \   00000D60   010056E1           CMP      R6,R1
   \   00000D64   010000BA           BLT      ??DrawBall_130
   \   00000D68   000050E3           CMP      R0,#+0
   \   00000D6C   B67BC441           STRHMI   R7,[R4, #+182]
   1561            
   1562            if(!bon_slime_use)
   \                     ??DrawBall_130:
   \   00000D70   7C07D4E5           LDRB     R0,[R4, #+1916]
   \   00000D74   000050E3           CMP      R0,#+0
   \   00000D78   0500001A           BNE      ??DrawBall_131
   1563            {
   1564              if(ball_spx==0) ball_spx=1;
   \   00000D7C   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000D80   000050E3           CMP      R0,#+0
   1565              if(ball_spy==0) ball_spy=1;
   \   00000D84   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000D88   B65BC401           STRHEQ   R5,[R4, #+182]
   \   00000D8C   000050E3           CMP      R0,#+0
   \   00000D90   B85BC401           STRHEQ   R5,[R4, #+184]
   1566            }
   1567            
   1568            ball_x+=ball_spx;
   \                     ??DrawBall_131:
   \   00000D94   F20BD4E1           LDRSH    R0,[R4, #+178]
   \   00000D98   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000D9C   000081E0           ADD      R0,R1,R0
   1569            ball_y+=ball_spy;
   \   00000DA0   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000DA4   B20BC4E1           STRH     R0,[R4, #+178]
   \   00000DA8   F40BD4E1           LDRSH    R0,[R4, #+180]
   \   00000DAC   000081E0           ADD      R0,R1,R0
   \   00000DB0   B40BC4E1           STRH     R0,[R4, #+180]
   1570            
   1571            if(ball_y>=H) LoseLife(); //если  проворонили шарик,то теряем жизнь
   \   00000DB4   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000DB8   4008A0E1           MOV      R0,R0, ASR #+16
   \   00000DBC   500F50E3           CMP      R0,#+320
   \   00000DC0   000000BA           BLT      ??DrawBall_132
   \   00000DC4   ........           BL       LoseLife
   1572            
   1573             DrwImg(ball[ball_type][ball_s].img,ball_x,ball_y);
   \                     ??DrawBall_132:
   \   00000DC8   7107D4E5           LDRB     R0,[R4, #+1905]
   \   00000DCC   7257D4E5           LDRB     R5,[R4, #+1906]
   \   00000DD0   F42BD4E1           LDRSH    R2,[R4, #+180]
   \   00000DD4   F21BD4E1           LDRSH    R1,[R4, #+178]
   \   00000DD8   0C30A0E3           MOV      R3,#+12
   \   00000DDC   2460A0E3           MOV      R6,#+36
   \   00000DE0   964524E0           MLA      R4,R6,R5,R4
   \   00000DE4   934020E0           MLA      R0,R3,R0,R4
   \   00000DE8   000090E5           LDR      R0,[R0, #+0]
   \   00000DEC   ........           BL       DrwImg
   1574          }
   \   00000DF0   F087BDE8           POP      {R4-R10,PC}      ;; return
   1575          
   1576          
   1577          

   \                                 In segment CODE, align 4, keep-with-next
   1578          void DrawUser()
   1579          {
   1580            if(!bonus_active[BON_USER_FREEZE])
   \                     DrawUser:
   \   00000000   ........           LDR      R0,??DataTable87  ;; ball
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   5A44D0E5           LDRB     R4,[R0, #+1114]
   \   0000000C   F22BD0E1           LDRSH    R2,[R0, #+178]
   \   00000010   FE3BD0E1           LDRSH    R3,[R0, #+190]
   \   00000014   FA1BD0E1           LDRSH    R1,[R0, #+186]
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   1600001A           BNE      ??DrawUser_0
   \   00000020   7467D0E5           LDRB     R6,[R0, #+1908]
   \   00000024   75C7D0E5           LDRB     R12,[R0, #+1909]
   \   00000028   7347D0E5           LDRB     R4,[R0, #+1907]
   \   0000002C   7C57D0E5           LDRB     R5,[R0, #+1916]
   \   00000030   000056E3           CMP      R6,#+0
   \   00000034   0400000A           BEQ      ??DrawUser_1
   1581            {
   1582             if(user_r)
   1583             {
   1584               if(bon_slime_use) ball_x+=user_sp;
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   02208C10           ADDNE    R2,R12,R2
   1585               user_x+=user_sp;
   \   00000040   01108CE0           ADD      R1,R12,R1
   1586               user_c++;
   \   00000044   013083E2           ADD      R3,R3,#+1
   \   00000048   010000EA           B        ??DrawUser_2
   1587             }
   1588             else if(!user_l) user_c=0;
   \                     ??DrawUser_1:
   \   0000004C   000054E3           CMP      R4,#+0
   \   00000050   0800000A           BEQ      ??DrawUser_3
   1589             if(user_l)
   \                     ??DrawUser_2:
   \   00000054   000054E3           CMP      R4,#+0
   \   00000058   0400000A           BEQ      ??DrawUser_4
   1590             {
   1591               if(bon_slime_use) ball_x-=user_sp;
   \   0000005C   000055E3           CMP      R5,#+0
   \   00000060   0C204210           SUBNE    R2,R2,R12
   1592               user_x-=user_sp;
   \   00000064   0C1041E0           SUB      R1,R1,R12
   1593               user_c++;
   \   00000068   013083E2           ADD      R3,R3,#+1
   \   0000006C   020000EA           B        ??DrawUser_0
   1594             }
   1595             else if(!user_r) user_c=0;
   \                     ??DrawUser_4:
   \   00000070   000056E3           CMP      R6,#+0
   \   00000074   0000001A           BNE      ??DrawUser_0
   \                     ??DrawUser_3:
   \   00000078   0030A0E3           MOV      R3,#+0
   1596            }
   1597            
   1598            if(user_x<0) user_x=0;
   \                     ??DrawUser_0:
   \   0000007C   7747D0E5           LDRB     R4,[R0, #+1911]
   \   00000080   B22BC0E1           STRH     R2,[R0, #+178]
   \   00000084   7627D0E5           LDRB     R2,[R0, #+1910]
   \   00000088   BE3BC0E1           STRH     R3,[R0, #+190]
   \   0000008C   2430A0E3           MOV      R3,#+36
   \   00000090   6C50A0E3           MOV      R5,#+108
   \   00000094   950424E0           MLA      R4,R5,R4,R0
   \   00000098   0118A0E1           MOV      R1,R1, LSL #+16
   \   0000009C   934222E0           MLA      R2,R3,R2,R4
   \   000000A0   ........           LDR      R3,??DataTable70  ;; sw
   \   000000A4   4118B0E1           MOVS     R1,R1, ASR #+16
   \   000000A8   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000000AC   0010A043           MOVMI    R1,#+0
   \   000000B0   BA1BC0E1           STRH     R1,[R0, #+186]
   \   000000B4   C82092E5           LDR      R2,[R2, #+200]
   \   000000B8   005092E5           LDR      R5,[R2, #+0]
   \   000000BC   B050D5E1           LDRH     R5,[R5, #+0]
   \   000000C0   054043E0           SUB      R4,R3,R5
   \   000000C4   010054E1           CMP      R4,R1
   \   000000C8   030000AA           BGE      ??DrawUser_5
   1599            if(user_x>sw-user[user_type][user_s].img[0]->w) user_x=sw-user[user_type][user_s].img[0]->w;
   \   000000CC   001092E5           LDR      R1,[R2, #+0]
   \   000000D0   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000000D4   011043E0           SUB      R1,R3,R1
   \   000000D8   BA1BC0E1           STRH     R1,[R0, #+186]
   1600            SetSpriteCoordinaties(user_N,user_x,user_y);
   \                     ??DrawUser_5:
   \   000000DC   FC2BD0E1           LDRSH    R2,[R0, #+188]
   \   000000E0   FA1BD0E1           LDRSH    R1,[R0, #+186]
   \   000000E4   F00CD0E1           LDRSH    R0,[R0, #+192]
   \   000000E8   ........           _BLF     SetSpriteCoordinaties,??SetSpriteCoordinaties??rA
   1601          }
   \   000000EC   7080BDE8           POP      {R4-R6,PC}       ;; return
   1602          
   1603          
   1604          
   1605          
   1606          
   1607          
   1608          

   \                                 In segment CODE, align 4, keep-with-next
   1609          void CheckBonuses(int bnum)
   1610          {
   \                     CheckBonuses:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1611            switch(bnum)
   \   00000004   ........           LDR      R4,??DataTable87  ;; ball
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   76C7D4E5           LDRB     R12,[R4, #+1910]
   \   00000010   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000014   F6EBD4E1           LDRSH    LR,[R4, #+182]
   \   00000018   F00CD4E1           LDRSH    R0,[R4, #+192]
   \   0000001C   7197D4E5           LDRB     R9,[R4, #+1905]
   \   00000020   0150A0E3           MOV      R5,#+1
   \   00000024   5FA0A0E3           MOV      R10,#+95
   \   00000028   40AE8AE3           ORR      R10,R10,#0x400
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   9A70A0E3           MOV      R7,#+154
   \   00000034   807F87E3           ORR      R7,R7,#0x200
   \   00000038   1080A0E3           MOV      R8,#+16
   \   0000003C   9C8D88E3           ORR      R8,R8,#0x2700
   \   00000040   0230A0E3           MOV      R3,#+2
   \   00000044   0D0051E3           CMP      R1,#+13
   \   00000048   F08FBD88           POPHI    {R4-R11,PC}
   \   0000004C   01BF8FE2           ADR      R11,??CheckBonuses_0
   \   00000050   01B0DBE7           LDRB     R11,[R11, R1]
   \   00000054   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??CheckBonuses_0:
   \   00000058   03161A30           DC8      +3,+22,+26,+48
   \   0000005C   4050545B           DC8      +64,+80,+84,+91
   \   00000060   627485A1           DC8      +98,+116,+133,+161
   \   00000064   999E0000           DC8      +153,+158,+0,+0
   1612            {
   1613              case BON_USER_BIG: //увеличение паддлы)
   1614               {
   1615                 if(user_s<2) user_s++;
   \                     ??CheckBonuses_1:
   \   00000068   02005CE3           CMP      R12,#+2
   \   0000006C   0100002A           BCS      ??CheckBonuses_2
   \   00000070   01108CE2           ADD      R1,R12,#+1
   \                     ??CheckBonuses_3:
   \   00000074   7617C4E5           STRB     R1,[R4, #+1910]
   1616                 StopSprite(user_N);
   \                     ??CheckBonuses_2:
   \   00000078   ........           _BLF     StopSprite,??StopSprite??rA
   1617                 user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   0000007C   00012DE9           PUSH     {R8}
   \   00000080   7607D4E5           LDRB     R0,[R4, #+1910]
   \   00000084   7767D4E5           LDRB     R6,[R4, #+1911]
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   2450A0E3           MOV      R5,#+36
   \   00000090   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   00000094   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   00000098   6C70A0E3           MOV      R7,#+108
   \   0000009C   974626E0           MLA      R6,R7,R6,R4
   \   000000A0   956020E0           MLA      R0,R5,R0,R6
   \   000000A4   C80080E2           ADD      R0,R0,#+200
   \   000000A8   ........           _BLF     InitSprite,??InitSprite??rA
   \   000000AC   B00CC4E1           STRH     R0,[R4, #+192]
   \   000000B0   5B0000EA           B        ??CheckBonuses_4
   1618               } break;
   1619               
   1620              case BON_USER_SMALL: //уменьшение паддлы
   1621               {
   1622                 if(user_s>0) user_s--;
   \                     ??CheckBonuses_5:
   \   000000B4   00005CE3           CMP      R12,#+0
   \   000000B8   EEFFFF0A           BEQ      ??CheckBonuses_2
   \   000000BC   01104CE2           SUB      R1,R12,#+1
   \   000000C0   EBFFFFEA           B        ??CheckBonuses_3
   1623                 StopSprite(user_N);
   1624                 user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   1625               } break;
   1626              
   1627              case BON_USER_FREEZE: //заморозка биты на 3 сек
   1628                {
   1629                  user_type=3;
   \                     ??CheckBonuses_6:
   \   000000C4   0310A0E3           MOV      R1,#+3
   \   000000C8   7717C4E5           STRB     R1,[R4, #+1911]
   1630                  StopSprite(user_N);
   \   000000CC   ........           _BLF     StopSprite,??StopSprite??rA
   1631                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   000000D0   00012DE9           PUSH     {R8}
   \   000000D4   7607D4E5           LDRB     R0,[R4, #+1910]
   \   000000D8   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   000000DC   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   000000E0   7787D4E5           LDRB     R8,[R4, #+1911]
   \   000000E4   0710A0E1           MOV      R1,R7
   \   000000E8   2470A0E3           MOV      R7,#+36
   \   000000EC   6C90A0E3           MOV      R9,#+108
   \   000000F0   994828E0           MLA      R8,R9,R8,R4
   \   000000F4   978020E0           MLA      R0,R7,R0,R8
   \   000000F8   C80080E2           ADD      R0,R0,#+200
   \   000000FC   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000100   B00CC4E1           STRH     R0,[R4, #+192]
   1632                  bonus_active[BON_USER_FREEZE] = 1;
   \   00000104   5A54C4E5           STRB     R5,[R4, #+1114]
   1633                  bonus_counter[BON_USER_FREEZE] = 0;
   \   00000108   B067C4E1           STRH     R6,[R4, #+112]
   1634                  bonus_time[BON_USER_FREEZE] = 70;
   \   0000010C   4600A0E3           MOV      R0,#+70
   \   00000110   B009C4E1           STRH     R0,[R4, #+144]
   \   00000114   04D08DE2           ADD      SP,SP,#+4
   \   00000118   F08FBDE8           POP      {R4-R11,PC}
   1635                } break;
   1636                
   1637              case BON_BALL_INCREASE: //ускорение шара на 1
   1638                {
   1639                  if(ball_spx<0) ball_spx-=1;
   \                     ??CheckBonuses_7:
   \   0000011C   00005EE3           CMP      LR,#+0
   \   00000120   01004E42           SUBMI    R0,LR,#+1
   \   00000124   B60BC441           STRHMI   R0,[R4, #+182]
   1640                  if(ball_spy<0) ball_spy-=1;
   \   00000128   000052E3           CMP      R2,#+0
   \   0000012C   01004242           SUBMI    R0,R2,#+1
   \   00000130   B80BC441           STRHMI   R0,[R4, #+184]
   1641                  if(ball_spx>0) ball_spx+=1;
   \   00000134   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000138   010050E3           CMP      R0,#+1
   \   0000013C   010080A2           ADDGE    R0,R0,#+1
   \   00000140   B60BC4A1           STRHGE   R0,[R4, #+182]
   1642                  if(ball_spy>0) ball_spy+=1;
   \   00000144   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000148   010050E3           CMP      R0,#+1
   \   0000014C   F08FBDB8           POPLT    {R4-R11,PC}
   \   00000150   010080E2           ADD      R0,R0,#+1
   \   00000154   B80BC4E1           STRH     R0,[R4, #+184]
   \   00000158   F08FBDE8           POP      {R4-R11,PC}
   1643                } break;
   1644                
   1645              case BON_BALL_DECREASE: //замедление шара на 1
   1646                {
   1647                  if(ball_spx<0) ball_spx+=1;
   \                     ??CheckBonuses_8:
   \   0000015C   00005EE3           CMP      LR,#+0
   \   00000160   01008E42           ADDMI    R0,LR,#+1
   \   00000164   B60BC441           STRHMI   R0,[R4, #+182]
   1648                  if(ball_spy<0) ball_spy+=1;
   \   00000168   000052E3           CMP      R2,#+0
   \   0000016C   01008242           ADDMI    R0,R2,#+1
   \   00000170   B80BC441           STRHMI   R0,[R4, #+184]
   1649                  if(ball_spx>0) ball_spx-=1;
   \   00000174   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000178   010050E3           CMP      R0,#+1
   \   0000017C   010040A2           SUBGE    R0,R0,#+1
   \   00000180   B60BC4A1           STRHGE   R0,[R4, #+182]
   1650                  if(ball_spy>0) ball_spy-=1;
   \   00000184   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   F08FBDB8           POPLT    {R4-R11,PC}
   \   00000190   010040E2           SUB      R0,R0,#+1
   \   00000194   B80BC4E1           STRH     R0,[R4, #+184]
   \   00000198   F08FBDE8           POP      {R4-R11,PC}
   1651                } break;
   1652                
   1653              case BON_LIFE: //жизнь
   1654                {
   1655                  total_lives++;
   \                     ??CheckBonuses_9:
   \   0000019C   6C07D4E5           LDRB     R0,[R4, #+1900]
   \   000001A0   010080E2           ADD      R0,R0,#+1
   \   000001A4   6C07C4E5           STRB     R0,[R4, #+1900]
   \   000001A8   F08FBDE8           POP      {R4-R11,PC}
   1656                } break;
   1657                
   1658              case BON_BALL_MEGA: //super ball
   1659                {
   1660                  bonus_active[BON_BALL_MEGA] = 1;
   \                     ??CheckBonuses_10:
   \   000001AC   5E54C4E5           STRB     R5,[R4, #+1118]
   1661                  bonus_active[BON_BALL_GHOST] = 0;
   \   000001B0   0460CAE7           STRB     R6,[R10, +R4]
   1662                  bonus_counter[BON_BALL_MEGA] = 0;
   \   000001B4   B867C4E1           STRH     R6,[R4, #+120]
   1663                  bonus_time[BON_BALL_MEGA] = 500;
   \   000001B8   7D0FA0E3           MOV      R0,#+500
   \   000001BC   B809C4E1           STRH     R0,[R4, #+152]
   1664                  ball_type = 2;
   \   000001C0   7237C4E5           STRB     R3,[R4, #+1906]
   \   000001C4   F08FBDE8           POP      {R4-R11,PC}
   1665                } break;
   1666                
   1667                case BON_BALL_GHOST: //ghost ball
   1668                {
   1669                  bonus_active[BON_BALL_GHOST] = 1;
   \                     ??CheckBonuses_11:
   \   000001C8   0450CAE7           STRB     R5,[R10, +R4]
   1670                  bonus_active[BON_BALL_MEGA] = 0; //сбрасываем
   \   000001CC   5E64C4E5           STRB     R6,[R4, #+1118]
   1671                  bonus_counter[BON_BALL_GHOST] = 0;
   \   000001D0   BA67C4E1           STRH     R6,[R4, #+122]
   1672                  bonus_time[BON_BALL_GHOST] = 500;
   \   000001D4   7D0FA0E3           MOV      R0,#+500
   \   000001D8   BA09C4E1           STRH     R0,[R4, #+154]
   1673                  ball_type = 1;
   \   000001DC   7257C4E5           STRB     R5,[R4, #+1906]
   \   000001E0   F08FBDE8           POP      {R4-R11,PC}
   1674                } break;
   1675                
   1676              case 8: //стеляем пульками
   1677                {
   1678                  user_type=1;
   \                     ??CheckBonuses_12:
   \   000001E4   7757C4E5           STRB     R5,[R4, #+1911]
   1679                  StopSprite(user_N);
   \   000001E8   ........           _BLF     StopSprite,??StopSprite??rA
   1680                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   000001EC   00012DE9           PUSH     {R8}
   \   000001F0   7607D4E5           LDRB     R0,[R4, #+1910]
   \   000001F4   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   000001F8   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   000001FC   0710A0E1           MOV      R1,R7
   \   00000200   7777D4E5           LDRB     R7,[R4, #+1911]
   \   00000204   2450A0E3           MOV      R5,#+36
   \   00000208   6C80A0E3           MOV      R8,#+108
   \   0000020C   984727E0           MLA      R7,R8,R7,R4
   \   00000210   957020E0           MLA      R0,R5,R0,R7
   \   00000214   C80080E2           ADD      R0,R0,#+200
   \   00000218   ........           _BLF     InitSprite,??InitSprite??rA
   \   0000021C   B00CC4E1           STRH     R0,[R4, #+192]
   1681                  bonus_shot_type = 0;
   \   00000220   7867C4E5           STRB     R6,[R4, #+1912]
   \                     ??CheckBonuses_4:
   \   00000224   04D08DE2           ADD      SP,SP,#+4
   \   00000228   F08FBDE8           POP      {R4-R11,PC}
   1682                } break;
   1683                
   1684              case 9: //стеляем рокетом
   1685                {
   1686                  user_type=1;
   \                     ??CheckBonuses_13:
   \   0000022C   7757C4E5           STRB     R5,[R4, #+1911]
   1687                  StopSprite(user_N);
   \   00000230   ........           _BLF     StopSprite,??StopSprite??rA
   1688                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   00000234   00012DE9           PUSH     {R8}
   \   00000238   7607D4E5           LDRB     R0,[R4, #+1910]
   \   0000023C   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   00000240   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   00000244   0710A0E1           MOV      R1,R7
   \   00000248   7777D4E5           LDRB     R7,[R4, #+1911]
   \   0000024C   2460A0E3           MOV      R6,#+36
   \   00000250   6C80A0E3           MOV      R8,#+108
   \   00000254   984727E0           MLA      R7,R8,R7,R4
   \   00000258   967020E0           MLA      R0,R6,R0,R7
   \   0000025C   C80080E2           ADD      R0,R0,#+200
   \   00000260   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000264   B00CC4E1           STRH     R0,[R4, #+192]
   1689                  bonus_shot_type = 1;
   \   00000268   7857C4E5           STRB     R5,[R4, #+1912]
   \   0000026C   ECFFFFEA           B        ??CheckBonuses_4
   1690                } break;
   1691                
   1692              case 10: //платформа-магнит
   1693                {
   1694                  user_type = 2;
   \                     ??CheckBonuses_14:
   \   00000270   7737C4E5           STRB     R3,[R4, #+1911]
   1695                  StopSprite(user_N);
   \   00000274   ........           _BLF     StopSprite,??StopSprite??rA
   1696                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   00000278   00012DE9           PUSH     {R8}
   \   0000027C   7607D4E5           LDRB     R0,[R4, #+1910]
   \   00000280   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   00000284   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   00000288   7787D4E5           LDRB     R8,[R4, #+1911]
   \   0000028C   0710A0E1           MOV      R1,R7
   \   00000290   2470A0E3           MOV      R7,#+36
   \   00000294   6C90A0E3           MOV      R9,#+108
   \   00000298   994828E0           MLA      R8,R9,R8,R4
   \   0000029C   978020E0           MLA      R0,R7,R0,R8
   \   000002A0   C80080E2           ADD      R0,R0,#+200
   \   000002A4   ........           _BLF     InitSprite,??InitSprite??rA
   \   000002A8   B00CC4E1           STRH     R0,[R4, #+192]
   1697                  bonus_active[BON_SLIME] = 1;
   \   000002AC   6254C4E5           STRB     R5,[R4, #+1122]
   1698                  bonus_counter[BON_SLIME] = 0;
   \   000002B0   B068C4E1           STRH     R6,[R4, #+128]
   1699                  bonus_time[BON_SLIME] = 500;
   \   000002B4   7D0FA0E3           MOV      R0,#+500
   \   000002B8   B00AC4E1           STRH     R0,[R4, #+160]
   \   000002BC   D8FFFFEA           B        ??CheckBonuses_4
   1700                } break;
   1701                
   1702              case 12: //ball size ++
   1703                {
   1704                  if(ball_s<2) ball_s++;
   \                     ??CheckBonuses_15:
   \   000002C0   020059E3           CMP      R9,#+2
   \   000002C4   F08FBD28           POPCS    {R4-R11,PC}
   \   000002C8   010089E2           ADD      R0,R9,#+1
   \   000002CC   7107C4E5           STRB     R0,[R4, #+1905]
   \   000002D0   F08FBDE8           POP      {R4-R11,PC}
   1705                } break;
   1706                
   1707              case 13: //ball size --
   1708                {
   1709                  if(ball_s>0) ball_s--;
   \                     ??CheckBonuses_16:
   \   000002D4   000059E3           CMP      R9,#+0
   \   000002D8   01004912           SUBNE    R0,R9,#+1
   \   000002DC   7107C415           STRBNE   R0,[R4, #+1905]
   1710                } break;
   1711            }
   1712            
   1713          }
   \                     ??CheckBonuses_17:
   \   000002E0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1714          

   \                                 In segment CODE, align 4, keep-with-next
   1715          void DrawBonuses()
   1716          {
   \                     DrawBonuses:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1717            short x,y;
   1718            for(short i=0;i<MAX_SPRITES;i++)
   \   00000004   ........           LDR      R6,??DataTable72  ;; sprites
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E3           MOV      R4,#+0
   1719            {
   1720              if(!sprites[i].active) continue;
   \                     ??DrawBonuses_0:
   \   00000010   2410A0E3           MOV      R1,#+36
   \   00000014   000096E5           LDR      R0,[R6, #+0]
   \   00000018   910405E0           MUL      R5,R1,R4
   \   0000001C   000085E0           ADD      R0,R5,R0
   \   00000020   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   2400000A           BEQ      ??DrawBonuses_1
   1721              if(sprites[i].uid>=0 && sprites[i].uid<=15)
   \   0000002C   F012D0E1           LDRSH    R1,[R0, #+32]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   2100004A           BMI      ??DrawBonuses_1
   \   00000038   100051E3           CMP      R1,#+16
   \   0000003C   1F0000AA           BGE      ??DrawBonuses_1
   1722              {
   1723                GetSpriteCoordinaties(sprites[i].N,&x,&y);
   \   00000040   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000044   02208DE2           ADD      R2,SP,#+2
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
   1724                short bonusw = GetSpriteWidth(sprites[i].N);
   \   00000050   000096E5           LDR      R0,[R6, #+0]
   \   00000054   000085E0           ADD      R0,R5,R0
   \   00000058   F401D0E1           LDRSH    R0,[R0, #+20]
   \   0000005C   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   00000060   0070A0E1           MOV      R7,R0
   1725                short bonush = GetSpriteHeight(sprites[i].N);
   \   00000064   000096E5           LDR      R0,[R6, #+0]
   \   00000068   000085E0           ADD      R0,R5,R0
   \   0000006C   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000070   ........           _BLF     GetSpriteHeight,??GetSpriteHeight??rA
   1726                if(UBNhit(x,x+bonusw,y+bonush))
   \   00000074   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000078   012080E0           ADD      R2,R0,R1
   \   0000007C   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000080   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000084   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000088   001087E0           ADD      R1,R7,R0
   \   0000008C   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000090   4118A0E1           MOV      R1,R1, ASR #+16
   \   00000094   ........           BL       UBNhit
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0700000A           BEQ      ??DrawBonuses_1
   1727                {
   1728                  StopSprite(sprites[i].N);
   \   000000A0   000096E5           LDR      R0,[R6, #+0]
   \   000000A4   000085E0           ADD      R0,R5,R0
   \   000000A8   F401D0E1           LDRSH    R0,[R0, #+20]
   \   000000AC   ........           _BLF     StopSprite,??StopSprite??rA
   1729                  CheckBonuses(sprites[i].uid);
   \   000000B0   000096E5           LDR      R0,[R6, #+0]
   \   000000B4   000085E0           ADD      R0,R5,R0
   \   000000B8   F002D0E1           LDRSH    R0,[R0, #+32]
   \   000000BC   ........           BL       CheckBonuses
   1730                }
   1731              }
   1732            }
   \                     ??DrawBonuses_1:
   \   000000C0   014084E2           ADD      R4,R4,#+1
   \   000000C4   800054E3           CMP      R4,#+128
   \   000000C8   D0FFFFBA           BLT      ??DrawBonuses_0
   1733            
   1734            
   1735            for(char i=0;i<NUM_OF_BONUSES;i++) //таймеры для бонусов
   \   000000CC   ........           LDR      R8,??DataTable87  ;; ball
   \   000000D0   0040A0E3           MOV      R4,#+0
   \   000000D4   0050A0E3           MOV      R5,#+0
   1736            {
   1737              if(bonus_active[i])
   \                     ??DrawBonuses_2:
   \   000000D8   086085E0           ADD      R6,R5,R8
   \   000000DC   5814D6E5           LDRB     R1,[R6, #+1112]
   \   000000E0   000051E3           CMP      R1,#+0
   \   000000E4   2600000A           BEQ      ??DrawBonuses_3
   1738              {
   1739                if(bonus_counter[i]<bonus_time[i]) bonus_counter[i]++;
   \   000000E8   857088E0           ADD      R7,R8,R5, LSL #+1
   \   000000EC   FC06D7E1           LDRSH    R0,[R7, #+108]
   \   000000F0   FC18D7E1           LDRSH    R1,[R7, #+140]
   \   000000F4   010050E1           CMP      R0,R1
   \   000000F8   010080B2           ADDLT    R0,R0,#+1
   \   000000FC   BC06C7B1           STRHLT   R0,[R7, #+108]
   \   00000100   1F0000BA           BLT      ??DrawBonuses_3
   1740                else
   1741                {
   1742                  if(i==BON_USER_FREEZE)
   \   00000104   F00CD8E1           LDRSH    R0,[R8, #+192]
   \   00000108   9A90A0E3           MOV      R9,#+154
   \   0000010C   809F89E3           ORR      R9,R9,#0x200
   \   00000110   10A0A0E3           MOV      R10,#+16
   \   00000114   9CAD8AE3           ORR      R10,R10,#0x2700
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   020055E3           CMP      R5,#+2
   \   00000120   1000001A           BNE      ??DrawBonuses_4
   1743                  {
   1744                    user_type = 1;
   \                     ??DrawBonuses_5:
   \   00000124   7717C8E5           STRB     R1,[R8, #+1911]
   1745                    StopSprite(user_N);
   \   00000128   ........           _BLF     StopSprite,??StopSprite??rA
   1746                    user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   0000012C   00042DE9           PUSH     {R10}
   \   00000130   7607D8E5           LDRB     R0,[R8, #+1910]
   \   00000134   FC3BD8E1           LDRSH    R3,[R8, #+188]
   \   00000138   FA2BD8E1           LDRSH    R2,[R8, #+186]
   \   0000013C   77A7D8E5           LDRB     R10,[R8, #+1911]
   \   00000140   0910A0E1           MOV      R1,R9
   \   00000144   2490A0E3           MOV      R9,#+36
   \   00000148   6CC0A0E3           MOV      R12,#+108
   \   0000014C   9C8A2AE0           MLA      R10,R12,R10,R8
   \   00000150   99A020E0           MLA      R0,R9,R0,R10
   \   00000154   C80080E2           ADD      R0,R0,#+200
   \   00000158   ........           _BLF     InitSprite,??InitSprite??rA
   \   0000015C   B00CC8E1           STRH     R0,[R8, #+192]
   \   00000160   04D08DE2           ADD      SP,SP,#+4
   \   00000164   040000EA           B        ??DrawBonuses_6
   1747                  }
   1748                  if(i==BON_SLIME)
   \                     ??DrawBonuses_4:
   \   00000168   0A0055E3           CMP      R5,#+10
   \   0000016C   ECFFFF0A           BEQ      ??DrawBonuses_5
   1749                  {
   1750                    user_type = 1;
   1751                    StopSprite(user_N);
   1752                    user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   1753                  }
   1754                  if(i==BON_BALL_MEGA || i==BON_BALL_GHOST) ball_type = 0;
   \   00000170   060055E3           CMP      R5,#+6
   \   00000174   07005513           CMPNE    R5,#+7
   \   00000178   7247C805           STRBEQ   R4,[R8, #+1906]
   1755                  bonus_counter[i]=0;
   \                     ??DrawBonuses_6:
   \   0000017C   BC46C7E1           STRH     R4,[R7, #+108]
   1756                  bonus_active[i] = 0;
   \   00000180   5844C6E5           STRB     R4,[R6, #+1112]
   1757                }
   1758              }
   1759            }
   \                     ??DrawBonuses_3:
   \   00000184   015085E2           ADD      R5,R5,#+1
   \   00000188   100055E3           CMP      R5,#+16
   \   0000018C   D1FFFF3A           BCC      ??DrawBonuses_2
   1760            
   1761            /*for(char i=0;i<NUM_OF_BONUSES;i++)
   1762            {
   1763              if(bonus[i].active==0) continue;
   1764              GetSpriteCoordinaties(bonus[i].N,&x,&y);
   1765              y+=3;
   1766              SetSpriteCoordinaties(bonus[i].N,x,y);
   1767              if(UBNhit(x,x+bonus[i].spr.img[0]->w,y+bonus[i].spr.img[0]->h))
   1768              {
   1769                StopSprite(bonus[i].N);
   1770                CheckBonuses(bonus[i].num);
   1771                bonus[i].active = 0;
   1772                if(bonus_counter>0) bonus_counter--;
   1773              }
   1774              else if(y>sh)
   1775              {
   1776                StopSprite(bonus[i].N);
   1777                bonus[i].active = 0;
   1778                if(bonus_counter>0) bonus_counter--;
   1779              }
   1780            }*/
   1781          }
   \   00000190   F187BDE8           POP      {R0,R4-R10,PC}   ;; return
   1782          
   1783          
   1784          
   1785          
   1786          
   1787          IMGHDR *press0;
   1788          
   1789          
   1790          
   1791          
   1792          

   \                                 In segment CODE, align 4, keep-with-next
   1793          void DrawWeapons()
   1794          {
   1795            /*short shx,shy;
   1796            for(int i=0;i<128;i++)
   1797            {
   1798              GetSpriteCoordinaties(shot_n[bonus_shot_type][i],&shx,&shy);
   1799              if(shy>offset1) SetSpriteCoordinaties(shot_n[bonus_shot_type][i],shx,shy-4);
   1800              else {StopSprite(shot_n[bonus_shot_type][i]);}
   1801            }*/
   1802          }
   \                     DrawWeapons:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1803          
   1804          
   1805          

   \                                 In segment CODE, align 4, keep-with-next
   1806          void DrawOther()
   1807          {
   1808            DrawSprites();
   \                     DrawOther:
   \   00000000   ........           _BF      DrawSprites,??DrawSprites??rA  ;; tailcall
   1809            DrawWeapons();
   1810          }
   1811          
   1812          
   1813          
   1814          
   1815          
   1816          
   1817          
   1818          
   1819          
   1820          
   1821          
   1822          
   1823          
   1824          

   \                                 In segment CODE, align 4, keep-with-next
   1825          void DrawBoss()
   1826          {
   1827            boss.x=ball_x-(boss.img->w/2)+3;
   \                     DrawBoss:
   \   00000000   ........           LDR      R2,??DataTable99  ;; boss
   \   00000004   24109FE5           LDR      R1,??DrawBoss_0  ;; ball + 178
   \   00000008   000092E5           LDR      R0,[R2, #+0]
   \   0000000C   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000010   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000014   A31041E0           SUB      R1,R1,R3, LSR #+1
   \   00000018   031081E2           ADD      R1,R1,#+3
   \   0000001C   B410C2E1           STRH     R1,[R2, #+4]
   1828            DrwImg(boss.img,boss.x,boss.y);
   \   00000020   F620D2E1           LDRSH    R2,[R2, #+6]
   \   00000024   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000028   4118A0E1           MOV      R1,R1, ASR #+16
   \   0000002C   ........           B        DrwImg           ;; tailcall
   \                     ??DrawBoss_0:
   \   00000030   ........           DC32     ball + 178
   1829          }
   1830          
   1831          
   1832          
   1833          
   1834          int fps;
   1835          int sfps;
   1836          int lastsec;
   1837          TDate date;
   1838          TTime time;
   1839          
   1840          
   1841          

   \                                 In segment CODE, align 4, keep-with-next
   1842          void DrawIconbar(WSHDR *ws)
   1843          {
   1844            const char icbar_bgcol[4]={0,0,0,100};
   \                     DrawIconbar:
   \   00000000   28129FE5           LDR      R1,??DrawIconbar_0  ;; `?<Constant {0, 0, 0, 100}>`
   \   00000004   F0412DE9           PUSH     {R4-R8,LR}
   1845            const char icbar_frcol[4]={90,90,90,90};
   \   00000008   ........           LDR      R6,??DataTable75  ;; `?<Constant {90, 90, 90, 90}>`
   1846            DrawRoundedFrame(0,0,W-1,offset1,3,3,0,icbar_frcol,icbar_bgcol);
   \   0000000C   ........           LDR      R7,??DataTable87  ;; ball
   1847            if(state==STATE_GAME)
   \   00000010   ........           LDR      R5,??DataTable80  ;; sw
   \   00000014   18D04DE2           SUB      SP,SP,#+24
   \   00000018   002091E5           LDR      R2,[R1, #0]
   \   0000001C   001096E5           LDR      R1,[R6, #0]
   \   00000020   0040A0E1           MOV      R4,R0
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   002080E5           STR      R2,[R0, #+0]
   \   0000002C   0C008DE2           ADD      R0,SP,#+12
   \   00000030   001080E5           STR      R1,[R0, #+0]
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   EF20A0E3           MOV      R2,#+239
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   10008DE2           ADD      R0,SP,#+16
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   0300A0E3           MOV      R0,#+3
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   7937D7E5           LDRB     R3,[R7, #+1913]
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   500100EF           SWI      +336
   \   0000006C   6800A0E3           MOV      R0,#+104
   \   00000070   700E80E3           ORR      R0,R0,#0x700
   \   00000074   D70090E1           LDRSB    R0,[R0, +R7]
   \   00000078   0010E0E3           MVN      R1,#+0
   \   0000007C   14D08DE2           ADD      SP,SP,#+20
   \   00000080   010050E1           CMP      R0,R1
   \   00000084   2F00001A           BNE      ??DrawIconbar_1
   1848            {
   1849              if(map.type==TYPE_NORMAL) wsprintf(ws,"%t: %d   fps: %d","жизни",total_lives,fps);
   \   00000088   ........           LDR      R8,??DataTable78  ;; map
   \   0000008C   0A00D8E5           LDRB     R0,[R8, #+10]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0700001A           BNE      ??DrawIconbar_2
   \   00000098   500797E5           LDR      R0,[R7, #+1872]
   \   0000009C   702086E2           ADD      R2,R6,#+112
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   6C37D7E5           LDRB     R3,[R7, #+1900]
   \   000000A8   3C1086E2           ADD      R1,R6,#+60
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   240100EF           SWI      +292
   \   000000B4   04D08DE2           ADD      SP,SP,#+4
   1850              if(map.type==TYPE_BOSS) wsprintf(ws,"%t: [%d|%d]   fps: %d","жизни",total_lives,map.boss_lives,fps);
   \                     ??DrawIconbar_2:
   \   000000B8   0A00D8E5           LDRB     R0,[R8, #+10]
   \   000000BC   010050E3           CMP      R0,#+1
   \   000000C0   0900001A           BNE      ??DrawIconbar_3
   \   000000C4   500797E5           LDR      R0,[R7, #+1872]
   \   000000C8   702086E2           ADD      R2,R6,#+112
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000000D4   041086E2           ADD      R1,R6,#+4
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   6C37D7E5           LDRB     R3,[R7, #+1900]
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   240100EF           SWI      +292
   \   000000E8   08D08DE2           ADD      SP,SP,#+8
   1851              DrawString(ws,2,2,W/2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(12),NULL);
   \                     ??DrawIconbar_3:
   \   000000EC   0C00A0E3           MOV      R0,#+12
   \   000000F0   2E0100EF           SWI      +302
   \   000000F4   0080A0E1           MOV      R8,R0
   \   000000F8   0800A0E3           MOV      R0,#+8
   \   000000FC   C50100EF           SWI      +453
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   02002DE9           PUSH     {R1}
   \   00000108   00012DE9           PUSH     {R8}
   \   0000010C   040080E2           ADD      R0,R0,#+4
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   02002DE9           PUSH     {R1}
   \   00000118   7830A0E3           MOV      R3,#+120
   \   0000011C   0220A0E3           MOV      R2,#+2
   \   00000120   0810A0E3           MOV      R1,#+8
   \   00000124   02002DE9           PUSH     {R1}
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   0210A0E3           MOV      R1,#+2
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   4C0100EF           SWI      +332
   1852              //wsprintf(ws,"%t:%d cleaned:%d","очки",score,clean_bricks);
   1853              wsprintf(ws,"x:%d  y:%d",sx,sy);
   \   00000138   F43CD7E1           LDRSH    R3,[R7, #+196]
   \   0000013C   F22CD7E1           LDRSH    R2,[R7, #+194]
   \   00000140   1C1086E2           ADD      R1,R6,#+28
   \   00000144   1F0000EA           B        ??DrawIconbar_4
   1854              DrawString(ws,sw/2,2,sw-2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(12),NULL); 
   1855            }
   1856            else
   1857            {
   1858              wsprintf(ws,"bat: %d%",*RamCap());
   \                     ??DrawIconbar_1:
   \   00000148   C88000EF           SWI      +32968
   \   0000014C   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000150   281086E2           ADD      R1,R6,#+40
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   240100EF           SWI      +292
   1859              DrawString(ws,2,2,sw/2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(12),NULL);
   \   0000015C   0C00A0E3           MOV      R0,#+12
   \   00000160   2E0100EF           SWI      +302
   \   00000164   0070A0E1           MOV      R7,R0
   \   00000168   0800A0E3           MOV      R0,#+8
   \   0000016C   C50100EF           SWI      +453
   \   00000170   F010D5E1           LDRSH    R1,[R5, #+0]
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   04002DE9           PUSH     {R2}
   \   0000017C   80002DE9           PUSH     {R7}
   \   00000180   040080E2           ADD      R0,R0,#+4
   \   00000184   0120A0E3           MOV      R2,#+1
   \   00000188   04002DE9           PUSH     {R2}
   \   0000018C   0820A0E3           MOV      R2,#+8
   \   00000190   04002DE9           PUSH     {R2}
   \   00000194   01002DE9           PUSH     {R0}
   \   00000198   A10F81E0           ADD      R0,R1,R1, LSR #+31
   \   0000019C   C030A0E1           ASR      R3,R0,#+1
   \   000001A0   0220A0E3           MOV      R2,#+2
   \   000001A4   0210A0E3           MOV      R1,#+2
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   4C0100EF           SWI      +332
   1860              TDate date;
   1861              TTime time;
   1862              GetDateTime(&date,&time);
   \   000001B0   14108DE2           ADD      R1,SP,#+20
   \   000001B4   24008DE2           ADD      R0,SP,#+36
   \   000001B8   B40000EF           SWI      +180
   1863              wsprintf(ws,"%d:%d",time.hour,time.min);
   \   000001BC   1530DDE5           LDRB     R3,[SP, #+21]
   \   000001C0   1420DDE5           LDRB     R2,[SP, #+20]
   \   000001C4   341086E2           ADD      R1,R6,#+52
   \                     ??DrawIconbar_4:
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   240100EF           SWI      +292
   1864              DrawString(ws,sw/2,2,sw-2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(12),NULL);
   \   000001D0   0C00A0E3           MOV      R0,#+12
   \   000001D4   2E0100EF           SWI      +302
   \   000001D8   0060A0E1           MOV      R6,R0
   \   000001DC   0800A0E3           MOV      R0,#+8
   \   000001E0   C50100EF           SWI      +453
   \   000001E4   F010D5E1           LDRSH    R1,[R5, #+0]
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   04002DE9           PUSH     {R2}
   \   000001F0   40002DE9           PUSH     {R6}
   \   000001F4   040080E2           ADD      R0,R0,#+4
   \   000001F8   0420A0E3           MOV      R2,#+4
   \   000001FC   04002DE9           PUSH     {R2}
   \   00000200   023041E2           SUB      R3,R1,#+2
   \   00000204   0820A0E3           MOV      R2,#+8
   \   00000208   04002DE9           PUSH     {R2}
   \   0000020C   01002DE9           PUSH     {R0}
   \   00000210   0220A0E3           MOV      R2,#+2
   \   00000214   A10F81E0           ADD      R0,R1,R1, LSR #+31
   \   00000218   C010A0E1           ASR      R1,R0,#+1
   \   0000021C   0400A0E1           MOV      R0,R4
   \   00000220   4C0100EF           SWI      +332
   \   00000224   28D08DE2           ADD      SP,SP,#+40
   1865            }
   1866          }
   \   00000228   18D08DE2           ADD      SP,SP,#+24
   \   0000022C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??DrawIconbar_0:
   \   00000230   ........           DC32     `?<Constant {0, 0, 0, 100}>`
   1867          
   1868          
   1869          
   1870          
   1871          
   1872          
   1873          
   1874          

   \                                 In segment CODE, align 4, keep-with-next
   1875          void TimerRedrawScreen()
   1876          {
   \                     TimerRedrawScreen:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1877            WSHDR *wws=AllocWS(128);
   1878            sfps++;
   \   00000004   ........           LDR      R6,??DataTable100  ;; ball
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   8000A0E3           MOV      R0,#+128
   \   00000010   250100EF           SWI      +293
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   540796E5           LDR      R0,[R6, #+1876]
   1879            GetDateTime(&date,&time);
   \   0000001C   761E86E2           ADD      R1,R6,#+1888
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   540786E5           STR      R0,[R6, #+1876]
   \   00000028   6800A0E3           MOV      R0,#+104
   \   0000002C   400E80E3           ORR      R0,R0,#0x400
   \   00000030   060080E0           ADD      R0,R0,R6
   \   00000034   B40000EF           SWI      +180
   \   00000038   6207D6E5           LDRB     R0,[R6, #+1890]
   \   0000003C   581796E5           LDR      R1,[R6, #+1880]
   \   00000040   000051E1           CMP      R1,R0
   \   00000044   0400000A           BEQ      ??TimerRedrawScreen_0
   1880            if(lastsec!=time.sec)
   1881            {
   1882              lastsec = time.sec;
   \   00000048   580786E5           STR      R0,[R6, #+1880]
   1883              fps = sfps;
   \   0000004C   540796E5           LDR      R0,[R6, #+1876]
   \   00000050   500786E5           STR      R0,[R6, #+1872]
   1884              sfps = 0;
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   540786E5           STR      R0,[R6, #+1876]
   1885            }
   1886          
   1887            
   1888            if(state==STATE_GAME)
   \                     ??TimerRedrawScreen_0:
   \   0000005C   6870A0E3           MOV      R7,#+104
   \   00000060   707E87E3           ORR      R7,R7,#0x700
   \   00000064   D60097E1           LDRSB    R0,[R7, +R6]
   \   00000068   0080E0E3           MVN      R8,#+0
   \   0000006C   080050E1           CMP      R0,R8
   \   00000070   1700001A           BNE      ??TimerRedrawScreen_1
   1889            {
   1890              if(clean_bricks>=bricks_of_clean)
   \   00000074   FE0AD6E1           LDRSH    R0,[R6, #+174]
   \   00000078   F01BD6E1           LDRSH    R1,[R6, #+176]
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   040000BA           BLT      ??TimerRedrawScreen_2
   1891              {
   1892                PrepareLevel((levelcounter++)+1);
   \   00000084   6D07D6E5           LDRB     R0,[R6, #+1901]
   \   00000088   010080E2           ADD      R0,R0,#+1
   \   0000008C   6D07C6E5           STRB     R0,[R6, #+1901]
   \   00000090   FF0000E2           AND      R0,R0,#0xFF
   \   00000094   ........           BL       PrepareLevel
   1893              }
   1894              
   1895              DrwImg(level_bg,0,0);
   \                     ??TimerRedrawScreen_2:
   \   00000098   700496E5           LDR      R0,[R6, #+1136]
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   ........           BL       DrwImg
   1896              DrawBricks();
   \   000000A8   ........           BL       DrawBricks
   1897              DrawBall();
   \   000000AC   ........           BL       DrawBall
   1898              DrawUser();
   \   000000B0   ........           BL       DrawUser
   1899              if(map.type==TYPE_BOSS) DrawBoss();
   \   000000B4   F8019FE5           LDR      R0,??TimerRedrawScreen_3  ;; map + 10
   \   000000B8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000BC   010050E3           CMP      R0,#+1
   \   000000C0   0000001A           BNE      ??TimerRedrawScreen_4
   \   000000C4   ........           BL       DrawBoss
   1900              DrawBonuses();
   \                     ??TimerRedrawScreen_4:
   \   000000C8   ........           BL       DrawBonuses
   1901              DrawOther();
   \   000000CC   ........           _BLF     DrawSprites,??DrawSprites??rA
   \   000000D0   060000EA           B        ??TimerRedrawScreen_5
   1902            }
   1903              else if(state==STATE_MENU || state==STATE_ABOUT ||
   1904                state==STATE_SETTINGS || state==STATE_RECORDS ||
   1905                state==STATE_SLEVEL)
   \                     ??TimerRedrawScreen_1:
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   04005013           CMPNE    R0,#+4
   \   000000DC   02005013           CMPNE    R0,#+2
   \   000000E0   03005013           CMPNE    R0,#+3
   \   000000E4   01005013           CMPNE    R0,#+1
   \   000000E8   0000001A           BNE      ??TimerRedrawScreen_5
   1906              {
   1907                DrawMenu();
   \   000000EC   ........           _BLF     DrawMenu,??DrawMenu??rA
   1908              }
   1909            
   1910            if(state==STATE_DBG_SETBALL)
   \                     ??TimerRedrawScreen_5:
   \   000000F0   D60097E1           LDRSB    R0,[R7, +R6]
   \   000000F4   060050E3           CMP      R0,#+6
   \   000000F8   0D00001A           BNE      ??TimerRedrawScreen_6
   1911            {
   1912              DrwImg(level_bg,0,0);
   \   000000FC   700496E5           LDR      R0,[R6, #+1136]
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   ........           BL       DrwImg
   1913              DrwImg(ball[ball_type][ball_s].img,ball_x,ball_y);
   \   0000010C   7107D6E5           LDRB     R0,[R6, #+1905]
   \   00000110   7247D6E5           LDRB     R4,[R6, #+1906]
   \   00000114   0C30A0E3           MOV      R3,#+12
   \   00000118   F42BD6E1           LDRSH    R2,[R6, #+180]
   \   0000011C   F21BD6E1           LDRSH    R1,[R6, #+178]
   \   00000120   2490A0E3           MOV      R9,#+36
   \   00000124   996424E0           MLA      R4,R9,R4,R6
   \   00000128   934020E0           MLA      R0,R3,R0,R4
   \   0000012C   000090E5           LDR      R0,[R0, #+0]
   \   00000130   ........           BL       DrwImg
   1914            }
   1915            
   1916            if(state==STATE_PRESS) //что-то произошло,и что-то выводим на экран,после нажатия на "0" игра продолжается
   \                     ??TimerRedrawScreen_6:
   \   00000134   D60097E1           LDRSB    R0,[R7, +R6]
   \   00000138   050050E3           CMP      R0,#+5
   \   0000013C   4800001A           BNE      ??TimerRedrawScreen_7
   1917            {
   1918              const char bgcol[4]={30,30,30,50};
   \   00000140   70119FE5           LDR      R1,??TimerRedrawScreen_3+0x4  ;; `?<Constant {30, 30, 30, 50}>`
   1919              const char frcol[4]={190,190,190,100};
   1920              const char strcol[4]={250,250,250,100};
   1921              short y1 = (sh/2)-(sh/4);
   1922              short y2 = (sh/2)+(sh/4);
   1923              DrawRoundedFrame(0,y1,sw-1,y2,4,4,0,frcol,bgcol);
   \   00000144   ........           LDR      R11,??DataTable80  ;; sw
   \   00000148   002091E5           LDR      R2,[R1, #0]
   \   0000014C   68119FE5           LDR      R1,??TimerRedrawScreen_3+0x8  ;; `?<Constant {190, 190, 190, 100}>`
   \   00000150   0D00A0E1           MOV      R0,SP
   \   00000154   002080E5           STR      R2,[R0, #+0]
   \   00000158   002091E5           LDR      R2,[R1, #0]
   \   0000015C   5C119FE5           LDR      R1,??TimerRedrawScreen_3+0xC  ;; `?<Constant {250, 250, 250, 100}>`
   \   00000160   04008DE2           ADD      R0,SP,#+4
   \   00000164   002080E5           STR      R2,[R0, #+0]
   \   00000168   002091E5           LDR      R2,[R1, #0]
   \   0000016C   08008DE2           ADD      R0,SP,#+8
   \   00000170   002080E5           STR      R2,[R0, #+0]
   \   00000174   ........           LDR      R0,??DataTable81  ;; sh
   \   00000178   F040D0E1           LDRSH    R4,[R0, #+0]
   \   0000017C   C400A0E1           ASR      R0,R4,#+1
   \   00000180   200F84E0           ADD      R0,R4,R0, LSR #+30
   \   00000184   4001A0E1           ASR      R0,R0,#+2
   \   00000188   A41F84E0           ADD      R1,R4,R4, LSR #+31
   \   0000018C   C110A0E1           ASR      R1,R1,#+1
   \   00000190   009041E0           SUB      R9,R1,R0
   \   00000194   01A080E0           ADD      R10,R0,R1
   \   00000198   0D00A0E1           MOV      R0,SP
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   0998A0E1           MOV      R9,R9, LSL #+16
   \   000001A4   4998A0E1           MOV      R9,R9, ASR #+16
   \   000001A8   0AA8A0E1           MOV      R10,R10, LSL #+16
   \   000001AC   08008DE2           ADD      R0,SP,#+8
   \   000001B0   01002DE9           PUSH     {R0}
   \   000001B4   4AA8A0E1           MOV      R10,R10, ASR #+16
   \   000001B8   0A30A0E1           MOV      R3,R10
   \   000001BC   0910A0E1           MOV      R1,R9
   \   000001C0   0000A0E3           MOV      R0,#+0
   \   000001C4   01002DE9           PUSH     {R0}
   \   000001C8   0400A0E3           MOV      R0,#+4
   \   000001CC   01002DE9           PUSH     {R0}
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   F000DBE1           LDRSH    R0,[R11, #+0]
   \   000001D8   012040E2           SUB      R2,R0,#+1
   \   000001DC   0000A0E3           MOV      R0,#+0
   \   000001E0   500100EF           SWI      +336
   1924              wsprintf(wws,perc_t,press_msg);
   \   000001E4   7A2E86E2           ADD      R2,R6,#+1952
   \   000001E8   300087E2           ADD      R0,R7,#+48
   \   000001EC   061080E0           ADD      R1,R0,R6
   \   000001F0   0500A0E1           MOV      R0,R5
   \   000001F4   240100EF           SWI      +292
   1925              DrawString(wws,0,y1+4,sw-1,y2-4,FONT_MD,TEXT_ALIGNMIDDLE,strcol,NULL);
   \   000001F8   0000A0E3           MOV      R0,#+0
   \   000001FC   01002DE9           PUSH     {R0}
   \   00000200   042089E2           ADD      R2,R9,#+4
   \   00000204   0010A0E3           MOV      R1,#+0
   \   00000208   20008DE2           ADD      R0,SP,#+32
   \   0000020C   01002DE9           PUSH     {R0}
   \   00000210   0200A0E3           MOV      R0,#+2
   \   00000214   01002DE9           PUSH     {R0}
   \   00000218   0700A0E3           MOV      R0,#+7
   \   0000021C   01002DE9           PUSH     {R0}
   \   00000220   04004AE2           SUB      R0,R10,#+4
   \   00000224   01002DE9           PUSH     {R0}
   \   00000228   F000DBE1           LDRSH    R0,[R11, #+0]
   \   0000022C   013040E2           SUB      R3,R0,#+1
   \   00000230   0500A0E1           MOV      R0,R5
   \   00000234   4C0100EF           SWI      +332
   \   00000238   28D08DE2           ADD      SP,SP,#+40
   1926              DrwImg(press0,(sw/2)-(press0->w/2),y2-press0->h-2);
   \   0000023C   4C0796E5           LDR      R0,[R6, #+1868]
   \   00000240   F010DBE1           LDRSH    R1,[R11, #+0]
   \   00000244   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000248   B030D0E1           LDRH     R3,[R0, #+0]
   \   0000024C   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000250   02204AE0           SUB      R2,R10,R2
   \   00000254   022042E2           SUB      R2,R2,#+2
   \   00000258   A330A0E1           LSR      R3,R3,#+1
   \   0000025C   C11063E0           RSB      R1,R3,R1, ASR #+1
   \   00000260   ........           BL       DrwImg
   1927            }
   1928            DrawIconbar(wws);
   \                     ??TimerRedrawScreen_7:
   \   00000264   0500A0E1           MOV      R0,R5
   \   00000268   ........           BL       DrawIconbar
   1929            FreeWS(wws);
   \   0000026C   0500A0E1           MOV      R0,R5
   \   00000270   290100EF           SWI      +297
   1930            //LCD_Redraw();
   1931            if(savedata.tmr_speed<4 || savedata.tmr_speed>15) savedata.tmr_speed=9;
   \   00000274   ........           LDR      R0,??DataTable82  ;; savedata
   \   00000278   1010D0E5           LDRB     R1,[R0, #+16]
   \   0000027C   040051E3           CMP      R1,#+4
   \   00000280   0100003A           BCC      ??TimerRedrawScreen_8
   \   00000284   100051E3           CMP      R1,#+16
   \   00000288   0100003A           BCC      ??TimerRedrawScreen_9
   \                     ??TimerRedrawScreen_8:
   \   0000028C   0910A0E3           MOV      R1,#+9
   \   00000290   1010C0E5           STRB     R1,[R0, #+16]
   1932            if(state==STATE_GAME) {GBS_StartTimerProc(&gametimer,savedata.tmr_speed,TimerRedrawScreen);}
   \                     ??TimerRedrawScreen_9:
   \   00000294   D61097E1           LDRSB    R1,[R7, +R6]
   \   00000298   080051E1           CMP      R1,R8
   \   0000029C   F78FBD18           POPNE    {R0-R2,R4-R11,PC}
   \   000002A0   ........           LDR      R2,??DataTable89  ;; TimerRedrawScreen
   \   000002A4   1010D0E5           LDRB     R1,[R0, #+16]
   \   000002A8   ........           LDR      R0,??DataTable90  ;; gametimer
   \   000002AC   4D0000EF           SWI      +77
   1933          }
   \   000002B0   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??TimerRedrawScreen_3:
   \   000002B4   ........           DC32     map + 10
   \   000002B8   ........           DC32     `?<Constant {30, 30, 30, 50}>`
   \   000002BC   ........           DC32     `?<Constant {190, 190, 190, 100}>`
   \   000002C0   ........           DC32     `?<Constant {250, 250, 250, 100}>`
   1934          
   1935          
   1936          
   1937          
   1938          

   \                                 In segment CODE, align 4, keep-with-next
   1939          void moveuser(GUI_MSG *msg)
   1940          {
   1941            if(msg->gbsmsg->msg==KEY_DOWN)
   \                     moveuser:
   \   00000000   ........           LDR      R2,??DataTable87  ;; ball
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   043090E5           LDR      R3,[R0, #+4]
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   04C093E5           LDR      R12,[R3, #+4]
   \   00000014   9340A0E3           MOV      R4,#+147
   \   00000018   404F84E3           ORR      R4,R4,#0x100
   \   0000001C   04005CE1           CMP      R12,R4
   \   00000020   1800001A           BNE      ??moveuser_0
   1942            {
   1943              if(msg->gbsmsg->submess=='6' || msg->gbsmsg->submess==RIGHT_BUTTON) user_r=1;
   \   00000024   084093E5           LDR      R4,[R3, #+8]
   \   00000028   01C0A0E3           MOV      R12,#+1
   \   0000002C   360054E3           CMP      R4,#+54
   \   00000030   3E005413           CMPNE    R4,#+62
   \   00000034   74C7C205           STRBEQ   R12,[R2, #+1908]
   1944              if(msg->gbsmsg->submess=='4' || msg->gbsmsg->submess==LEFT_BUTTON) user_l=1;
   \   00000038   340054E3           CMP      R4,#+52
   \   0000003C   3D005413           CMPNE    R4,#+61
   \   00000040   73C7C205           STRBEQ   R12,[R2, #+1907]
   1945              if(msg->gbsmsg->submess=='5' || msg->gbsmsg->submess==ENTER_BUTTON && bonus_active[BON_SLIME]) //нажали и мяч полетеел..
   \   00000044   350054E3           CMP      R4,#+53
   \   00000048   0400000A           BEQ      ??moveuser_1
   \   0000004C   1A0054E3           CMP      R4,#+26
   \   00000050   0C00001A           BNE      ??moveuser_0
   \   00000054   6234D2E5           LDRB     R3,[R2, #+1122]
   \   00000058   000053E3           CMP      R3,#+0
   \   0000005C   0900000A           BEQ      ??moveuser_0
   1946              {
   1947                if(bon_slime_use)
   \                     ??moveuser_1:
   \   00000060   7C37D2E5           LDRB     R3,[R2, #+1916]
   \   00000064   000053E3           CMP      R3,#+0
   \   00000068   0600000A           BEQ      ??moveuser_0
   1948                {
   1949                  ball_spx = -mem_ball_spx; //в обр сторону
   \   0000006C   7A37D2E5           LDRB     R3,[R2, #+1914]
   1950                  ball_spy = -abs(mem_ball_spy); //вверх
   1951                  bon_slime_use=0; //самоотключалка
   \   00000070   7C17C2E5           STRB     R1,[R2, #+1916]
   \   00000074   003063E2           RSB      R3,R3,#+0
   \   00000078   B63BC2E1           STRH     R3,[R2, #+182]
   \   0000007C   7B37D2E5           LDRB     R3,[R2, #+1915]
   \   00000080   003063E2           RSB      R3,R3,#+0
   \   00000084   B83BC2E1           STRH     R3,[R2, #+184]
   1952                }
   1953              }
   1954            }
   1955            
   1956            if(msg->gbsmsg->msg==KEY_UP)
   \                     ??moveuser_0:
   \   00000088   043090E5           LDR      R3,[R0, #+4]
   \   0000008C   044093E5           LDR      R4,[R3, #+4]
   \   00000090   650F54E3           CMP      R4,#+404
   \   00000094   0600001A           BNE      ??moveuser_2
   1957            {
   1958              if(msg->gbsmsg->submess=='6' || msg->gbsmsg->submess==RIGHT_BUTTON) user_r=0;
   \   00000098   084093E5           LDR      R4,[R3, #+8]
   \   0000009C   360054E3           CMP      R4,#+54
   \   000000A0   3E005413           CMPNE    R4,#+62
   \   000000A4   7417C205           STRBEQ   R1,[R2, #+1908]
   1959              if(msg->gbsmsg->submess=='4' || msg->gbsmsg->submess==LEFT_BUTTON) user_l=0;
   \   000000A8   340054E3           CMP      R4,#+52
   \   000000AC   3D005413           CMPNE    R4,#+61
   \   000000B0   7317C205           STRBEQ   R1,[R2, #+1907]
   1960            }
   1961          }
   \                     ??moveuser_2:
   \   000000B4   1000BDE8           POP      {R4}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
   1962          
   1963          
   1964          
   1965          

   \                                 In segment CODE, align 4, keep-with-next
   1966          void debug_keys(GUI_MSG *msg)
   1967          {
   \                     debug_keys:
   \   00000000   00402DE9           PUSH     {LR}
   1968            if(msg->gbsmsg->msg==KEY_DOWN || msg->gbsmsg->msg==LONG_PRESS)
   \   00000004   040090E5           LDR      R0,[R0, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   02208212           ADDNE    R2,R2,#+2
   \   0000001C   02005111           CMPNE    R1,R2
   \   00000020   0080BD18           POPNE    {PC}
   1969            {
   1970              if(msg->gbsmsg->submess=='6') {ball_x+=4;TimerRedrawScreen();return;}
   \   00000024   ........           LDR      R1,??DataTable87  ;; ball
   \   00000028   083090E5           LDR      R3,[R0, #+8]
   \   0000002C   F22BD1E1           LDRSH    R2,[R1, #+178]
   \   00000030   360053E3           CMP      R3,#+54
   \   00000034   04008202           ADDEQ    R0,R2,#+4
   \   00000038   0200000A           BEQ      ??debug_keys_0
   1971              if(msg->gbsmsg->submess=='4') {ball_x-=4;TimerRedrawScreen();return;}
   \   0000003C   340053E3           CMP      R3,#+52
   \   00000040   0200001A           BNE      ??debug_keys_1
   \   00000044   040042E2           SUB      R0,R2,#+4
   \                     ??debug_keys_0:
   \   00000048   B20BC1E1           STRH     R0,[R1, #+178]
   \                     ??debug_keys_2:
   \   0000004C   080000EA           B        ??debug_keys_3
   1972              if(msg->gbsmsg->submess=='8') {ball_y+=4;TimerRedrawScreen();return;}
   \                     ??debug_keys_1:
   \   00000050   F42BD1E1           LDRSH    R2,[R1, #+180]
   \   00000054   380053E3           CMP      R3,#+56
   \   00000058   04008202           ADDEQ    R0,R2,#+4
   \   0000005C   B40BC101           STRHEQ   R0,[R1, #+180]
   \   00000060   0300000A           BEQ      ??debug_keys_3
   1973              if(msg->gbsmsg->submess=='2') {ball_y-=4;TimerRedrawScreen();return;}
   \   00000064   320053E3           CMP      R3,#+50
   \   00000068   0080BD18           POPNE    {PC}
   \   0000006C   040042E2           SUB      R0,R2,#+4
   \   00000070   B40BC1E1           STRH     R0,[R1, #+180]
   \                     ??debug_keys_3:
   \   00000074   ........           BL       TimerRedrawScreen
   \   00000078   0080BDE8           POP      {PC}             ;; return
   1974              
   1975              //if(msg->gbsmsg->submess=='0') {state=STATE_GAME;TimerRedrawScreen();return;}
   1976            }
   1977          }
   1978          

   \                                 In segment CODE, align 4, keep-with-next
   1979          void check_shoot(GUI_MSG *msg)
   1980          {
   \                     check_shoot:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1981            static int counter = 0;
   1982            if(msg->gbsmsg->msg==KEY_DOWN || msg->gbsmsg->msg==LONG_PRESS)
   \   00000004   040090E5           LDR      R0,[R0, #+4]
   \   00000008   ........           LDR      R4,??DataTable87  ;; ball
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   5C2794E5           LDR      R2,[R4, #+1884]
   \   00000014   9330A0E3           MOV      R3,#+147
   \   00000018   403F83E3           ORR      R3,R3,#0x100
   \   0000001C   030051E1           CMP      R1,R3
   \   00000020   02308312           ADDNE    R3,R3,#+2
   \   00000024   03005111           CMPNE    R1,R3
   \   00000028   3A00001A           BNE      ??check_shoot_0
   1983            {
   1984              if((msg->gbsmsg->submess=='5' || msg->gbsmsg->submess==ENTER_BUTTON) && bonus_shot_type>=0)
   \   0000002C   081090E5           LDR      R1,[R0, #+8]
   \   00000030   350051E3           CMP      R1,#+53
   \   00000034   1A005113           CMPNE    R1,#+26
   \   00000038   3600001A           BNE      ??check_shoot_0
   \   0000003C   7800A0E3           MOV      R0,#+120
   \   00000040   700E80E3           ORR      R0,R0,#0x700
   \   00000044   D40090E1           LDRSB    R0,[R0, +R4]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   3100004A           BMI      ??check_shoot_0
   1985              {
   1986                char n;
   1987                char uid;
   1988                switch(bonus_shot_type)
   \   00000050   0300000A           BEQ      ??check_shoot_1
   \   00000054   01C050E2           SUBS     R12,R0,#+1
   \   00000058   0830A003           MOVEQ    R3,#+8
   \   0000005C   1A10A003           MOVEQ    R1,#+26
   \   00000060   010000EA           B        ??check_shoot_2
   1989                {
   1990                  case 0: n=4;uid=UID_WEAPON_PISTOL;break;
   \                     ??check_shoot_1:
   \   00000064   0430A0E3           MOV      R3,#+4
   \   00000068   1910A0E3           MOV      R1,#+25
   1991                  case 1: n=8;uid=UID_WEAPON_ROCKET;break;
   1992                }
   1993                if(counter>n) //струляем
   \                     ??check_shoot_2:
   \   0000006C   020053E1           CMP      R3,R2
   \   00000070   280000AA           BGE      ??check_shoot_0
   1994                {
   1995                  InitMSprite(&weapon_shot[bonus_shot_type],uid,(user_x+user[user_type][user_s].img[0]->w/2)-(weapon_shot[bonus_shot_type].img[0]->w/2),user_y-2,0,-3,0,offset1);
   \   00000074   2420A0E3           MOV      R2,#+36
   \   00000078   924020E0           MLA      R0,R2,R0,R4
   \   0000007C   7927D4E5           LDRB     R2,[R4, #+1913]
   \   00000080   7CC0A0E3           MOV      R12,#+124
   \   00000084   40CE8CE3           ORR      R12,R12,#0x400
   \   00000088   04002DE9           PUSH     {R2}
   \   0000008C   2450A0E3           MOV      R5,#+36
   \   00000090   6C70A0E3           MOV      R7,#+108
   \   00000094   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   04002DE9           PUSH     {R2}
   \   000000A0   4118A0E1           MOV      R1,R1, ASR #+16
   \   000000A4   0220E0E3           MVN      R2,#+2
   \   000000A8   04002DE9           PUSH     {R2}
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   04002DE9           PUSH     {R2}
   \   000000B4   76E7D4E5           LDRB     LR,[R4, #+1910]
   \   000000B8   7767D4E5           LDRB     R6,[R4, #+1911]
   \   000000BC   FC2BD4E1           LDRSH    R2,[R4, #+188]
   \   000000C0   974626E0           MLA      R6,R7,R6,R4
   \   000000C4   023042E2           SUB      R3,R2,#+2
   \   000000C8   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   000000CC   956E26E0           MLA      R6,R5,LR,R6
   \   000000D0   0338A0E1           MOV      R3,R3, LSL #+16
   \   000000D4   C85096E5           LDR      R5,[R6, #+200]
   \   000000D8   4338A0E1           MOV      R3,R3, ASR #+16
   \   000000DC   005095E5           LDR      R5,[R5, #+0]
   \   000000E0   B050D5E1           LDRH     R5,[R5, #+0]
   \   000000E4   A52082E0           ADD      R2,R2,R5, LSR #+1
   \   000000E8   00509CE7           LDR      R5,[R12, +R0]
   \   000000EC   00008CE0           ADD      R0,R12,R0
   \   000000F0   005095E5           LDR      R5,[R5, #+0]
   \   000000F4   B050D5E1           LDRH     R5,[R5, #+0]
   \   000000F8   A52042E0           SUB      R2,R2,R5, LSR #+1
   \   000000FC   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000100   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000104   ........           _BLF     InitMSprite,??InitMSprite??rA
   1996                  counter=0;
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   5C0784E5           STR      R0,[R4, #+1884]
   1997                  return;
   \   00000110   10D08DE2           ADD      SP,SP,#+16
   \   00000114   F080BDE8           POP      {R4-R7,PC}
   1998                }
   1999              }
   2000            }
   2001            counter++;
   \                     ??check_shoot_0:
   \   00000118   010082E2           ADD      R0,R2,#+1
   \   0000011C   5C0784E5           STR      R0,[R4, #+1884]
   2002          }
   \   00000120   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ball:
   \   00000000                      DS8 108
   \   0000006C                      REQUIRE `?<Initializer for ball>`
   \                     bonus_counter:
   \   0000006C                      DS8 32
   \   0000008C                      REQUIRE `?<Initializer for bonus_counter>`
   \                     bonus_time:
   \   0000008C                      DS8 32
   \   000000AC                      REQUIRE `?<Initializer for bonus_time>`
   \                     score:
   \   000000AC                      DS8 2
   \   000000AE                      REQUIRE `?<Initializer for score>`
   \                     clean_bricks:
   \   000000AE                      DS8 2
   \   000000B0                      REQUIRE `?<Initializer for clean_bricks>`
   \                     bricks_of_clean:
   \   000000B0                      DS8 2
   \   000000B2                      REQUIRE `?<Initializer for bricks_of_clean>`
   \                     ball_x:
   \   000000B2                      DS8 2
   \   000000B4                      REQUIRE `?<Initializer for ball_x>`
   \                     ball_y:
   \   000000B4                      DS8 2
   \   000000B6                      REQUIRE `?<Initializer for ball_y>`
   \                     ball_spx:
   \   000000B6                      DS8 2
   \   000000B8                      REQUIRE `?<Initializer for ball_spx>`
   \                     ball_spy:
   \   000000B8                      DS8 2
   \   000000BA                      REQUIRE `?<Initializer for ball_spy>`
   \                     user_x:
   \   000000BA                      DS8 2
   \   000000BC                      REQUIRE `?<Initializer for user_x>`
   \                     user_y:
   \   000000BC                      DS8 2
   \   000000BE                      REQUIRE `?<Initializer for user_y>`
   \                     user_c:
   \   000000BE                      DS8 2
   \   000000C0                      REQUIRE `?<Initializer for user_c>`
   \                     user_N:
   \   000000C0                      DS8 2
   \   000000C2                      REQUIRE `?<Initializer for user_N>`
   \                     sx:
   \   000000C2                      DS8 2
   \   000000C4                      REQUIRE `?<Initializer for sx>`
   \                     sy:
   \   000000C4                      DS8 2
   \   000000C6                      REQUIRE `?<Initializer for sy>`
   \   000000C6                      DS8 2
   \                     user:
   \   000000C8                      DS8 432
   \   00000278                      REQUIRE `?<Initializer for user>`
   \                     UsedLevel:
   \   00000278                      DS8 480
   \   00000458                      REQUIRE `?<Initializer for UsedLevel>`
   \                     bonus_active:
   \   00000458                      DS8 16
   \   00000468                      REQUIRE `?<Initializer for bonus_active>`
   \                     `date`:
   \   00000468                      DS8 8
   \   00000470                      REQUIRE `?<Initializer for date>`
   \                     level_bg:
   \   00000470                      DS8 4
   \   00000474                      REQUIRE `?<Initializer for level_bg>`
   \                     PLAY_ID:
   \   00000474                      DS8 4
   \   00000478                      REQUIRE `?<Initializer for PLAY_ID>`
   \                     err:
   \   00000478                      DS8 4
   \   0000047C                      REQUIRE `?<Initializer for err>`
   \                     weapon_shot:
   \   0000047C                      DS8 72
   \   000004C4                      REQUIRE `?<Initializer for weapon_shot>`
   \                     bonus:
   \   000004C4                      DS8 640
   \   00000744                      REQUIRE `?<Initializer for bonus>`
   \                     ball_check_only_pos_x:
   \   00000744                      DS8 4
   \   00000748                      REQUIRE `?<Initializer for ball_check_only_pos_x>`
   \                     ball_check_only_pos_y:
   \   00000748                      DS8 4
   \   0000074C                      REQUIRE `?<Initializer for ball_check_only_pos_y>`
   \                     press0:
   \   0000074C                      DS8 4
   \   00000750                      REQUIRE `?<Initializer for press0>`
   \                     fps:
   \   00000750                      DS8 4
   \   00000754                      REQUIRE `?<Initializer for fps>`
   \                     sfps:
   \   00000754                      DS8 4
   \   00000758                      REQUIRE `?<Initializer for sfps>`
   \                     lastsec:
   \   00000758                      DS8 4
   \   0000075C                      REQUIRE `?<Initializer for lastsec>`
   \   0000075C                      DS8 4
   \   00000760                      REQUIRE `?<Initializer for counter>`
   \                     time:
   \   00000760                      DS8 8
   \   00000768                      REQUIRE `?<Initializer for time>`
   \                     state:
   \   00000768                      DS8 1
   \   00000769                      REQUIRE `?<Initializer for state>`
   \                     total_levels:
   \   00000769                      DS8 1
   \   0000076A                      REQUIRE `?<Initializer for total_levels>`
   \                     ball_max_speed:
   \   0000076A                      DS8 1
   \   0000076B                      REQUIRE `?<Initializer for ball_max_speed>`
   \                     ball_min_speed:
   \   0000076B                      DS8 1
   \   0000076C                      REQUIRE `?<Initializer for ball_min_speed>`
   \                     total_lives:
   \   0000076C                      DS8 1
   \   0000076D                      REQUIRE `?<Initializer for total_lives>`
   \                     levelcounter:
   \   0000076D                      DS8 1
   \   0000076E                      REQUIRE `?<Initializer for levelcounter>`
   \                     press_type:
   \   0000076E                      DS8 1
   \   0000076F                      REQUIRE `?<Initializer for press_type>`
   \                     SoundRepeat:
   \   0000076F                      DS8 1
   \   00000770                      REQUIRE `?<Initializer for SoundRepeat>`
   \                     DEBUG:
   \   00000770                      DS8 1
   \   00000771                      REQUIRE `?<Initializer for DEBUG>`
   \                     ball_s:
   \   00000771                      DS8 1
   \   00000772                      REQUIRE `?<Initializer for ball_s>`
   \                     ball_type:
   \   00000772                      DS8 1
   \   00000773                      REQUIRE `?<Initializer for ball_type>`
   \                     user_l:
   \   00000773                      DS8 1
   \   00000774                      REQUIRE `?<Initializer for user_l>`
   \                     user_r:
   \   00000774                      DS8 1
   \   00000775                      REQUIRE `?<Initializer for user_r>`
   \                     user_sp:
   \   00000775                      DS8 1
   \   00000776                      REQUIRE `?<Initializer for user_sp>`
   \                     user_s:
   \   00000776                      DS8 1
   \   00000777                      REQUIRE `?<Initializer for user_s>`
   \                     user_type:
   \   00000777                      DS8 1
   \   00000778                      REQUIRE `?<Initializer for user_type>`
   \                     bonus_shot_type:
   \   00000778                      DS8 1
   \   00000779                      REQUIRE `?<Initializer for bonus_shot_type>`
   \                     offset1:
   \   00000779                      DS8 1
   \   0000077A                      REQUIRE `?<Initializer for offset1>`
   \                     mem_ball_spx:
   \   0000077A                      DS8 1
   \   0000077B                      REQUIRE `?<Initializer for mem_ball_spx>`
   \                     mem_ball_spy:
   \   0000077B                      DS8 1
   \   0000077C                      REQUIRE `?<Initializer for mem_ball_spy>`
   \                     bon_slime_use:
   \   0000077C                      DS8 1
   \   0000077D                      REQUIRE `?<Initializer for bon_slime_use>`
   \                     cont:
   \   0000077D                      DS8 1
   \   0000077E                      REQUIRE `?<Initializer for cont>`
   \                     blocks_trigger:
   \   0000077E                      DS8 1
   \   0000077F                      REQUIRE `?<Initializer for blocks_trigger>`
   \   0000077F                      DS8 1
   \   00000780                      DS8 12
   \   0000078C                      REQUIRE `?<Initializer for x_line>`
   \   0000078C                      DS8 12
   \   00000798                      REQUIRE `?<Initializer for y_line>`
   \                     perc_t:
   \   00000798                      DS8 3
   \   0000079B                      REQUIRE `?<Initializer for perc_t>`
   \                     perc_s:
   \   0000079B                      DS8 3
   \   0000079E                      REQUIRE `?<Initializer for perc_s>`
   \   0000079E                      DS8 2
   \                     press_msg:
   \   000007A0                      DS8 128
   \   00000820                      REQUIRE `?<Initializer for press_msg>`
   \                     fstats:
   \   00000820                      DS8 40
   \   00000848                      REQUIRE `?<Initializer for fstats>`
   \                     brick_sparks:
   \   00000848                      DS8 36
   \   0000086C                      REQUIRE `?<Initializer for brick_sparks>`
   \                     mine_sparks:
   \   0000086C                      DS8 36
   \   00000890                      REQUIRE `?<Initializer for mine_sparks>`
   \                     rocket_sparks:
   \   00000890                      DS8 36
   \   000008B4                      REQUIRE `?<Initializer for rocket_sparks>`
   \                     press_tmr:
   \   000008B4                      DS8 16
   \   000008C4                      REQUIRE `?<Initializer for press_tmr>`
   \                     TestLevel:
   \   000008C4                      DS8 480
   \   00000AA4                      REQUIRE `?<Initializer for TestLevel>`
   \                     ptmr:
   \   00000AA4                      DS8 16
   \   00000AB4                      REQUIRE `?<Initializer for ptmr>`

   \                                 In segment DATA_I, align 1, align-sorted
   \                     perc_d:
   \   00000000                      DS8 3
   \   00000003                      REQUIRE `?<Initializer for perc_d>`
   2003          
   2004          
   2005          
   2006          
   2007          
   2008          
   2009          

   \                                 In segment CODE, align 4, keep-with-next
   2010          int Keyhook(GUI_MSG *msg)
   2011          {
   \                     Keyhook:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   2012            if(state==STATE_MENU || state==STATE_ABOUT ||
   2013               state==STATE_SETTINGS || state==STATE_RECORDS ||
   2014               state==STATE_SLEVEL) return(MenuNavigation(msg)); //если меню активно,то юзаем только кнопы меню
   \   00000004   ........           LDR      R5,??DataTable95  ;; ball
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   6890A0E3           MOV      R9,#+104
   \   00000010   709E89E3           ORR      R9,R9,#0x700
   \   00000014   D50099E1           LDRSB    R0,[R9, +R5]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   04005013           CMPNE    R0,#+4
   \   00000020   02005013           CMPNE    R0,#+2
   \   00000024   03005013           CMPNE    R0,#+3
   \   00000028   01005013           CMPNE    R0,#+1
   \   0000002C   0200001A           BNE      ??Keyhook_0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     MenuNavigation,??MenuNavigation??rA
   \   00000038   F087BDE8           POP      {R4-R10,PC}      ;; return
   2015            if(state==STATE_GAME)
   \                     ??Keyhook_0:
   \   0000003C   00A0E0E3           MVN      R10,#+0
   \   00000040   0A0050E1           CMP      R0,R10
   \   00000044   0300001A           BNE      ??Keyhook_1
   2016            {
   2017              moveuser(msg);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       moveuser
   2018              check_shoot(msg);
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       check_shoot
   2019            }
   2020            
   2021            if(state==STATE_DBG_SETBALL) debug_keys(msg);
   \                     ??Keyhook_1:
   \   00000058   D50099E1           LDRSB    R0,[R9, +R5]
   \   0000005C   060050E3           CMP      R0,#+6
   \   00000060   0100001A           BNE      ??Keyhook_2
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       debug_keys
   2022            
   2023            if(msg->gbsmsg->msg==KEY_DOWN)
   \                     ??Keyhook_2:
   \   0000006C   040094E5           LDR      R0,[R4, #+4]
   \   00000070   9320A0E3           MOV      R2,#+147
   \   00000074   041090E5           LDR      R1,[R0, #+4]
   \   00000078   402F82E3           ORR      R2,R2,#0x100
   \   0000007C   020051E1           CMP      R1,R2
   \   00000080   7400001A           BNE      ??Keyhook_3
   2024            {
   2025              if(msg->gbsmsg->submess==RIGHT_SOFT && state==STATE_GAME)  //заходим из игры в меню
   \   00000084   D51099E1           LDRSB    R1,[R9, +R5]
   \   00000088   082090E5           LDR      R2,[R0, #+8]
   \   0000008C   0060A0E3           MOV      R6,#+0
   \   00000090   0170A0E3           MOV      R7,#+1
   \   00000094   040052E3           CMP      R2,#+4
   \   00000098   0A005101           CMPEQ    R1,R10
   \   0000009C   0700001A           BNE      ??Keyhook_4
   2026              {
   2027                 PlayMusic(MENU_MUSIC);
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   ........           BL       PlayMusic
   2028                 state=STATE_MENU;//переходим в меню
   2029                 cont=1; //ставим флаг на продолжение игры
   2030                 GBS_StartTimerProc(&gametimer,25,TimerRedrawScreen); //пускаем рисование
   \   000000A8   ........           LDR      R2,??DataTable89  ;; TimerRedrawScreen
   \   000000AC   ........           LDR      R0,??DataTable90  ;; gametimer
   \   000000B0   0560C9E7           STRB     R6,[R9, +R5]
   \   000000B4   7D77C5E5           STRB     R7,[R5, #+1917]
   \   000000B8   1910A0E3           MOV      R1,#+25
   \   000000BC   870000EA           B        ??Keyhook_5
   2031                 return 0;
   2032              } 
   2033              if(msg->gbsmsg->submess=='0')
   \                     ??Keyhook_4:
   \   000000C0   24829FE5           LDR      R8,??Keyhook_6   ;; `?<Constant "\\342\\340\\370\\345 \\350\\354\\377">`
   \   000000C4   300052E3           CMP      R2,#+48
   \   000000C8   3000001A           BNE      ??Keyhook_7
   2034              {
   2035                if(state==STATE_PRESS)
   \   000000CC   050051E3           CMP      R1,#+5
   \   000000D0   0C00001A           BNE      ??Keyhook_8
   2036                {
   2037                if(press_type==PRESS_GAMEOVER) //сдули нахъ или выиграли =)
   \   000000D4   6E07D5E5           LDRB     R0,[R5, #+1902]
   \   000000D8   010050E3           CMP      R0,#+1
   \   000000DC   0600001A           BNE      ??Keyhook_9
   2038                {
   2039                  SetDefaultGameParameters();
   \   000000E0   ........           BL       SetDefaultGameParameters
   2040                  state = STATE_MENU;
   \   000000E4   0560C9E7           STRB     R6,[R9, +R5]
   2041                  CreateTextEditDialog(0,"ваше имя",32);
   \   000000E8   2020A0E3           MOV      R2,#+32
   \   000000EC   0810A0E1           MOV      R1,R8
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   ........           _BLF     CreateTextEditDialog,??CreateTextEditDialog??rA
   \   000000F8   790000EA           B        ??Keyhook_10
   2042                }
   2043                else if(press_type==PRESS_LOSELIFE) //лайф потеряли
   2044                {
   2045                  state = STATE_GAME;
   \                     ??Keyhook_9:
   \   000000FC   05A0C9E7           STRB     R10,[R9, +R5]
   2046                  TimerRedrawScreen();
   \   00000100   ........           BL       TimerRedrawScreen
   2047                }
   2048                else if(press_type==PRESS_NEWLEVEL) //новый левел
   2049                {
   2050                  state = STATE_GAME;
   2051                  TimerRedrawScreen();
   2052                }
   2053                else //xz
   2054                {
   2055                  state = STATE_GAME;
   2056                  TimerRedrawScreen();
   2057                }
   2058                return 0;
   \                     ??Keyhook_11:
   \   00000104   530000EA           B        ??Keyhook_3
   2059                }
   2060                else if(state==STATE_GAME)
   \                     ??Keyhook_8:
   \   00000108   0A0051E1           CMP      R1,R10
   \   0000010C   1F00001A           BNE      ??Keyhook_7
   2061                {
   2062                  //DumpMap(UsedLevel,levelcounter);
   2063                 //LCD_DrawImage(user[user_s].img,100,100);
   2064                  //LCD_Redraw();
   2065                  //SUBPROC((void*)Test);
   2066                  //state = STATE_DBG_SETBALL;
   2067                 
   2068                  short N;
   2069                  int x=0;
   \   00000110   0040A0E3           MOV      R4,#+0
   2070                  for(int i=0;i<6;i++)
   2071                  {
   2072                    N = InitSprite(&mine_sparks,126,x,150,1);
   \                     ??Keyhook_12:
   \   00000114   0100A0E3           MOV      R0,#+1
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   9630A0E3           MOV      R3,#+150
   \   00000120   0428A0E1           MOV      R2,R4, LSL #+16
   \   00000124   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000128   7E10A0E3           MOV      R1,#+126
   \   0000012C   410F89E2           ADD      R0,R9,#+260
   \   00000130   050080E0           ADD      R0,R0,R5
   \   00000134   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000138   0070A0E1           MOV      R7,R0
   2073                    x+=35;
   \   0000013C   234084E2           ADD      R4,R4,#+35
   2074                  }
   \   00000140   016086E2           ADD      R6,R6,#+1
   \   00000144   060056E3           CMP      R6,#+6
   \   00000148   04D08DE2           ADD      SP,SP,#+4
   \   0000014C   F0FFFFBA           BLT      ??Keyhook_12
   2075                  GetSpriteCoordinaties(N,&sx,&sy);
   \   00000150   C42085E2           ADD      R2,R5,#+196
   2076                  sprintf(lgn,"TEST=> N:%d,sx: %d,sy:%d",N,sx,sy);log(lgn);
   \   00000154   ........           LDR      R4,??DataTable91  ;; lgn
   \   00000158   C21085E2           ADD      R1,R5,#+194
   \   0000015C   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
   \   00000160   F40CD5E1           LDRSH    R0,[R5, #+196]
   \   00000164   0720A0E1           MOV      R2,R7
   \   00000168   0C1088E2           ADD      R1,R8,#+12
   \   0000016C   01002DE9           PUSH     {R0}
   \   00000170   F23CD5E1           LDRSH    R3,[R5, #+194]
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   160000EF           SWI      +22
   \   0000017C   0400A0E1           MOV      R0,R4
   \   00000180   ........           BL       log
   2077                  
   2078                  return 0;
   \   00000184   0000A0E3           MOV      R0,#+0
   \   00000188   04D08DE2           ADD      SP,SP,#+4
   \   0000018C   F087BDE8           POP      {R4-R10,PC}
   2079                }
   2080              }
   \                     ??Keyhook_7:
   \   00000190   7917D5E5           LDRB     R1,[R5, #+1913]
   \   00000194   FA2BD5E1           LDRSH    R2,[R5, #+186]
   \   00000198   FC3BD5E1           LDRSH    R3,[R5, #+188]
   \   0000019C   089090E5           LDR      R9,[R0, #+8]
   \   000001A0   1E1081E2           ADD      R1,R1,#+30
   \   000001A4   0A2082E2           ADD      R2,R2,#+10
   \   000001A8   023043E2           SUB      R3,R3,#+2
   \   000001AC   310059E3           CMP      R9,#+49
   \   000001B0   0F00001A           BNE      ??Keyhook_13
   2081              
   2082              
   2083              
   2084              
   2085              
   2086              if(msg->gbsmsg->submess=='1') {InitMSprite(&weapon_shot[0],195,user_x+10,user_y-2,0,-3,0,offset1+30);return 0;}
   \   000001B4   02002DE9           PUSH     {R1}
   \   000001B8   0000A0E3           MOV      R0,#+0
   \   000001BC   01002DE9           PUSH     {R0}
   \   000001C0   0338A0E1           MOV      R3,R3, LSL #+16
   \   000001C4   4338A0E1           MOV      R3,R3, ASR #+16
   \   000001C8   0228A0E1           MOV      R2,R2, LSL #+16
   \   000001CC   0200CAE3           BIC      R0,R10,#0x2
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   4228A0E1           MOV      R2,R2, ASR #+16
   \   000001D8   C310A0E3           MOV      R1,#+195
   \   000001DC   0600A0E1           MOV      R0,R6
   \   000001E0   01002DE9           PUSH     {R0}
   \   000001E4   7C00A0E3           MOV      R0,#+124
   \   000001E8   400E80E3           ORR      R0,R0,#0x400
   \   000001EC   050080E0           ADD      R0,R0,R5
   \   000001F0   0E0000EA           B        ??Keyhook_14
   2087              if(msg->gbsmsg->submess=='3') {InitMSprite(&weapon_shot[1],195,user_x+10,user_y-2,0,-3,0,offset1+30);return 0;}
   \                     ??Keyhook_13:
   \   000001F4   330059E3           CMP      R9,#+51
   \   000001F8   1000001A           BNE      ??Keyhook_15
   \   000001FC   02002DE9           PUSH     {R1}
   \   00000200   0000A0E3           MOV      R0,#+0
   \   00000204   01002DE9           PUSH     {R0}
   \   00000208   0338A0E1           MOV      R3,R3, LSL #+16
   \   0000020C   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000210   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000214   0200CAE3           BIC      R0,R10,#0x2
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000220   C310A0E3           MOV      R1,#+195
   \   00000224   0600A0E1           MOV      R0,R6
   \   00000228   01002DE9           PUSH     {R0}
   \   0000022C   4A0E85E2           ADD      R0,R5,#+1184
   \                     ??Keyhook_14:
   \   00000230   ........           _BLF     InitMSprite,??InitMSprite??rA
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   10D08DE2           ADD      SP,SP,#+16
   \   0000023C   F087BDE8           POP      {R4-R10,PC}
   2088              if(msg->gbsmsg->submess=='7') {bonus_shot_type=0;return 0;}
   \                     ??Keyhook_15:
   \   00000240   7810A0E3           MOV      R1,#+120
   \   00000244   701E81E3           ORR      R1,R1,#0x700
   \   00000248   0920A0E1           MOV      R2,R9
   \   0000024C   370052E3           CMP      R2,#+55
   \   00000250   0200001A           BNE      ??Keyhook_16
   \   00000254   0560C1E7           STRB     R6,[R1, +R5]
   \                     ??Keyhook_3:
   \   00000258   0000A0E3           MOV      R0,#+0
   \   0000025C   F087BDE8           POP      {R4-R10,PC}
   2089              if(msg->gbsmsg->submess=='9') {bonus_shot_type=1;return 0;}
   \                     ??Keyhook_16:
   \   00000260   390052E3           CMP      R2,#+57
   \   00000264   0570C107           STRBEQ   R7,[R1, +R5]
   \   00000268   FAFFFF0A           BEQ      ??Keyhook_3
   2090              
   2091              if(msg->gbsmsg->submess=='*')
   \   0000026C   ........           LDR      R7,??DataTable92  ;; PressTimerFunc
   \   00000270   4F6F81E2           ADD      R6,R1,#+316
   \   00000274   3290A0E3           MOV      R9,#+50
   \   00000278   7AAEA0E3           MOV      R10,#+1952
   \   0000027C   2A0052E3           CMP      R2,#+42
   \   00000280   0900001A           BNE      ??Keyhook_17
   2092              {
   2093                sprintf(press_msg,"op. levels: %d",savedata.opened_levels);
   \   00000284   64009FE5           LDR      R0,??Keyhook_6+0x4  ;; savedata + 1
   \   00000288   281088E2           ADD      R1,R8,#+40
   \   0000028C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000290   05008AE0           ADD      R0,R10,R5
   \   00000294   160000EF           SWI      +22
   2094                press_type = 50; //xz
   \   00000298   6E97C5E5           STRB     R9,[R5, #+1902]
   2095                GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   0000029C   0720A0E1           MOV      R2,R7
   \   000002A0   0610A0E3           MOV      R1,#+6
   \   000002A4   050086E0           ADD      R0,R6,R5
   \   000002A8   4D0000EF           SWI      +77
   2096              }
   2097              if(msg->gbsmsg->submess=='#')
   \                     ??Keyhook_17:
   \   000002AC   040094E5           LDR      R0,[R4, #+4]
   \   000002B0   080090E5           LDR      R0,[R0, #+8]
   \   000002B4   230050E3           CMP      R0,#+35
   \   000002B8   E6FFFF1A           BNE      ??Keyhook_3
   2098              {
   2099                sprintf(press_msg,"сброшено");
   \   000002BC   381088E2           ADD      R1,R8,#+56
   \   000002C0   05008AE0           ADD      R0,R10,R5
   \   000002C4   160000EF           SWI      +22
   2100                clean_bricks = bricks_of_clean;
   \   000002C8   F00BD5E1           LDRSH    R0,[R5, #+176]
   2101                press_type = 50; //xz
   \   000002CC   6E97C5E5           STRB     R9,[R5, #+1902]
   2102                GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   000002D0   0720A0E1           MOV      R2,R7
   \   000002D4   BE0AC5E1           STRH     R0,[R5, #+174]
   \   000002D8   0610A0E3           MOV      R1,#+6
   \   000002DC   050086E0           ADD      R0,R6,R5
   \                     ??Keyhook_5:
   \   000002E0   4D0000EF           SWI      +77
   \                     ??Keyhook_10:
   \   000002E4   0000A0E3           MOV      R0,#+0
   \   000002E8   F087BDE8           POP      {R4-R10,PC}
   \                     ??Keyhook_6:
   \   000002EC   ........           DC32     `?<Constant "\\342\\340\\370\\345 \\350\\354\\377">`
   \   000002F0   ........           DC32     savedata + 1
   2103              }
   2104              
   2105              //if(msg->gbsmsg->submess=='*') {sxx++;return 0;}
   2106              //if(msg->gbsmsg->submess=='#') {sxx--;StartVibra(20,20);return 0;}
   2107              //if(msg->gbsmsg->submess=='1') {AI_df--;return 0;}
   2108              //if(msg->gbsmsg->submess=='3') {AI_df++;return 0;}
   2109              
   2110            }
   2111            return 0;
   2112          }
   2113          
   2114          
   2115          

   \                                 In segment CODE, align 4, keep-with-next
   2116          IMGHDR *ImageLoadFromFile(char *name,int type) //это мне было лень переписывать загрузку бонусов.. =)
   2117          {
   2118            char temp[512];
   2119            sprintf(temp,"%s%s",pwd,name);
   \                     ImageLoadFromFile:
   \   00000000   ........           LDR      R1,??DataTable93  ;; `?<Constant "called function init">` + 228
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0030A0E1           MOV      R3,R0
   \   0000000C   ........           LDR      R0,??DataTable97  ;; pwd
   \   00000010   80DF4DE2           SUB      SP,SP,#+512
   \   00000014   002090E5           LDR      R2,[R0, #+0]
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   160000EF           SWI      +22
   2120            return(CreateIMGHDRFromPngFile(temp,2));
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   E90100EF           SWI      +489
   \   0000002C   80DF8DE2           ADD      SP,SP,#+512
   \   00000030   0080BDE8           POP      {PC}             ;; return
   2121          }
   2122          
   2123          
   2124          
   2125          
   2126          
   2127          

   \                                 In segment CODE, align 4, keep-with-next
   2128          void LoadOther(char *p)
   2129          {
   \                     LoadOther:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   2130            //defense.img = ImageLoadFromFile("pics\\items\\defense.png",1);
   2131            //defense.x = 0; defense.y = sh-defense.img->h; defense.stats = 0;
   2132            
   2133            InitSpriteBuffer();
   2134            LoadSprite("pics\\items\\brick_sparks.png",3,2,&brick_sparks);
   \   00000004   8C409FE5           LDR      R4,??LoadOther_0  ;; `?<Constant "pics\\\\items\\\\brick_spar...">`
   \   00000008   ........           LDR      R5,??DataTable95  ;; ball
   \   0000000C   ........           _BLF     InitSpriteBuffer,??InitSpriteBuffer??rA
   \   00000010   4800A0E3           MOV      R0,#+72
   \   00000014   800E80E3           ORR      R0,R0,#0x800
   \   00000018   053080E0           ADD      R3,R0,R5
   \   0000001C   0220A0E3           MOV      R2,#+2
   \   00000020   0310A0E3           MOV      R1,#+3
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     LoadSprite,??LoadSprite??rA
   2135            LoadSprite("pics\\items\\mine_sparks.png",4,2,&mine_sparks);
   \   0000002C   6C00A0E3           MOV      R0,#+108
   \   00000030   800E80E3           ORR      R0,R0,#0x800
   \   00000034   053080E0           ADD      R3,R0,R5
   \   00000038   0220A0E3           MOV      R2,#+2
   \   0000003C   0410A0E3           MOV      R1,#+4
   \   00000040   1C0084E2           ADD      R0,R4,#+28
   \   00000044   ........           _BLF     LoadSprite,??LoadSprite??rA
   2136            LoadSprite("pics\\items\\rocket_sparks.png",7,2,&rocket_sparks);
   \   00000048   893E85E2           ADD      R3,R5,#+2192
   \   0000004C   0220A0E3           MOV      R2,#+2
   \   00000050   0710A0E3           MOV      R1,#+7
   \   00000054   380084E2           ADD      R0,R4,#+56
   \   00000058   ........           _BLF     LoadSprite,??LoadSprite??rA
   2137            
   2138            LoadSprite("pics\\items\\pistol_shot.png",3,2,&weapon_shot[0]);
   \   0000005C   7C00A0E3           MOV      R0,#+124
   \   00000060   400E80E3           ORR      R0,R0,#0x400
   \   00000064   053080E0           ADD      R3,R0,R5
   \   00000068   0220A0E3           MOV      R2,#+2
   \   0000006C   0310A0E3           MOV      R1,#+3
   \   00000070   580084E2           ADD      R0,R4,#+88
   \   00000074   ........           _BLF     LoadSprite,??LoadSprite??rA
   2139            LoadSprite("pics\\items\\rocket_shot.png",3,2,&weapon_shot[1]);
   \   00000078   4A3E85E2           ADD      R3,R5,#+1184
   \   0000007C   0220A0E3           MOV      R2,#+2
   \   00000080   0310A0E3           MOV      R1,#+3
   \   00000084   740084E2           ADD      R0,R4,#+116
   \   00000088   ........           _BLF     LoadSprite,??LoadSprite??rA
   2140            
   2141            log("items ok");
   \   0000008C   900084E2           ADD      R0,R4,#+144
   \   00000090   ........           BL       log
   2142          }
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??LoadOther_0:
   \   00000098   ........           DC32     `?<Constant "pics\\\\items\\\\brick_spar...">`
   2143          

   \                                 In segment CODE, align 4, keep-with-next
   2144          void LoadBricks(char *p)
   2145          {
   \                     LoadBricks:
   \   00000000   B0402DE9           PUSH     {R4,R5,R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   2146            for(char i=0;i<NUM_BRICKS;i++)
   \   00000008   44709FE5           LDR      R7,??LoadBricks_0  ;; `?<Constant "pics\\\\brick%d.png">`
   \   0000000C   0050A0E3           MOV      R5,#+0
   2147            {
   2148              sprintf(p,"pics\\brick%d.png",i+1);
   \                     ??LoadBricks_1:
   \   00000010   012085E2           ADD      R2,R5,#+1
   \   00000014   0710A0E1           MOV      R1,R7
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   160000EF           SWI      +22
   2149              brick[i].img = ImageLoadFromFile(p,1);
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ImageLoadFromFile
   \   0000002C   ........           LDR      R2,??DataTable102  ;; brick
   \   00000030   0C10A0E3           MOV      R1,#+12
   \   00000034   912522E0           MLA      R2,R1,R5,R2
   2150            }
   \   00000038   015085E2           ADD      R5,R5,#+1
   \   0000003C   000082E5           STR      R0,[R2, #+0]
   \   00000040   090055E3           CMP      R5,#+9
   \   00000044   F1FFFF3A           BCC      ??LoadBricks_1
   2151            log("bricks ok");
   \   00000048   140087E2           ADD      R0,R7,#+20
   \   0000004C   B040BDE8           POP      {R4,R5,R7,LR}
   \   00000050   ........           B        log              ;; tailcall
   \                     ??LoadBricks_0:
   \   00000054   ........           DC32     `?<Constant "pics\\\\brick%d.png">`
   2152          }
   2153          
   2154          
   2155          
   2156          
   2157          
   2158          
   2159          

   \                                 In segment CODE, align 4, keep-with-next
   2160          void Init()
   2161          {
   \                     Init:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   2162            log("called function init");
   \   00000004   64429FE5           LDR      R4,??Init_0      ;; `?<Constant "called function init">`
   2163            char img_path[512];
   2164            
   2165            sprintf(img_path,"%s%s",pwd,"pics\\press0.png");
   \   00000008   ........           LDR      R6,??DataTable97  ;; pwd
   2166            press0 = CreateIMGHDRFromPngFile(img_path,2);
   \   0000000C   ........           LDR      R5,??DataTable100  ;; ball
   \   00000010   80DF4DE2           SUB      SP,SP,#+512
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       log
   \   0000001C   002096E5           LDR      R2,[R6, #+0]
   \   00000020   183084E2           ADD      R3,R4,#+24
   \   00000024   E41084E2           ADD      R1,R4,#+228
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   160000EF           SWI      +22
   \   00000030   0210A0E3           MOV      R1,#+2
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   E90100EF           SWI      +489
   \   0000003C   4C0785E5           STR      R0,[R5, #+1868]
   2167            log("press0 ok");
   \   00000040   D80084E2           ADD      R0,R4,#+216
   \   00000044   ........           BL       log
   2168            
   2169            offset1 = 2+GetFontYSIZE(FONT_SM);
   \   00000048   0800A0E3           MOV      R0,#+8
   \   0000004C   C50100EF           SWI      +453
   2170            
   2171            sprintf(img_path,"%s%s",pwd,"pics\\boss.png");
   \   00000050   002096E5           LDR      R2,[R6, #+0]
   2172            boss.img=CreateIMGHDRFromPngFile(img_path,2);
   \   00000054   ........           LDR      R6,??DataTable99  ;; boss
   \   00000058   020080E2           ADD      R0,R0,#+2
   \   0000005C   7907C5E5           STRB     R0,[R5, #+1913]
   \   00000060   283084E2           ADD      R3,R4,#+40
   \   00000064   E41084E2           ADD      R1,R4,#+228
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   160000EF           SWI      +22
   \   00000070   0210A0E3           MOV      R1,#+2
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   E90100EF           SWI      +489
   \   0000007C   000086E5           STR      R0,[R6, #+0]
   2173            boss.y = offset1;
   \   00000080   7907D5E5           LDRB     R0,[R5, #+1913]
   2174            boss.x = (ScreenW()/2)-(boss.img->w/2);
   2175            log("boss ok");
   2176            
   2177            LoadOther(img_path);
   2178            LoadBricks(img_path);
   2179            
   2180            /*sprintf(img_path,"%s%s",pwd,"pics\\brick1.png");
   2181            brick[0].img=CreateIMGHDRFromPngFile(img_path,2); //обычный брик
   2182            log("brick 1 ok");
   2183              sprintf(img_path,"%s%s",pwd,"pics\\brick2.png");
   2184            brick[1].img=CreateIMGHDRFromPngFile(img_path,2); //обычный брик
   2185            log("brick 2 ok");
   2186              sprintf(img_path,"%s%s",pwd,"pics\\brick3.png");
   2187            brick[2].img=CreateIMGHDRFromPngFile(img_path,2); //обычный брик
   2188            log("brick 3 ok");
   2189              sprintf(img_path,"%s%s",pwd,"pics\\brick4.png");
   2190            brick[3].img=CreateIMGHDRFromPngFile(img_path,2); //2 попадания
   2191            log("brick 4 ok");
   2192              sprintf(img_path,"%s%s",pwd,"pics\\brick5.png");
   2193            brick[4].img=CreateIMGHDRFromPngFile(img_path,2); //3 попадания
   2194            log("brick 5 ok");
   2195            
   2196              sprintf(img_path,"%s%s",pwd,"pics\\brick_wall.png");
   2197            brick[5].img=CreateIMGHDRFromPngFile(img_path,2); //неразбиваемый брик
   2198            log("brick 6 ok");
   2199              sprintf(img_path,"%s%s",pwd,"pics\\brick_bon.png");
   2200            brick[6].img=CreateIMGHDRFromPngFile(img_path,2); //брик,"содержащий" бонус
   2201            log("brick 7 ok");
   2202              sprintf(img_path,"%s%s",pwd,"pics\\brick_teleport.png");
   2203            brick[7].img=CreateIMGHDRFromPngFile(img_path,2); //брик-телепорт
   2204            log("brick 8 ok");
   2205              sprintf(img_path,"%s%s",pwd,"pics\\brick_mine.png");
   2206            brick[8].img=CreateIMGHDRFromPngFile(img_path,2); //брик-мина,взрывает вокруг себя 4 любых брика,кроме телепортов
   2207            log("bricks ok");*/
   2208            
   2209            
   2210            for(char i=0;i<3;i++)
   \   00000084   0070A0E3           MOV      R7,#+0
   \   00000088   B600C6E1           STRH     R0,[R6, #+6]
   \   0000008C   888100EF           SWI      +33160
   \   00000090   001096E5           LDR      R1,[R6, #+0]
   \   00000094   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000098   B010D1E1           LDRH     R1,[R1, #+0]
   \   0000009C   C000A0E1           ASR      R0,R0,#+1
   \   000000A0   A10040E0           SUB      R0,R0,R1, LSR #+1
   \   000000A4   B400C6E1           STRH     R0,[R6, #+4]
   \   000000A8   380084E2           ADD      R0,R4,#+56
   \   000000AC   ........           BL       log
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   ........           BL       LoadOther
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   ........           BL       LoadBricks
   \   000000C0   0060A0E3           MOV      R6,#+0
   2211            {
   2212              for(char t=0;t<3;t++)
   \                     ??Init_1:
   \   000000C4   0080A0E3           MOV      R8,#+0
   2213              {
   2214                sprintf(img_path,"pics\\ball%d_%d.png",i,t);
   \                     ??Init_2:
   \   000000C8   0830A0E1           MOV      R3,R8
   \   000000CC   0720A0E1           MOV      R2,R7
   \   000000D0   401084E2           ADD      R1,R4,#+64
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   160000EF           SWI      +22
   2215                ball[i][t].img = ImageLoadFromFile(img_path,1);
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   0D00A0E1           MOV      R0,SP
   \   000000E4   ........           BL       ImageLoadFromFile
   \   000000E8   0C10A0E3           MOV      R1,#+12
   \   000000EC   2420A0E3           MOV      R2,#+36
   \   000000F0   925723E0           MLA      R3,R2,R7,R5
   \   000000F4   913822E0           MLA      R2,R1,R8,R3
   2216              }
   \   000000F8   018088E2           ADD      R8,R8,#+1
   \   000000FC   000082E5           STR      R0,[R2, #+0]
   \   00000100   030058E3           CMP      R8,#+3
   \   00000104   EFFFFF3A           BCC      ??Init_2
   2217            }
   \   00000108   017087E2           ADD      R7,R7,#+1
   \   0000010C   030057E3           CMP      R7,#+3
   \   00000110   EBFFFF3A           BCC      ??Init_1
   2218            
   2219            for(char i=0;i<4;i++)
   \   00000114   0070A0E3           MOV      R7,#+0
   2220            {
   2221              for(char t=0;t<3;t++)
   \                     ??Init_3:
   \   00000118   0080A0E3           MOV      R8,#+0
   2222              {
   2223                sprintf(img_path,"pics\\user%d_%d.png",i,t);
   \                     ??Init_4:
   \   0000011C   0830A0E1           MOV      R3,R8
   \   00000120   0720A0E1           MOV      R2,R7
   \   00000124   541084E2           ADD      R1,R4,#+84
   \   00000128   0D00A0E1           MOV      R0,SP
   \   0000012C   160000EF           SWI      +22
   2224                LoadSprite(img_path,3,6,&user[i][t]); //!!
   \   00000130   2400A0E3           MOV      R0,#+36
   \   00000134   6C10A0E3           MOV      R1,#+108
   \   00000138   915722E0           MLA      R2,R1,R7,R5
   \   0000013C   902821E0           MLA      R1,R0,R8,R2
   \   00000140   0620A0E3           MOV      R2,#+6
   \   00000144   C83081E2           ADD      R3,R1,#+200
   \   00000148   0310A0E3           MOV      R1,#+3
   \   0000014C   0D00A0E1           MOV      R0,SP
   \   00000150   ........           _BLF     LoadSprite,??LoadSprite??rA
   2225              }
   \   00000154   018088E2           ADD      R8,R8,#+1
   \   00000158   030058E3           CMP      R8,#+3
   \   0000015C   EEFFFF3A           BCC      ??Init_4
   2226            }
   \   00000160   017087E2           ADD      R7,R7,#+1
   \   00000164   040057E3           CMP      R7,#+4
   \   00000168   EAFFFF3A           BCC      ??Init_3
   2227            
   2228            for(char i=0;i<NUM_OF_BONUSES;i++)
   \   0000016C   0070A0E3           MOV      R7,#+0
   2229            {
   2230              sprintf(img_path,"pics\\bon_%d.png",i);
   \                     ??Init_5:
   \   00000170   0720A0E1           MOV      R2,R7
   \   00000174   681084E2           ADD      R1,R4,#+104
   \   00000178   0D00A0E1           MOV      R0,SP
   \   0000017C   160000EF           SWI      +22
   2231              LoadSprite(img_path,1,1,&bonus[i].spr);
   \   00000180   2810A0E3           MOV      R1,#+40
   \   00000184   915722E0           MLA      R2,R1,R7,R5
   \   00000188   C400A0E3           MOV      R0,#+196
   \   0000018C   400E80E3           ORR      R0,R0,#0x400
   \   00000190   023080E0           ADD      R3,R0,R2
   \   00000194   0120A0E3           MOV      R2,#+1
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   0D00A0E1           MOV      R0,SP
   \   000001A0   ........           _BLF     LoadSprite,??LoadSprite??rA
   2232              bonus_counter[i]=0;
   \   000001A4   870085E0           ADD      R0,R5,R7, LSL #+1
   \   000001A8   BC66C0E1           STRH     R6,[R0, #+108]
   2233              bonus_active[i]=0;
   \   000001AC   050087E0           ADD      R0,R7,R5
   \   000001B0   5864C0E5           STRB     R6,[R0, #+1112]
   2234            }
   \   000001B4   017087E2           ADD      R7,R7,#+1
   \   000001B8   100057E3           CMP      R7,#+16
   \   000001BC   EBFFFF3A           BCC      ??Init_5
   2235            log("images loaded");
   \   000001C0   780084E2           ADD      R0,R4,#+120
   \   000001C4   ........           BL       log
   2236            
   2237            
   2238            
   2239            
   2240            
   2241            SetDefaultGameParameters();
   \   000001C8   ........           BL       SetDefaultGameParameters
   2242            user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000); //резервируем user_N ячейку буфера
   \   000001CC   1000A0E3           MOV      R0,#+16
   \   000001D0   9C0D80E3           ORR      R0,R0,#0x2700
   \   000001D4   01002DE9           PUSH     {R0}
   \   000001D8   7787D5E5           LDRB     R8,[R5, #+1911]
   \   000001DC   FC3BD5E1           LDRSH    R3,[R5, #+188]
   \   000001E0   FA2BD5E1           LDRSH    R2,[R5, #+186]
   \   000001E4   7607D5E5           LDRB     R0,[R5, #+1910]
   \   000001E8   2470A0E3           MOV      R7,#+36
   \   000001EC   6C90A0E3           MOV      R9,#+108
   \   000001F0   995828E0           MLA      R8,R9,R8,R5
   \   000001F4   9A10A0E3           MOV      R1,#+154
   \   000001F8   978020E0           MLA      R0,R7,R0,R8
   \   000001FC   801F81E3           ORR      R1,R1,#0x200
   \   00000200   C80080E2           ADD      R0,R0,#+200
   \   00000204   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000208   B00CC5E1           STRH     R0,[R5, #+192]
   2243            log("parameters ok");
   \   0000020C   880084E2           ADD      R0,R4,#+136
   \   00000210   ........           BL       log
   2244            
   2245            
   2246            
   2247            
   2248            
   2249            loadSettings(); //грузим сохраненные настройки
   \   00000214   ........           _BLF     loadSettings,??loadSettings??rA
   2250            log("settings ok");
   \   00000218   980084E2           ADD      R0,R4,#+152
   \   0000021C   ........           BL       log
   2251            SetDifficulty();
   \   00000220   ........           BL       SetDifficulty
   2252            
   2253            InitMenu();
   \   00000224   ........           _BLF     InitMenu,??InitMenu??rA
   2254            
   2255            log("all initialised!");
   \   00000228   A40084E2           ADD      R0,R4,#+164
   \   0000022C   ........           BL       log
   2256            state=STATE_MENU;
   \   00000230   6867C5E5           STRB     R6,[R5, #+1896]
   2257            
   2258            PlayMusic(MENU_MUSIC);
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   ........           BL       PlayMusic
   2259            
   2260            cont=0;
   2261            
   2262            extern char loading;
   2263            loading = 0;
   \   0000023C   30009FE5           LDR      R0,??Init_0+0x4  ;; loading
   \   00000240   7D67C5E5           STRB     R6,[R5, #+1917]
   \   00000244   0060C0E5           STRB     R6,[R0, #+0]
   2264            log("menu_music ok");
   \   00000248   B80084E2           ADD      R0,R4,#+184
   \   0000024C   ........           BL       log
   2265            ifree(load_screen);
   \   00000250   20009FE5           LDR      R0,??Init_0+0x8  ;; load_screen
   \   00000254   000090E5           LDR      R0,[R0, #+0]
   \   00000258   ........           BL       ifree
   2266            log("Init func ok");
   \   0000025C   C80084E2           ADD      R0,R4,#+200
   \   00000260   ........           BL       log
   2267            TimerRedrawScreen();
   \   00000264   ........           BL       TimerRedrawScreen
   2268          }
   \   00000268   81DF8DE2           ADD      SP,SP,#+516
   \   0000026C   F083BDE8           POP      {R4-R9,PC}
   \                     ??Init_0:
   \   00000270   ........           DC32     `?<Constant "called function init">`
   \   00000274   ........           DC32     loading
   \   00000278   ........           DC32     load_screen
   2269          
   2270          
   2271          
   2272          
   2273          

   \                                 In segment CODE, align 4, keep-with-next
   2274          void ifree(IMGHDR *img)
   2275          {
   \                     ifree:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   2276            if(img!=NULL)
   2277            {
   2278              if(img && img->bitmap) {mfree(img->bitmap);mfree(img);}
   \   00000008   08009415           LDRNE    R0,[R4, #+8]
   \   0000000C   00005013           CMPNE    R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
   \   00000014   150000EF           SWI      +21
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   150000EF           SWI      +21
   2279            }
   2280          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   2281          void imfree(image img)
   2282          {
   \                     imfree:
   \   00000000   07002DE9           PUSH     {R0-R2}
   \   00000004   00402DE9           PUSH     {LR}
   2283            if(img.img!=NULL)
   \   00000008   000050E3           CMP      R0,#+0
   2284            {
   2285              if(img.img && img.img->bitmap) {mfree(img.img->bitmap);mfree(img.img);}
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   00005013           CMPNE    R0,#+0
   \   00000014   0200000A           BEQ      ??imfree_0
   \   00000018   150000EF           SWI      +21
   \   0000001C   04009DE5           LDR      R0,[SP, #+4]
   \   00000020   150000EF           SWI      +21
   2286            }
   2287          }
   \                     ??imfree_0:
   \   00000024   0040BDE8           POP      {LR}
   \   00000028   0CD08DE2           ADD      SP,SP,#+12
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   2288          

   \                                 In segment CODE, align 4, keep-with-next
   2289          void FreeMemory()
   2290          {
   \                     FreeMemory:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2291            log("freememory...");
   \   00000004   44429FE5           LDR      R4,??FreeMemory_0  ;; `?<Constant "freememory...">`
   2292            
   2293            DeinitMenu();
   2294            PlayMelody_StopPlayback(PLAY_ID);
   \   00000008   ........           LDR      R5,??DataTable100  ;; ball
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       log
   \   00000018   ........           _BLF     DeinitMenu,??DeinitMenu??rA
   \   0000001C   740495E5           LDR      R0,[R5, #+1140]
   2295            ifree(level_bg);
   2296            
   2297            imfree(boss);
   2298            
   2299            ifree(press0);
   2300            
   2301            for(char i=0;i<3;i++)
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   260200EF           SWI      +550
   \   00000028   700495E5           LDR      R0,[R5, #+1136]
   \   0000002C   0070A0E3           MOV      R7,#+0
   \   00000030   ........           BL       ifree
   \   00000034   ........           LDR      R0,??DataTable101  ;; boss
   \   00000038   0CD04DE2           SUB      SP,SP,#+12
   \   0000003C   001090E5           LDR      R1,[R0, #0]
   \   00000040   0D20A0E1           MOV      R2,SP
   \   00000044   001082E5           STR      R1,[R2, #+0]
   \   00000048   041090E5           LDR      R1,[R0, #+4]
   \   0000004C   041082E5           STR      R1,[R2, #+4]
   \   00000050   081090E5           LDR      R1,[R0, #+8]
   \   00000054   081082E5           STR      R1,[R2, #+8]
   \   00000058   0700BDE8           POP      {R0-R2}
   \   0000005C   ........           BL       imfree
   \   00000060   4C0795E5           LDR      R0,[R5, #+1868]
   \   00000064   ........           BL       ifree
   2302            {
   2303              imfree(ball[i][0]);
   \                     ??FreeMemory_1:
   \   00000068   2410A0E3           MOV      R1,#+36
   \   0000006C   915728E0           MLA      R8,R1,R7,R5
   \   00000070   0CD04DE2           SUB      SP,SP,#+12
   \   00000074   000098E5           LDR      R0,[R8, #0]
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   000081E5           STR      R0,[R1, #+0]
   \   00000080   040098E5           LDR      R0,[R8, #+4]
   2304              imfree(ball[i][1]);
   2305              imfree(ball[i][2]);
   2306            }
   \   00000084   017087E2           ADD      R7,R7,#+1
   \   00000088   040081E5           STR      R0,[R1, #+4]
   \   0000008C   080098E5           LDR      R0,[R8, #+8]
   \   00000090   080081E5           STR      R0,[R1, #+8]
   \   00000094   0700BDE8           POP      {R0-R2}
   \   00000098   ........           BL       imfree
   \   0000009C   0C0088E2           ADD      R0,R8,#+12
   \   000000A0   0CD04DE2           SUB      SP,SP,#+12
   \   000000A4   001090E5           LDR      R1,[R0, #0]
   \   000000A8   0D20A0E1           MOV      R2,SP
   \   000000AC   001082E5           STR      R1,[R2, #+0]
   \   000000B0   041090E5           LDR      R1,[R0, #+4]
   \   000000B4   041082E5           STR      R1,[R2, #+4]
   \   000000B8   081090E5           LDR      R1,[R0, #+8]
   \   000000BC   081082E5           STR      R1,[R2, #+8]
   \   000000C0   0700BDE8           POP      {R0-R2}
   \   000000C4   ........           BL       imfree
   \   000000C8   180088E2           ADD      R0,R8,#+24
   \   000000CC   0CD04DE2           SUB      SP,SP,#+12
   \   000000D0   001090E5           LDR      R1,[R0, #0]
   \   000000D4   0D20A0E1           MOV      R2,SP
   \   000000D8   001082E5           STR      R1,[R2, #+0]
   \   000000DC   041090E5           LDR      R1,[R0, #+4]
   \   000000E0   041082E5           STR      R1,[R2, #+4]
   \   000000E4   081090E5           LDR      R1,[R0, #+8]
   \   000000E8   081082E5           STR      R1,[R2, #+8]
   \   000000EC   0700BDE8           POP      {R0-R2}
   \   000000F0   ........           BL       imfree
   \   000000F4   030057E3           CMP      R7,#+3
   \   000000F8   DAFFFF3A           BCC      ??FreeMemory_1
   2307            for(char i=0;i<4;i++)
   2308            {
   2309              FreeSprite(&user[i][0]);
   \                     ??FreeMemory_2:
   \   000000FC   6C10A0E3           MOV      R1,#+108
   \   00000100   915627E0           MLA      R7,R1,R6,R5
   2310              FreeSprite(&user[i][1]);
   2311              FreeSprite(&user[i][2]);
   2312            }
   \   00000104   016086E2           ADD      R6,R6,#+1
   \   00000108   C80087E2           ADD      R0,R7,#+200
   \   0000010C   ........           _BLF     FreeSprite,??FreeSprite??rA
   \   00000110   EC0087E2           ADD      R0,R7,#+236
   \   00000114   ........           _BLF     FreeSprite,??FreeSprite??rA
   \   00000118   440F87E2           ADD      R0,R7,#+272
   \   0000011C   ........           _BLF     FreeSprite,??FreeSprite??rA
   \   00000120   040056E3           CMP      R6,#+4
   \   00000124   F4FFFF3A           BCC      ??FreeMemory_2
   2313            
   2314            for(int i=0;i<8;i++)
   \   00000128   0060A0E3           MOV      R6,#+0
   2315            {
   2316              imfree(brick[i]);
   \                     ??FreeMemory_3:
   \   0000012C   ........           LDR      R1,??DataTable102  ;; brick
   \   00000130   0C00A0E3           MOV      R0,#+12
   \   00000134   901621E0           MLA      R1,R0,R6,R1
   \   00000138   0CD04DE2           SUB      SP,SP,#+12
   \   0000013C   000091E5           LDR      R0,[R1, #0]
   \   00000140   0D20A0E1           MOV      R2,SP
   \   00000144   000082E5           STR      R0,[R2, #+0]
   \   00000148   040091E5           LDR      R0,[R1, #+4]
   2317            }
   \   0000014C   016086E2           ADD      R6,R6,#+1
   \   00000150   040082E5           STR      R0,[R2, #+4]
   \   00000154   080091E5           LDR      R0,[R1, #+8]
   \   00000158   080082E5           STR      R0,[R2, #+8]
   \   0000015C   0700BDE8           POP      {R0-R2}
   \   00000160   ........           BL       imfree
   \   00000164   080056E3           CMP      R6,#+8
   \   00000168   EFFFFFBA           BLT      ??FreeMemory_3
   2318            
   2319            
   2320            for(int i=0;i<NUM_OF_BONUSES;i++)
   \   0000016C   0060A0E3           MOV      R6,#+0
   2321            {
   2322              FreeSprite(&bonus[i].spr);
   \                     ??FreeMemory_4:
   \   00000170   2810A0E3           MOV      R1,#+40
   \   00000174   915622E0           MLA      R2,R1,R6,R5
   \   00000178   C400A0E3           MOV      R0,#+196
   \   0000017C   400E80E3           ORR      R0,R0,#0x400
   \   00000180   020080E0           ADD      R0,R0,R2
   \   00000184   ........           _BLF     FreeSprite,??FreeSprite??rA
   2323            }
   \   00000188   016086E2           ADD      R6,R6,#+1
   \   0000018C   100056E3           CMP      R6,#+16
   \   00000190   F6FFFFBA           BLT      ??FreeMemory_4
   2324            
   2325            DeinitSpriteBuffer();
   \   00000194   ........           _BLF     DeinitSpriteBuffer,??DeinitSpriteBuffer??rA
   2326            FreeSprite(&brick_sparks);
   \   00000198   4800A0E3           MOV      R0,#+72
   \   0000019C   800E80E3           ORR      R0,R0,#0x800
   \   000001A0   050080E0           ADD      R0,R0,R5
   \   000001A4   ........           _BLF     FreeSprite,??FreeSprite??rA
   2327            FreeSprite(&mine_sparks);
   \   000001A8   6C00A0E3           MOV      R0,#+108
   \   000001AC   800E80E3           ORR      R0,R0,#0x800
   \   000001B0   050080E0           ADD      R0,R0,R5
   \   000001B4   ........           _BLF     FreeSprite,??FreeSprite??rA
   2328            FreeSprite(&rocket_sparks);
   \   000001B8   890E85E2           ADD      R0,R5,#+2192
   \   000001BC   ........           _BLF     FreeSprite,??FreeSprite??rA
   2329            FreeSprite(&weapon_shot[0]);
   \   000001C0   7C00A0E3           MOV      R0,#+124
   \   000001C4   400E80E3           ORR      R0,R0,#0x400
   \   000001C8   050080E0           ADD      R0,R0,R5
   \   000001CC   ........           _BLF     FreeSprite,??FreeSprite??rA
   2330            FreeSprite(&weapon_shot[1]);
   \   000001D0   4A0E85E2           ADD      R0,R5,#+1184
   \   000001D4   ........           _BLF     FreeSprite,??FreeSprite??rA
   2331            
   2332            if(savedata.recs_autosave)
   \   000001D8   74009FE5           LDR      R0,??FreeMemory_0+0x4  ;; savedata + 2
   \   000001DC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   1500000A           BEQ      ??FreeMemory_5
   2333            {
   2334              char *nn = malloc(64);
   \   000001E8   4000A0E3           MOV      R0,#+64
   \   000001EC   140000EF           SWI      +20
   \   000001F0   0050A0E1           MOV      R5,R0
   2335              TDate d;TTime t;
   2336              GetDateTime(&d,&t);
   \   000001F4   08108DE2           ADD      R1,SP,#+8
   \   000001F8   0D00A0E1           MOV      R0,SP
   \   000001FC   B40000EF           SWI      +180
   2337              sprintf(nn,"%d/%0d/%d_%d:%0d",d.day,d.month,d.year,t.hour,t.min);
   \   00000200   0900DDE5           LDRB     R0,[SP, #+9]
   \   00000204   101084E2           ADD      R1,R4,#+16
   \   00000208   01002DE9           PUSH     {R0}
   \   0000020C   0C00DDE5           LDRB     R0,[SP, #+12]
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   08009DE5           LDR      R0,[SP, #+8]
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   1030DDE5           LDRB     R3,[SP, #+16]
   \   00000220   1120DDE5           LDRB     R2,[SP, #+17]
   \   00000224   0500A0E1           MOV      R0,R5
   \   00000228   160000EF           SWI      +22
   2338              CopyRecords(nn);
   \   0000022C   0500A0E1           MOV      R0,R5
   \   00000230   ........           BL       CopyRecords
   2339              mfree(nn);
   \   00000234   0500A0E1           MOV      R0,R5
   \   00000238   150000EF           SWI      +21
   \   0000023C   0CD08DE2           ADD      SP,SP,#+12
   2340            }
   2341            saveSettings(); //сохраняем пройденное
   \                     ??FreeMemory_5:
   \   00000240   ........           _BLF     saveSettings,??saveSettings??rA
   2342            
   2343            log("completed!");
   \   00000244   240084E2           ADD      R0,R4,#+36
   \   00000248   ........           BL       log
   2344          }
   \   0000024C   FF81BDE8           POP      {R0-R8,PC}       ;; return
   \                     ??FreeMemory_0:
   \   00000250   ........           DC32     `?<Constant "freememory...">`
   \   00000254   ........           DC32     savedata + 2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     `?<Constant "called function init">` + 228

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     boss

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     sprites

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     vtmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     pwd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     sw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     sh

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     PressTimerFunc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     `?<Constant {90, 90, 90, 90}>`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     PlayMusicOfTime

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     sh

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   ........           DC32     lgn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable63:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   ........           DC32     brick

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     sw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     sprites

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     `?<Constant {90, 90, 90, 90}>`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     sw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   ........           DC32     sh

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable89:
   \   00000000   ........           DC32     TimerRedrawScreen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     gametimer

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable91:
   \   00000000   ........           DC32     lgn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable92:
   \   00000000   ........           DC32     PressTimerFunc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable93:
   \   00000000   ........           DC32     `?<Constant "called function init">` + 228

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable95:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   ........           DC32     pwd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     boss

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   ........           DC32     boss

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   ........           DC32     brick

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ball>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for bonus_counter>`:
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for bonus_time>`:
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for score>`:
   \   000000AC   0000               DC16 0
   \                     `?<Initializer for clean_bricks>`:
   \   000000AE   0000               DC16 0
   \                     `?<Initializer for bricks_of_clean>`:
   \   000000B0   0000               DC16 0
   \                     `?<Initializer for ball_x>`:
   \   000000B2   0000               DC8 0, 0
   \                     `?<Initializer for ball_y>`:
   \   000000B4   0000               DC8 0, 0
   \                     `?<Initializer for ball_spx>`:
   \   000000B6   0000               DC8 0, 0
   \                     `?<Initializer for ball_spy>`:
   \   000000B8   0000               DC8 0, 0
   \                     `?<Initializer for user_x>`:
   \   000000BA   0000               DC8 0, 0
   \                     `?<Initializer for user_y>`:
   \   000000BC   0000               DC8 0, 0
   \                     `?<Initializer for user_c>`:
   \   000000BE   0000               DC8 0, 0
   \                     `?<Initializer for user_N>`:
   \   000000C0   0000               DC8 0, 0
   \                     `?<Initializer for sx>`:
   \   000000C2   0000               DC16 0
   \                     `?<Initializer for sy>`:
   \   000000C4   0000               DC16 0
   \   000000C6   0000               DC8 0, 0
   \                     `?<Initializer for user>`:
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for UsedLevel>`:
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for bonus_active>`:
   \   00000458   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for date>`:
   \   00000468   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for level_bg>`:
   \   00000470   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PLAY_ID>`:
   \   00000474   FFFF0000           DC32 65535
   \                     `?<Initializer for err>`:
   \   00000478   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for weapon_shot>`:
   \   0000047C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for bonus>`:
   \   000004C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000504   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000514   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000524   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000534   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000544   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000554   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000564   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000574   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000584   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000594   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000604   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000614   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000624   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000634   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000644   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000654   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000664   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000674   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000684   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000694   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000704   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000714   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000724   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000734   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ball_check_only_pos_x>`:
   \   00000744   00000000           DC32 0
   \                     `?<Initializer for ball_check_only_pos_y>`:
   \   00000748   00000000           DC32 0
   \                     `?<Initializer for press0>`:
   \   0000074C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for fps>`:
   \   00000750   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sfps>`:
   \   00000754   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for lastsec>`:
   \   00000758   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for counter>`:
   \   0000075C   00000000           DC32 0
   \                     `?<Initializer for time>`:
   \   00000760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for state>`:
   \   00000768   00                 DC8 0
   \                     `?<Initializer for total_levels>`:
   \   00000769   00                 DC8 0
   \                     `?<Initializer for ball_max_speed>`:
   \   0000076A   06                 DC8 6
   \                     `?<Initializer for ball_min_speed>`:
   \   0000076B   02                 DC8 2
   \                     `?<Initializer for total_lives>`:
   \   0000076C   03                 DC8 3
   \                     `?<Initializer for levelcounter>`:
   \   0000076D   01                 DC8 1
   \                     `?<Initializer for press_type>`:
   \   0000076E   00                 DC8 0
   \                     `?<Initializer for SoundRepeat>`:
   \   0000076F   01                 DC8 1
   \                     `?<Initializer for DEBUG>`:
   \   00000770   00                 DC8 0
   \                     `?<Initializer for ball_s>`:
   \   00000771   00                 DC8 0
   \                     `?<Initializer for ball_type>`:
   \   00000772   00                 DC8 0
   \                     `?<Initializer for user_l>`:
   \   00000773   00                 DC8 0
   \                     `?<Initializer for user_r>`:
   \   00000774   00                 DC8 0
   \                     `?<Initializer for user_sp>`:
   \   00000775   05                 DC8 5
   \                     `?<Initializer for user_s>`:
   \   00000776   00                 DC8 0
   \                     `?<Initializer for user_type>`:
   \   00000777   00                 DC8 0
   \                     `?<Initializer for bonus_shot_type>`:
   \   00000778   FF                 DC8 -1
   \                     `?<Initializer for offset1>`:
   \   00000779   00                 DC8 0
   \                     `?<Initializer for mem_ball_spx>`:
   \   0000077A   00                 DC8 0
   \                     `?<Initializer for mem_ball_spy>`:
   \   0000077B   00                 DC8 0
   \                     `?<Initializer for bon_slime_use>`:
   \   0000077C   00                 DC8 0
   \                     `?<Initializer for cont>`:
   \   0000077D   00                 DC8 0
   \                     `?<Initializer for blocks_trigger>`:
   \   0000077E   00                 DC8 0
   \   0000077F   00                 DC8 0
   \                     `?<Initializer for x_line>`:
   \   00000780   0001FF0000FF       DC8 0, 1, -1, 0, 0, -1, 1, 1, -1, 0, 0, 0
   \              0101FF000000
   \                     `?<Initializer for y_line>`:
   \   0000078C   000000FF01FF       DC8 0, 0, 0, -1, 1, -1, 1, -1, 1, 0, 0, 0
   \              01FF01000000
   \                     `?<Initializer for perc_t>`:
   \   00000798   257400             DC8 "%t"
   \                     `?<Initializer for perc_s>`:
   \   0000079B   257300             DC8 "%s"
   \   0000079E   0000               DC8 0, 0
   \                     `?<Initializer for press_msg>`:
   \   000007A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for fstats>`:
   \   00000820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for brick_sparks>`:
   \   00000848   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000858   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for mine_sparks>`:
   \   0000086C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000087C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for rocket_sparks>`:
   \   00000890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for press_tmr>`:
   \   000008B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for TestLevel>`:
   \   000008C4   010101010101       DC8 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
   \              020202010101
   \              010101000000
   \              0000000000  
   \   000008DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000008F2   000000000007       DC8 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
   \              070700000000
   \              000000000000
   \              0000000100  
   \   00000909   000000000000       DC8 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0
   \              050505050500
   \              000000000505
   \              0505050000  
   \   00000920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 30, 30, 30, 30, 30
   \              000000000000
   \              001E1E1E1E1E
   \              1E1E        
   \   00000934   1E1E1E1E1E1E       DC8 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30
   \              1E1E1E1E1E1E
   \              1E1E1E1E1E  
   \   00000945   1E1E1E1E1E1E       DC8 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30
   \              1E1E1E1E1E1E
   \              1E1E1E1E1E  
   \   00000956   1E1E1E1E1919       DC8 30, 30, 30, 30, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25
   \              191919191919
   \              1919191919  
   \   00000967   19191A1A1A1A       DC8 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26
   \              1A1A1A1A1A1A
   \              1A1A1A1A1A  
   \   00000978   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000098F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009A6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009BD   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A02   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A19   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A47   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A5E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A75   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A8C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000AA3   00                 DC8 0
   \                     `?<Initializer for ptmr>`:
   \   00000AA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for perc_d>`:
   \   00000000   256400             DC8 "%d"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ArcanoidStudio_1.4.log">`:
   \   00000000   417263616E6F       DC8 "ArcanoidStudio_1.4.log"
   \              696453747564
   \              696F5F312E34
   \              2E6C6F6700  
   \   00000017   00                 DC8 0
   \   00000018   3E25643A2530       DC8 ">%d:%02d:%02d/%02d-%02d-%04d< >kernel<   %s\012"
   \              32643A253032
   \              642F25303264
   \              2D253032642D
   \              253034643C20
   \              3E6B65726E65
   \              6C3C20202025
   \              730A00      
   \   00000045   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {90, 90, 90, 90}>`:
   \   00000000   5A5A5A5A           DC8 90, 90, 90, 90
   \   00000004   25743A205B25       DC8 "%t: [%d|%d]   fps: %d"
   \              647C25645D20
   \              20206670733A
   \              20256400    
   \   0000001A   0000               DC8 0, 0
   \   0000001C   783A25642020       DC8 "x:%d  y:%d"
   \              793A256400  
   \   00000027   00                 DC8 0
   \   00000028   6261743A2025       DC8 "bat: %d%"
   \              642500      
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   25643A256400       DC8 "%d:%d"
   \   0000003A   0000               DC8 0, 0
   \   0000003C   25743A202564       DC8 "%t: %d   fps: %d"
   \              202020667073
   \              3A20256400  
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   426F73735F4C       DC8 "Boss_LoseLife[msg: %s]"
   \              6F73654C6966
   \              655B6D73673A
   \              2025735D00  
   \   00000067   00                 DC8 0
   \   00000068   E6E8E7EDE5E9       DC8 "\346\350\347\355\345\351"
   \              00          
   \   0000006F   00                 DC8 0
   \   00000070   E6E8E7EDE800       DC8 "\346\350\347\355\350"
   \   00000076   0000               DC8 0, 0
   \   00000078   F320E1EEF1F1       DC8 "\363 \341\356\361\361\340 \356\361\362\340\353\356\361\374"
   \              E020EEF1F2E0
   \              EBEEF1FC00  
   \   00000089   000000             DC8 0, 0, 0
   \   0000008C   257420256420       DC8 "%t %d %t"
   \              257400      
   \   00000095   000000             DC8 0, 0, 0
   \   00000098   F320E1EEF1F1       DC8 "\363 \341\356\361\361\340 \356\361\362\340\353\340\361\374 \356\344\355\340 \346\350\347\355\374"
   \              E020EEF1F2E0
   \              EBE0F1FC20EE
   \              E4EDE020E6E8
   \              E7EDFC00    
   \   000000B4   E1EEF1F120F1       DC8 "\341\356\361\361 \361\344\363\353"
   \              E4F3EB00    
   \   000000BE   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {30, 30, 30, 50}>`:
   \   00000000   1E1E1E32           DC8 30, 30, 30, 50

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {190, 190, 190, 100}>`:
   \   00000000   BEBEBE64           DC8 190, 190, 190, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {250, 250, 250, 100}>`:
   \   00000000   FAFAFA64           DC8 250, 250, 250, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\342\\340\\370\\345 \\350\\354\\377">`:
   \   00000000   E2E0F8E520E8       DC8 "\342\340\370\345 \350\354\377"
   \              ECFF00      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   544553543D3E       DC8 "TEST=> N:%d,sx: %d,sy:%d"
   \              204E3A25642C
   \              73783A202564
   \              2C73793A2564
   \              00          
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   6F702E206C65       DC8 "op. levels: %d"
   \              76656C733A20
   \              256400      
   \   00000037   00                 DC8 0
   \   00000038   F1E1F0EEF8E5       DC8 "\361\341\360\356\370\345\355\356"
   \              EDEE00      
   \   00000041   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "pics\\\\items\\\\brick_spar...">`:
   \   00000000   706963735C69       DC8 "pics\\items\\brick_sparks.png"
   \              74656D735C62
   \              7269636B5F73
   \              7061726B732E
   \              706E6700    
   \   0000001C   706963735C69       DC8 "pics\\items\\mine_sparks.png"
   \              74656D735C6D
   \              696E655F7370
   \              61726B732E70
   \              6E6700      
   \   00000037   00                 DC8 0
   \   00000038   706963735C69       DC8 "pics\\items\\rocket_sparks.png"
   \              74656D735C72
   \              6F636B65745F
   \              737061726B73
   \              2E706E6700  
   \   00000055   000000             DC8 0, 0, 0
   \   00000058   706963735C69       DC8 "pics\\items\\pistol_shot.png"
   \              74656D735C70
   \              6973746F6C5F
   \              73686F742E70
   \              6E6700      
   \   00000073   00                 DC8 0
   \   00000074   706963735C69       DC8 "pics\\items\\rocket_shot.png"
   \              74656D735C72
   \              6F636B65745F
   \              73686F742E70
   \              6E6700      
   \   0000008F   00                 DC8 0
   \   00000090   6974656D7320       DC8 "items ok"
   \              6F6B00      
   \   00000099   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "CopyRecords(%s)..[sco...">`:
   \   00000000   436F70795265       DC8 "CopyRecords(%s)..[score=%d]"
   \              636F72647328
   \              2573292E2E5B
   \              73636F72653D
   \              25645D00    
   \   0000001C   2573202D2025       DC8 "%s - %d"
   \              6400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "pics\\\\brick%d.png">`:
   \   00000000   706963735C62       DC8 "pics\\brick%d.png"
   \              7269636B2564
   \              2E706E6700  
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   627269636B73       DC8 "bricks ok"
   \              206F6B00    
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "called function init">`:
   \   00000000   63616C6C6564       DC8 "called function init"
   \              2066756E6374
   \              696F6E20696E
   \              697400      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   706963735C70       DC8 "pics\\press0.png"
   \              72657373302E
   \              706E6700    
   \   00000028   706963735C62       DC8 "pics\\boss.png"
   \              6F73732E706E
   \              6700        
   \   00000036   0000               DC8 0, 0
   \   00000038   626F7373206F       DC8 "boss ok"
   \              6B00        
   \   00000040   706963735C62       DC8 "pics\\ball%d_%d.png"
   \              616C6C25645F
   \              25642E706E67
   \              00          
   \   00000053   00                 DC8 0
   \   00000054   706963735C75       DC8 "pics\\user%d_%d.png"
   \              73657225645F
   \              25642E706E67
   \              00          
   \   00000067   00                 DC8 0
   \   00000068   706963735C62       DC8 "pics\\bon_%d.png"
   \              6F6E5F25642E
   \              706E6700    
   \   00000078   696D61676573       DC8 "images loaded"
   \              206C6F616465
   \              6400        
   \   00000086   0000               DC8 0, 0
   \   00000088   706172616D65       DC8 "parameters ok"
   \              74657273206F
   \              6B00        
   \   00000096   0000               DC8 0, 0
   \   00000098   73657474696E       DC8 "settings ok"
   \              6773206F6B00
   \   000000A4   616C6C20696E       DC8 "all initialised!"
   \              697469616C69
   \              7365642100  
   \   000000B5   000000             DC8 0, 0, 0
   \   000000B8   6D656E755F6D       DC8 "menu_music ok"
   \              75736963206F
   \              6B00        
   \   000000C6   0000               DC8 0, 0
   \   000000C8   496E69742066       DC8 "Init func ok"
   \              756E63206F6B
   \              00          
   \   000000D5   000000             DC8 0, 0, 0
   \   000000D8   707265737330       DC8 "press0 ok"
   \              206F6B00    
   \   000000E2   0000               DC8 0, 0
   \   000000E4   2573257300         DC8 "%s%s"
   \   000000E9   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "freememory...">`:
   \   00000000   667265656D65       DC8 "freememory..."
   \              6D6F72792E2E
   \              2E00        
   \   0000000E   0000               DC8 0, 0
   \   00000010   25642F253064       DC8 "%d/%0d/%d_%d:%0d"
   \              2F25645F2564
   \              3A25306400  
   \   00000021   000000             DC8 0, 0, 0
   \   00000024   636F6D706C65       DC8 "completed!"
   \              7465642100  
   \   0000002F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {0, 0, 0, 100}>`:
   \   00000000   00000064           DC8 0, 0, 0, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "GetCell(%d,%d) - Error!">`:
   \   00000000   47657443656C       DC8 "GetCell(%d,%d) - Error!"
   \              6C2825642C25
   \              6429202D2045
   \              72726F722100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DestroyBrick[x:%d,y:%...">`:
   \   00000000   44657374726F       DC8 "DestroyBrick[x:%d,y:%d,px:%d,py:%d]"
   \              79427269636B
   \              5B783A25642C
   \              793A25642C70
   \              783A25642C70
   \              793A25645D00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "LoseLife[msg: %s]">`:
   \   00000000   4C6F73654C69       DC8 "LoseLife[msg: %s]"
   \              66655B6D7367
   \              3A2025735D00
   \   00000012   0000               DC8 0, 0
   \   00000014   EEF1F2E0EBEE       DC8 "\356\361\362\340\353\356\361\374 %d \346\350\347\355\345\351"
   \              F1FC20256420
   \              E6E8E7EDE5E9
   \              00          
   \   00000027   00                 DC8 0
   \   00000028   EEF1F2E0EBEE       DC8 "\356\361\362\340\353\356\361\374 %d \346\350\347\355\350"
   \              F1FC20256420
   \              E6E8E7EDE800
   \   0000003A   0000               DC8 0, 0
   \   0000003C   EEF1F2E0EBE0       DC8 "\356\361\362\340\353\340\361\374 \356\344\355\340 \346\350\347\355\374"
   \              F1FC20EEE4ED
   \              E020E6E8E7ED
   \              FC00        
   \   00000050   4C6F73654C69       DC8 "LoseLife - game over[msg: %s]"
   \              6665202D2067
   \              616D65206F76
   \              65725B6D7367
   \              3A2025735D00
   \   0000006E   0000               DC8 0, 0
   \   00000070   E8E3F0E020E7       DC8 "\350\343\360\340 \347\340\352\356\355\367\345\355\340,\342\340\370\350 \356\367\352\350: %d"
   \              E0EAEEEDF7E5
   \              EDE02CE2E0F8
   \              E820EEF7EAE8
   \              3A20256400  
   \   0000008D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\363\\360\\356\\342\\345\\355\\374 %d\\n\\`:
   \   00000000   F3F0EEE2E5ED       DC8 "\363\360\356\342\345\355\374 %d\012\355\340 \356\367\345\360\345\344\350 %d \357\356\357\340\344\340\355\350\351!\012\343\356\362\356\342\373?"
   \              FC2025640AED
   \              E020EEF7E5F0
   \              E5E4E8202564
   \              20EFEEEFE0E4
   \              E0EDE8E9210A
   \              E3EEF2EEE2FB
   \              3F00        
   \   0000002C   5B6C6576656C       DC8 "[level %d]bricks_of_clean:%d"
   \              2025645D6272
   \              69636B735F6F
   \              665F636C6561
   \              6E3A256400  
   \   00000049   000000             DC8 0, 0, 0
   \   0000004C   507265706172       DC8 "PrepareLevel: Error while loading map"
   \              654C6576656C
   \              3A204572726F
   \              72207768696C
   \              65206C6F6164
   \              696E67206D61
   \              7000        
   \   00000072   0000               DC8 0, 0
   \   00000074   737461727420       DC8 "start preparing[%d]"
   \              707265706172
   \              696E675B2564
   \              5D00        
   \   00000088   6C6576656C73       DC8 "levels completed"
   \              20636F6D706C
   \              6574656400  
   \   00000099   000000             DC8 0, 0, 0
   \   0000009C   C2F1E520F3F0       DC8 "\302\361\345 \363\360\356\342\355\350 \347\340\342\345\360\370\345\355\373\012\317\356\341\345\344\340!"
   \              EEE2EDE820E7
   \              E0E2E5F0F8E5
   \              EDFB0ACFEEE1
   \              E5E4E02100  
   \   000000B9   000000             DC8 0, 0, 0
   \   000000BC   507265706172       DC8 "PrepareLevel(%d)..."
   \              654C6576656C
   \              282564292E2E
   \              2E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%spics\\\\0.png">`:
   \   00000000   257370696373       DC8 "%spics\\0.png"
   \              5C302E706E67
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   7D00               DC8 "}"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25642C00           DC8 "%d,"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   7B00               DC8 "{"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%smaps\\\\level%d.log">`:
   \   00000000   25736D617073       DC8 "%smaps\\level%d.log"
   \              5C6C6576656C
   \              25642E6C6F67
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%ssounds\\\\end.mid">`:
   \   00000000   2573736F756E       DC8 "%ssounds\\end.mid"
   \              64735C656E64
   \              2E6D696400  
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   2573736F756E       DC8 "%ssounds\\win.mid"
   \              64735C77696E
   \              2E6D696400  
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   2573736F756E       DC8 "%ssounds\\lose.mid"
   \              64735C6C6F73
   \              652E6D696400
   \   0000003A   0000               DC8 0, 0
   \   0000003C   2573736F756E       DC8 "%ssounds\\%d.mid"
   \              64735C25642E
   \              6D696400    
   \   0000004C   2573736F756E       DC8 "%ssounds\\menu.mid"
   \              64735C6D656E
   \              752E6D696400
   \   0000005E   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     BBhit                        28
     BossBallHit                  16
     Boss_loselife                32
     CheckAndChangeBallState      52
     CheckBonuses                 40
     CopyRecords                  20
     DestroyBrick                 56
     DrawBall                     32
     DrawBonuses                  40
     DrawBoss                      4
     DrawBricks                   60
     DrawIconbar                  88
     DrawOther                     4
     DrawUser                     16
     DrawWeapons                   0
     DrwImg                       56
     DumpMap                      32
     Edit_endproc                  4
     FreeMemory                   52
     GetCell                       8
     GetCellState                  0
     GetCoordinatiesByLevelPos     4
     ImageLoadFromFile           516
     Init                        548
     InitBoom                     40
     Keyhook                      48
     LoadBricks                   20
     LoadOther                    12
     LoadTestLevel                16
     LoseLife                     28
     Play                        200
     PlayMusic                    12
     PlayMusicOfTime              12
     PlaySnd                       8
     PrepareLevel                520
     PressTimerFunc                4
     SBhit                        36
     SetCell                       0
     SetDefaultGameParameters      8
     SetDifficulty                 0
     StartVibra                    8
     StopVibra                     8
     TimerRedrawScreen            88
     UBNhit                       28
     UBhit                        20
     check_shoot                  36
     debug_keys                    4
     fopen                        24
     ifree                         8
     imfree                        4
     log                          56
     moveuser                      4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     fopen                            96
     log                             236
     DrwImg                           68
     BossBallHit                     128
     SBhit                           300
     BBhit                           812
     UBhit                           316
     UBNhit                          108
     SetDifficulty                    88
     SetDefaultGameParameters        144
     Play                            312
     PlayMusic                       188
     PlaySnd                          92
     StopVibra                        52
     StartVibra                       56
     PressTimerFunc                   40
     DumpMap                         312
     LoadTestLevel                   140
     PrepareLevel                    588
     GetCoordinatiesByLevelPos        48
     GetCellState                     24
     InitBoom                        252
     CheckAndChangeBallState         748
     CopyRecords                     184
     Edit_endproc                     24
     PlayMusicOfTime                  44
     LoseLife                        416
     Boss_loselife                   308
     brick                           124
     boss                             12
     vtmr                             16
     bon_ball                          4
     DestroyBrick                    556
     SetCell                          52
     GetCell                          84
     DrawBricks                      596
     ball_a                            4
     user_a                            4
     ball_spx_accel                    4
     ball_spy_accel                    4
     DrawBall                       3572
     DrawUser                        240
     CheckBonuses                    740
     DrawBonuses                     404
     DrawWeapons                       4
     DrawOther                         4
     DrawBoss                         52
     DrawIconbar                     564
     TimerRedrawScreen               708
     moveuser                        188
     debug_keys                      124
     check_shoot                     292
     ball                           2740
     perc_d                            3
     Keyhook                         756
     ImageLoadFromFile                52
     LoadOther                       156
     LoadBricks                       88
     Init                            636
     ifree                            36
     imfree                           48
     FreeMemory                      600
     ??DataTable0                      4
     ??DataTable3                      4
     ??DataTable5                      4
     ??DataTable7                      4
     ??DataTable21                     4
     ??DataTable25                     4
     ??DataTable26                     4
     ??DataTable27                     4
     ??DataTable31                     4
     ??DataTable40                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable51                     4
     ??DataTable52                     4
     ??DataTable53                     4
     ??DataTable54                     4
     ??DataTable59                     4
     ??DataTable61                     4
     ??DataTable62                     4
     ??DataTable63                     4
     ??DataTable64                     4
     ??DataTable65                     4
     ??DataTable66                     4
     ??DataTable67                     4
     ??DataTable70                     4
     ??DataTable72                     4
     ??DataTable75                     4
     ??DataTable78                     4
     ??DataTable80                     4
     ??DataTable81                     4
     ??DataTable82                     4
     ??DataTable87                     4
     ??DataTable89                     4
     ??DataTable90                     4
     ??DataTable91                     4
     ??DataTable92                     4
     ??DataTable93                     4
     ??DataTable95                     4
     ??DataTable97                     4
     ??DataTable99                     4
     ??DataTable100                    4
     ??DataTable101                    4
     ??DataTable102                    4
     ?<Initializer for ball>        2740
     ?<Initializer for perc_d>         3
     ?<Constant "ArcanoidStudio_1.4.log">
                                      72
     ?<Constant {90, 90, 90, 90}>    192
     ?<Constant {30, 30, 30, 50}>      4
     ?<Constant {190, 190, 190, 100}>
                                       4
     ?<Constant {250, 250, 250, 100}>
                                       4
     ?<Constant "\342\340\370\345 \350\354\377">
                                      68
     ?<Constant "pics\\items\\brick_spar...">
                                     156
     ?<Constant "CopyRecords(%s)..[sco...">
                                      36
     ?<Constant "pics\\brick%d.png">
                                      32
     ?<Constant "called function init">
                                     236
     ?<Constant "freememory...">      48
     ?<Constant {0, 0, 0, 100}>        4
     ?<Constant "GetCell(%d,%d) - Error!">
                                      24
     ?<Constant "DestroyBrick[x:%d,y:%...">
                                      36
     ?<Constant "LoseLife[msg: %s]">
                                     144
     ?<Constant "\363\360\356\342\345\355\374 %d\n\
                                     208
     ?<Constant "%spics\\0.png">      16
     ?<Constant "}">                   2
     ?<Constant "%d,">                 4
     ?<Constant "{">                   2
     ?<Constant "%smaps\\level%d.log">
                                      20
     ?<Constant "%ssounds\\end.mid">
                                      96
      Others                         472

 
 17 296 bytes in segment CODE
  1 408 bytes in segment DATA_C
  2 743 bytes in segment DATA_I
  2 743 bytes in segment DATA_ID
    172 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 16 848 bytes of CODE  memory (+ 472 bytes shared)
  4 151 bytes of CONST memory
  2 915 bytes of DATA  memory

Errors: none
Warnings: none

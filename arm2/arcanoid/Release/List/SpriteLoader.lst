##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    03/Aug/2009  21:15:22 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\programming\мои проекты\ArcanoidStudio\SpriteLoad #
#                       er.c                                                 #
#    Command line    =  "D:\programming\мои проекты\ArcanoidStudio\SpriteLoa #
#                       der.c" -D NEWSGOLD -D ELKA -lC "D:\programming\мои   #
#                       проекты\ArcanoidStudio\Release\List\" -o             #
#                       "D:\programming\мои проекты\ArcanoidStudio\Release\O #
#                       bj\" -s9 --cpu_mode arm --endian little --cpu        #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "D:\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  D:\programming\мои проекты\ArcanoidStudio\Release\Li #
#                       st\SpriteLoader.lst                                  #
#    Object file     =  D:\programming\мои проекты\ArcanoidStudio\Release\Ob #
#                       j\SpriteLoader.r79                                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\programming\мои проекты\ArcanoidStudio\SpriteLoader.c
      1          #include "SpriteLoader.h"
      2          
      3          
      4          ////////////////////////////////////////////////
      5          extern void DrwImg(IMGHDR *img, int x, int y);//
      6          extern void ifree(IMGHDR *img);/////////////////
      7          extern char *pwd;//////////////
      8          /////////////////
      9          extern void log(char *string);
     10          
     11          
     12          static int tolower(int toLower)
     13          {
     14              if ((toLower >= 'A') && (toLower <= 'Z')) return (toLower + 0x20);
     15              return toLower;
     16          }

   \                                 In segment CODE, align 4, keep-with-next
     17          static IMGHDR* CreateImgHdrByAnyFile (char * name,short width, short height, int rot,int scale,int origin_size)
     18          {
   \                     CreateImgHdrByAnyFile:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   40609DE5           LDR      R6,[SP, #+64]
   \   0000000C   44709DE5           LDR      R7,[SP, #+68]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0350A0E1           MOV      R5,R3
     19            WSHDR *path=AllocWS(256);
   \   00000018   400FA0E3           MOV      R0,#+256
   \   0000001C   250100EF           SWI      +293
   \   00000020   0080A0E1           MOV      R8,R0
     20            str_2ws(path,name,256);
   \   00000024   402FA0E3           MOV      R2,#+256
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   6C0100EF           SWI      +364
     21            unsigned int err=0;
   \   00000030   0040A0E3           MOV      R4,#+0
   \   00000034   00408DE5           STR      R4,[SP, #+0]
     22            int msz,uid;
     23            IMGHDR *tmpimg,*myimg=NULL;  
     24            WSHDR *ext;
     25            HObj  mypicObj;
     26            short pos;
     27            int len;
     28            if (!path)goto exit0;
   \   00000038   000058E3           CMP      R8,#+0
   \   0000003C   9E00000A           BEQ      ??CreateImgHdrByAnyFile_0
     29            len=wstrlen(path); 
   \   00000040   0800A0E1           MOV      R0,R8
   \   00000044   230100EF           SWI      +291
   \   00000048   0090A0E1           MOV      R9,R0
     30            pos= wstrrchr(path,len,'.');
   \   0000004C   2E20A0E3           MOV      R2,#+46
   \   00000050   0910A0E1           MOV      R1,R9
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   DD0100EF           SWI      +477
   \   0000005C   00A0B0E1           MOVS     R10,R0
     31            if (!pos)goto exit0;
   \   00000060   9500000A           BEQ      ??CreateImgHdrByAnyFile_0
     32          
     33            ext=AllocWS(len-pos);
   \   00000064   0AB049E0           SUB      R11,R9,R10
   \   00000068   0B00A0E1           MOV      R0,R11
   \   0000006C   250100EF           SWI      +293
   \   00000070   0090A0E1           MOV      R9,R0
     34            wstrcpybypos(ext,path,pos+1,len-pos);
   \   00000074   0B30A0E1           MOV      R3,R11
   \   00000078   01208AE2           ADD      R2,R10,#+1
   \   0000007C   0810A0E1           MOV      R1,R8
   \   00000080   140200EF           SWI      +532
     35            char e_ext[8];
     36            ws_2str(ext,e_ext,wstrlen(ext));
   \   00000084   0900A0E1           MOV      R0,R9
   \   00000088   230100EF           SWI      +291
   \   0000008C   0020A0E1           MOV      R2,R0
   \   00000090   0C108DE2           ADD      R1,SP,#+12
   \   00000094   0900A0E1           MOV      R0,R9
   \   00000098   A30000EF           SWI      +163
     37            for(int tl=0;tl<strlen(e_ext);tl++)
   \   0000009C   00A0A0E3           MOV      R10,#+0
   \   000000A0   010000EA           B        ??CreateImgHdrByAnyFile_1
     38            {
     39              e_ext[tl] = tolower(e_ext[tl]);
   \                     ??CreateImgHdrByAnyFile_2:
   \   000000A4   0000C1E5           STRB     R0,[R1, #+0]
   \   000000A8   01A08AE2           ADD      R10,R10,#+1
   \                     ??CreateImgHdrByAnyFile_1:
   \   000000AC   0C008DE2           ADD      R0,SP,#+12
   \   000000B0   1B0000EF           SWI      +27
   \   000000B4   00005AE1           CMP      R10,R0
   \   000000B8   0C008DE2           ADD      R0,SP,#+12
   \   000000BC   0700002A           BCS      ??CreateImgHdrByAnyFile_3
   \   000000C0   00108AE0           ADD      R1,R10,R0
   \   000000C4   0000D1E5           LDRB     R0,[R1, #+0]
   \   000000C8   410050E3           CMP      R0,#+65
   \   000000CC   F4FFFFBA           BLT      ??CreateImgHdrByAnyFile_2
   \   000000D0   5B0050E3           CMP      R0,#+91
   \   000000D4   F2FFFFAA           BGE      ??CreateImgHdrByAnyFile_2
   \   000000D8   200080E2           ADD      R0,R0,#+32
   \   000000DC   F0FFFFEA           B        ??CreateImgHdrByAnyFile_2
     40            }
     41            str_2ws(ext,e_ext,strlen(e_ext));
   \                     ??CreateImgHdrByAnyFile_3:
   \   000000E0   1B0000EF           SWI      +27
   \   000000E4   0020A0E1           MOV      R2,R0
   \   000000E8   0C108DE2           ADD      R1,SP,#+12
   \   000000EC   0900A0E1           MOV      R0,R9
   \   000000F0   6C0100EF           SWI      +364
     42            
     43            uid=GetExtUid_ws(ext);      
   \   000000F4   0900A0E1           MOV      R0,R9
   \   000000F8   D00100EF           SWI      +464
   \   000000FC   00A0A0E1           MOV      R10,R0
     44            FreeWS(ext);
   \   00000100   0900A0E1           MOV      R0,R9
   \   00000104   290100EF           SWI      +297
     45            
     46            mypicObj=Obs_CreateObject(uid,0x2d,0x02,0x80A8,1,1,&err);    
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   A830A0E3           MOV      R3,#+168
   \   00000114   803C83E3           ORR      R3,R3,#0x8000
   \   00000118   0220A0E3           MOV      R2,#+2
   \   0000011C   0100A0E3           MOV      R0,#+1
   \   00000120   01002DE9           PUSH     {R0}
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   2D10A0E3           MOV      R1,#+45
   \   0000012C   0A00A0E1           MOV      R0,R10
   \   00000130   590200EF           SWI      +601
   \   00000134   0090A0E1           MOV      R9,R0
     47              if (err)  return 0;
   \   00000138   0C009DE5           LDR      R0,[SP, #+12]
   \   0000013C   0CD08DE2           ADD      SP,SP,#+12
   \   00000140   000050E3           CMP      R0,#+0
   \   00000144   5C00001A           BNE      ??CreateImgHdrByAnyFile_0
     48            err=Obs_SetInput_File(mypicObj,0,path);
   \   00000148   0820A0E1           MOV      R2,R8
   \   0000014C   0010A0E3           MOV      R1,#+0
   \   00000150   0900A0E1           MOV      R0,R9
   \   00000154   5B0200EF           SWI      +603
   \   00000158   00008DE5           STR      R0,[SP, #+0]
     49            FreeWS(path);
   \   0000015C   0800A0E1           MOV      R0,R8
   \   00000160   290100EF           SWI      +297
     50              if (err)  goto exit1;
   \   00000164   00009DE5           LDR      R0,[SP, #+0]
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   5000001A           BNE      ??CreateImgHdrByAnyFile_4
     51              
     52            if (width!=0){ 
   \   00000170   F401DDE1           LDRSH    R0,[SP, #+20]
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   2700000A           BEQ      ??CreateImgHdrByAnyFile_5
     53              short w=width;  
   \   0000017C   0010A0E1           MOV      R1,R0
   \   00000180   B810CDE1           STRH     R1,[SP, #+8]
     54              short h=height;      
   \   00000184   F811DDE1           LDRSH    R1,[SP, #+24]
     55              if(origin_size)
   \   00000188   000057E3           CMP      R7,#+0
   \   0000018C   BA10CDE1           STRH     R1,[SP, #+10]
   \   00000190   0C00000A           BEQ      ??CreateImgHdrByAnyFile_6
     56              {
     57                err=Obs_GetInfo(mypicObj,0);    
   \   00000194   0010A0E3           MOV      R1,#+0
   \   00000198   0900A0E1           MOV      R0,R9
   \   0000019C   620200EF           SWI      +610
   \   000001A0   00008DE5           STR      R0,[SP, #+0]
     58                if (err)  goto exit1;  
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   4100001A           BNE      ??CreateImgHdrByAnyFile_4
     59                err=Obs_GetInputImageSize(mypicObj,&w,&h);    
   \   000001AC   0A208DE2           ADD      R2,SP,#+10
   \   000001B0   08108DE2           ADD      R1,SP,#+8
   \   000001B4   0900A0E1           MOV      R0,R9
   \   000001B8   5C0200EF           SWI      +604
   \   000001BC   00008DE5           STR      R0,[SP, #+0]
     60                if (err)  goto exit1;
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   3A00001A           BNE      ??CreateImgHdrByAnyFile_4
     61              }
     62              err=Obs_SetOutputImageSize(mypicObj,w,h);
   \                     ??CreateImgHdrByAnyFile_6:
   \   000001C8   FA20DDE1           LDRSH    R2,[SP, #+10]
   \   000001CC   F810DDE1           LDRSH    R1,[SP, #+8]
   \   000001D0   0900A0E1           MOV      R0,R9
   \   000001D4   5D0200EF           SWI      +605
   \   000001D8   00008DE5           STR      R0,[SP, #+0]
     63                if (err)  goto exit1;
   \   000001DC   000050E3           CMP      R0,#+0
   \   000001E0   3300001A           BNE      ??CreateImgHdrByAnyFile_4
     64              if (rot){  
   \   000001E4   000055E3           CMP      R5,#+0
   \   000001E8   0500000A           BEQ      ??CreateImgHdrByAnyFile_7
     65                err= Obs_SetRotation(mypicObj,rot);
   \   000001EC   0510A0E1           MOV      R1,R5
   \   000001F0   0900A0E1           MOV      R0,R9
   \   000001F4   610200EF           SWI      +609
   \   000001F8   00008DE5           STR      R0,[SP, #+0]
     66                  if (err)  goto exit1;
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   2B00001A           BNE      ??CreateImgHdrByAnyFile_4
     67              }
     68              err=Obs_SetScaling(mypicObj,scale);
   \                     ??CreateImgHdrByAnyFile_7:
   \   00000204   0610A0E1           MOV      R1,R6
   \   00000208   0900A0E1           MOV      R0,R9
   \   0000020C   630200EF           SWI      +611
   \   00000210   00008DE5           STR      R0,[SP, #+0]
     69                if (err)  goto exit1;
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   2500001A           BNE      ??CreateImgHdrByAnyFile_4
     70            }
     71            err=Obs_Start(mypicObj);
   \                     ??CreateImgHdrByAnyFile_5:
   \   0000021C   0900A0E1           MOV      R0,R9
   \   00000220   5E0200EF           SWI      +606
   \   00000224   00008DE5           STR      R0,[SP, #+0]
     72              if (err)  goto exit1;
   \   00000228   000050E3           CMP      R0,#+0
   \   0000022C   2000001A           BNE      ??CreateImgHdrByAnyFile_4
     73            err=Obs_Output_GetPictstruct(mypicObj,&tmpimg);
   \   00000230   04108DE2           ADD      R1,SP,#+4
   \   00000234   0900A0E1           MOV      R0,R9
   \   00000238   5F0200EF           SWI      +607
   \   0000023C   00008DE5           STR      R0,[SP, #+0]
     74            if (err)  {myimg=NULL;goto exit1;}
   \   00000240   000050E3           CMP      R0,#+0
   \   00000244   1A00001A           BNE      ??CreateImgHdrByAnyFile_4
     75            msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
   \   00000248   04009DE5           LDR      R0,[SP, #+4]
   \   0000024C   042090E5           LDR      R2,[R0, #+4]
   \   00000250   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000254   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000258   FF2002E2           AND      R2,R2,#0xFF
   \   0000025C   580200EF           SWI      +600
   \   00000260   0050A0E1           MOV      R5,R0
     76            myimg=malloc(sizeof(IMGHDR));
   \   00000264   0C00A0E3           MOV      R0,#+12
   \   00000268   140000EF           SWI      +20
   \   0000026C   0040A0E1           MOV      R4,R0
     77            myimg->w=tmpimg->w;
   \   00000270   04009DE5           LDR      R0,[SP, #+4]
   \   00000274   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000278   B000C4E1           STRH     R0,[R4, #+0]
     78            myimg->h=tmpimg->h;
   \   0000027C   04009DE5           LDR      R0,[SP, #+4]
   \   00000280   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000284   B200C4E1           STRH     R0,[R4, #+2]
     79            myimg->bpnum=tmpimg->bpnum;
   \   00000288   04009DE5           LDR      R0,[SP, #+4]
   \   0000028C   040090E5           LDR      R0,[R0, #+4]
   \   00000290   040084E5           STR      R0,[R4, #+4]
     80            myimg->bitmap=malloc(msz);
   \   00000294   0500A0E1           MOV      R0,R5
   \   00000298   140000EF           SWI      +20
   \   0000029C   080084E5           STR      R0,[R4, #+8]
     81            memcpy(myimg->bitmap,tmpimg->bitmap,msz);
   \   000002A0   04009DE5           LDR      R0,[SP, #+4]
   \   000002A4   0520A0E1           MOV      R2,R5
   \   000002A8   081090E5           LDR      R1,[R0, #+8]
   \   000002AC   080094E5           LDR      R0,[R4, #+8]
   \   000002B0   1E0100EF           SWI      +286
     82          exit1:
     83            Obs_DestroyObject(mypicObj);
   \                     ??CreateImgHdrByAnyFile_4:
   \   000002B4   0900A0E1           MOV      R0,R9
   \   000002B8   5A0200EF           SWI      +602
     84          exit0:  
     85            return myimg;
   \                     ??CreateImgHdrByAnyFile_0:
   \   000002BC   0400A0E1           MOV      R0,R4
   \   000002C0   1CD08DE2           ADD      SP,SP,#+28
   \   000002C4   F08FBDE8           POP      {R4-R11,PC}      ;; return
     86          }
     87          
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          static IMGHDR **LoadSprites(char *path,char num_sprites,char horz)
     90          {
   \                     LoadSprites:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0260A0E1           MOV      R6,R2
     91            IMGHDR *sprite = CreateImgHdrByAnyFile(path,0,0,0,0,1);
   \   00000008   0030A0E3           MOV      R3,#+0
   \   0000000C   0190A0E1           MOV      R9,R1
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   02002DE9           PUSH     {R1}
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   02002DE9           PUSH     {R1}
   \   00000020   0120A0E1           MOV      R2,R1
   \   00000024   ........           BL       CreateImgHdrByAnyFile
   \   00000028   0040B0E1           MOVS     R4,R0
     92            if(sprite==NULL) return NULL;
   \   0000002C   08D08DE2           ADD      SP,SP,#+8
   \   00000030   0000A003           MOVEQ    R0,#+0
   \   00000034   F083BD08           POPEQ    {R4-R9,PC}
     93            IMGHDR **ret = malloc(sizeof(IMGHDR)*num_sprites);
   \   00000038   0900A0E1           MOV      R0,R9
   \   0000003C   0C10A0E3           MOV      R1,#+12
   \   00000040   910000E0           MUL      R0,R1,R0
   \   00000044   140000EF           SWI      +20
   \   00000048   0050A0E1           MOV      R5,R0
     94            
     95            if(horz) //вертикаль влом делать)
   \   0000004C   000056E3           CMP      R6,#+0
   \   00000050   0800000A           BEQ      ??LoadSprites_0
     96            {
     97              short width = sprite->w/num_sprites;
   \   00000054   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000058   0960A0E1           MOV      R6,R9
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000064   0178A0E1           MOV      R7,R1, LSL #+16
   \   00000068   4778A0E1           MOV      R7,R7, ASR #+16
     98              for(int i=0;i<num_sprites;i++)
   \   0000006C   0080A0E3           MOV      R8,#+0
   \   00000070   000059E3           CMP      R9,#+0
   \   00000074   0400001A           BNE      ??LoadSprites_1
     99              {
    100                ret[i] = malloc(sizeof(IMGHDR));
    101                ret[i]->w = width;
    102                ret[i]->h = sprite->h;
    103                ret[i]->bpnum = 8;
    104                ret[i]->bitmap = malloc(width*ret[i]->h*2); //only 16bpp!
    105                short *dest = (short*)ret[i]->bitmap;
    106                short *src = (short*)sprite->bitmap+width*i;
    107                for(int y=0;y<sprite->h;y++)
    108                {
    109                  for(int x=0;x<width;x++)
    110                  {
    111                    dest[y*width+x] = src[y*width*num_sprites+x];
    112                  }
    113                }
    114              }
    115            }
    116           /* else
    117            {
    118              short height = sprite->h/num_sprites;
    119              for(int i=0;i<num_sprites;i++)
    120              {
    121                ret[i] = malloc(sizeof(IMGHDR));
    122                ret[i]->w = width;
    123                ret[i]->h = sprite->h;
    124                ret[i]->bpnum = 8;
    125                ret[i]->bitmap = malloc(width*ret[i]->h*2); //only 16bpp!
    126                short *dest = (short*)ret[i]->bitmap;
    127                short *src = (short*)sprite->bitmap+width*i;
    128                for(int y=0;y<sprite->h;y++)
    129                {
    130                  for(int x=0;x<width;x++)
    131                  {
    132                    dest[y*width+x] = src[y*width*num_sprites+x];
    133                  }
    134                }
    135              }
    136            }*/
    137            
    138            mfree(sprite);
   \                     ??LoadSprites_0:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   150000EF           SWI      +21
    139            return ret;
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??LoadSprites_2:
   \   00000088   018088E2           ADD      R8,R8,#+1
   \                     ??LoadSprites_1:
   \   0000008C   060058E1           CMP      R8,R6
   \   00000090   F8FFFFAA           BGE      ??LoadSprites_0
   \   00000094   089185E0           ADD      R9,R5,R8, LSL #+2
   \   00000098   0C00A0E3           MOV      R0,#+12
   \   0000009C   140000EF           SWI      +20
   \   000000A0   000089E5           STR      R0,[R9, #+0]
   \   000000A4   B070C0E1           STRH     R7,[R0, #+0]
   \   000000A8   B210D4E1           LDRH     R1,[R4, #+2]
   \   000000AC   000099E5           LDR      R0,[R9, #+0]
   \   000000B0   B210C0E1           STRH     R1,[R0, #+2]
   \   000000B4   000099E5           LDR      R0,[R9, #+0]
   \   000000B8   0810A0E3           MOV      R1,#+8
   \   000000BC   041080E5           STR      R1,[R0, #+4]
   \   000000C0   000099E5           LDR      R0,[R9, #+0]
   \   000000C4   B200D0E1           LDRH     R0,[R0, #+2]
   \   000000C8   900701E0           MUL      R1,R0,R7
   \   000000CC   8100A0E1           LSL      R0,R1,#+1
   \   000000D0   140000EF           SWI      +20
   \   000000D4   001099E5           LDR      R1,[R9, #+0]
   \   000000D8   080081E5           STR      R0,[R1, #+8]
   \   000000DC   B230D4E1           LDRH     R3,[R4, #+2]
   \   000000E0   000099E5           LDR      R0,[R9, #+0]
   \   000000E4   082094E5           LDR      R2,[R4, #+8]
   \   000000E8   080090E5           LDR      R0,[R0, #+8]
   \   000000EC   980701E0           MUL      R1,R8,R7
   \   000000F0   000053E3           CMP      R3,#+0
   \   000000F4   811082E0           ADD      R1,R2,R1, LSL #+1
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0B00001A           BNE      ??LoadSprites_3
   \   00000100   E0FFFFEA           B        ??LoadSprites_2
   \                     ??LoadSprites_4:
   \   00000104   970209E0           MUL      R9,R7,R2
   \   00000108   09C083E0           ADD      R12,R3,R9
   \   0000010C   963929E0           MLA      R9,R6,R9,R3
   \   00000110   8CC080E0           ADD      R12,R0,R12, LSL #+1
   \   00000114   899081E0           ADD      R9,R1,R9, LSL #+1
   \   00000118   F090D9E1           LDRSH    R9,[R9, #+0]
   \   0000011C   013083E2           ADD      R3,R3,#+1
   \   00000120   B090CCE1           STRH     R9,[R12, #+0]
   \                     ??LoadSprites_5:
   \   00000124   070053E1           CMP      R3,R7
   \   00000128   F5FFFFBA           BLT      ??LoadSprites_4
   \                     ??LoadSprites_6:
   \   0000012C   012082E2           ADD      R2,R2,#+1
   \                     ??LoadSprites_3:
   \   00000130   B230D4E1           LDRH     R3,[R4, #+2]
   \   00000134   030052E1           CMP      R2,R3
   \   00000138   D2FFFFAA           BGE      ??LoadSprites_2
   \   0000013C   0030A0E3           MOV      R3,#+0
   \   00000140   010057E3           CMP      R7,#+1
   \   00000144   F6FFFFAA           BGE      ??LoadSprites_5
   \   00000148   F7FFFFEA           B        ??LoadSprites_6
    140          }
    141          

   \                                 In segment CODE, align 4, keep-with-next
    142          static void NewActiveCopy(TSPRITE *dst,TSPRITE *src,short x,short y)
    143          {
   \                     NewActiveCopy:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    144            //sprintf(lgn,"NewActiveCopy(x: %d,y: %d)...",x,y);log(lgn);
    145            dst->num = src->num;
   \   0000000C   0A00D5E5           LDRB     R0,[R5, #+10]
    146            dst->img = malloc(sizeof(IMGHDR)*dst->num);
   \   00000010   0C10A0E3           MOV      R1,#+12
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0A00C4E5           STRB     R0,[R4, #+10]
   \   0000001C   910000E0           MUL      R0,R1,R0
   \   00000020   0370A0E1           MOV      R7,R3
   \   00000024   140000EF           SWI      +20
   \   00000028   000084E5           STR      R0,[R4, #+0]
    147            for(int i=0;i<dst->num;i++)
   \   0000002C   0A00D4E5           LDRB     R0,[R4, #+10]
   \   00000030   0080A0E3           MOV      R8,#+0
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   2B00001A           BNE      ??NewActiveCopy_0
   \   0000003C   2D0000EA           B        ??NewActiveCopy_1
    148            {
    149              dst->img[i] = malloc(sizeof(IMGHDR));
   \                     ??NewActiveCopy_2:
   \   00000040   0C00A0E3           MOV      R0,#+12
   \   00000044   140000EF           SWI      +20
   \   00000048   001094E5           LDR      R1,[R4, #+0]
   \   0000004C   081181E0           ADD      R1,R1,R8, LSL #+2
   \   00000050   000081E5           STR      R0,[R1, #+0]
   \   00000054   000095E5           LDR      R0,[R5, #+0]
   \   00000058   002091E5           LDR      R2,[R1, #+0]
   \   0000005C   080180E0           ADD      R0,R0,R8, LSL #+2
   \   00000060   003090E5           LDR      R3,[R0, #+0]
   \   00000064   043093E5           LDR      R3,[R3, #+4]
   \   00000068   043082E5           STR      R3,[R2, #+4]
    150              dst->img[i]->bpnum = src->img[i]->bpnum;
    151              dst->img[i]->w = src->img[i]->w;
   \   0000006C   003090E5           LDR      R3,[R0, #+0]
   \   00000070   002091E5           LDR      R2,[R1, #+0]
   \   00000074   B030D3E1           LDRH     R3,[R3, #+0]
   \   00000078   B030C2E1           STRH     R3,[R2, #+0]
    152              dst->img[i]->h = src->img[i]->h;
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   002091E5           LDR      R2,[R1, #+0]
   \   00000084   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000088   B200C2E1           STRH     R0,[R2, #+2]
    153              dst->img[i]->bitmap = malloc(dst->img[i]->w*dst->img[i]->h*2);
   \   0000008C   000091E5           LDR      R0,[R1, #+0]
   \   00000090   001091E5           LDR      R1,[R1, #+0]
   \   00000094   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000098   B210D1E1           LDRH     R1,[R1, #+2]
   \   0000009C   910000E0           MUL      R0,R1,R0
   \   000000A0   8000A0E1           LSL      R0,R0,#+1
   \   000000A4   140000EF           SWI      +20
   \   000000A8   001094E5           LDR      R1,[R4, #+0]
   \   000000AC   083181E0           ADD      R3,R1,R8, LSL #+2
   \   000000B0   001093E5           LDR      R1,[R3, #+0]
   \   000000B4   080081E5           STR      R0,[R1, #+8]
    154              memcpy(dst->img[i]->bitmap,src->img[i]->bitmap,dst->img[i]->w*dst->img[i]->h*2);
   \   000000B8   000093E5           LDR      R0,[R3, #+0]
   \   000000BC   001093E5           LDR      R1,[R3, #+0]
   \   000000C0   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000C4   B210D1E1           LDRH     R1,[R1, #+2]
   \   000000C8   910000E0           MUL      R0,R1,R0
   \   000000CC   8020A0E1           LSL      R2,R0,#+1
   \   000000D0   000095E5           LDR      R0,[R5, #+0]
   \   000000D4   080190E7           LDR      R0,[R0, +R8, LSL #+2]
    155            }
   \   000000D8   018088E2           ADD      R8,R8,#+1
   \   000000DC   081090E5           LDR      R1,[R0, #+8]
   \   000000E0   000093E5           LDR      R0,[R3, #+0]
   \   000000E4   080090E5           LDR      R0,[R0, #+8]
   \   000000E8   1E0100EF           SWI      +286
   \                     ??NewActiveCopy_0:
   \   000000EC   0A00D4E5           LDRB     R0,[R4, #+10]
   \   000000F0   000058E1           CMP      R8,R0
   \   000000F4   D1FFFFBA           BLT      ??NewActiveCopy_2
    156            dst->x = x;
   \                     ??NewActiveCopy_1:
   \   000000F8   B660C4E1           STRH     R6,[R4, #+6]
    157            dst->y = y;
   \   000000FC   B870C4E1           STRH     R7,[R4, #+8]
    158            dst->time = src->time;
   \   00000100   FC00D5E1           LDRSH    R0,[R5, #+12]
   \   00000104   BC00C4E1           STRH     R0,[R4, #+12]
    159            dst->active = 1;
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   0400C4E5           STRB     R0,[R4, #+4]
    160            dst->sw = 0;
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   0E00C4E5           STRB     R0,[R4, #+14]
    161            dst->counter = 0;
   \   00000118   100084E5           STR      R0,[R4, #+16]
    162            //log("NewActiveCopy() ok");
    163          }
   \   0000011C   F081BDE8           POP      {R4-R8,PC}       ;; return
    164          
    165          
    166          
    167          
    168          

   \                                 In segment CODE, align 4, keep-with-next
    169          void DumpSprite(TSPRITE *sprite)
    170          {
   \                     DumpSprite:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    171            sprintf(lgn,"N: %d",sprite->N);log(lgn);
   \   00000004   ........           LDR      R5,??DataTable12  ;; lgn
   \   00000008   60619FE5           LDR      R6,??DumpSprite_0+0x4  ;; `?<Constant "N: %d">`
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   F421D4E1           LDRSH    R2,[R4, #+20]
   \   00000014   0610A0E1           MOV      R1,R6
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   160000EF           SWI      +22
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           _BLF     log,??log??rA
    172            sprintf(lgn,"active: %d",sprite->active);log(lgn);
   \   00000028   0420D4E5           LDRB     R2,[R4, #+4]
   \   0000002C   081086E2           ADD      R1,R6,#+8
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   160000EF           SWI      +22
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     log,??log??rA
    173            sprintf(lgn,"x: %d",sprite->x);log(lgn);
   \   00000040   F620D4E1           LDRSH    R2,[R4, #+6]
   \   00000044   141086E2           ADD      R1,R6,#+20
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   160000EF           SWI      +22
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           _BLF     log,??log??rA
    174            sprintf(lgn,"y: %d",sprite->y);log(lgn);
   \   00000058   F820D4E1           LDRSH    R2,[R4, #+8]
   \   0000005C   1C1086E2           ADD      R1,R6,#+28
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   160000EF           SWI      +22
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     log,??log??rA
    175            sprintf(lgn,"num: %d",sprite->num);log(lgn);
   \   00000070   0A20D4E5           LDRB     R2,[R4, #+10]
   \   00000074   241086E2           ADD      R1,R6,#+36
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   160000EF           SWI      +22
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           _BLF     log,??log??rA
    176            sprintf(lgn,"time: %d",sprite->time);log(lgn);
   \   00000088   FC20D4E1           LDRSH    R2,[R4, #+12]
   \   0000008C   2C1086E2           ADD      R1,R6,#+44
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   160000EF           SWI      +22
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     log,??log??rA
    177            sprintf(lgn,"sw: %d",sprite->sw);log(lgn);
   \   000000A0   0E20D4E5           LDRB     R2,[R4, #+14]
   \   000000A4   381086E2           ADD      R1,R6,#+56
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   160000EF           SWI      +22
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   ........           _BLF     log,??log??rA
    178            sprintf(lgn,"counter: %d",sprite->counter);log(lgn);
   \   000000B8   102094E5           LDR      R2,[R4, #+16]
   \   000000BC   401086E2           ADD      R1,R6,#+64
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   160000EF           SWI      +22
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     log,??log??rA
    179            sprintf(lgn,"ovr: %d",sprite->ovr);log(lgn);
   \   000000D0   F621D4E1           LDRSH    R2,[R4, #+22]
   \   000000D4   4C1086E2           ADD      R1,R6,#+76
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   160000EF           SWI      +22
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           _BLF     log,??log??rA
    180            
    181            sprintf(lgn,"isMoving: %d",sprite->isMoving);log(lgn);
   \   000000E8   1E20D4E5           LDRB     R2,[R4, #+30]
   \   000000EC   541086E2           ADD      R1,R6,#+84
   \   000000F0   0500A0E1           MOV      R0,R5
   \   000000F4   160000EF           SWI      +22
   \   000000F8   0500A0E1           MOV      R0,R5
   \   000000FC   ........           _BLF     log,??log??rA
    182            sprintf(lgn,"ex: %d",sprite->ex);log(lgn);
   \   00000100   F821D4E1           LDRSH    R2,[R4, #+24]
   \   00000104   641086E2           ADD      R1,R6,#+100
   \   00000108   0500A0E1           MOV      R0,R5
   \   0000010C   160000EF           SWI      +22
   \   00000110   0500A0E1           MOV      R0,R5
   \   00000114   ........           _BLF     log,??log??rA
    183            sprintf(lgn,"ey: %d",sprite->ey);log(lgn);
   \   00000118   FA21D4E1           LDRSH    R2,[R4, #+26]
   \   0000011C   6C1086E2           ADD      R1,R6,#+108
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   160000EF           SWI      +22
   \   00000128   0500A0E1           MOV      R0,R5
   \   0000012C   ........           _BLF     log,??log??rA
    184            sprintf(lgn,"x_incr: %d",sprite->x_incr);log(lgn);
   \   00000130   DC21D4E1           LDRSB    R2,[R4, #+28]
   \   00000134   741086E2           ADD      R1,R6,#+116
   \   00000138   0500A0E1           MOV      R0,R5
   \   0000013C   160000EF           SWI      +22
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           _BLF     log,??log??rA
    185            sprintf(lgn,"y_incr: %d",sprite->y_incr);log(lgn);
   \   00000148   DD21D4E1           LDRSB    R2,[R4, #+29]
   \   0000014C   801086E2           ADD      R1,R6,#+128
   \   00000150   0500A0E1           MOV      R0,R5
   \   00000154   160000EF           SWI      +22
   \   00000158   0500A0E1           MOV      R0,R5
   \   0000015C   ........           _BLF     log,??log??rA
    186            log("\n");
   \   00000160   010F8FE2           ADR      R0,??DumpSprite_0  ;; "\n"
   \   00000164   ........           _BLF     log,??log??rA
    187          }
   \   00000168   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??DumpSprite_0:
   \   0000016C   0A000000           DC8      "\n",+0,+0
   \   00000170   ........           DC32     `?<Constant "N: %d">`
    188          
    189          
    190          
    191          
    192          

   \                                 In segment DATA_Z, align 4, align-sorted
    193          TSPRITE *sprites;
   \                     sprites:
   \   00000000                      DS8 4
    194          
    195          
    196          
    197          

   \                                 In segment CODE, align 4, keep-with-next
    198          static void DrawSprite(TSPRITE *sprite)
    199          {
   \                     DrawSprite:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    200            
    201            if(sprite->active)
   \   00000008   0400D4E5           LDRB     R0,[R4, #+4]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    202            {
    203              //DumpSprite(sprite);
    204              DrwImg(sprite->img[sprite->sw],sprite->x,sprite->y);
   \   00000014   0E00D4E5           LDRB     R0,[R4, #+14]
   \   00000018   003094E5           LDR      R3,[R4, #+0]
   \   0000001C   F820D4E1           LDRSH    R2,[R4, #+8]
   \   00000020   F610D4E1           LDRSH    R1,[R4, #+6]
   \   00000024   000193E7           LDR      R0,[R3, +R0, LSL #+2]
   \   00000028   ........           _BLF     DrwImg,??DrwImg??rA
    205              if(sprite->isMoving)
   \   0000002C   1E00D4E5           LDRB     R0,[R4, #+30]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   2700000A           BEQ      ??DrawSprite_0
    206              {
    207                //sprintf(lgn,"Draw moving sprite[n:%d, x:%d, y:%d, ix:%d, iy:%d, ex:%d, ey:%d]",sprite->N,sprite->x,sprite->y,sprite->x_incr,sprite->y_incr,sprite->ex,sprite->ey);
    208                //log(lgn);
    209                sprite->x+=sprite->x_incr;
   \   00000038   DC01D4E1           LDRSB    R0,[R4, #+28]
   \   0000003C   F610D4E1           LDRSH    R1,[R4, #+6]
   \   00000040   011080E0           ADD      R1,R0,R1
   \   00000044   B610C4E1           STRH     R1,[R4, #+6]
    210                sprite->y+=sprite->y_incr;
   \   00000048   DD21D4E1           LDRSB    R2,[R4, #+29]
   \   0000004C   F830D4E1           LDRSH    R3,[R4, #+8]
    211                if(sprite->y_incr==0 && sprite->x_incr==0) {StopSprite(sprite->N);return;}
   \   00000050   000052E3           CMP      R2,#+0
   \   00000054   033082E0           ADD      R3,R2,R3
   \   00000058   B830C4E1           STRH     R3,[R4, #+8]
   \   0000005C   00005003           CMPEQ    R0,#+0
   \   00000060   0200001A           BNE      ??DrawSprite_1
   \                     ??DrawSprite_2:
   \   00000064   F401D4E1           LDRSH    R0,[R4, #+20]
   \   00000068   ........           BL       StopSprite
   \   0000006C   1080BDE8           POP      {R4,PC}
    212                
    213                if(sprite->x_incr>0) {if(sprite->x>sprite->ex) {StopSprite(sprite->N);return;}} //движение вправо,достигли конца,киляем спрайт
   \                     ??DrawSprite_1:
   \   00000070   F8C1D4E1           LDRSH    R12,[R4, #+24]
   \   00000074   010050E3           CMP      R0,#+1
   \   00000078   030000BA           BLT      ??DrawSprite_3
   \   0000007C   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000080   41085CE1           CMP      R12,R1, ASR #+16
   \   00000084   050000AA           BGE      ??DrawSprite_4
   \   00000088   0A0000EA           B        ??DrawSprite_5
    214                else if(sprite->x_incr<0) {if(sprite->x<sprite->ex) {StopSprite(sprite->N);return;}} //движение влево,достигли конца,киляем спрайт
   \                     ??DrawSprite_3:
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0200005A           BPL      ??DrawSprite_4
   \   00000094   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000098   41085CE1           CMP      R12,R1, ASR #+16
   \   0000009C   F0FFFFCA           BGT      ??DrawSprite_2
    215                
    216                if(sprite->y_incr>0) {if(sprite->y>sprite->ey) {StopSprite(sprite->N);return;}} //движение вниз,достигли конца,киляем спрайт
   \                     ??DrawSprite_4:
   \   000000A0   FA01D4E1           LDRSH    R0,[R4, #+26]
   \   000000A4   010052E3           CMP      R2,#+1
   \   000000A8   050000BA           BLT      ??DrawSprite_6
   \   000000AC   0338A0E1           MOV      R3,R3, LSL #+16
   \   000000B0   430850E1           CMP      R0,R3, ASR #+16
   \   000000B4   070000AA           BGE      ??DrawSprite_0
   \                     ??DrawSprite_5:
   \   000000B8   F401D4E1           LDRSH    R0,[R4, #+20]
   \   000000BC   ........           BL       StopSprite
   \   000000C0   1080BDE8           POP      {R4,PC}
    217                else if(sprite->y_incr<0) {if(sprite->y<sprite->ey) {StopSprite(sprite->N);return;}} //движение вверх,достигли конца,киляем спрайт
   \                     ??DrawSprite_6:
   \   000000C4   000052E3           CMP      R2,#+0
   \   000000C8   0200005A           BPL      ??DrawSprite_0
   \   000000CC   0338A0E1           MOV      R3,R3, LSL #+16
   \   000000D0   430850E1           CMP      R0,R3, ASR #+16
   \   000000D4   E2FFFFCA           BGT      ??DrawSprite_2
    218                //log("draw ok");
    219              }
    220              sprite->counter++;
   \                     ??DrawSprite_0:
   \   000000D8   100094E5           LDR      R0,[R4, #+16]
   \   000000DC   010080E2           ADD      R0,R0,#+1
   \   000000E0   100084E5           STR      R0,[R4, #+16]
    221              if(sprite->counter%sprite->time==0)
   \   000000E4   FC10D4E1           LDRSH    R1,[R4, #+12]
   \   000000E8   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   1080BD18           POPNE    {R4,PC}
    222              {
    223                if(sprite->sw<sprite->num-1) sprite->sw++;
   \   000000F4   0E00D4E5           LDRB     R0,[R4, #+14]
   \   000000F8   0A20D4E5           LDRB     R2,[R4, #+10]
   \   000000FC   012042E2           SUB      R2,R2,#+1
   \   00000100   020050E1           CMP      R0,R2
   \   00000104   010080B2           ADDLT    R0,R0,#+1
   \   00000108   0E00C4B5           STRBLT   R0,[R4, #+14]
   \   0000010C   1080BDB8           POPLT    {R4,PC}
    224                else  //прорисовка спрайта закончена
    225                {
    226                  if(sprite->ovr<=1) //кол-во повторений <=1
   \   00000110   F601D4E1           LDRSH    R0,[R4, #+22]
   \   00000114   020050E3           CMP      R0,#+2
   \   00000118   060000AA           BGE      ??DrawSprite_7
    227                  {
    228                    //log("6");
    229                    FreeSprite(&sprites[sprite->N]); //удаляем копию
   \   0000011C   F401D4E1           LDRSH    R0,[R4, #+20]
   \   00000120   ........           LDR      R2,??DataTable14  ;; sprites
   \   00000124   2410A0E3           MOV      R1,#+36
   \   00000128   002092E5           LDR      R2,[R2, #+0]
   \   0000012C   912020E0           MLA      R0,R1,R0,R2
   \   00000130   ........           BL       FreeSprite
   \   00000134   1080BDE8           POP      {R4,PC}
    230                  }
    231                  else //если есть еще циклы,то повторяем все это дело
    232                  {
    233                    sprite->sw=0;
   \                     ??DrawSprite_7:
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   0E10C4E5           STRB     R1,[R4, #+14]
    234                    sprite->counter=0;
   \   00000140   101084E5           STR      R1,[R4, #+16]
    235                    sprite->ovr--;
   \   00000144   010040E2           SUB      R0,R0,#+1
   \   00000148   B601C4E1           STRH     R0,[R4, #+22]
   \   0000014C   1080BDE8           POP      {R4,PC}          ;; return
    236                  }
    237                }
    238              }
    239            }
    240          }
    241          
    242          static short FindFirstEmptyIndex()
    243          {
    244            for(short i=0;i<MAX_SPRITES;i++) if(sprites[i].active==0) return i;
    245            return -1;
    246          }
    247          
    248          
    249          
    250          
    251          
    252          
    253          
    254          
    255          
    256          
    257          
    258          
    259          
    260          
    261          
    262          
    263          
    264          
    265          
    266          
    267          
    268          
    269          
    270          
    271          
    272          
    273          
    274          
    275          
    276          
    277          
    278          
    279          
    280          

   \                                 In segment CODE, align 4, keep-with-next
    281          void LoadSprite(char *name,char num,short time,TSPRITE *sprite)
    282          {
   \                     LoadSprite:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0360A0E1           MOV      R6,R3
    283            FSTATS fstats;
    284            unsigned int err;
    285            
    286            char *p = malloc(256);
   \   00000014   400FA0E3           MOV      R0,#+256
   \   00000018   140000EF           SWI      +20
    287            sprintf(p,"%s%s",pwd,name);
   \   0000001C   74109FE5           LDR      R1,??LoadSprite_0  ;; `?<Constant "%s%s">`
   \   00000020   0070A0E1           MOV      R7,R0
   \   00000024   70009FE5           LDR      R0,??LoadSprite_0+0x4  ;; pwd
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   002090E5           LDR      R2,[R0, #+0]
   \   00000030   0700A0E1           MOV      R0,R7
   \   00000034   160000EF           SWI      +22
    288            if(GetFileStats(p,&fstats,&err)<0) goto exit;
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   04108DE2           ADD      R1,SP,#+4
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   840000EF           SWI      +132
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0D00004A           BMI      ??LoadSprite_1
    289            sprite->num = num;
   \   00000050   0A50C6E5           STRB     R5,[R6, #+10]
    290            sprite->img = LoadSprites(p,num,1);
   \   00000054   0120A0E3           MOV      R2,#+1
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   ........           BL       LoadSprites
   \   00000064   000086E5           STR      R0,[R6, #+0]
    291            sprite->active = 0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   0400C6E5           STRB     R0,[R6, #+4]
    292            sprite->time = 2;
   \   00000070   0210A0E3           MOV      R1,#+2
   \   00000074   BC10C6E1           STRH     R1,[R6, #+12]
    293            sprite->x = 0;
   \   00000078   B600C6E1           STRH     R0,[R6, #+6]
    294            sprite->y = 0;
   \   0000007C   B800C6E1           STRH     R0,[R6, #+8]
    295            sprite->sw = 0;
   \   00000080   0E00C6E5           STRB     R0,[R6, #+14]
    296            sprite->counter = 0;
   \   00000084   100086E5           STR      R0,[R6, #+16]
    297          exit:
    298            mfree(p);
   \                     ??LoadSprite_1:
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   150000EF           SWI      +21
    299          }
   \   00000090   2CD08DE2           ADD      SP,SP,#+44
   \   00000094   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LoadSprite_0:
   \   00000098   ........           DC32     `?<Constant "%s%s">`
   \   0000009C   ........           DC32     pwd
    300          

   \                                 In segment CODE, align 4, keep-with-next
    301          void DrawSprites()
    302          {
   \                     DrawSprites:
   \   00000000   10402DE9           PUSH     {R4,LR}
    303            for(int i=0;i<MAX_SPRITES;i++)
   \   00000004   0040A0E3           MOV      R4,#+0
    304            {
    305              DrawSprite(&sprites[i]);
   \                     ??DrawSprites_0:
   \   00000008   ........           LDR      R0,??DataTable14  ;; sprites
   \   0000000C   2410A0E3           MOV      R1,#+36
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   910420E0           MLA      R0,R1,R4,R0
    306            }
   \   00000018   014084E2           ADD      R4,R4,#+1
   \   0000001C   ........           BL       DrawSprite
   \   00000020   800054E3           CMP      R4,#+128
   \   00000024   F7FFFFBA           BLT      ??DrawSprites_0
    307          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
    308          
    309          
    310          
    311          
    312          

   \                                 In segment CODE, align 4, keep-with-next
    313          short InitSprite(TSPRITE *sprite,short uid,short x,short y,short repeat_num)
    314          {
   \                     InitSprite:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   F8E1DDE1           LDRSH    LR,[SP, #+24]
    315            
    316            short n = FindFirstEmptyIndex(); //находим первый пустой слот для спрайта в буфере
   \   00000008   0060A0E3           MOV      R6,#+0
   \   0000000C   040000EA           B        ??InitSprite_0
   \                     ??InitSprite_1:
   \   00000010   016086E2           ADD      R6,R6,#+1
   \   00000014   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000018   4668A0E1           MOV      R6,R6, ASR #+16
   \   0000001C   800056E3           CMP      R6,#+128
   \   00000020   160000AA           BGE      ??InitSprite_2
   \                     ??InitSprite_0:
   \   00000024   0670A0E1           MOV      R7,R6
   \   00000028   2450A0E3           MOV      R5,#+36
   \   0000002C   950704E0           MUL      R4,R5,R7
   \   00000030   ........           LDR      R5,??DataTable14  ;; sprites
   \   00000034   00C095E5           LDR      R12,[R5, #+0]
   \   00000038   0CC084E0           ADD      R12,R4,R12
   \   0000003C   0480DCE5           LDRB     R8,[R12, #+4]
   \   00000040   000058E3           CMP      R8,#+0
   \   00000044   F1FFFF1A           BNE      ??InitSprite_1
    317            if(n<MAX_SPRITES && n>=0)
   \   00000048   800057E3           CMP      R7,#+128
   \   0000004C   0B0000AA           BGE      ??InitSprite_2
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0900004A           BMI      ??InitSprite_2
    318            {
    319              sprites[n].uid = uid;
   \   00000058   B012CCE1           STRH     R1,[R12, #+32]
    320              sprites[n].N = n; //задаем спрайту его номер :)
   \   0000005C   B471CCE1           STRH     R7,[R12, #+20]
    321              sprites[n].ovr = repeat_num;
   \   00000060   B6E1CCE1           STRH     LR,[R12, #+22]
    322              NewActiveCopy(&sprites[n],sprite,x,y); //делаем копию нашего спрайта в общем буфере спрайтов,одновременно присваивая координаты и делая копию активной
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   0C00A0E1           MOV      R0,R12
   \   0000006C   ........           BL       NewActiveCopy
    323              return sprites[n].N;
   \   00000070   000095E5           LDR      R0,[R5, #+0]
   \   00000074   000084E0           ADD      R0,R4,R0
   \   00000078   F401D0E1           LDRSH    R0,[R0, #+20]
   \   0000007C   F081BDE8           POP      {R4-R8,PC}
    324            }
    325            return -1;
   \                     ??InitSprite_2:
   \   00000080   0000E0E3           MVN      R0,#+0
   \   00000084   F081BDE8           POP      {R4-R8,PC}       ;; return
    326          }
    327          
    328          

   \                                 In segment CODE, align 4, keep-with-next
    329          short InitMSprite(TSPRITE *sprite,short uid,short x,short y,signed char x_incr,signed char y_incr,short ex,short ey)
    330          {
   \                     InitMSprite:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   D441DDE1           LDRSB    R4,[SP, #+20]
   \   00000008   D851DDE1           LDRSB    R5,[SP, #+24]
   \   0000000C   FC61DDE1           LDRSH    R6,[SP, #+28]
   \   00000010   F072DDE1           LDRSH    R7,[SP, #+32]
    331            short n = InitSprite(sprite,uid,x,y,10000);
   \   00000014   10C0A0E3           MOV      R12,#+16
   \   00000018   9CCD8CE3           ORR      R12,R12,#0x2700
   \   0000001C   00102DE9           PUSH     {R12}
   \   00000020   ........           BL       InitSprite
    332            //sprintf(lgn,"ey: %d",ey);log(lgn);
    333            if(n<MAX_SPRITES && n>=0)
   \   00000024   800050E3           CMP      R0,#+128
   \   00000028   04D08DE2           ADD      SP,SP,#+4
   \   0000002C   F080BDA8           POPGE    {R4-R7,PC}
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F080BD48           POPMI    {R4-R7,PC}
    334            {
    335              sprites[n].ex = ex;
   \   00000038   2420A0E3           MOV      R2,#+36
   \   0000003C   920001E0           MUL      R1,R2,R0
   \   00000040   ........           LDR      R2,??DataTable14  ;; sprites
   \   00000044   003092E5           LDR      R3,[R2, #+0]
   \   00000048   033081E0           ADD      R3,R1,R3
   \   0000004C   B861C3E1           STRH     R6,[R3, #+24]
    336              sprites[n].ey = ey;
   \   00000050   BA71C3E1           STRH     R7,[R3, #+26]
    337              sprites[n].x_incr = x_incr;
   \   00000054   1C40C3E5           STRB     R4,[R3, #+28]
    338              sprites[n].y_incr = y_incr;
   \   00000058   003092E5           LDR      R3,[R2, #+0]
   \   0000005C   033081E0           ADD      R3,R1,R3
   \   00000060   1D50C3E5           STRB     R5,[R3, #+29]
    339              sprites[n].isMoving = 1;
   \   00000064   002092E5           LDR      R2,[R2, #+0]
   \   00000068   021081E0           ADD      R1,R1,R2
   \   0000006C   0120A0E3           MOV      R2,#+1
   \   00000070   1E20C1E5           STRB     R2,[R1, #+30]
    340              //sprintf(lgn,"InitMSprite(n: %d,s.ex: %d,s.ey: %d,ex: %d,ey: %d)",n,sprites[n].ex,sprites[n].ey,ex,ey);log(lgn);
    341            }
    342            return n;
   \   00000074   F080BDE8           POP      {R4-R7,PC}       ;; return
    343          }
    344          
    345          
    346          
    347          
    348          
    349          
    350          
    351          
    352          

   \                                 In segment CODE, align 4, keep-with-next
    353          void SetSpriteCoordinaties(short N,short x,short y)
    354          {
    355            if(N>=0 && N<MAX_SPRITES)
   \                     SetSpriteCoordinaties:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   1EFF2F41           BXMI     LR
   \   00000008   800050E3           CMP      R0,#+128
   \   0000000C   1EFF2FA1           BXGE     LR
    356            {
    357              if(sprites[N].active)
   \   00000010   ........           LDR      R12,??DataTable14  ;; sprites
   \   00000014   2430A0E3           MOV      R3,#+36
   \   00000018   00C09CE5           LDR      R12,[R12, #+0]
   \   0000001C   93C020E0           MLA      R0,R3,R0,R12
   \   00000020   0430D0E5           LDRB     R3,[R0, #+4]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   1EFF2F01           BXEQ     LR
    358              {
    359                if(x!=-1) sprites[N].x = x;
   \   0000002C   0030E0E3           MVN      R3,#+0
   \   00000030   030051E1           CMP      R1,R3
   \   00000034   B610C011           STRHNE   R1,[R0, #+6]
    360                if(y!=-1) sprites[N].y = y;
   \   00000038   030052E1           CMP      R2,R3
   \   0000003C   B820C011           STRHNE   R2,[R0, #+8]
    361              }
    362            }
    363          }
   \   00000040   1EFF2FE1           BX       LR               ;; return
    364          

   \                                 In segment CODE, align 4, keep-with-next
    365          void GetSpriteCoordinaties(short N,short *x,short *y)
    366          {
    367            if(N>=0 && N<MAX_SPRITES)
   \                     GetSpriteCoordinaties:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   1EFF2F41           BXMI     LR
   \   00000008   800050E3           CMP      R0,#+128
   \   0000000C   1EFF2FA1           BXGE     LR
    368            {
    369              if(sprites[N].active)
   \   00000010   ........           LDR      R12,??DataTable14  ;; sprites
   \   00000014   2430A0E3           MOV      R3,#+36
   \   00000018   00C09CE5           LDR      R12,[R12, #+0]
   \   0000001C   93C020E0           MLA      R0,R3,R0,R12
   \   00000020   0430D0E5           LDRB     R3,[R0, #+4]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   1EFF2F01           BXEQ     LR
    370              {
    371                *x = sprites[N].x;
   \   0000002C   F630D0E1           LDRSH    R3,[R0, #+6]
   \   00000030   B030C1E1           STRH     R3,[R1, #+0]
    372                *y = sprites[N].y;
   \   00000034   F800D0E1           LDRSH    R0,[R0, #+8]
   \   00000038   B000C2E1           STRH     R0,[R2, #+0]
    373              }
    374            }
    375          }
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    376          
    377          

   \                                 In segment CODE, align 4, keep-with-next
    378          short GetSpriteWidth(short N)
    379          {
    380            if(N>=0 && N<MAX_SPRITES)
   \                     GetSpriteWidth:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0C00004A           BMI      ??GetSpriteWidth_0
   \   00000008   800050E3           CMP      R0,#+128
   \   0000000C   0A0000AA           BGE      ??GetSpriteWidth_0
    381            {
    382              if(sprites[N].active)
   \   00000010   ........           LDR      R2,??DataTable14  ;; sprites
   \   00000014   2410A0E3           MOV      R1,#+36
   \   00000018   002092E5           LDR      R2,[R2, #+0]
   \   0000001C   912020E0           MLA      R0,R1,R0,R2
   \   00000020   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0300000A           BEQ      ??GetSpriteWidth_0
    383              {
    384                return sprites[N].img[0]->w;
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000038   1EFF2FE1           BX       LR
    385              }
    386            }
    387            return 0;
   \                     ??GetSpriteWidth_0:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   1EFF2FE1           BX       LR               ;; return
    388          }
    389          

   \                                 In segment CODE, align 4, keep-with-next
    390          short GetSpriteHeight(short N)
    391          {
    392            if(N>=0 && N<MAX_SPRITES)
   \                     GetSpriteHeight:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0C00004A           BMI      ??GetSpriteHeight_0
   \   00000008   800050E3           CMP      R0,#+128
   \   0000000C   0A0000AA           BGE      ??GetSpriteHeight_0
    393            {
    394              if(sprites[N].active)
   \   00000010   ........           LDR      R2,??DataTable14  ;; sprites
   \   00000014   2410A0E3           MOV      R1,#+36
   \   00000018   002092E5           LDR      R2,[R2, #+0]
   \   0000001C   912020E0           MLA      R0,R1,R0,R2
   \   00000020   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0300000A           BEQ      ??GetSpriteHeight_0
    395              {
    396                return sprites[N].img[0]->h;
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000038   1EFF2FE1           BX       LR
    397              }
    398            }
    399            return 0;
   \                     ??GetSpriteHeight_0:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   1EFF2FE1           BX       LR               ;; return
    400          }
    401          
    402          
    403          

   \                                 In segment CODE, align 4, keep-with-next
    404          void StopSprite(short N)
    405          {
   \                     StopSprite:
   \   00000000   00402DE9           PUSH     {LR}
    406            if(N>=0 && N<MAX_SPRITES)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0080BD48           POPMI    {PC}
   \   0000000C   800050E3           CMP      R0,#+128
   \   00000010   0080BDA8           POPGE    {PC}
    407            {
    408              if(sprites[N].active)
   \   00000014   ........           LDR      R2,??DataTable14  ;; sprites
   \   00000018   2410A0E3           MOV      R1,#+36
   \   0000001C   002092E5           LDR      R2,[R2, #+0]
   \   00000020   912020E0           MLA      R0,R1,R0,R2
   \   00000024   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0080BD08           POPEQ    {PC}
    409              {
    410                FreeSprite(&sprites[N]);
   \   00000030   ........           BL       FreeSprite
    411              }
    412            }
    413          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
    414          
    415          
    416          

   \                                 In segment CODE, align 4, keep-with-next
    417          void FreeSprite(TSPRITE *sprite)
    418          {
   \                     FreeSprite:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    419            for(int i=0;i<sprite->num;i++) ifree(sprite->img[i]);
   \   00000008   0A00D4E5           LDRB     R0,[R4, #+10]
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0400001A           BNE      ??FreeSprite_0
   \   00000018   060000EA           B        ??FreeSprite_1
   \                     ??FreeSprite_2:
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   00000024   015085E2           ADD      R5,R5,#+1
   \   00000028   ........           _BLF     ifree,??ifree??rA
   \                     ??FreeSprite_0:
   \   0000002C   0A00D4E5           LDRB     R0,[R4, #+10]
   \   00000030   000055E1           CMP      R5,R0
   \   00000034   F8FFFFBA           BLT      ??FreeSprite_2
    420            mfree(sprite->img);
   \                     ??FreeSprite_1:
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   150000EF           SWI      +21
    421            sprite->active = 0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   0400C4E5           STRB     R0,[R4, #+4]
    422            sprite->ovr = 1;
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   B601C4E1           STRH     R0,[R4, #+22]
    423          }
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    424          
    425          
    426          

   \                                 In segment CODE, align 4, keep-with-next
    427          void DeinitSpriteBuffer()
    428          {
   \                     DeinitSpriteBuffer:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    429            mfree(sprites);
   \   00000004   ........           LDR      R4,??DataTable14  ;; sprites
    430            for(int i=0;i<MAX_SPRITES;i++)
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   150000EF           SWI      +21
    431            {
    432              if(sprites[i].active) FreeSprite(&sprites[i]);
   \                     ??DeinitSpriteBuffer_0:
   \   00000014   000094E5           LDR      R0,[R4, #+0]
   \   00000018   2410A0E3           MOV      R1,#+36
   \   0000001C   910520E0           MLA      R0,R1,R5,R0
   \   00000020   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0000000A           BEQ      ??DeinitSpriteBuffer_1
   \   0000002C   ........           BL       FreeSprite
    433            }
   \                     ??DeinitSpriteBuffer_1:
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   800055E3           CMP      R5,#+128
   \   00000038   F5FFFFBA           BLT      ??DeinitSpriteBuffer_0
    434          }
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
    435          

   \                                 In segment CODE, align 4, keep-with-next
    436          void InitSpriteBuffer()
    437          {
   \                     InitSpriteBuffer:
   \   00000000   10402DE9           PUSH     {R4,LR}
    438            sprites = malloc(sizeof(TSPRITE)*MAX_SPRITES);
   \   00000004   ........           LDR      R4,??DataTable14  ;; sprites
   \   00000008   480DA0E3           MOV      R0,#+4608
   \   0000000C   140000EF           SWI      +20
   \   00000010   000084E5           STR      R0,[R4, #+0]
    439            for(int i=0;i<MAX_SPRITES;i++)
   \   00000014   0000A0E3           MOV      R0,#+0
    440            {
    441              sprites[i].active = 0;
   \                     ??InitSpriteBuffer_0:
   \   00000018   003094E5           LDR      R3,[R4, #+0]
   \   0000001C   2420A0E3           MOV      R2,#+36
   \   00000020   920001E0           MUL      R1,R2,R0
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   033081E0           ADD      R3,R1,R3
   \   0000002C   0420C3E5           STRB     R2,[R3, #+4]
    442              sprites[i].isMoving = 0;
   \   00000030   003094E5           LDR      R3,[R4, #+0]
    443            }
   \   00000034   010080E2           ADD      R0,R0,#+1
   \   00000038   031081E0           ADD      R1,R1,R3
   \   0000003C   1E20C1E5           STRB     R2,[R1, #+30]
   \   00000040   800050E3           CMP      R0,#+128
   \   00000044   F3FFFFBA           BLT      ??InitSpriteBuffer_0
    444          }
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
    445          
    446          
    447          
    448          

   \                                 In segment CODE, align 4, keep-with-next
    449          void DumpActiveSprites()
    450          {
   \                     DumpActiveSprites:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    451            for(int i=0;i<MAX_SPRITES;i++)
   \   00000004   ........           LDR      R5,??DataTable12  ;; lgn
   \   00000008   0040A0E3           MOV      R4,#+0
    452            {
    453              if(sprites[i].active)
   \                     ??DumpActiveSprites_0:
   \   0000000C   ........           LDR      R0,??DataTable14  ;; sprites
   \   00000010   2410A0E3           MOV      R1,#+36
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   910420E0           MLA      R0,R1,R4,R0
   \   0000001C   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0B00000A           BEQ      ??DumpActiveSprites_1
    454              {
    455                sprintf(lgn,"sprite %d=> N:%d,x:%d,y:%d",i,sprites[i].N,sprites[i].x,sprites[i].y);log(lgn);
   \   00000028   F810D0E1           LDRSH    R1,[R0, #+8]
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   02002DE9           PUSH     {R1}
   \   00000034   F610D0E1           LDRSH    R1,[R0, #+6]
   \   00000038   02002DE9           PUSH     {R1}
   \   0000003C   F431D0E1           LDRSH    R3,[R0, #+20]
   \   00000040   20109FE5           LDR      R1,??DumpActiveSprites_2  ;; `?<Constant "sprite %d=> N:%d,x:%d...">`
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   160000EF           SWI      +22
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     log,??log??rA
   \   00000054   08D08DE2           ADD      SP,SP,#+8
    456              }
    457            }
   \                     ??DumpActiveSprites_1:
   \   00000058   014084E2           ADD      R4,R4,#+1
   \   0000005C   800054E3           CMP      R4,#+128
   \   00000060   E9FFFFBA           BLT      ??DumpActiveSprites_0
    458          }
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??DumpActiveSprites_2:
   \   00000068   ........           DC32     `?<Constant "sprite %d=> N:%d,x:%d...">`
    459          
    460          
    461          
    462          
    463          /////////////////////////////////////////////////////////////////////////////////////////////////////
    464          
    465          

   \                                 In segment CODE, align 4, keep-with-next
    466          TSPRITE *GetSprite(short num)
    467          {
    468            if(num>=0 && num<MAX_SPRITES)
   \                     GetSprite:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0600004A           BMI      ??GetSprite_0
   \   00000008   800050E3           CMP      R0,#+128
   \   0000000C   040000AA           BGE      ??GetSprite_0
    469            {
    470              return (TSPRITE*)&sprites[num];
   \   00000010   ........           LDR      R2,??DataTable14  ;; sprites
   \   00000014   2410A0E3           MOV      R1,#+36
   \   00000018   002092E5           LDR      R2,[R2, #+0]
   \   0000001C   912020E0           MLA      R0,R1,R0,R2
   \   00000020   1EFF2FE1           BX       LR
    471            }
    472            else return NULL;
   \                     ??GetSprite_0:
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   1EFF2FE1           BX       LR               ;; return
    473          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     lgn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     sprites

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "N: %d">`:
   \   00000000   4E3A20256400       DC8 "N: %d"
   \   00000006   0000               DC8 0, 0
   \   00000008   616374697665       DC8 "active: %d"
   \              3A20256400  
   \   00000013   00                 DC8 0
   \   00000014   783A20256400       DC8 "x: %d"
   \   0000001A   0000               DC8 0, 0
   \   0000001C   793A20256400       DC8 "y: %d"
   \   00000022   0000               DC8 0, 0
   \   00000024   6E756D3A2025       DC8 "num: %d"
   \              6400        
   \   0000002C   74696D653A20       DC8 "time: %d"
   \              256400      
   \   00000035   000000             DC8 0, 0, 0
   \   00000038   73773A202564       DC8 "sw: %d"
   \              00          
   \   0000003F   00                 DC8 0
   \   00000040   636F756E7465       DC8 "counter: %d"
   \              723A20256400
   \   0000004C   6F76723A2025       DC8 "ovr: %d"
   \              6400        
   \   00000054   69734D6F7669       DC8 "isMoving: %d"
   \              6E673A202564
   \              00          
   \   00000061   000000             DC8 0, 0, 0
   \   00000064   65783A202564       DC8 "ex: %d"
   \              00          
   \   0000006B   00                 DC8 0
   \   0000006C   65793A202564       DC8 "ey: %d"
   \              00          
   \   00000073   00                 DC8 0
   \   00000074   785F696E6372       DC8 "x_incr: %d"
   \              3A20256400  
   \   0000007F   00                 DC8 0
   \   00000080   795F696E6372       DC8 "y_incr: %d"
   \              3A20256400  
   \   0000008B   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0A00               DC8 "\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s">`:
   \   00000000   2573257300         DC8 "%s%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "sprite %d=> N:%d,x:%d...">`:
   \   00000000   737072697465       DC8 "sprite %d=> N:%d,x:%d,y:%d"
   \              2025643D3E20
   \              4E3A25642C78
   \              3A25642C793A
   \              256400      
   \   0000001B   00                 DC8 0
    474          
    475          
    476          
    477          

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     CreateImgHdrByAnyFile    76
     DeinitSpriteBuffer       12
     DrawSprite                8
     DrawSprites               8
     DumpActiveSprites        20
     DumpSprite               16
     FreeSprite               12
     GetSprite                 0
     GetSpriteCoordinaties     0
     GetSpriteHeight           0
     GetSpriteWidth            0
     InitMSprite              24
     InitSprite               24
     InitSpriteBuffer          8
     LoadSprite               64
     LoadSprites              36
     NewActiveCopy            24
     SetSpriteCoordinaties     0
     StopSprite                4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CreateImgHdrByAnyFile           712
     LoadSprites                     332
     NewActiveCopy                   288
     DumpSprite                      372
     sprites                           4
     DrawSprite                      336
     LoadSprite                      160
     DrawSprites                      44
     InitSprite                      136
     InitMSprite                     120
     SetSpriteCoordinaties            68
     GetSpriteCoordinaties            64
     GetSpriteWidth                   68
     GetSpriteHeight                  68
     StopSprite                       56
     FreeSprite                       84
     DeinitSpriteBuffer               64
     InitSpriteBuffer                 76
     DumpActiveSprites               108
     GetSprite                        44
     ??DataTable12                     4
     ??DataTable14                     4
     ?<Constant "N: %d">             140
     ?<Constant "\n">                  2
     ?<Constant "%s%s">                8
     ?<Constant "sprite %d=> N:%d,x:%d...">
                                      28
      Others                         136

 
 3 332 bytes in segment CODE
   178 bytes in segment DATA_C
     4 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 3 208 bytes of CODE  memory (+ 136 bytes shared)
   178 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   17/Apr/2011  11:05:22 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\bolvanka\main.c                              /
//    Command line    =  C:\arm\bolvanka\main.c -D NEWSGOLD -D ELKA -lA      /
//                       C:\arm\bolvanka\Release_ELKA\List\ -o               /
//                       C:\arm\bolvanka\Release_ELKA\Obj\ -s9 --cpu_mode    /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None -I "C:\arm2\Embedded    /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\arm\bolvanka\Release_ELKA\List\main.s79          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??Timer5seconds??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0601H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Timer5seconds
        FUNCTION Timer5seconds,0601H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC seconds
        PUBLIC tmr
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
Timer5seconds       SYMBOL "Timer5seconds"
??Timer5seconds??rT SYMBOL "??rT", Timer5seconds
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ElfKiller
// C:\arm\bolvanka\main.c
//    1 
//    2 #include "C:\arm\inc\swilib.h"
//    3 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//    4 void ElfKiller()
//    5 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//    6   extern void kill_data(void *p, void (*func_p)(void *));
//    7   extern void *ELF_BEGIN;
//    8   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock1
//    9 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??Timer5seconds??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE Timer5seconds

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   10 GBSTMR tmr;
//   11 int seconds=0;
seconds:
        DS8 4
tmr:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function Timer5seconds
        ARM
//   12 void Timer5seconds()
//   13 {
Timer5seconds:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   14   seconds++;
        LDR      R4,??Timer5seconds_0  ;; seconds
//   15   SetIllumination(0,1,100,0); 
        MOV      R3,#+0
        LDR      R0,[R4, #+0]
        MOV      R2,#+100
        ADD      R0,R0,#+1
        STR      R0,[R4, #+0]
        MOV      R1,#+1
        MOV      R0,#+0
        SWI      +8
//   16   if(seconds==5)
        LDR      R0,[R4, #+0]
        CMP      R0,#+5
        BNE      ??Timer5seconds_1
//   17   {
//   18     seconds=0;
        MOV      R0,#+0
        STR      R0,[R4, #+0]
//   19     SetIllumination(0,0,100,0); 
        MOV      R3,#+0
        MOV      R2,#+100
        MOV      R1,R0
        SWI      +8
//   20     GBS_DelTimer(&tmr);
        ADD      R0,R4,#+4
        SWI      +396
//   21   }
//   22   GBS_StartTimerProc(&tmr,216,Timer5seconds);
??Timer5seconds_1:
        LDR      R2,??Timer5seconds_0+0x4  ;; Timer5seconds
        MOV      R1,#+216
        ADD      R0,R4,#+4
        SWI      +77
//   23 }
        POP      {R4,PC}          ;; return
        DATA
??Timer5seconds_0:
        DC32     seconds
        DC32     Timer5seconds
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE main
//   24 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function main
        ARM
//   25 int main(char *exename, char *fname)
//   26 {
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   27   Timer5seconds();
        BL       Timer5seconds
//   28   SUBPROC((void *)ElfKiller);
        LDR      R0,??main_0      ;; ElfKiller
        SWI      +369
//   29   return 0;
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock5
//   30 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine3_0  ;; kill_data
        BX       R12
        DATA
??Subroutine3_0:
        DC32     kill_data
        CFI EndBlock cfiBlock6

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 192 bytes in segment CODE
//  20 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 168 bytes of CODE memory (+ 36 bytes shared)
//  20 bytes of DATA memory
//
//Errors: none
//Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    30/Nov/2010  02:05:51 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\bolvanka\main.c                               #
#    Command line    =  C:\arm\bolvanka\main.c -D NEWSGOLD -lC               #
#                       C:\arm\bolvanka\Release_NSG\List\ -lA                #
#                       C:\arm\bolvanka\Release_NSG\List\ -o                 #
#                       C:\arm\bolvanka\Release_NSG\Obj\ -s9 --cpu_mode arm  #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I "C:\arm2\Embedded       #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\bolvanka\Release_NSG\List\main.lst            #
#    Object file     =  C:\arm\bolvanka\Release_NSG\Obj\main.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\bolvanka\main.c
      1          #include "C:\arm\inc\swilib.h"
      2          
      3          

   \                                 In segment DATA_C, align 4, align-sorted
      4          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
      5          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
      6          unsigned int MAINCSM_ID = 0;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
      7          unsigned int MAINGUI_ID = 0;
   \                     MAINGUI_ID:
   \   00000000                      DS8 4
      8          
      9          typedef struct
     10          {
     11            CSM_RAM csm;
     12            int gui_id;
     13          }MAIN_CSM;
     14          typedef struct
     15          {
     16            GUI gui;
     17            WSHDR *ws1;
     18            WSHDR *ws2;
     19            WSHDR *ws5;
     20            int i1;
     21          }MAIN_GUI;
     22          
     23          
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          static void OnRedraw(MAIN_GUI *data)//Перерисовка во время загрузки
     26          {
   \                     OnRedraw:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     27            DrawRectangle(0,0,239,319,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(0));
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   2E0100EF           SWI      +302
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   2E0100EF           SWI      +302
   \   00000018   10002DE9           PUSH     {R4}
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   3F50A0E3           MOV      R5,#+63
   \   00000024   405F85E3           ORR      R5,R5,#0x100
   \   00000028   0530A0E1           MOV      R3,R5
   \   0000002C   0200A0E3           MOV      R0,#+2
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   EF20A0E3           MOV      R2,#+239
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   B40100EF           SWI      +436
     28            WSHDR * ws=AllocWS(256);
   \   00000044   400FA0E3           MOV      R0,#+256
   \   00000048   250100EF           SWI      +293
     29           
     30              wsprintf(ws,"Hello, World");
   \   0000004C   4C109FE5           LDR      R1,??OnRedraw_0  ;; `?<Constant "Hello, World">`
   \   00000050   0040A0E1           MOV      R4,R0
   \   00000054   240100EF           SWI      +292
     31              DrawString(ws,0,0,239,319,9,2,GetPaletteAdrByColorIndex(2),0);
   \   00000058   0200A0E3           MOV      R0,#+2
   \   0000005C   2E0100EF           SWI      +302
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   02002DE9           PUSH     {R1}
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   EF30A0E3           MOV      R3,#+239
   \   00000070   0120A0E1           MOV      R2,R1
   \   00000074   0200A0E3           MOV      R0,#+2
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   0900A0E3           MOV      R0,#+9
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   20002DE9           PUSH     {R5}
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   4C0100EF           SWI      +332
     32             
     33            FreeWS(ws);
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   290100EF           SWI      +297
     34          }
   \   00000098   20D08DE2           ADD      SP,SP,#+32
   \   0000009C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??OnRedraw_0:
   \   000000A0   ........           DC32     `?<Constant "Hello, World">`

   \                                 In segment CODE, align 4, keep-with-next
     35          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))//Тут делаем что либо при создании гуи
     36          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     37            #ifdef ELKA//Если елка,то отключаем иконбар
     38            DisableIconBar(1);
     39            #endif
     40            data->ws1=AllocWS(256);//Выделяем память под строку
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
     41            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
     42          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
     43          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))//Сдесь делаем что нить при закрытии гуи:)
     44          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     45            data->gui.state=0;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0C00C4E5           STRB     R0,[R4, #+12]
     46            FreeWS(data->ws1);//например, освобождаем память
   \   00000010   340094E5           LDR      R0,[R4, #+52]
   \   00000014   290100EF           SWI      +297
     47            FreeWS(data->ws5);
   \   00000018   3C0094E5           LDR      R0,[R4, #+60]
   \   0000001C   290100EF           SWI      +297
     48          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
     51          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
     52            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
     53            DisableIDLETMR();//отключаем таймер,иначе через 2 минуты эльф закроется
   \   0000000C   7F0100EF           SWI      +383
     54          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
     55          

   \                                 In segment CODE, align 4, keep-with-next
     56          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
     57          {
     58            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     59            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     60          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)//Ну это кей хук
     63          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
     64          
     65            switch(msg->gbsmsg->msg)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   02208212           ADDNE    R2,R2,#+2
   \   0000001C   02005111           CMPNE    R1,R2
   \   00000020   0400001A           BNE      ??OnKey_0
     66            {      
     67            case KEY_UP: break;
     68              case LONG_PRESS: // Клавиша удерживается долго (повтор)
     69              case KEY_DOWN: // Клавиша нажата
     70                
     71           switch(msg->gbsmsg->submess)
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   040050E3           CMP      R0,#+4
     72            {
     73             case RIGHT_SOFT: return 1; // Выход RIGHT_SOFT
   \   0000002C   0100A003           MOVEQ    R0,#+1
   \   00000030   0080BD08           POPEQ    {PC}
     74            case LEFT_SOFT:break;
     75          
     76            
     77            }
     78               DirectRedrawGUI();
   \   00000034   3F0100EF           SWI      +319
     79                
     80          
     81          }
     82          return(0);
   \                     ??OnKey_0:
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   0080BDE8           POP      {PC}             ;; return
     83          }
     84          
     85          
     86          
     87          
     88          
     89          
     90          
     91          
     92          
     93          
     94          
     95          extern void kill_data(void *p, void (*func_p)(void *));
     96          

   \                                 In segment CODE, align 4, keep-with-next
     97          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     98          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
     99          
    100          const void * const gui_methods[11]={
    101            (void *)OnRedraw,
    102            (void *)onCreate,
    103            (void *)onClose,
    104            (void *)onFocus,
    105            (void *)onUnfocus,
    106            (void *)OnKey,
    107            0,
    108            (void *)kill_data,
    109            (void *)method8,
    110            (void *)method9,
    111            0
    112          };
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          static void maincsm_oncreate(CSM_RAM *data)
    115          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    116            
    117          static const RECT Canvas={0,0,239,319};
    118            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4400A0E3           MOV      R0,#+68
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    119            MAIN_CSM*csm=(MAIN_CSM*)data;
    120            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4410A0E3           MOV      R1,#+68
   \   00000018   1D0100EF           SWI      +285
    121            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   34009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    122            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   301085E5           STR      R1,[R5, #+48]
    123            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    124            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   200085E5           STR      R0,[R5, #+32]
    125            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    126            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    127            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    128          }
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000058   ........           DC32     gui_methods

   \                                 In segment DATA_C, align 4, align-sorted
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
   \   0000002C   00000000EF00       DC16 0, 0, 239, 319
   \              3F01        
    129          

   \                                 In segment CODE, align 4, keep-with-next
    130          void ElfKiller(void)
    131          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    132            extern void *ELF_BEGIN;
    133            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    134          }
    135          

   \                                 In segment CODE, align 4, keep-with-next
    136          static void maincsm_onclose(CSM_RAM *csm)
    137          {
    138          
    139            SUBPROC((void *)ElfKiller);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    140          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     ElfKiller
    141          
    142          
    143          #pragma inline=forced
    144          int toupper(int c)
    145          {
    146            if ((c>='a')&&(c<='z')) c+='A'-'a';
    147            return(c);
    148          }
    149          #pragma inline
    150          int strcmp_nocase(const char *s1,const char *s2)
    151          {
    152            int i;
    153            int c;
    154            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    155            return(i);
    156          }
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    159          {
    160          
    161            MAIN_CSM *csm=(MAIN_CSM*)data;
    162            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0400001A           BNE      ??maincsm_onmessage_0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   282090E5           LDR      R2,[R0, #+40]
   \   0000001C   020051E1           CMP      R1,R2
    163            {
    164              csm->csm.state=-3;
   \   00000020   0210E003           MVNEQ    R1,#+2
   \   00000024   10108005           STREQ    R1,[R0, #+16]
    165            }
    166          
    167          
    168            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    169          }
    170          
    171          
    172          static const struct
    173          {
    174            CSM_DESC maincsm;
    175            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\341\\356\\353\\342\\340\\355\\352\\340">`:
   \   00000000   E1EEEBE2E0ED       DC8 "\341\356\353\342\340\355\352\340"
   \              EAE000      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000028   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000044   8B00               DC16 139
   \   00000046   0000               DC8 0, 0
    176          }MAINCSM =
    177          {
    178            {
    179            maincsm_onmessage,
    180            maincsm_oncreate,
    181          #ifdef NEWSGOLD
    182            0,
    183            0,
    184            0,
    185            0,
    186          #endif
    187            maincsm_onclose,
    188            sizeof(MAIN_CSM),
    189            1,
    190            &minus11
    191            },
    192            {
    193              maincsm_name_body,
    194              NAMECSM_MAGIC1,
    195              NAMECSM_MAGIC2,
    196              0x0,
    197              139
    198            }
    199          };
    200          
    201          
    202          
    203          

   \                                 In segment CODE, align 4, keep-with-next
    204          void UpdateCSMname(void)
    205          {
    206            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"болванка");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "\\341\\356\\353\\342\\340\\355\\352\\340">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   340080E2           ADD      R0,R0,#+52
   \   00000010   240100EF           SWI      +292
    207          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "\\341\\356\\353\\342\\340\\355\\352\\340">`
    208          
    209          
    210          
    211          
    212          
    213          
    214          

   \                                 In segment CODE, align 4, keep-with-next
    215          int main(char *exename, char *fname)
    216          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    217          
    218          
    219            MAIN_CSM main_csm;
    220            LockSched();
   \   00000008   460100EF           SWI      +326
    221            UpdateCSMname();
   \   0000000C   ........           BL       UpdateCSMname
    222            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000010   18009FE5           LDR      R0,??main_0      ;; `?<Constant "\\341\\356\\353\\342\\340\\355\\352\\340">` + 12
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   070100EF           SWI      +263
    223            UnlockSched();
   \   00000020   470100EF           SWI      +327
    224            return 0;
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   2CD08DE2           ADD      SP,SP,#+44
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000030   ........           DC32     `?<Constant "\\341\\356\\353\\342\\340\\355\\352\\340">` + 12
    225          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Hello, World">`:
   \   00000000   48656C6C6F2C       DC8 "Hello, World"
   \              20576F726C64
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     OnKey                 4
     OnRedraw             44
     UpdateCSMname         4
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     12
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose               8
     onCreate              8
     onFocus               4
     onUnfocus             0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     maincsm_name_body               280
     MAINCSM_ID                        4
     MAINGUI_ID                        4
     OnRedraw                        164
     onCreate                         32
     onClose                          36
     onFocus                          20
     onUnfocus                        20
     OnKey                            64
     method8                           8
     method9                           8
     maincsm_oncreate                 92
     gui_methods                      52
     ElfKiller                        28
     maincsm_onclose                  20
     maincsm_onmessage                48
     ?<Constant "\341\356\353\342\340\355\352\340">
                                      72
     UpdateCSMname                    28
     main                             52
     ?<Constant "Hello, World">       16
      Others                          80

 
 688 bytes in segment CODE
 144 bytes in segment DATA_C
 288 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 620 bytes of CODE  memory (+ 80 bytes shared)
 144 bytes of CONST memory
 288 bytes of DATA  memory

Errors: none
Warnings: none

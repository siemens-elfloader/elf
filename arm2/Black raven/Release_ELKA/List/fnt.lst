##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    11/Aug/2009  13:41:00 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\Ballet Mini test\fnt.c                        #
#    Command line    =  "C:\arm\Ballet Mini test\fnt.c" -D NEWSGOLD -D ELKA  #
#                       -lC "C:\arm\Ballet Mini test\Release_ELKA\List\" -o  #
#                       "C:\arm\Ballet Mini test\Release_ELKA\Obj\" -s9      #
#                       --no_unroll --no_inline --cpu_mode arm --endian      #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --char_is_signed --fpu None -I "C:\arm2\Embedded  #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#    List file       =  C:\arm\Ballet Mini test\Release_ELKA\List\fnt.lst    #
#    Object file     =  C:\arm\Ballet Mini test\Release_ELKA\Obj\fnt.r79     #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\Ballet Mini test\fnt.c
      1          #include "..\inc\swilib.h"

   \                                 In segment DATA_I, align 4, align-sorted
      2          char xfont[224][6]={
   \                     xfont:
   \   00000000                      DS8 1344
   \   00000540                      REQUIRE `?<Initializer for xfont>`
      3          {0x00,0x00,0x00,0x00,0x00,2},   // 
      4          {0x80,0x80,0x80,0x00,0x80,1},   //!
      5          {0xA0,0x00,0x00,0x00,0x00,3},   //"
      6          {0x50,0xF8,0x50,0xF8,0x50,5},   //#
      7          {0x78,0xA0,0x70,0x28,0xF0,5},   //$
      8          {0x90,0x10,0x20,0x40,0x90,4},   //%
      9          {0x0,0x0,0x0,0x0,0x0},   //&             tag???
     10          {0x80,0x80,0x00,0x00,0x00,1},   //'
     11          {0x40,0x80,0x80,0x80,0x40,2},   //(
     12          {0x80,0x40,0x40,0x40,0x80,2},   //)
     13          {0x0,0x0,0x0,0x0,0x0},   //*
     14          {0x00,0x40,0xE0,0x40,0x00,3},   //+
     15          {0x0,0x0,0x0,0x0,0x0},   //,
     16          {0x00,0x00,0xE0,0x00,0x00,3},   //-
     17          {0x00,0x00,0x00,0x00,0x80,1},   //.
     18          {0x10,0x10,0x20,0x40,0x80,4},   ///
     19          {0x60,0x90,0x90,0x90,0x60,4},   //0
     20          {0x40,0xC0,0x40,0x40,0xE0,3},   //1
     21          {0x60,0x90,0x20,0x40,0xF0,4},   //2
     22          {0x60,0x90,0x20,0x90,0x60,4},   //3
     23          {0x50,0x90,0xF0,0x10,0x10,4},   //4
     24          {0xF0,0x80,0xE0,0x10,0xE0,4},   //5
     25          {0x70,0x80,0xE0,0x90,0x60,4},   //6
     26          {0xF0,0x10,0x20,0x40,0x80,4},   //7
     27          {0x60,0x90,0x60,0x90,0x60,4},   //8
     28          {0x60,0x90,0x70,0x10,0xE0,4},   //9
     29          {0x00,0x80,0x00,0x80,0x00,1},   //:
     30          {0x00,0x80,0x00,0x80,0x80,1},   //;
     31          {0x20,0x40,0x80,0x40,0x20,3},   //<
     32          {0x00,0xE0,0x00,0xE0,0x00,3},   //=
     33          {0x80,0x40,0x20,0x40,0x80,3},   //>
     34          {0x60,0x90,0x20,0x00,0x20,4},   //?
     35          {0x00,0x50,0x00,0x88,0x70,5},    //@             smile))
     36          {0x60,0x90,0xF0,0x90,0x90,4},   //A
     37          {0xE0,0x90,0xE0,0x90,0xE0,4},   //B
     38          {0x70,0x80,0x80,0x80,0x70,4},   //C
     39          {0xE0,0x90,0x90,0x90,0xE0,4},   //D
     40          {0xF0,0x80,0xE0,0x80,0xF0,4},   //E
     41          {0xF0,0x80,0xE0,0x80,0x80,4},   //F
     42          {0x70,0x80,0xB0,0x90,0x60,4},   //G
     43          {0x90,0x90,0xF0,0x90,0x90,4},   //H
     44          {0xE0,0x40,0x40,0x40,0xE0,3},   //I
     45          {0x10,0x10,0x10,0x90,0x60,4},   //J
     46          {0x90,0x90,0xE0,0x90,0x90,4},   //K
     47          {0x80,0x80,0x80,0x80,0xF0,4},   //L
     48          {0xD8,0xA8,0xA8,0x88,0x88,5},   //M
     49          {0x90,0xD0,0xB0,0x90,0x90,4},   //N
     50          {0x60,0x90,0x90,0x90,0x60,4},   //O
     51          {0xE0,0x90,0xE0,0x80,0x80,4},   //P
     52          {0x60,0x90,0x90,0x60,0x10,4},   //Q
     53          {0xE0,0x90,0xE0,0xA0,0x90,4},   //R
     54          {0x70,0x80,0x60,0x10,0xE0,4},   //S
     55          {0xE0,0x40,0x40,0x40,0x40,3},   //T
     56          {0x90,0x90,0x90,0x90,0x60,4},   //U
     57          {0x90,0x90,0x90,0x50,0x20,4},   //V
     58          {0x88,0x88,0xA8,0xA8,0x50,5},   //W
     59          {0x90,0x90,0x60,0x90,0x90,4},   //X
     60          {0x90,0x90,0x70,0x10,0xE0,4},   //Y
     61          {0xF8,0x10,0x20,0x40,0xF8,5},   //Z
     62          {0xC0,0x80,0x80,0x80,0xC0,2},   //[
     63          {0x80,0x80,0x40,0x20,0x10,4},   // '\'
     64          {0xC0,0x40,0x40,0x40,0xC0,2},   //]
     65          {0x40,0xA0,0x00,0x00,0x00,3},   //^
     66          {0x00,0x00,0x00,0x00,0xE0,3},   //_
     67          {0x80,0x40,0x00,0x00,0x00,2},   //`
     68          {0x60,0x90,0xF0,0x90,0x90,4},   //A    little chars
     69          {0xE0,0x90,0xE0,0x90,0xE0,4},   //B
     70          {0x70,0x80,0x80,0x80,0x70,4},   //C
     71          {0xE0,0x90,0x90,0x90,0xE0,4},   //D
     72          {0xF0,0x80,0xE0,0x80,0xF0,4},   //E
     73          {0xF0,0x80,0xE0,0x80,0x80,4},   //F
     74          {0x70,0x80,0xB0,0x90,0x60,4},   //G
     75          {0x90,0x90,0xF0,0x90,0x90,4},   //H
     76          {0xE0,0x40,0x40,0x40,0xE0,3},   //I
     77          {0x10,0x10,0x10,0x90,0x60,4},   //J
     78          {0x90,0x90,0xE0,0x90,0x90,4},   //K
     79          {0x80,0x80,0x80,0x80,0xF0,4},   //L
     80          {0xD8,0xA8,0xA8,0x88,0x88,5},   //M
     81          {0x90,0xD0,0xB0,0x90,0x90,4},   //N
     82          {0x60,0x90,0x90,0x90,0x60,4},   //O
     83          {0xE0,0x90,0xE0,0x80,0x80,4},   //P
     84          {0x60,0x90,0x90,0x60,0x10,4},   //Q
     85          {0xE0,0x90,0xE0,0xA0,0x90,4},   //R
     86          {0x70,0x80,0x60,0x10,0xE0,4},   //S
     87          {0xE0,0x40,0x40,0x40,0x40,3},   //T
     88          {0x90,0x90,0x90,0x90,0x60,4},   //U
     89          {0x90,0x90,0x90,0x50,0x20,4},   //V
     90          {0x88,0x88,0xA8,0xA8,0x50,5},   //W
     91          {0x90,0x90,0x60,0x90,0x90,4},   //X
     92          {0x90,0x90,0x70,0x10,0xE0,4},   //Y
     93          {0xF8,0x10,0x20,0x40,0xF8,5},   //Z
     94          {0x0,0x0,0x0,0x0,0x0,3},   //{ 
     95          {0x80,0x80,0x80,0x80,0x80,1},   //|
     96          {0x0,0x0,0x0,0x0,0x0,3},   //}
     97          {0x50,0xA0,0x0,0x0,0x0,4},   //~
     98          {0x0,0x0,0x0,0x0,0x0},   // ------------------------
     99          {0x0,0x0,0x0,0x0,0x0},   //Ä 
    100          {0x0,0x0,0x0,0x0,0x0},   //Å   N   N   OOO  
    101          {0x0,0x0,0x0,0x0,0x0},   //Ç   NN  N  O   O
    102          {0x0,0x0,0x0,0x0,0x0},   //É   N N N  O   O
    103          {0x0,0x0,0x0,0x0,0x0},   //Ñ   N  NN  O   O
    104          {0x0,0x0,0x0,0x0,0x0},   //Ö   N   N   OOO 
    105          {0x0,0x0,0x0,0x0,0x0},   //Ü 
    106          {0x0,0x0,0x0,0x0,0x0},   //á
    107          {0x0,0x0,0x0,0x0,0x0},   //à    CCC   H   H   AAAA   RRRRR    SSSSSSSSSS
    108          {0x0,0x0,0x0,0x0,0x0},   //â   C   C  H   H  A    A  R    R  S    
    109          {0x0,0x0,0x0,0x0,0x0},   //ä   C      HHHHH  AAAAAA  RRRRR    SSS
    110          {0x0,0x0,0x0,0x0,0x0},   //ã   C   C  H   H  A    A  R    R      SS
    111          {0x0,0x0,0x0,0x0,0x0},   //å    CCC   H   H  A    A  R    R      SS
    112          {0x0,0x0,0x0,0x0,0x0},   //ç                                     SS
    113          {0x0,0x0,0x0,0x0,0x0},   //é           SSSSSSSSSSSSSSSSSSSSSSSSSS
    114          {0x0,0x0,0x0,0x0,0x0},   //è
    115          {0x0,0x0,0x0,0x0,0x0},   //ê
    116          {0x0,0x0,0x0,0x0,0x0},   //ë
    117          {0x0,0x0,0x0,0x0,0x0},   //í
    118          {0x0,0x0,0x0,0x0,0x0},   //ì
    119          {0x0,0x0,0x0,0x0,0x0},   //î
    120          {0x0,0x0,0x0,0x0,0x0},   //ï
    121          {0x0,0x0,0x0,0x0,0x0},   //ñ
    122          {0x0,0x0,0x0,0x0,0x0},   //ó
    123          {0x0,0x0,0x0,0x0,0x0},   //ò
    124          {0x0,0x0,0x0,0x0,0x0},   //ô
    125          {0x0,0x0,0x0,0x0,0x0},   //ö
    126          {0x0,0x0,0x0,0x0,0x0},   //õ
    127          {0x0,0x0,0x0,0x0,0x0},   //ú
    128          {0x0,0x0,0x0,0x0,0x0},   //ù
    129          {0x0,0x0,0x0,0x0,0x0},   //û
    130          {0x0,0x0,0x0,0x0,0x0},   //ü
    131          {0x0,0x0,0x0,0x0,0x0},   //†------------------------------
    132          {0x0,0x0,0x0,0x0,0x0},   //°
    133          {0x0,0x0,0x0,0x0,0x0},   //¢
    134          {0x0,0x0,0x0,0x0,0x0},   //£
    135          {0x0,0x0,0x0,0x0,0x0},   //§
    136          {0x0,0x0,0x0,0x0,0x0},   //•
    137          {0x0,0x0,0x0,0x0,0x0},   //¶
    138          {0x0,0x0,0x0,0x0,0x0},   //ß
    139          {0x0,0x0,0x0,0x0,0x0},   //®
    140          {0x0,0x0,0x0,0x0,0x0},   //©
    141          {0x0,0x0,0x0,0x0,0x0},   //™
    142          {0x0,0x0,0x0,0x0,0x0},   //´
    143          {0x0,0x0,0x0,0x0,0x0},   //¨
    144          {0x0,0x0,0x0,0x0,0x0},   //≠
    145          {0x0,0x0,0x0,0x0,0x0},   //Æ
    146          {0x0,0x0,0x0,0x0,0x0},   //Ø
    147          {0x0,0x0,0x0,0x0,0x0},   //∞
    148          {0x40,0xE0,0x40,0x0,0xE0,3},   //±
    149          {0x0,0x0,0x0,0x0,0x0},   //≤
    150          {0x0,0x0,0x0,0x0,0x0},   //≥
    151          {0x0,0x0,0x0,0x0,0x0},   //¥
    152          {0x0,0x0,0x0,0x0,0x0},   //µ
    153          {0x0,0x0,0x0,0x0,0x0},   //∂
    154          {0x0,0x0,0x0,0x0,0x0},   //∑
    155          {0x0,0x0,0x0,0x0,0x0},   //∏
    156          {0x0,0x0,0x0,0x0,0x0},   //π
    157          {0x0,0x0,0x0,0x0,0x0},   //∫
    158          {0x0,0x0,0x0,0x0,0x0},   //ª
    159          {0x0,0x0,0x0,0x0,0x0},   //º
    160          {0x0,0x0,0x0,0x0,0x0},   //Ω
    161          {0x0,0x0,0x0,0x0,0x0},   //æ
    162          {0x0,0x0,0x0,0x0,0x0},   //ø
    163          {0x60,0x90,0xF0,0x90,0x90,4},   //¿
    164          {0xF0,0x80,0xE0,0x90,0xE0,4},   //¡
    165          {0xE0,0x90,0xE0,0x90,0xE0,4},   //¬
    166          {0xF0,0x80,0x80,0x80,0x80,4},   //√
    167          {0x30,0x50,0x50,0x50,0xF8,4},   //ƒ
    168          {0xF0,0x80,0xE0,0x80,0xF0,4},   //≈
    169          {0xA8,0xA8,0x70,0xA8,0xA8,5},   //∆
    170          {0x60,0x90,0x20,0x90,0x60,4},   //«
    171          {0x90,0xB0,0xD0,0x90,0x90,4},   //»
    172          {0x0,0x00,0x0,0x0,0x0},   //…
    173          {0x90,0x90,0xE0,0x90,0x90,4},   // 
    174          {0x70,0x50,0x50,0x50,0xD0,4},   //À
    175          {0xD8,0xA8,0xA8,0x88,0x88,5},   //Ã
    176          {0x90,0x90,0xF0,0x90,0x90,4},   //Õ
    177          {0x60,0x90,0x90,0x90,0x60,4},   //Œ
    178          {0xF0,0x90,0x90,0x90,0x90,4},   //œ
    179          {0xE0,0x90,0xE0,0x80,0x80,4},   //–
    180          {0x70,0x80,0x80,0x80,0x70,4},   //—
    181          {0xE0,0x40,0x40,0x40,0x40,3},   //“
    182          {0x90,0x90,0x70,0x10,0xE0,4},   //”
    183          {0xF8,0xA8,0xF8,0x20,0x20,5},   //‘
    184          {0x90,0x90,0x60,0x90,0x90,4},   //’
    185          {0xA0,0xA0,0xA0,0xA0,0xF0,4},   //÷
    186          {0x90,0x90,0x70,0x10,0x10,4},   //◊
    187          {0x88,0x88,0xA8,0xA8,0xF8,5},   //ÿ
    188          {0x88,0x88,0xA8,0xA8,0xFC,6},   //Ÿ
    189          {0xC0,0x40,0x70,0x50,0x70,4},   //⁄
    190          {0x88,0x88,0xE8,0xA8,0xE8,5},   //€
    191          {0x80,0x80,0xE0,0x90,0xE0,4},   //‹
    192          {0x60,0x90,0x30,0x90,0x60,4},   //›
    193          {0xB8,0xA8,0xE8,0xA8,0xB8,5},   //ﬁ
    194          {0xF0,0x90,0x70,0x90,0x90,4},   //ﬂ
    195          {0x60,0x90,0xF0,0x90,0x90,4},   //¿  //Ï‡Î˚Â
    196          {0xF0,0x80,0xE0,0x90,0xE0,4},   //¡
    197          {0xE0,0x90,0xE0,0x90,0xE0,4},   //¬
    198          {0xF0,0x80,0x80,0x80,0x80,4},   //√
    199          {0x30,0x50,0x50,0x50,0xF8,4},   //ƒ
    200          {0xF0,0x80,0xE0,0x80,0xF0,4},   //≈
    201          {0xA8,0xA8,0x70,0xA8,0xA8,5},   //∆
    202          {0x60,0x90,0x20,0x90,0x60,4},   //«
    203          {0x90,0xB0,0xD0,0x90,0x90,4},   //»
    204          {0x0,0x00,0x0,0x0,0x0},   //…
    205          {0x90,0x90,0xE0,0x90,0x90,4},   // 
    206          {0x70,0x50,0x50,0x50,0xD0,4},   //À
    207          {0xD8,0xA8,0xA8,0x88,0x88,5},   //Ã
    208          {0x90,0x90,0xF0,0x90,0x90,4},   //Õ
    209          {0x60,0x90,0x90,0x90,0x60,4},   //Œ
    210          {0xF0,0x90,0x90,0x90,0x90,4},   //œ
    211          {0xE0,0x90,0xE0,0x80,0x80,4},   //–
    212          {0x70,0x80,0x80,0x80,0x70,4},   //—
    213          {0xE0,0x40,0x40,0x40,0x40,3},   //“
    214          {0x90,0x90,0x70,0x10,0xE0,4},   //”
    215          {0xF8,0xA8,0xF8,0x20,0x20,5},   //‘
    216          {0x90,0x90,0x60,0x90,0x90,4},   //’
    217          {0xA0,0xA0,0xA0,0xA0,0xF0,4},   //÷
    218          {0x90,0x90,0x70,0x10,0x10,4},   //◊
    219          {0x88,0x88,0xA8,0xA8,0xF8,5},   //ÿ
    220          {0x88,0x88,0xA8,0xA8,0xFC,6},   //Ÿ
    221          {0xC0,0x40,0x70,0x50,0x70,4},   //⁄
    222          {0x88,0x88,0xE8,0xA8,0xE8,5},   //€
    223          {0x80,0x80,0xE0,0x90,0xE0,4},   //‹
    224          {0x60,0x90,0x30,0x90,0x60,4},   //›
    225          {0xB8,0xA8,0xE8,0xA8,0xB8,5},   //ﬁ
    226          {0xF0,0x90,0x70,0x90,0x90,4}};  //ﬂ
    227          

   \                                 In segment CODE, align 4, keep-with-next
    228          inline int GetWidth(char c) {return(xfont[c-32][5]); }
   \                     GetWidth:
   \   00000000   10309FE5           LDR      R3,??GetWidth_0  ;; xfont
   \   00000004   0620A0E3           MOV      R2,#+6
   \   00000008   923020E0           MLA      R0,R2,R0,R3
   \   0000000C   BA10E0E3           MVN      R1,#+186
   \   00000010   D00091E1           LDRSB    R0,[R1, +R0]
   \   00000014   1EFF2FE1           BX       LR               ;; return
   \                     ??GetWidth_0:
   \   00000018   ........           DC32     xfont

   \                                 In segment CODE, align 4, keep-with-next
    229          inline int GetHeigth(char c) {return(5); }
   \                     GetHeigth:
   \   00000000   0500A0E3           MOV      R0,#+5
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    230          int isCharValid(char c) {  if((c>31 && c<127)||(c>191 && c<256)) {return 1;} else{return 0;}}
                                                                  ^
Warning[Pa084]: pointless integer comparison with an out of range value
   \                     isCharValid:
   \   00000000   200050E3           CMP      R0,#+32
   \   00000004   010000BA           BLT      ??isCharValid_0
   \   00000008   7F0050E3           CMP      R0,#+127
   \   0000000C   0100001A           BNE      ??isCharValid_1
   \                     ??isCharValid_0:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR
   \                     ??isCharValid_1:
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    231          
    232          

   \                                 In segment CODE, align 4, keep-with-next
    233          void DrawChar(int x, int y, char c,const char* clid)
    234          {
   \                     DrawChar:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    235            if (isCharValid(c)==1)
   \   00000018   0600A0E1           MOV      R0,R6
   \   0000001C   ........           BL       isCharValid
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   2300001A           BNE      ??DrawChar_0
    236            {
    237            IMGHDR img;
    238            img.w = 8;
    239            img.h = 5;
    240            img.bpnum = 1;
    241            img.bitmap = xfont[c-32];
   \   00000028   90309FE5           LDR      R3,??DrawChar_1  ;; xfont
   \   0000002C   0620A0E3           MOV      R2,#+6
   \   00000030   923623E0           MLA      R3,R2,R6,R3
   \   00000034   0810A0E3           MOV      R1,#+8
   \   00000038   B010CDE1           STRH     R1,[SP, #+0]
   \   0000003C   0510A0E3           MOV      R1,#+5
   \   00000040   B210CDE1           STRH     R1,[SP, #+2]
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   04108DE5           STR      R1,[SP, #+4]
   \   0000004C   BF10E0E3           MVN      R1,#+191
   \   00000050   031081E0           ADD      R1,R1,R3
   \   00000054   08108DE5           STR      R1,[SP, #+8]
    242            RECT rc;
    243            DRWOBJ drwobj;
    244            StoreXYWHtoRECT(&rc,x,y,img.w,img.h);
   \   00000058   0500A0E3           MOV      R0,#+5
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   0830A0E3           MOV      R3,#+8
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   0410A0E1           MOV      R1,R4
   \   0000006C   10008DE2           ADD      R0,SP,#+16
   \   00000070   330100EF           SWI      +307
    245            SetProp2ImageOrCanvas(&drwobj,&rc,0,&img,0,0);
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0C308DE2           ADD      R3,SP,#+12
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   18108DE2           ADD      R1,SP,#+24
   \   0000008C   20008DE2           ADD      R0,SP,#+32
   \   00000090   010200EF           SWI      +513
    246            SetColor(&drwobj,clid/*!*/,GetPaletteAdrByColorIndex(23));
   \   00000094   1700A0E3           MOV      R0,#+23
   \   00000098   2E0100EF           SWI      +302
   \   0000009C   0020A0E1           MOV      R2,R0
   \   000000A0   0710A0E1           MOV      R1,R7
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   4B0100EF           SWI      +331
    247            DrawObject(&drwobj);
   \   000000AC   20008DE2           ADD      R0,SP,#+32
   \   000000B0   2A0100EF           SWI      +298
   \   000000B4   0CD08DE2           ADD      SP,SP,#+12
    248            }
    249          }
   \                     ??DrawChar_0:
   \   000000B8   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   000000BC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??DrawChar_1:
   \   000000C0   ........           DC32     xfont
    250          

   \                                 In segment CODE, align 4, keep-with-next
    251          int GetStrWidth(char str[40])
    252          {
   \                     GetStrWidth:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    253            int xx=0;
   \   00000008   0050A0E3           MOV      R5,#+0
    254            for (int i=0; i!=strlen(str); i++ )
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   040000EA           B        ??GetStrWidth_0
    255            {
    256              xx=xx+GetWidth(str[i])+1;
   \                     ??GetStrWidth_1:
   \   00000014   D40096E1           LDRSB    R0,[R6, +R4]
    257            }
   \   00000018   016086E2           ADD      R6,R6,#+1
   \   0000001C   ........           _BLF     GetWidth,??GetWidth??rA
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   055080E0           ADD      R5,R0,R5
   \                     ??GetStrWidth_0:
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   1B0000EF           SWI      +27
   \   00000030   000056E1           CMP      R6,R0
   \   00000034   F6FFFF1A           BNE      ??GetStrWidth_1
    258            return(xx);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return
    259          }
    260          
    261          

   \                                 In segment CODE, align 4, keep-with-next
    262          int DrawStr(char str[40] ,int x,int y,const char* clid)
    263          {
   \                     DrawStr:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
    264            int xx=x;
    265            for (int i=0; i!=strlen(str); i++ )
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   090000EA           B        ??DrawStr_0
    266            {
    267              DrawChar(xx,y,str[i],clid);
   \                     ??DrawStr_1:
   \   0000001C   D42098E1           LDRSB    R2,[R8, +R4]
   \   00000020   0730A0E1           MOV      R3,R7
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           BL       DrawChar
    268              xx=xx+GetWidth(str[i])+1;
   \   00000030   D40098E1           LDRSB    R0,[R8, +R4]
    269            }
   \   00000034   018088E2           ADD      R8,R8,#+1
   \   00000038   ........           _BLF     GetWidth,??GetWidth??rA
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   055080E0           ADD      R5,R0,R5
   \                     ??DrawStr_0:
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   1B0000EF           SWI      +27
   \   0000004C   000058E1           CMP      R8,R0
   \   00000050   F1FFFF1A           BNE      ??DrawStr_1
    270            return(xx);  
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   F081BDE8           POP      {R4-R8,PC}       ;; return
    271          }
    272          

   \                                 In segment CODE, align 4, keep-with-next
    273          void DrawStrUnderline(char str[40] ,int x,int y, char* clid, int lineattr)
    274          {
   \                     DrawStrUnderline:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   1C809DE5           LDR      R8,[SP, #+28]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0370A0E1           MOV      R7,R3
    275            DrawLine(x,y+GetHeigth(' ')+1,x+DrawStr(str,x,y,clid),y+GetHeigth(' ')+1,lineattr,clid);
   \   00000018   2000A0E3           MOV      R0,#+32
   \   0000001C   ........           _BLF     GetHeigth,??GetHeigth??rA
   \   00000020   0090A0E1           MOV      R9,R0
   \   00000024   0730A0E1           MOV      R3,R7
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           BL       DrawStr
   \   00000038   0060A0E1           MOV      R6,R0
   \   0000003C   2000A0E3           MOV      R0,#+32
   \   00000040   ........           _BLF     GetHeigth,??GetHeigth??rA
   \   00000044   80002DE9           PUSH     {R7}
   \   00000048   00012DE9           PUSH     {R8}
   \   0000004C   051089E0           ADD      R1,R9,R5
   \   00000050   013081E2           ADD      R3,R1,#+1
   \   00000054   042086E0           ADD      R2,R6,R4
   \   00000058   050080E0           ADD      R0,R0,R5
   \   0000005C   011080E2           ADD      R1,R0,#+1
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   B30100EF           SWI      +435
    276          }
   \   00000068   F383BDE8           POP      {R0,R1,R4-R9,PC}  ;; return
    277          

   \                                 In segment CODE, align 4, keep-with-next
    278          void DrawStrShadowed(char str[40] ,int x,int y,const char* clid, const char* shadow)
    279          {
   \                     DrawStrShadowed:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   14309DE5           LDR      R3,[SP, #+20]
    280            DrawStr(str,x+1,y+1,shadow);
   \   00000018   012086E2           ADD      R2,R6,#+1
   \   0000001C   011085E2           ADD      R1,R5,#+1
   \   00000020   ........           BL       DrawStr
    281            DrawStr(str,x,y,clid);
   \   00000024   0730A0E1           MOV      R3,R7
   \   00000028   0620A0E1           MOV      R2,R6
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       DrawStr
    282          }
   \   00000038   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for xfont>`:
   \   00000000   000000000002       DC8 0, 0, 0, 0, 0, 2, -128, -128, -128, 0, -128, 1, -96, 0, 0, 0, 0, 3
   \              808080008001
   \              A00000000003
   \   00000012   50F850F85005       DC8 80, -8, 80, -8, 80, 5, 120, -96, 112, 40, -16, 5, -112, 16, 32, 64
   \              78A07028F005
   \              90102040    
   \   00000022   900400000000       DC8 -112, 4, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 0, 1, 64, -128, -128
   \              000080800000
   \              0001408080  
   \   00000033   804002804040       DC8 -128, 64, 2, -128, 64, 64, 64, -128, 2, 0, 0, 0, 0, 0, 0, 0, 64
   \              408002000000
   \              0000000040  
   \   00000044   E04000030000       DC8 -32, 64, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 3, 0, 0, 0, 0
   \              000000000000
   \              E00000030000
   \              0000        
   \   00000058   800110102040       DC8 -128, 1, 16, 16, 32, 64, -128, 4, 96, -112, -112, -112, 96, 4, 64
   \              800460909090
   \              600440      
   \   00000067   C04040E00360       DC8 -64, 64, 64, -32, 3, 96, -112, 32, 64, -16, 4, 96, -112, 32, -112
   \              902040F00460
   \              902090      
   \   00000076   60045090F010       DC8 96, 4, 80, -112, -16, 16, 16, 4, -16, -128, -32, 16, -32, 4, 112
   \              1004F080E010
   \              E00470      
   \   00000085   80E0906004F0       DC8 -128, -32, -112, 96, 4, -16, 16, 32, 64, -128, 4, 96, -112, 96
   \              102040800460
   \              9060        
   \   00000093   906004609070       DC8 -112, 96, 4, 96, -112, 112, 16, -32, 4, 0, -128, 0, -128, 0, 1, 0
   \              10E004008000
   \              80000100    
   \   000000A3   800080800120       DC8 -128, 0, -128, -128, 1, 32, 64, -128, 64, 32, 3, 0, -32, 0, -32, 0
   \              408040200300
   \              E000E000    
   \   000000B3   038040204080       DC8 3, -128, 64, 32, 64, -128, 3, 96, -112, 32, 0, 32, 4, 0, 80, 0
   \              036090200020
   \              04005000    
   \   000000C3   8870056090F0       DC8 -120, 112, 5, 96, -112, -16, -112, -112, 4, -32, -112, -32, -112
   \              909004E090E0
   \              90          
   \   000000D0   E00470808080       DC8 -32, 4, 112, -128, -128, -128, 112, 4, -32, -112, -112, -112, -32
   \              7004E0909090
   \              E0          
   \   000000DD   04F080E080F0       DC8 4, -16, -128, -32, -128, -16, 4, -16, -128, -32, -128, -128, 4, 112
   \              04F080E08080
   \              0470        
   \   000000EB   80B090600490       DC8 -128, -80, -112, 96, 4, -112, -112, -16, -112, -112, 4, -32, 64, 64
   \              90F0909004E0
   \              4040        
   \   000000F9   40E003101010       DC8 64, -32, 3, 16, 16, 16, -112, 96, 4, -112, -112, -32, -112, -112, 4
   \              9060049090E0
   \              909004      
   \   00000108   80808080F004       DC8 -128, -128, -128, -128, -16, 4, -40, -88, -88, -120, -120, 5, -112
   \              D8A8A8888805
   \              90          
   \   00000115   D0B090900460       DC8 -48, -80, -112, -112, 4, 96, -112, -112, -112, 96, 4, -32, -112
   \              9090906004E0
   \              90          
   \   00000122   E08080046090       DC8 -32, -128, -128, 4, 96, -112, -112, 96, 16, 4, -32, -112, -32, -96
   \              90601004E090
   \              E0A0        
   \   00000130   900470806010       DC8 -112, 4, 112, -128, 96, 16, -32, 4, -32, 64, 64, 64, 64, 3, -112
   \              E004E0404040
   \              400390      
   \   0000013F   909090600490       DC8 -112, -112, -112, 96, 4, -112, -112, -112, 80, 32, 4, -120, -120
   \              909050200488
   \              88          
   \   0000014C   A8A850059090       DC8 -88, -88, 80, 5, -112, -112, 96, -112, -112, 4, -112, -112, 112, 16
   \              609090049090
   \              7010        
   \   0000015A   E004F8102040       DC8 -32, 4, -8, 16, 32, 64, -8, 5, -64, -128, -128, -128, -64, 2, -128
   \              F805C0808080
   \              C00280      
   \   00000169   8040201004C0       DC8 -128, 64, 32, 16, 4, -64, 64, 64, 64, -64, 2, 64, -96, 0, 0, 0, 3
   \              404040C00240
   \              A000000003  
   \   0000017A   00000000E003       DC8 0, 0, 0, 0, -32, 3, -128, 64, 0, 0, 0, 2, 96, -112, -16, -112, -112
   \              804000000002
   \              6090F09090  
   \   0000018B   04E090E090E0       DC8 4, -32, -112, -32, -112, -32, 4, 112, -128, -128, -128, 112, 4, -32
   \              047080808070
   \              04E0        
   \   00000199   909090E004F0       DC8 -112, -112, -112, -32, 4, -16, -128, -32, -128, -16, 4, -16, -128
   \              80E080F004F0
   \              80          
   \   000001A6   E08080047080       DC8 -32, -128, -128, 4, 112, -128, -80, -112, 96, 4, -112, -112, -16
   \              B09060049090
   \              F0          
   \   000001B3   909004E04040       DC8 -112, -112, 4, -32, 64, 64, 64, -32, 3, 16, 16, 16, -112, 96, 4
   \              40E003101010
   \              906004      
   \   000001C2   9090E0909004       DC8 -112, -112, -32, -112, -112, 4, -128, -128, -128, -128, -16, 4, -40
   \              80808080F004
   \              D8          
   \   000001CF   A8A888880590       DC8 -88, -88, -120, -120, 5, -112, -48, -80, -112, -112, 4, 96, -112
   \              D0B090900460
   \              90          
   \   000001DC   90906004E090       DC8 -112, -112, 96, 4, -32, -112, -32, -128, -128, 4, 96, -112, -112
   \              E08080046090
   \              90          
   \   000001E9   601004E090E0       DC8 96, 16, 4, -32, -112, -32, -96, -112, 4, 112, -128, 96, 16, -32, 4
   \              A09004708060
   \              10E004      
   \   000001F8   E04040404003       DC8 -32, 64, 64, 64, 64, 3, -112, -112, -112, -112, 96, 4, -112, -112
   \              909090906004
   \              9090        
   \   00000206   905020048888       DC8 -112, 80, 32, 4, -120, -120, -88, -88, 80, 5, -112, -112, 96, -112
   \              A8A850059090
   \              6090        
   \   00000214   900490907010       DC8 -112, 4, -112, -112, 112, 16, -32, 4, -8, 16, 32, 64, -8, 5, 0, 0
   \              E004F8102040
   \              F8050000    
   \   00000224   000000038080       DC8 0, 0, 0, 3, -128, -128, -128, -128, -128, 1, 0, 0, 0, 0, 0, 3, 80
   \              808080010000
   \              0000000350  
   \   00000235   A00000000400       DC8 -96, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00000000    
   \   0000024B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000262   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000279   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002A7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002BE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000303   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000031A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000331   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000035F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 64, -32, 64, 0, -32, 3, 0, 0, 0, 0, 0, 0, 0, 0
   \              0040E04000E0
   \              030000000000
   \              000000      
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000038B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000003A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000003B9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 96, -112, -16, -112, -112, 4, -16, -128, -32
   \              006090F09090
   \              04F080E0    
   \   000003C9   90E004E090E0       DC8 -112, -32, 4, -32, -112, -32, -112, -32, 4, -16, -128, -128, -128
   \              90E004F08080
   \              80          
   \   000003D6   800430505050       DC8 -128, 4, 48, 80, 80, 80, -8, 4, -16, -128, -32, -128, -16, 4, -88
   \              F804F080E080
   \              F004A8      
   \   000003E5   A870A8A80560       DC8 -88, 112, -88, -88, 5, 96, -112, 32, -112, 96, 4, -112, -80, -48
   \              902090600490
   \              B0D0        
   \   000003F3   909004000000       DC8 -112, -112, 4, 0, 0, 0, 0, 0, 0, -112, -112, -32, -112, -112, 4
   \              0000009090E0
   \              909004      
   \   00000402   70505050D004       DC8 112, 80, 80, 80, -48, 4, -40, -88, -88, -120, -120, 5, -112, -112
   \              D8A8A8888805
   \              9090        
   \   00000410   F09090046090       DC8 -16, -112, -112, 4, 96, -112, -112, -112, 96, 4, -16, -112, -112
   \              90906004F090
   \              90          
   \   0000041D   909004E090E0       DC8 -112, -112, 4, -32, -112, -32, -128, -128, 4, 112, -128, -128, -128
   \              808004708080
   \              80          
   \   0000042A   7004E0404040       DC8 112, 4, -32, 64, 64, 64, 64, 3, -112, -112, 112, 16, -32, 4, -8
   \              400390907010
   \              E004F8      
   \   00000439   A8F820200590       DC8 -88, -8, 32, 32, 5, -112, -112, 96, -112, -112, 4, -96, -96, -96
   \              9060909004A0
   \              A0A0        
   \   00000447   A0F004909070       DC8 -96, -16, 4, -112, -112, 112, 16, 16, 4, -120, -120, -88, -88, -8
   \              1010048888A8
   \              A8F8        
   \   00000455   058888A8A8FC       DC8 5, -120, -120, -88, -88, -4, 6, -64, 64, 112, 80, 112, 4, -120
   \              06C040705070
   \              0488        
   \   00000463   88E8A8E80580       DC8 -120, -24, -88, -24, 5, -128, -128, -32, -112, -32, 4, 96, -112, 48
   \              80E090E00460
   \              9030        
   \   00000471   906004B8A8E8       DC8 -112, 96, 4, -72, -88, -24, -88, -72, 5, -16, -112, 112, -112, -112
   \              A8B805F09070
   \              9090        
   \   0000047F   046090F09090       DC8 4, 96, -112, -16, -112, -112, 4, -16, -128, -32, -112, -32, 4, -32
   \              04F080E090E0
   \              04E0        
   \   0000048D   90E090E004F0       DC8 -112, -32, -112, -32, 4, -16, -128, -128, -128, -128, 4, 48, 80, 80
   \              808080800430
   \              5050        
   \   0000049B   50F804F080E0       DC8 80, -8, 4, -16, -128, -32, -128, -16, 4, -88, -88, 112, -88, -88, 5
   \              80F004A8A870
   \              A8A805      
   \   000004AA   609020906004       DC8 96, -112, 32, -112, 96, 4, -112, -80, -48, -112, -112, 4, 0, 0, 0
   \              90B0D0909004
   \              000000      
   \   000004B9   0000009090E0       DC8 0, 0, 0, -112, -112, -32, -112, -112, 4, 112, 80, 80, 80, -48, 4
   \              909004705050
   \              50D004      
   \   000004C8   D8A8A8888805       DC8 -40, -88, -88, -120, -120, 5, -112, -112, -16, -112, -112, 4, 96
   \              9090F0909004
   \              60          
   \   000004D5   9090906004F0       DC8 -112, -112, -112, 96, 4, -16, -112, -112, -112, -112, 4, -32, -112
   \              9090909004E0
   \              90          
   \   000004E2   E08080047080       DC8 -32, -128, -128, 4, 112, -128, -128, -128, 112, 4, -32, 64, 64, 64
   \              80807004E040
   \              4040        
   \   000004F0   400390907010       DC8 64, 3, -112, -112, 112, 16, -32, 4, -8, -88, -8, 32, 32, 5, -112
   \              E004F8A8F820
   \              200590      
   \   000004FF   9060909004A0       DC8 -112, 96, -112, -112, 4, -96, -96, -96, -96, -16, 4, -112, -112
   \              A0A0A0F00490
   \              90          
   \   0000050C   701010048888       DC8 112, 16, 16, 4, -120, -120, -88, -88, -8, 5, -120, -120, -88, -88
   \              A8A8F8058888
   \              A8A8        
   \   0000051A   FC06C0407050       DC8 -4, 6, -64, 64, 112, 80, 112, 4, -120, -120, -24, -88, -24, 5, -128
   \              70048888E8A8
   \              E80580      
   \   00000529   80E090E00460       DC8 -128, -32, -112, -32, 4, 96, -112, 48, -112, 96, 4, -72, -88, -24
   \              9030906004B8
   \              A8E8        
   \   00000537   A8B805F09070       DC8 -88, -72, 5, -16, -112, 112, -112, -112, 4
   \              909004      
    283          

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     DrawChar            88
     DrawStr             24
     DrawStrShadowed     20
     DrawStrUnderline    36
     GetHeigth            0
     GetStrWidth         16
     GetWidth             0
     isCharValid          0


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     xfont                    1344
     GetWidth                   28
     GetHeigth                   8
     isCharValid                32
     DrawChar                  196
     GetStrWidth                64
     DrawStr                    92
     DrawStrUnderline          108
     DrawStrShadowed            60
     ?<Initializer for xfont> 1344
      Others                    60

 
   636 bytes in segment CODE
 1 344 bytes in segment DATA_I
 1 344 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
   552 bytes of CODE  memory (+ 96 bytes shared)
 1 344 bytes of CONST memory
 1 344 bytes of DATA  memory

Errors: none
Warnings: 1

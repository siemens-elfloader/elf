##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Aug/2009  15:53:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CBN\Unrar\Main.c                              #
#    Command line    =  C:\arm\CBN\Unrar\Main.c -lC                          #
#                       C:\arm\CBN\Unrar\Release\List\ -o                    #
#                       C:\arm\CBN\Unrar\Release\Obj\ -s9 --no_unroll        #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\CBN\Unrar\Release\List\Main.lst               #
#    Object file     =  C:\arm\CBN\Unrar\Release\Obj\Main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CBN\Unrar\Main.c
      1          #include "..\swilib.h"
      2          
      3          
      4          #define bool int
      5          #define false 0
      6          #define true 1
      7          

   \                                 In segment DATA_Z, align 4, align-sorted
      8          char filename[256];
   \                     filename:
   \   00000000                      DS8 256
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          void *memset(void *buf, int val, int size){
     11            char *b=(char*)buf;
   \                     memset:
   \   00000000   0030A0E1           MOV      R3,R0
   \   00000004   000000EA           B        ??memset_0
     12            while(--size>=0) *b++=val; 
   \                     ??memset_1:
   \   00000008   ........           STRB     R1,[R3], #+1
   \                     ??memset_0:
   \   0000000C   012052E2           SUBS     R2,R2,#+1
   \   00000010   FCFFFF5A           BPL      ??memset_1
     13            return buf;
   \   00000014   1EFF2FE1           BX       LR               ;; return
     14          }
     15          
     16          inline int abs(int a){ return (a<0)?-a:a;}
     17          
     18          //typedef unsigned char    byte;   //8 bits
     19          //typedef unsigned int     uint;   //32 bits or more
     20          

   \                                 In segment DATA_Z, align 4, align-sorted
     21          int in, outhandle; //my add
   \                     in:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     outhandle:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     22          unsigned int err;
   \                     err:
   \   00000000                      DS8 4
     23          
     24          //int loadfilesize=0, readoff=0;
     25          //unsigned long writebytes; //tmp
     26          //char *readdata; // Исходный rar
     27          
     28          //char FileName[100];

   \                                 In segment DATA_Z, align 4, align-sorted
     29          int HeadType, Flags, HeadSize, PackSize, UnpSize, Version, Method, NameSize, NextPos;
   \                     HeadType:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Flags:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     HeadSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PackSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Version:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Method:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NameSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NextPos:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     30          int Attrib, AllSize;
   \                     Attrib:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AllSize:
   \   00000000                      DS8 4
     31          

   \                                 In segment DATA_C, align 4, align-sorted
     32          const int MAX_SIZE = 0x8000;
   \                     MAX_SIZE:
   \   00000000   00800000           DC32 32768

   \                                 In segment DATA_Z, align 4, align-sorted
     33          int MAXWINSIZE;// = 0x100000;  //80000=512kb
   \                     MAXWINSIZE:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     34          int MAXWINMASK;// = 0x0FFFFF;//(MAXWINSIZE-1);!!!!
   \                     MAXWINMASK:
   \   00000000                      DS8 4
     35          

   \                                 In segment DATA_C, align 4, align-sorted
     36          const  int SIZEOF_SHORTBLOCKHEAD =  7;
   \                     SIZEOF_SHORTBLOCKHEAD:
   \   00000000   07000000           DC32 7

   \                                 In segment DATA_C, align 4, align-sorted
     37          const  int LHD_SOLID  = 0x10;
   \                     LHD_SOLID:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_C, align 4, align-sorted
     38          const  int ATTR_SUB  = 0x10;
   \                     ATTR_SUB:
   \   00000000   10000000           DC32 16
     39          

   \                                 In segment DATA_C, align 4, align-sorted
     40          const int LOW_DIST_REP_COUNT = 16;
   \                     LOW_DIST_REP_COUNT:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_C, align 4, align-sorted
     41          const int BLOCK_LZ=0, BLOCK_PPM=1;
   \                     BLOCK_LZ:
   \   00000000   00000000           DC32 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     BLOCK_PPM:
   \   00000000   01000000           DC32 1
     42          

   \                                 In segment DATA_I, align 4, align-sorted
     43          char LDecode[]={0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,(char)128,(char)160,(char)192,(char)224};
   \                     LDecode:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for LDecode>`

   \                                 In segment DATA_I, align 4, align-sorted
     44          char LBits[]=  {0,0,0,0,0,0,0,0,1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,  4,  5,  5,  5,  5};
   \                     LBits:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for LBits>`
     45            

   \                                 In segment DATA_I, align 4, align-sorted
     46          int DDecode[]={0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576,32768U,49152U,65536,98304,131072,196608,262144,327680,393216,458752,524288,589824,655360,720896,786432,851968,917504,983040};
   \                     DDecode:
   \   00000000                      DS8 192
   \   000000C0                      REQUIRE `?<Initializer for DDecode>`

   \                                 In segment DATA_I, align 4, align-sorted
     47          char DBits[]=  {0,0,0,0,1,1,2, 2, 3, 3, 4, 4, 5, 5,  6,  6,  7,  7,  8,  8,   9,   9,  10,  10,  11,  11,  12,   12,   13,   13,    14,    14,   15,   15,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16};
   \                     DBits:
   \   00000000                      DS8 48
   \   00000030                      REQUIRE `?<Initializer for DBits>`
     48            

   \                                 In segment DATA_I, align 4, align-sorted
     49          int DBitLengthCounts[]= {4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,0,12};
   \                     DBitLengthCounts:
   \   00000000                      DS8 76
   \   0000004C                      REQUIRE `?<Initializer for DBitLengthCounts>`

   \                                 In segment DATA_I, align 4, align-sorted
     50          char SDDecode[]={0,4,8,16,32,64,(char)128,(char)192};
   \                     SDDecode:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for SDDecode>`

   \                                 In segment DATA_I, align 4, align-sorted
     51          char SDBits[]=  {2,2,3, 4, 5, 6,  6,  6};
   \                     SDBits:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for SDBits>`
     52          
     53          
     54          #define NC 299  
     55          #define DC  60
     56          #define LDC 17
     57          #define RC  28
     58          #define HUFF_TABLE_SIZE (NC+DC+RC+LDC)
     59          #define BC  20
     60          
     61          #define NC20 298
     62          #define DC20 48
     63          #define RC20 28
     64          #define BC20 19
     65          #define MC20 257
     66          

   \                                 In segment DATA_I, align 4, align-sorted
     67          int LLSize[]={NC,DC,RC,BC,LDC, NC20,DC20,RC20,BC20,MC20,MC20,MC20,MC20};
   \                     LLSize:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for LLSize>`

   \                                 In segment DATA_Z, align 4, align-sorted
     68          int DecodeN[NC+DC+RC+BC+LDC+ NC20+DC20+RC20+BC20+MC20*4];
   \                     DecodeN:
   \   00000000                      DS8 7380
     69          
     70          struct Decode{
     71            int MaxNum;
     72            int DecodeLen[16];
     73            int DecodePos[16];
     74            int DecodePtr;//add
     75            int DecodeCnt;//add

   \                                 In segment DATA_Z, align 4, align-sorted
     76          } LL[13];
   \                     LL:
   \   00000000                      DS8 1820
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          void InitLL(){
     79            int i,j;
     80            for(i=j=0;i<13;i++){
   \                     InitLL:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   0010A0E3           MOV      R1,#+0
     81              LL[i].DecodePtr=j;
   \                     ??InitLL_0:
   \   00000008   ........           LDR      R2,??DataTable25  ;; LL
   \   0000000C   8C30A0E3           MOV      R3,#+140
   \   00000010   932122E0           MLA      R2,R3,R1,R2
   \   00000014   1C309FE5           LDR      R3,??InitLL_1    ;; LLSize
   \   00000018   840082E5           STR      R0,[R2, #+132]
   \   0000001C   013193E7           LDR      R3,[R3, +R1, LSL #+2]
     82              LL[i].DecodeCnt=LLSize[i];
     83              j+=LLSize[i];
     84            }
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   883082E5           STR      R3,[R2, #+136]
   \   00000028   000083E0           ADD      R0,R3,R0
   \   0000002C   0D0051E3           CMP      R1,#+13
   \   00000030   F4FFFFBA           BLT      ??InitLL_0
     85          }
   \   00000034   1EFF2FE1           BX       LR               ;; return
   \                     ??InitLL_1:
   \   00000038   ........           DC32     LLSize
     86          
     87          struct AudioVariables
     88          {
     89            int K1,K2,K3,K4,K5;
     90            int D1,D2,D3,D4;
     91            int LastDelta;
     92            int Dif[11];
     93            int ByteCount;
     94            int LastChar;
     95          };
     96          /***************************** Unpack v 2.0 *********************************/
     97          
     98          
     99              int UnpRead(char *Window,int UnpPtr);
    100              void UnpWrite(char *Window,int UnpPtr);
    101              

   \                                 In segment DATA_Z, align 4, align-sorted
    102              char UnpOldTable[HUFF_TABLE_SIZE];
   \                     UnpOldTable:
   \   00000000                      DS8 404

   \                                 In segment DATA_Z, align 4, align-sorted
    103              char *Window=0;
   \                     Window:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    104              char *InBuf=0;
   \                     InBuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    105              int InAddr, InBit;
   \                     InAddr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     InBit:
   \   00000000                      DS8 4
    106          

   \                                 In segment CODE, align 4, keep-with-next
    107              void InitBitInput(){ 
    108                InAddr=InBit=0;
   \                     InitBitInput:
   \   00000000   ........           LDR      R1,??DataTable84  ;; InBit
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   000081E5           STR      R0,[R1, #+0]
   \   0000000C   ........           LDR      R1,??DataTable85  ;; InAddr
   \   00000010   000081E5           STR      R0,[R1, #+0]
    109              }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    110              void addbits(int Bits){
    111                Bits+=InBit;
   \                     addbits:
   \   00000000   ........           LDR      R1,??DataTable84  ;; InBit
   \   00000004   002091E5           LDR      R2,[R1, #+0]
   \   00000008   000082E0           ADD      R0,R2,R0
    112                InAddr+=Bits>>3;
   \   0000000C   ........           LDR      R2,??DataTable85  ;; InAddr
   \   00000010   003092E5           LDR      R3,[R2, #+0]
   \   00000014   C03183E0           ADD      R3,R3,R0, ASR #+3
   \   00000018   003082E5           STR      R3,[R2, #+0]
    113                InBit=Bits&7;
   \   0000001C   070000E2           AND      R0,R0,#0x7
   \   00000020   000081E5           STR      R0,[R1, #+0]
    114              }
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    115              int getbits(){
    116                int BitField=(InBuf[InAddr]&0xff) << 16;
    117                BitField|=(InBuf[InAddr+1]&0xff) << 8;
    118                BitField|=(InBuf[InAddr+2]&0xff);
    119                BitField >>= (8-InBit);
    120                return(BitField & 0xffff);
   \                     getbits:
   \   00000000   ........           LDR      R0,??DataTable85  ;; InAddr
   \   00000004   ........           LDR      R1,??DataTable56  ;; InBuf
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   010080E0           ADD      R0,R0,R1
   \   00000014   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000018   0120D0E5           LDRB     R2,[R0, #+1]
   \   0000001C   0200D0E5           LDRB     R0,[R0, #+2]
   \   00000020   0224A0E1           LSL      R2,R2,#+8
   \   00000024   011882E1           ORR      R1,R2,R1, LSL #+16
   \   00000028   010080E1           ORR      R0,R0,R1
   \   0000002C   ........           LDR      R1,??DataTable84  ;; InBit
   \   00000030   001091E5           LDR      R1,[R1, #+0]
   \   00000034   081061E2           RSB      R1,R1,#+8
   \   00000038   5001A0E1           ASR      R0,R0,R1
   \   0000003C   0008A0E1           LSL      R0,R0,#+16
   \   00000040   2008A0E1           LSR      R0,R0,#+16
   \   00000044   1EFF2FE1           BX       LR               ;; return
    121              }
    122          
    123              void Unpack29(bool Solid);
    124              bool UnpReadBuf();
    125              void UnpWriteBuf();
    126              void UnpWriteArea(int StartPtr,int EndPtr);
    127              void UnpWriteData(char *Data,int Size);
    128              bool ReadTables();
    129              void MakeDecodeTables(char *LenTab,int pos);
    130              int DecodeNumber(int pos);
    131              void UnpInitData(int Solid);
    132              void CopyString();
    133              bool ReadEndOfBlock();
    134              void CopyString(int Length,int Distance);
    135              inline void InsertOldDist(int Distance);
    136              inline void InsertLastMatch(int Length,int Distance);

   \                                 In segment DATA_Z, align 4, align-sorted
    137              int PPMEscChar;
   \                     PPMEscChar:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    138              int LastFilter;
   \                     LastFilter:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    139              bool TablesRead;
   \                     TablesRead:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    140              int OldDist[4],OldDistPtr;
   \                     OldDist:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     OldDistPtr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    141              int LastDist,LastLength;
   \                     LastDist:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     LastLength:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    142              int UnpPtr,WrPtr;
   \                     UnpPtr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     WrPtr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    143              int ReadTop;
   \                     ReadTop:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    144              int ReadBorder;
   \                     ReadBorder:
   \   00000000                      DS8 4
    145          

   \                                 In segment DATA_Z, align 4, align-sorted
    146              int UnpBlockType;
   \                     UnpBlockType:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    147              int DestUnpSize;
   \                     DestUnpSize:
   \   00000000                      DS8 4
    148          

   \                                 In segment DATA_Z, align 4, align-sorted
    149              bool Suspended;
   \                     Suspended:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    150              bool UnpAllBuf;
   \                     UnpAllBuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    151              bool UnpSomeRead;
   \                     UnpSomeRead:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    152              int WrittenFileSize;
   \                     WrittenFileSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    153              bool FileExtracted;
   \                     FileExtracted:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    154              bool PPMError;
   \                     PPMError:
   \   00000000                      DS8 4
    155          

   \                                 In segment DATA_Z, align 4, align-sorted
    156              int PrevLowDist,LowDistRepCount;
   \                     PrevLowDist:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     LowDistRepCount:
   \   00000000                      DS8 4
    157          
    158          /***************************** Unpack v 1.5 *********************************/
    159          
    160              void Unpack15(bool Solid);
    161              void ShortLZ();
    162              void LongLZ();
    163              void HuffDecode();
    164              void GetFlagsBuf();
    165              void OldUnpInitData(int Solid);
    166              void InitHuff();
    167              void CorrHuff(int *CharSet,int *NumToPlace);
    168              void OldCopyString(int Distance,int Length);
    169              int DecodeNum(int Num,int StartPos,
    170                int *DecTab,int *PosTab);
    171              void OldUnpWriteBuf();
    172          

   \                                 In segment DATA_Z, align 4, align-sorted
    173              int ChSet[256],ChSetA[256],ChSetB[256],ChSetC[256];
   \                     ChSet:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ChSetA:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ChSetB:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ChSetC:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    174              int Place[256],PlaceA[256],PlaceB[256],PlaceC[256];
   \                     Place:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PlaceA:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PlaceB:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PlaceC:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    175              int NToPl[256],NToPlB[256],NToPlC[256];
   \                     NToPl:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NToPlB:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NToPlC:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    176              int FlagBuf,AvrPlc,AvrPlcB,AvrLn1,AvrLn2,AvrLn3;
   \                     FlagBuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrPlc:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrPlcB:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrLn1:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrLn2:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrLn3:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    177              int Buf60,NumHuf,StMode,LCount,FlagsCnt;
   \                     Buf60:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NumHuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     StMode:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     LCount:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     FlagsCnt:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    178              int Nhfb,Nlzb,MaxDist3;
   \                     Nhfb:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Nlzb:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     MaxDist3:
   \   00000000                      DS8 4
    179          /***************************** Unpack v 2.0 *********************************/
    180              void Unpack20(bool Solid);

   \                                 In segment DATA_Z, align 4, align-sorted
    181              char UnpOldTable20[MC20*4];
   \                     UnpOldTable20:
   \   00000000                      DS8 1028

   \                                 In segment DATA_Z, align 4, align-sorted
    182              int UnpAudioBlock,UnpChannels,UnpCurChannel,UnpChannelDelta;
   \                     UnpAudioBlock:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpChannels:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpCurChannel:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpChannelDelta:
   \   00000000                      DS8 4
    183              void CopyString20(int Length,int Distance);
    184              bool ReadTables20();
    185              void UnpInitData20(int Solid);
    186              void ReadLastTables();
    187              char DecodeAudio(int Delta);
    188          

   \                                 In segment DATA_Z, align 4, align-sorted
    189              struct AudioVariables AudV[4];
   \                     AudV:
   \   00000000                      DS8 368
    190          /***************************** Unpack v 2.0 *********************************/
    191              void DoUnpack(int Method,bool Solid);

   \                                 In segment CODE, align 4, keep-with-next
    192              bool IsFileExtracted() {return(FileExtracted);}
   \                     IsFileExtracted:
   \   00000000   ........           LDR      R0,??DataTable42  ;; FileExtracted
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    193              void SetDestSize(int DestSize) {DestUnpSize=DestSize;FileExtracted=false;}
   \                     SetDestSize:
   \   00000000   ........           LDR      R1,??DataTable63  ;; DestUnpSize
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   ........           LDR      R0,??DataTable42  ;; FileExtracted
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    194              void SetSuspended(bool Suspend) {Suspended=Suspend;}
   \                     SetSuspended:
   \   00000000   ........           LDR      R1,??DataTable41  ;; Suspended
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    195          /*
    196              unsigned int GetChar()
    197              {
    198                if (InAddr>MAX_SIZE-30)
    199                  UnpReadBuf();
    200                return(InBuf[InAddr++]);
    201              }
    202          */
    203          
    204          //#include "rar.hpp"
    205          //#include "unpack15.cpp"
    206          //#include "unpack20.cpp"
    207          

   \                                 In segment CODE, align 4, keep-with-next
    208          void UnpackInit()
    209          {
    210            InAddr=InBit=0;
   \                     UnpackInit:
   \   00000000   ........           LDR      R1,??DataTable84  ;; InBit
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
    211            Suspended=false;
    212            UnpAllBuf=false;
    213            UnpSomeRead=false;
    214            InBuf=malloc(MAX_SIZE);
    215            MAXWINSIZE = 0x400000; 
   \   00000008   ........           LDR      R4,??DataTable79  ;; MAXWINSIZE
    216            if((Window=malloc(MAXWINSIZE))==0){
   \   0000000C   ........           LDR      R5,??DataTable80  ;; Window
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   000081E5           STR      R0,[R1, #+0]
   \   00000018   ........           LDR      R1,??DataTable85  ;; InAddr
   \   0000001C   000081E5           STR      R0,[R1, #+0]
   \   00000020   ........           LDR      R1,??DataTable41  ;; Suspended
   \   00000024   000081E5           STR      R0,[R1, #+0]
   \   00000028   ........           LDR      R1,??DataTable17  ;; UnpAllBuf
   \   0000002C   000081E5           STR      R0,[R1, #+0]
   \   00000030   ........           LDR      R1,??DataTable60  ;; UnpSomeRead
   \   00000034   000081E5           STR      R0,[R1, #+0]
   \   00000038   800CA0E3           MOV      R0,#+32768
   \   0000003C   140000EF           SWI      +20
   \   00000040   ........           LDR      R1,??DataTable56  ;; InBuf
   \   00000044   000081E5           STR      R0,[R1, #+0]
   \   00000048   4008A0E3           MOV      R0,#+4194304
   \   0000004C   000084E5           STR      R0,[R4, #+0]
   \   00000050   140000EF           SWI      +20
   \   00000054   000085E5           STR      R0,[R5, #+0]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0300001A           BNE      ??UnpackInit_0
    217                MAXWINSIZE = 0x100000; 
   \   00000060   4009A0E3           MOV      R0,#+1048576
   \   00000064   000084E5           STR      R0,[R4, #+0]
    218                Window=malloc(MAXWINSIZE);
   \   00000068   140000EF           SWI      +20
   \   0000006C   000085E5           STR      R0,[R5, #+0]
    219            }
    220            MAXWINMASK = MAXWINSIZE-1;
   \                     ??UnpackInit_0:
   \   00000070   ........           LDR      R0,??DataTable34  ;; MAXWINMASK
   \   00000074   001094E5           LDR      R1,[R4, #+0]
   \   00000078   011041E2           SUB      R1,R1,#+1
   \   0000007C   001080E5           STR      R1,[R0, #+0]
    221            InitLL();
   \   00000080   ........           BL       InitLL
    222            UnpInitData(false);
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   ........           BL       UnpInitData
    223          }
   \   0000008C   3080BDE8           POP      {R4,R5,PC}       ;; return
    224          
    225          

   \                                 In segment CODE, align 4, keep-with-next
    226          void DoUnpack(int Method,bool Solid)
    227          {
   \                     DoUnpack:
   \   00000000   00402DE9           PUSH     {LR}
    228            switch(Method)
   \   00000004   0A0040E2           SUB      R0,R0,#+10
   \   00000008   1A0050E3           CMP      R0,#+26
   \   0000000C   0080BD88           POPHI    {PC}
   \   00000010   012F8FE2           ADR      R2,??DoUnpack_0
   \   00000014   0020D2E7           LDRB     R2,[R2, R0]
   \   00000018   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??DoUnpack_0:
   \   0000001C   06060606           DC8      +6,+6,+6,+6
   \   00000020   06060E0E           DC8      +6,+6,+14,+14
   \   00000024   0E0E090E           DC8      +14,+14,+9,+14
   \   00000028   0E0E0E0E           DC8      +14,+14,+14,+14
   \   0000002C   090E0E0C           DC8      +9,+14,+14,+12
   \   00000030   0E0E0E0E           DC8      +14,+14,+14,+14
   \   00000034   0E0E0C00           DC8      +14,+14,+12,+0
    229            {
    230              case 14: case 13: case 12: case 11: case 10://add
    231              case 15: // rar 1.5 compression
    232                Unpack15(Solid);
   \                     ??DoUnpack_1:
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   ........           BL       Unpack15
   \   00000040   0080BDE8           POP      {PC}
    233                break;
    234              case 20: // rar 2.x compression
    235              case 26: // files larger than 2GB
    236                Unpack20(Solid);
   \                     ??DoUnpack_2:
   \   00000044   0100A0E1           MOV      R0,R1
   \   00000048   ........           BL       Unpack20
   \   0000004C   0080BDE8           POP      {PC}
    237                break;
    238              case 29: // rar 3.x compression
    239              case 36: // alternative hash
    240                Unpack29(Solid);
   \                     ??DoUnpack_3:
   \   00000050   0100A0E1           MOV      R0,R1
   \   00000054   ........           BL       Unpack29
    241                break;
    242            }
    243          }
   \                     ??DoUnpack_4:
   \   00000058   0080BDE8           POP      {PC}             ;; return
    244          
    245          
    246          inline void InsertOldDist(int Distance)
    247          {
    248            OldDist[3]=OldDist[2];
    249            OldDist[2]=OldDist[1];
    250            OldDist[1]=OldDist[0];
    251            OldDist[0]=Distance;
    252          }
    253          
    254          
    255          inline void InsertLastMatch(int Length,int Distance)
    256          {
    257            LastDist=Distance;
    258            LastLength=Length;
    259          }
    260          
    261          

   \                                 In segment CODE, align 4, keep-with-next
    262          void CopyString(int Length,int Distance)
    263          {
    264            int DestPtr=UnpPtr-Distance;
   \                     CopyString:
   \   00000000   ........           LDR      R2,??DataTable83  ;; UnpPtr
    265            if (DestPtr<MAXWINSIZE-260 && UnpPtr<MAXWINSIZE-260)
   \   00000004   ........           LDR      R3,??DataTable79  ;; MAXWINSIZE
   \   00000008   70002DE9           PUSH     {R4-R6}
   \   0000000C   00C092E5           LDR      R12,[R2, #+0]
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   01104CE0           SUB      R1,R12,R1
   \   00000018   0340E0E3           MVN      R4,#+3
   \   0000001C   404FC4E3           BIC      R4,R4,#0x100
   \   00000020   034084E0           ADD      R4,R4,R3
   \   00000024   ........           LDR      R3,??DataTable80  ;; Window
   \   00000028   040051E1           CMP      R1,R4
   \   0000002C   04005CB1           CMPLT    R12,R4
   \   00000030   180000AA           BGE      ??CopyString_0
    266            {
    267              Window[UnpPtr++]=Window[DestPtr++];
   \                     ??CopyString_1:
   \   00000034   004093E5           LDR      R4,[R3, #+0]
   \   00000038   00C092E5           LDR      R12,[R2, #+0]
   \   0000003C   0450D1E7           LDRB     R5,[R1, +R4]
   \   00000040   011081E2           ADD      R1,R1,#+1
    268              while (--Length>0)
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   0450CCE7           STRB     R5,[R12, +R4]
   \   0000004C   004092E5           LDR      R4,[R2, #+0]
   \   00000050   010050E3           CMP      R0,#+1
   \   00000054   014084E2           ADD      R4,R4,#+1
   \   00000058   004082E5           STR      R4,[R2, #+0]
   \   0000005C   110000BA           BLT      ??CopyString_2
   \   00000060   F3FFFFEA           B        ??CopyString_1
    269                Window[UnpPtr++]=Window[DestPtr++];
    270            }
    271            else
    272              while (Length--)
    273              {
    274                Window[UnpPtr]=Window[DestPtr++ & MAXWINMASK];
   \                     ??CopyString_3:
   \   00000064   ........           LDR      R12,??DataTable34  ;; MAXWINMASK
   \   00000068   004093E5           LDR      R4,[R3, #+0]
   \   0000006C   00609CE5           LDR      R6,[R12, #+0]
   \   00000070   005092E5           LDR      R5,[R2, #+0]
   \   00000074   016006E0           AND      R6,R6,R1
   \   00000078   0460D6E7           LDRB     R6,[R6, +R4]
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   0460C5E7           STRB     R6,[R5, +R4]
    275                UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   00000084   004092E5           LDR      R4,[R2, #+0]
   \   00000088   00509CE5           LDR      R5,[R12, #+0]
   \   0000008C   014084E2           ADD      R4,R4,#+1
   \   00000090   044005E0           AND      R4,R5,R4
   \   00000094   004082E5           STR      R4,[R2, #+0]
    276              }
   \                     ??CopyString_0:
   \   00000098   0040A0E1           MOV      R4,R0
   \   0000009C   010044E2           SUB      R0,R4,#+1
   \   000000A0   000054E3           CMP      R4,#+0
   \   000000A4   EEFFFF1A           BNE      ??CopyString_3
    277          }
   \                     ??CopyString_2:
   \   000000A8   7000BDE8           POP      {R4-R6}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
    278          
    279          

   \                                 In segment CODE, align 4, keep-with-next
    280          int DecodeNumber(int pos)
    281          {
   \                     DecodeNumber:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    282            int Bits;
    283            int BitField=getbits() & 0xfffe;
   \   00000008   ........           BL       getbits
   \   0000000C   FE10A0E3           MOV      R1,#+254
   \   00000010   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000014   004001E0           AND      R4,R1,R0
    284            if (BitField<LL[pos].DecodeLen[8])
   \   00000018   ........           LDR      R1,??DataTable25  ;; LL
   \   0000001C   8C00A0E3           MOV      R0,#+140
   \   00000020   901525E0           MLA      R5,R0,R5,R1
   \   00000024   240095E5           LDR      R0,[R5, #+36]
   \   00000028   000054E1           CMP      R4,R0
   \   0000002C   1C0000AA           BGE      ??DecodeNumber_0
    285              if (BitField<LL[pos].DecodeLen[4])
   \   00000030   140095E5           LDR      R0,[R5, #+20]
   \   00000034   000054E1           CMP      R4,R0
   \   00000038   0C0000AA           BGE      ??DecodeNumber_1
    286                if (BitField<LL[pos].DecodeLen[2])
   \   0000003C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000040   000054E1           CMP      R4,R0
   \   00000044   040000AA           BGE      ??DecodeNumber_2
    287                  if (BitField<LL[pos].DecodeLen[1])
   \   00000048   080095E5           LDR      R0,[R5, #+8]
   \   0000004C   000054E1           CMP      R4,R0
   \   00000050   0260A0A3           MOVGE    R6,#+2
    288                    Bits=1;
   \   00000054   0160A0B3           MOVLT    R6,#+1
   \   00000058   2A0000EA           B        ??DecodeNumber_3
    289                  else
    290                    Bits=2;
    291                else
    292                  if (BitField<LL[pos].DecodeLen[3])
   \                     ??DecodeNumber_2:
   \   0000005C   100095E5           LDR      R0,[R5, #+16]
   \   00000060   000054E1           CMP      R4,R0
   \   00000064   0460A0A3           MOVGE    R6,#+4
    293                    Bits=3;
   \   00000068   0360A0B3           MOVLT    R6,#+3
   \   0000006C   250000EA           B        ??DecodeNumber_3
    294                  else
    295                    Bits=4;
    296              else
    297                if (BitField<LL[pos].DecodeLen[6])
   \                     ??DecodeNumber_1:
   \   00000070   1C0095E5           LDR      R0,[R5, #+28]
   \   00000074   000054E1           CMP      R4,R0
   \   00000078   040000AA           BGE      ??DecodeNumber_4
    298                  if (BitField<LL[pos].DecodeLen[5])
   \   0000007C   180095E5           LDR      R0,[R5, #+24]
   \   00000080   000054E1           CMP      R4,R0
   \   00000084   0660A0A3           MOVGE    R6,#+6
    299                    Bits=5;
   \   00000088   0560A0B3           MOVLT    R6,#+5
   \   0000008C   1D0000EA           B        ??DecodeNumber_3
    300                  else
    301                    Bits=6;
    302                else
    303                  if (BitField<LL[pos].DecodeLen[7])
   \                     ??DecodeNumber_4:
   \   00000090   200095E5           LDR      R0,[R5, #+32]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0860A0A3           MOVGE    R6,#+8
    304                    Bits=7;
   \   0000009C   0760A0B3           MOVLT    R6,#+7
   \   000000A0   180000EA           B        ??DecodeNumber_3
    305                  else
    306                    Bits=8;
    307            else
    308              if (BitField<LL[pos].DecodeLen[12])
   \                     ??DecodeNumber_0:
   \   000000A4   340095E5           LDR      R0,[R5, #+52]
   \   000000A8   000054E1           CMP      R4,R0
   \   000000AC   0C0000AA           BGE      ??DecodeNumber_5
    309                if (BitField<LL[pos].DecodeLen[10])
   \   000000B0   2C0095E5           LDR      R0,[R5, #+44]
   \   000000B4   000054E1           CMP      R4,R0
   \   000000B8   040000AA           BGE      ??DecodeNumber_6
    310                  if (BitField<LL[pos].DecodeLen[9])
   \   000000BC   280095E5           LDR      R0,[R5, #+40]
   \   000000C0   000054E1           CMP      R4,R0
   \   000000C4   0A60A0A3           MOVGE    R6,#+10
    311                    Bits=9;
   \   000000C8   0960A0B3           MOVLT    R6,#+9
   \   000000CC   0D0000EA           B        ??DecodeNumber_3
    312                  else
    313                    Bits=10;
    314                else
    315                  if (BitField<LL[pos].DecodeLen[11])
   \                     ??DecodeNumber_6:
   \   000000D0   300095E5           LDR      R0,[R5, #+48]
   \   000000D4   000054E1           CMP      R4,R0
   \   000000D8   0C60A0A3           MOVGE    R6,#+12
    316                    Bits=11;
   \   000000DC   0B60A0B3           MOVLT    R6,#+11
   \   000000E0   080000EA           B        ??DecodeNumber_3
    317                  else
    318                    Bits=12;
    319              else
    320                if (BitField<LL[pos].DecodeLen[14])
   \                     ??DecodeNumber_5:
   \   000000E4   3C0095E5           LDR      R0,[R5, #+60]
   \   000000E8   000054E1           CMP      R4,R0
   \   000000EC   040000AA           BGE      ??DecodeNumber_7
    321                  if (BitField<LL[pos].DecodeLen[13])
   \   000000F0   380095E5           LDR      R0,[R5, #+56]
   \   000000F4   000054E1           CMP      R4,R0
   \   000000F8   0E60A0A3           MOVGE    R6,#+14
    322                    Bits=13;
   \   000000FC   0D60A0B3           MOVLT    R6,#+13
   \   00000100   000000EA           B        ??DecodeNumber_3
    323                  else
    324                    Bits=14;
    325                else
    326                  Bits=15;
   \                     ??DecodeNumber_7:
   \   00000104   0F60A0E3           MOV      R6,#+15
    327          
    328            addbits(Bits);
   \                     ??DecodeNumber_3:
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   ........           BL       addbits
    329            int N=LL[pos].DecodePos[Bits]+((BitField-LL[pos].DecodeLen[Bits-1])>>(16-Bits));
   \   00000110   060185E0           ADD      R0,R5,R6, LSL #+2
   \   00000114   441090E5           LDR      R1,[R0, #+68]
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   102066E2           RSB      R2,R6,#+16
   \   00000120   000044E0           SUB      R0,R4,R0
   \   00000124   500291E0           ADDS     R0,R1,R0, ASR R2
    330            if (N<0 || N>=LL[pos].MaxNum)
   \   00000128   0200004A           BMI      ??DecodeNumber_8
   \   0000012C   001095E5           LDR      R1,[R5, #+0]
   \   00000130   010050E1           CMP      R0,R1
   \   00000134   000000BA           BLT      ??DecodeNumber_9
    331              N=0;
   \                     ??DecodeNumber_8:
   \   00000138   0000A0E3           MOV      R0,#+0
    332            return(DecodeN[LL[pos].DecodePtr+N]);
   \                     ??DecodeNumber_9:
   \   0000013C   841095E5           LDR      R1,[R5, #+132]
   \   00000140   010080E0           ADD      R0,R0,R1
   \   00000144   ........           LDR      R1,??DataTable91  ;; DecodeN
   \   00000148   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   0000014C   7080BDE8           POP      {R4-R6,PC}       ;; return
    333          }
    334          
    335          

   \                                 In segment CODE, align 4, keep-with-next
    336          void Unpack29(bool Solid)
    337          {
   \                     Unpack29:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable42  ;; FileExtracted
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R0,??DataTable41  ;; Suspended
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0D00001A           BNE      ??Unpack29_0
    338            int Bits;  
    339            
    340            FileExtracted=true;
    341          
    342            if (!Suspended)
    343            {
    344              UnpInitData(Solid);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       UnpInitData
    345              if (!UnpReadBuf())
   \   0000002C   ........           BL       UnpReadBuf
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F08FBD08           POPEQ    {R4-R11,PC}
    346                return;
    347              if ((!Solid || !TablesRead) && !ReadTables())
   \   00000038   000054E3           CMP      R4,#+0
   \   0000003C   0300000A           BEQ      ??Unpack29_1
   \   00000040   ........           LDR      R0,??DataTable74  ;; TablesRead
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0200001A           BNE      ??Unpack29_0
   \                     ??Unpack29_1:
   \   00000050   ........           BL       ReadTables
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F08FBD08           POPEQ    {R4-R11,PC}
    348                return;
    349            }
    350          
    351            if (PPMError)
   \                     ??Unpack29_0:
   \   0000005C   ........           LDR      R0,??DataTable86  ;; PPMError
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   F08FBD18           POPNE    {R4-R11,PC}
   \   0000006C   ........           LDR      R6,??DataTable78  ;; LastDist
   \   00000070   ........           LDR      R11,??DataTable72  ;; LowDistRepCount
   \   00000074   060000EA           B        ??Unpack29_2
    352              return;
    353          
    354            while (true)
    355            {
    356              UnpPtr&=MAXWINMASK;
    357          
    358              if (InAddr>ReadBorder)
    359              {
    360                if (!UnpReadBuf())
    361                  break;
    362              }
    363              if (((WrPtr-UnpPtr) & MAXWINMASK)<260 && WrPtr!=UnpPtr)
    364              {
    365                UnpWriteBuf();
    366                if (WrittenFileSize>DestUnpSize)
    367                  return;
    368                if (Suspended)
    369                {
    370                  FileExtracted=false;
    371                  return;
    372                }
    373              }
    374          
    375              if (UnpBlockType==BLOCK_PPM)
    376                return;//add
    377          
    378              int Number=DecodeNumber(0);
    379              if (Number<256)
    380              {
    381                Window[UnpPtr++]=Number;
   \                     ??Unpack29_3:
   \   00000078   ........           LDR      R2,??DataTable80  ;; Window
   \   0000007C   001094E5           LDR      R1,[R4, #+0]
   \   00000080   002092E5           LDR      R2,[R2, #+0]
   \   00000084   0200C1E7           STRB     R0,[R1, +R2]
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   010080E2           ADD      R0,R0,#+1
   \   00000090   000084E5           STR      R0,[R4, #+0]
    382                continue;
    383              }
   \                     ??Unpack29_2:
   \   00000094   ........           LDR      R5,??DataTable34  ;; MAXWINMASK
   \   00000098   ........           LDR      R4,??DataTable83  ;; UnpPtr
   \   0000009C   001095E5           LDR      R1,[R5, #+0]
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000001E0           AND      R0,R1,R0
   \   000000A8   ........           LDR      R1,??DataTable85  ;; InAddr
   \   000000AC   000084E5           STR      R0,[R4, #+0]
   \   000000B0   ........           LDR      R0,??DataTable89  ;; ReadBorder
   \   000000B4   001091E5           LDR      R1,[R1, #+0]
   \   000000B8   000090E5           LDR      R0,[R0, #+0]
   \   000000BC   010050E1           CMP      R0,R1
   \   000000C0   020000AA           BGE      ??Unpack29_4
   \   000000C4   ........           BL       UnpReadBuf
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   7700000A           BEQ      ??Unpack29_5
   \                     ??Unpack29_4:
   \   000000D0   ........           LDR      R1,??DataTable105  ;; WrPtr
   \   000000D4   000094E5           LDR      R0,[R4, #+0]
   \   000000D8   001091E5           LDR      R1,[R1, #+0]
   \   000000DC   003095E5           LDR      R3,[R5, #+0]
   \   000000E0   002041E0           SUB      R2,R1,R0
   \   000000E4   022003E0           AND      R2,R3,R2
   \   000000E8   410F52E3           CMP      R2,#+260
   \   000000EC   100000AA           BGE      ??Unpack29_6
   \   000000F0   000051E1           CMP      R1,R0
   \   000000F4   0E00000A           BEQ      ??Unpack29_6
   \   000000F8   ........           BL       UnpWriteBuf
   \   000000FC   ........           LDR      R0,??DataTable63  ;; DestUnpSize
   \   00000100   ........           LDR      R1,??DataTable87  ;; WrittenFileSize
   \   00000104   000090E5           LDR      R0,[R0, #+0]
   \   00000108   001091E5           LDR      R1,[R1, #+0]
   \   0000010C   010050E1           CMP      R0,R1
   \   00000110   F08FBDB8           POPLT    {R4-R11,PC}
   \   00000114   ........           LDR      R0,??DataTable41  ;; Suspended
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   0300000A           BEQ      ??Unpack29_6
   \   00000124   ........           LDR      R0,??DataTable42  ;; FileExtracted
   \   00000128   0010A0E3           MOV      R1,#+0
   \   0000012C   001080E5           STR      R1,[R0, #+0]
   \   00000130   F08FBDE8           POP      {R4-R11,PC}
   \                     ??Unpack29_6:
   \   00000134   ........           LDR      R0,??DataTable69  ;; UnpBlockType
   \   00000138   000090E5           LDR      R0,[R0, #+0]
   \   0000013C   010050E3           CMP      R0,#+1
   \   00000140   F08FBD08           POPEQ    {R4-R11,PC}
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   ........           BL       DecodeNumber
   \   0000014C   400F50E3           CMP      R0,#+256
   \   00000150   C8FFFFBA           BLT      ??Unpack29_3
    384              if (Number>=271)
   \   00000154   ........           LDR      R4,??DataTable75  ;; OldDist
   \   00000158   ........           LDR      R8,??DataTable45  ;; LBits
   \   0000015C   ........           LDR      R9,??DataTable46  ;; LDecode
   \   00000160   ........           LDR      R5,??DataTable77  ;; LastLength
   \   00000164   0F10A0E3           MOV      R1,#+15
   \   00000168   401F81E3           ORR      R1,R1,#0x100
   \   0000016C   010050E1           CMP      R0,R1
   \   00000170   490000BA           BLT      ??Unpack29_7
    385              {
    386                int Length=(LDecode[Number-=271]&0xff)+3;
   \   00000174   001061E2           RSB      R1,R1,#+0
   \   00000178   000081E0           ADD      R0,R1,R0
   \   0000017C   0910D0E7           LDRB     R1,[R0, +R9]
    387                if ((Bits=(LBits[Number]&0xff))>0)
   \   00000180   0880D0E7           LDRB     R8,[R0, +R8]
   \   00000184   037081E2           ADD      R7,R1,#+3
   \   00000188   010058E3           CMP      R8,#+1
   \   0000018C   050000BA           BLT      ??Unpack29_8
    388                {
    389                  Length+=getbits()>>(16-Bits);
   \   00000190   ........           BL       getbits
   \   00000194   0810A0E1           MOV      R1,R8
   \   00000198   101061E2           RSB      R1,R1,#+16
   \   0000019C   507187E0           ADD      R7,R7,R0, ASR R1
    390                  addbits(Bits);
   \   000001A0   0800A0E1           MOV      R0,R8
   \   000001A4   ........           BL       addbits
    391                }
    392          
    393                int DistNumber=DecodeNumber(1);
   \                     ??Unpack29_8:
   \   000001A8   0100A0E3           MOV      R0,#+1
   \   000001AC   ........           BL       DecodeNumber
    394                int Distance=DDecode[DistNumber]+1;
   \   000001B0   ........           LDR      R1,??DataTable48  ;; DDecode
   \   000001B4   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   000001B8   018081E2           ADD      R8,R1,#+1
    395                if ((Bits=(DBits[DistNumber]&0xff))>0)
   \   000001BC   ........           LDR      R1,??DataTable49  ;; DBits
   \   000001C0   0190D0E7           LDRB     R9,[R0, +R1]
   \   000001C4   010059E3           CMP      R9,#+1
   \   000001C8   220000BA           BLT      ??Unpack29_9
    396                {
    397                  if (DistNumber>9)
   \   000001CC   0A0050E3           CMP      R0,#+10
   \   000001D0   1A0000BA           BLT      ??Unpack29_10
    398                  {
    399                    if (Bits>4)
   \   000001D4   050059E3           CMP      R9,#+5
   \   000001D8   060000BA           BLT      ??Unpack29_11
    400                    {
    401                      Distance+=((getbits()>>(20-Bits))<<4);
   \   000001DC   ........           BL       getbits
   \   000001E0   0910A0E1           MOV      R1,R9
   \   000001E4   141061E2           RSB      R1,R1,#+20
   \   000001E8   5001A0E1           ASR      R0,R0,R1
   \   000001EC   008288E0           ADD      R8,R8,R0, LSL #+4
    402                      addbits(Bits-4);
   \   000001F0   040049E2           SUB      R0,R9,#+4
   \   000001F4   ........           BL       addbits
    403                    }
    404                    if (LowDistRepCount>0)
   \                     ??Unpack29_11:
   \   000001F8   ........           LDR      R9,??DataTable71  ;; PrevLowDist
   \   000001FC   000099E5           LDR      R0,[R9, #+0]
   \   00000200   08A080E0           ADD      R10,R0,R8
   \   00000204   00009BE5           LDR      R0,[R11, #+0]
   \   00000208   010050E3           CMP      R0,#+1
   \   0000020C   030000BA           BLT      ??Unpack29_12
    405                    {
    406                      LowDistRepCount--;
   \   00000210   010040E2           SUB      R0,R0,#+1
   \                     ??Unpack29_13:
   \   00000214   00008BE5           STR      R0,[R11, #+0]
    407                      Distance+=PrevLowDist;
   \   00000218   0A80A0E1           MOV      R8,R10
   \   0000021C   0D0000EA           B        ??Unpack29_9
    408                    }
    409                    else
    410                    {
    411                      int LowDist=DecodeNumber(4);
   \                     ??Unpack29_12:
   \   00000220   0400A0E3           MOV      R0,#+4
   \   00000224   ........           BL       DecodeNumber
    412                      if (LowDist==16)
   \   00000228   100050E3           CMP      R0,#+16
    413                      {
    414                        LowDistRepCount=LOW_DIST_REP_COUNT-1;
   \   0000022C   0F00A003           MOVEQ    R0,#+15
   \   00000230   F7FFFF0A           BEQ      ??Unpack29_13
    415                        Distance+=PrevLowDist;
    416                      }
    417                      else
    418                      {
    419                        Distance+=LowDist;
   \   00000234   088080E0           ADD      R8,R0,R8
    420                        PrevLowDist=LowDist;
   \   00000238   000089E5           STR      R0,[R9, #+0]
   \   0000023C   050000EA           B        ??Unpack29_9
    421                      }
    422                    }
    423                  }
    424                  else
    425                  {
    426                    Distance+=getbits()>>(16-Bits);
   \                     ??Unpack29_10:
   \   00000240   ........           BL       getbits
   \   00000244   0910A0E1           MOV      R1,R9
   \   00000248   101061E2           RSB      R1,R1,#+16
   \   0000024C   508188E0           ADD      R8,R8,R0, ASR R1
    427                    addbits(Bits);
   \   00000250   0900A0E1           MOV      R0,R9
   \   00000254   ........           BL       addbits
    428                  }
    429                }
    430          
    431                if (Distance>=0x2000)
    432                {
    433                  Length++;
    434                  if (Distance>=0x40000L)
    435                    Length++;
    436                }
    437          
    438                InsertOldDist(Distance);
   \                     ??Unpack29_9:
   \   00000258   080094E5           LDR      R0,[R4, #+8]
   \   0000025C   800D58E3           CMP      R8,#+8192
   \   00000260   0C0084E5           STR      R0,[R4, #+12]
   \   00000264   040094E5           LDR      R0,[R4, #+4]
   \   00000268   017087A2           ADDGE    R7,R7,#+1
   \   0000026C   080084E5           STR      R0,[R4, #+8]
   \   00000270   000094E5           LDR      R0,[R4, #+0]
   \   00000274   400A58A3           CMPGE    R8,#+262144
   \   00000278   017087A2           ADDGE    R7,R7,#+1
   \   0000027C   040084E5           STR      R0,[R4, #+4]
   \   00000280   008084E5           STR      R8,[R4, #+0]
    439                InsertLastMatch(Length,Distance);
   \   00000284   008086E5           STR      R8,[R6, #+0]
   \   00000288   007085E5           STR      R7,[R5, #+0]
    440                CopyString(Length,Distance);
   \   0000028C   0810A0E1           MOV      R1,R8
   \   00000290   0700A0E1           MOV      R0,R7
   \                     ??Unpack29_14:
   \   00000294   ........           BL       CopyString
    441                continue;
   \   00000298   7DFFFFEA           B        ??Unpack29_2
    442              }
    443              if (Number==256)
   \                     ??Unpack29_7:
   \   0000029C   400F50E3           CMP      R0,#+256
   \   000002A0   0400001A           BNE      ??Unpack29_15
    444              {
    445                if (!ReadEndOfBlock())
   \   000002A4   ........           BL       ReadEndOfBlock
   \   000002A8   000050E3           CMP      R0,#+0
   \   000002AC   78FFFF1A           BNE      ??Unpack29_2
    446                  break;
    447                continue;
    448              }
    449              if (Number==257)
    450              {
    451                //if (!ReadVMCode())
    452                  break;
    453                //continue;
    454              }
    455              if (Number==258)
    456              {
    457                if (LastLength!=0)
    458                  CopyString(LastLength,LastDist);
    459                continue;
    460              }
    461              if (Number<263)
    462              {
    463                int DistNum=Number-259;
    464                int Distance=OldDist[DistNum];
    465                for (int I=DistNum;I>0;I--)
    466                  OldDist[I]=OldDist[I-1];
    467                OldDist[0]=Distance;
    468          
    469                int LengthNumber=DecodeNumber(2);
    470                int Length=(LDecode[LengthNumber]&0xff)+2;
    471                if ((Bits=(LBits[LengthNumber]&0xff))>0)
    472                {
    473                  Length+=getbits()>>(16-Bits);
    474                  addbits(Bits);
    475                }
    476                InsertLastMatch(Length,Distance);
    477                CopyString(Length,Distance);
    478                continue;
    479              }
    480              if (Number<272)
    481              {
    482                int Distance=(SDDecode[Number-=263]&0xff)+1;
    483                if ((Bits=(SDBits[Number]&0xff))>0)
    484                {
    485                  Distance+=getbits()>>(16-Bits);
    486                  addbits(Bits);
    487                }
    488                InsertOldDist(Distance);
    489                InsertLastMatch(2,Distance);
    490                CopyString(2,Distance);
    491                continue;
    492              }
    493            }
    494            UnpWriteBuf();
   \                     ??Unpack29_5:
   \   000002B0   ........           BL       UnpWriteBuf
    495          }
   \   000002B4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??Unpack29_15:
   \   000002B8   0E10C1E3           BIC      R1,R1,#0xE
   \   000002BC   010050E1           CMP      R0,R1
   \   000002C0   FAFFFF0A           BEQ      ??Unpack29_5
   \   000002C4   011081E2           ADD      R1,R1,#+1
   \   000002C8   010050E1           CMP      R0,R1
   \   000002CC   0400001A           BNE      ??Unpack29_16
   \   000002D0   000095E5           LDR      R0,[R5, #+0]
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   6DFFFF0A           BEQ      ??Unpack29_2
   \   000002DC   001096E5           LDR      R1,[R6, #+0]
   \   000002E0   EBFFFFEA           B        ??Unpack29_14
   \                     ??Unpack29_16:
   \   000002E4   051081E3           ORR      R1,R1,#0x5
   \   000002E8   010050E1           CMP      R0,R1
   \   000002EC   1E0000AA           BGE      ??Unpack29_17
   \   000002F0   0210E0E3           MVN      R1,#+2
   \   000002F4   401FC1E3           BIC      R1,R1,#0x100
   \   000002F8   000081E0           ADD      R0,R1,R0
   \   000002FC   007194E7           LDR      R7,[R4, +R0, LSL #+2]
   \   00000300   010050E3           CMP      R0,#+1
   \   00000304   050000BA           BLT      ??Unpack29_18
   \                     ??Unpack29_19:
   \   00000308   041044E2           SUB      R1,R4,#+4
   \   0000030C   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000310   001184E7           STR      R1,[R4, +R0, LSL #+2]
   \   00000314   010040E2           SUB      R0,R0,#+1
   \   00000318   010050E3           CMP      R0,#+1
   \   0000031C   F9FFFFAA           BGE      ??Unpack29_19
   \                     ??Unpack29_18:
   \   00000320   007084E5           STR      R7,[R4, #+0]
   \   00000324   0200A0E3           MOV      R0,#+2
   \   00000328   ........           BL       DecodeNumber
   \   0000032C   0910D0E7           LDRB     R1,[R0, +R9]
   \   00000330   0890D0E7           LDRB     R9,[R0, +R8]
   \   00000334   024081E2           ADD      R4,R1,#+2
   \   00000338   010059E3           CMP      R9,#+1
   \   0000033C   050000BA           BLT      ??Unpack29_20
   \   00000340   ........           BL       getbits
   \   00000344   0910A0E1           MOV      R1,R9
   \   00000348   101061E2           RSB      R1,R1,#+16
   \   0000034C   504184E0           ADD      R4,R4,R0, ASR R1
   \   00000350   0900A0E1           MOV      R0,R9
   \   00000354   ........           BL       addbits
   \                     ??Unpack29_20:
   \   00000358   007086E5           STR      R7,[R6, #+0]
   \   0000035C   004085E5           STR      R4,[R5, #+0]
   \   00000360   0710A0E1           MOV      R1,R7
   \   00000364   0400A0E1           MOV      R0,R4
   \   00000368   C9FFFFEA           B        ??Unpack29_14
   \                     ??Unpack29_17:
   \   0000036C   001061E2           RSB      R1,R1,#+0
   \   00000370   000081E0           ADD      R0,R1,R0
   \   00000374   ........           LDR      R1,??DataTable51  ;; SDDecode
   \   00000378   0110D0E7           LDRB     R1,[R0, +R1]
   \   0000037C   017081E2           ADD      R7,R1,#+1
   \   00000380   ........           LDR      R1,??DataTable52  ;; SDBits
   \   00000384   0190D0E7           LDRB     R9,[R0, +R1]
   \   00000388   010059E3           CMP      R9,#+1
   \   0000038C   050000BA           BLT      ??Unpack29_21
   \   00000390   ........           BL       getbits
   \   00000394   0910A0E1           MOV      R1,R9
   \   00000398   101061E2           RSB      R1,R1,#+16
   \   0000039C   507187E0           ADD      R7,R7,R0, ASR R1
   \   000003A0   0900A0E1           MOV      R0,R9
   \   000003A4   ........           BL       addbits
   \                     ??Unpack29_21:
   \   000003A8   080094E5           LDR      R0,[R4, #+8]
   \   000003AC   007086E5           STR      R7,[R6, #+0]
   \   000003B0   0C0084E5           STR      R0,[R4, #+12]
   \   000003B4   040094E5           LDR      R0,[R4, #+4]
   \   000003B8   0710A0E1           MOV      R1,R7
   \   000003BC   080084E5           STR      R0,[R4, #+8]
   \   000003C0   000094E5           LDR      R0,[R4, #+0]
   \   000003C4   007084E5           STR      R7,[R4, #+0]
   \   000003C8   040084E5           STR      R0,[R4, #+4]
   \   000003CC   0200A0E3           MOV      R0,#+2
   \   000003D0   000085E5           STR      R0,[R5, #+0]
   \   000003D4   AEFFFFEA           B        ??Unpack29_14
    496          
    497          

   \                                 In segment CODE, align 4, keep-with-next
    498          bool ReadEndOfBlock()
    499          {
   \                     ReadEndOfBlock:
   \   00000000   B0402DE9           PUSH     {R4,R5,R7,LR}
    500            int BitField=getbits();
    501            bool NewTable,NewFile=false;
   \   00000004   0040A0E3           MOV      R4,#+0
    502            if (BitField & 0x8000)
   \   00000008   0150A0E3           MOV      R5,#+1
   \   0000000C   ........           BL       getbits
   \   00000010   800C10E3           TST      R0,#0x8000
   \   00000014   0E00000A           BEQ      ??ReadEndOfBlock_0
    503            {
    504              NewTable=true;
    505              addbits(1);
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           BL       addbits
   \   00000020   0170A0E3           MOV      R7,#+1
   \                     ??ReadEndOfBlock_1:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     ??ReadEndOfBlock_2:
   \   00000028   ........           LDR      R1,??DataTable74  ;; TablesRead
    506            }
    507            else
    508            {
    509              NewFile=true;
    510              NewTable=(BitField & 0x4000);
    511              addbits(2);
    512            }
    513            TablesRead=!NewTable;
    514            return !(NewFile || NewTable && !ReadTables());
   \   0000002C   000054E3           CMP      R4,#+0
   \   00000030   000081E5           STR      R0,[R1, #+0]
   \   00000034   0E00001A           BNE      ??ReadEndOfBlock_3
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   0D00000A           BEQ      ??ReadEndOfBlock_4
   \   00000040   ........           BL       ReadTables
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0900000A           BEQ      ??ReadEndOfBlock_3
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   B080BDE8           POP      {R4,R5,R7,PC}
   \                     ??ReadEndOfBlock_0:
   \   00000054   0140A0E3           MOV      R4,#+1
   \   00000058   407C00E2           AND      R7,R0,#0x4000
   \   0000005C   0200A0E3           MOV      R0,#+2
   \   00000060   ........           BL       addbits
   \   00000064   000057E3           CMP      R7,#+0
   \   00000068   EDFFFF1A           BNE      ??ReadEndOfBlock_1
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   ECFFFFEA           B        ??ReadEndOfBlock_2
   \                     ??ReadEndOfBlock_3:
   \   00000074   0050A0E3           MOV      R5,#+0
   \                     ??ReadEndOfBlock_4:
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   B080BDE8           POP      {R4,R5,R7,PC}
    515          }
    516          

   \                                 In segment CODE, align 4, keep-with-next
    517          bool UnpReadBuf()
    518          {
   \                     UnpReadBuf:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    519            int DataSize=ReadTop-InAddr;
   \   00000004   ........           LDR      R4,??DataTable99  ;; ReadTop
   \   00000008   ........           LDR      R8,??DataTable85  ;; InAddr
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   001098E5           LDR      R1,[R8, #+0]
   \   00000014   017050E0           SUBS     R7,R0,R1
    520            if (DataSize<0)
    521              return(false);
   \   00000018   0000A043           MOVMI    R0,#+0
   \   0000001C   F081BD48           POPMI    {R4-R8,PC}
    522            if (InAddr>MAX_SIZE/2)
   \   00000020   ........           LDR      R6,??DataTable56  ;; InBuf
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   402C82E3           ORR      R2,R2,#0x4000
   \   00000030   020051E1           CMP      R1,R2
   \   00000034   080000BA           BLT      ??UnpReadBuf_0
    523            {
    524              if (DataSize>0)
   \   00000038   010057E3           CMP      R7,#+1
   \   0000003C   030000BA           BLT      ??UnpReadBuf_1
    525                //memmove(InBuf,InBuf+InAddr,DataSize);!!!!
    526                memcpy(InBuf,InBuf+InAddr,DataSize);
   \   00000040   000096E5           LDR      R0,[R6, #+0]
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   001081E0           ADD      R1,R1,R0
   \   0000004C   ........           _BLF     memcpy,??memcpy??rA
    527              InAddr=0;
   \                     ??UnpReadBuf_1:
   \   00000050   005088E5           STR      R5,[R8, #+0]
    528              ReadTop=DataSize;
   \   00000054   007084E5           STR      R7,[R4, #+0]
   \   00000058   000000EA           B        ??UnpReadBuf_2
    529            }
    530            else
    531              DataSize=ReadTop;
   \                     ??UnpReadBuf_0:
   \   0000005C   0070A0E1           MOV      R7,R0
    532            int ReadCode=UnpRead(InBuf+DataSize,(MAX_SIZE-DataSize)&~0xf);
   \                     ??UnpReadBuf_2:
   \   00000060   800C67E2           RSB      R0,R7,#+32768
   \   00000064   0F10C0E3           BIC      R1,R0,#0xF
   \   00000068   000096E5           LDR      R0,[R6, #+0]
   \   0000006C   000087E0           ADD      R0,R7,R0
   \   00000070   ........           BL       UnpRead
    533            if (ReadCode>0)
   \   00000074   010050E3           CMP      R0,#+1
    534              ReadTop+=ReadCode;
   \   00000078   001094A5           LDRGE    R1,[R4, #+0]
   \   0000007C   011080A0           ADDGE    R1,R0,R1
   \   00000080   001084A5           STRGE    R1,[R4, #+0]
    535            ReadBorder=ReadTop-30;
   \   00000084   ........           LDR      R1,??DataTable89  ;; ReadBorder
   \   00000088   002094E5           LDR      R2,[R4, #+0]
    536            return(ReadCode!=-1);
   \   0000008C   010070E3           CMN      R0,#+1
   \   00000090   1E2042E2           SUB      R2,R2,#+30
   \   00000094   002081E5           STR      R2,[R1, #+0]
   \   00000098   0100A013           MOVNE    R0,#+1
   \   0000009C   F081BD18           POPNE    {R4-R8,PC}
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   F081BDE8           POP      {R4-R8,PC}       ;; return
    537          }
    538          
    539          

   \                                 In segment CODE, align 4, keep-with-next
    540          void UnpWriteBuf()
    541          {
   \                     UnpWriteBuf:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    542            int WrittenBorder=WrPtr;
    543            //int WriteSize=(UnpPtr-WrittenBorder)&MAXWINMASK;
    544            UnpWriteArea(WrittenBorder,UnpPtr);
   \   00000004   ........           LDR      R4,??DataTable105  ;; WrPtr
   \   00000008   ........           LDR      R5,??DataTable83  ;; UnpPtr
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   001095E5           LDR      R1,[R5, #+0]
   \   00000014   ........           BL       UnpWriteArea
    545            WrPtr=UnpPtr;
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   000084E5           STR      R0,[R4, #+0]
    546          }
   \   00000020   3080BDE8           POP      {R4,R5,PC}       ;; return
    547          

   \                                 In segment CODE, align 4, keep-with-next
    548          void UnpWriteArea(int StartPtr,int EndPtr)
    549          {
    550            if (EndPtr!=StartPtr)
   \                     UnpWriteArea:
   \   00000000   000051E1           CMP      R1,R0
    551              UnpSomeRead=true;
   \   00000004   ........           LDRNE    R2,??DataTable60  ;; UnpSomeRead
   \   00000008   0130A013           MOVNE    R3,#+1
   \   0000000C   00308215           STRNE    R3,[R2, #+0]
    552          /*
    553            if (EndPtr<StartPtr)
    554            {
    555              UnpWriteData(&Window[StartPtr],-StartPtr & MAXWINMASK);
    556              UnpWriteData(Window,EndPtr);
    557              UnpAllBuf=true;
    558            }
    559            else*/
    560              UnpWriteData(&Window[StartPtr],EndPtr-StartPtr);
   \   00000010   ........           LDR      R2,??DataTable80  ;; Window
   \   00000014   001041E0           SUB      R1,R1,R0
   \   00000018   002092E5           LDR      R2,[R2, #+0]
   \   0000001C   020080E0           ADD      R0,R0,R2
   \   00000020   ........           B        UnpWriteData     ;; tailcall
    561          }
    562          
    563          

   \                                 In segment CODE, align 4, keep-with-next
    564          void UnpWriteData(char *Data,int Size)
    565          {
   \                     UnpWriteData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    566            if (WrittenFileSize>=DestUnpSize)
   \   00000004   ........           LDR      R5,??DataTable87  ;; WrittenFileSize
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   ........           LDR      R1,??DataTable63  ;; DestUnpSize
   \   00000010   003095E5           LDR      R3,[R5, #+0]
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   010053E1           CMP      R3,R1
   \   0000001C   3080BDA8           POPGE    {R4,R5,PC}
    567              return;
    568            int WriteSize=Size;
   \   00000020   0420A0E1           MOV      R2,R4
    569            int LeftToWrite=DestUnpSize-WrittenFileSize;
   \   00000024   031041E0           SUB      R1,R1,R3
    570            if (WriteSize>LeftToWrite)
    571              WriteSize=LeftToWrite;
    572            UnpWrite(Data,WriteSize);
   \   00000028   ........           LDR      R3,??DataTable109  ;; err
   \   0000002C   020051E1           CMP      R1,R2
   \   00000030   0120A0B1           MOVLT    R2,R1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   ........           LDR      R0,??DataTable108  ;; outhandle
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   0C0000EF           SWI      +12
    573            WrittenFileSize+=Size;
   \   00000044   000095E5           LDR      R0,[R5, #+0]
   \   00000048   000084E0           ADD      R0,R4,R0
   \   0000004C   000085E5           STR      R0,[R5, #+0]
    574          }
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    575          
    576          

   \                                 In segment CODE, align 4, keep-with-next
    577          bool ReadTables()
    578          {
   \                     ReadTables:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    579            int I;
    580            char BitLength[BC];
    581            char Table[HUFF_TABLE_SIZE];
    582            if (InAddr>ReadTop-25)
   \   00000004   ........           LDR      R4,??DataTable85  ;; InAddr
   \   00000008   ........           LDR      R5,??DataTable99  ;; ReadTop
   \   0000000C   6ADF4DE2           SUB      SP,SP,#+424
   \   00000010   000095E5           LDR      R0,[R5, #+0]
   \   00000014   001094E5           LDR      R1,[R4, #+0]
   \   00000018   190040E2           SUB      R0,R0,#+25
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   020000AA           BGE      ??ReadTables_0
    583              if (!UnpReadBuf())
   \   00000024   ........           BL       UnpReadBuf
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   A400000A           BEQ      ??ReadTables_1
    584                return(false);
    585            addbits((8-InBit)&7);
   \                     ??ReadTables_0:
   \   00000030   ........           LDR      R0,??DataTable84  ;; InBit
    586            int BitField=getbits();
    587            if (BitField & 0x8000)
   \   00000034   0160A0E3           MOV      R6,#+1
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   080060E2           RSB      R0,R0,#+8
   \   00000040   070000E2           AND      R0,R0,#0x7
   \   00000044   ........           BL       addbits
   \   00000048   ........           BL       getbits
   \   0000004C   ........           LDR      R1,??DataTable69  ;; UnpBlockType
   \   00000050   800C10E3           TST      R0,#0x8000
    588            {
    589              UnpBlockType=BLOCK_PPM;
   \   00000054   00608115           STRNE    R6,[R1, #+0]
    590              //return(PPM.DecodeInit(this,PPMEscChar));
    591              return false;//add
   \   00000058   0000A013           MOVNE    R0,#+0
   \   0000005C   9800001A           BNE      ??ReadTables_1
    592            }
    593            UnpBlockType=BLOCK_LZ;
    594            
    595            PrevLowDist=0;
    596            LowDistRepCount=0;
    597          
    598            if (!(BitField & 0x4000))
   \   00000060   ........           LDR      R8,??DataTable81  ;; UnpOldTable
   \   00000064   0070A0E3           MOV      R7,#+0
   \   00000068   007081E5           STR      R7,[R1, #+0]
   \   0000006C   ........           LDR      R1,??DataTable71  ;; PrevLowDist
   \   00000070   400C10E3           TST      R0,#0x4000
   \   00000074   007081E5           STR      R7,[R1, #+0]
   \   00000078   ........           LDR      R1,??DataTable72  ;; LowDistRepCount
   \   0000007C   007081E5           STR      R7,[R1, #+0]
   \   00000080   0300001A           BNE      ??ReadTables_2
    599              memset(UnpOldTable,0,sizeof(UnpOldTable));
   \   00000084   652FA0E3           MOV      R2,#+404
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   ........           BL       memset
    600            addbits(2);
   \                     ??ReadTables_2:
   \   00000094   0200A0E3           MOV      R0,#+2
   \   00000098   ........           BL       addbits
    601          
    602            for (int I=0;I<BC;I++)
   \   0000009C   0090A0E3           MOV      R9,#+0
    603            {
    604              int Length=(getbits() >> 12);
   \                     ??ReadTables_3:
   \   000000A0   ........           BL       getbits
   \   000000A4   40B6A0E1           ASR      R11,R0,#+12
    605              addbits(4);
   \   000000A8   0400A0E3           MOV      R0,#+4
   \   000000AC   ........           BL       addbits
    606              if (Length==15)
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   00A089E0           ADD      R10,R9,R0
   \   000000B8   0F005BE3           CMP      R11,#+15
   \   000000BC   1400001A           BNE      ??ReadTables_4
    607              {
    608                int ZeroCount=(getbits() >> 12);
   \   000000C0   ........           BL       getbits
   \   000000C4   40B6A0E1           ASR      R11,R0,#+12
    609                addbits(4);
   \   000000C8   0400A0E3           MOV      R0,#+4
   \   000000CC   ........           BL       addbits
    610                if (ZeroCount==0)
   \   000000D0   00005BE3           CMP      R11,#+0
    611                  BitLength[I]=15;
   \   000000D4   0F00A003           MOVEQ    R0,#+15
   \   000000D8   0000CA05           STRBEQ   R0,[R10, #+0]
   \   000000DC   0D00000A           BEQ      ??ReadTables_5
    612                else
    613                {
    614                  ZeroCount+=2;
   \   000000E0   02B08BE2           ADD      R11,R11,#+2
   \   000000E4   020000EA           B        ??ReadTables_6
    615                  while (ZeroCount-- > 0 && I<sizeof(BitLength)/sizeof(BitLength[0]))
    616                    BitLength[I++]=0;
   \                     ??ReadTables_7:
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   0070C9E7           STRB     R7,[R9, +R0]
   \   000000F0   019089E2           ADD      R9,R9,#+1
   \                     ??ReadTables_6:
   \   000000F4   0B00A0E1           MOV      R0,R11
   \   000000F8   01B040E2           SUB      R11,R0,#+1
   \   000000FC   010050E3           CMP      R0,#+1
   \   00000100   010000BA           BLT      ??ReadTables_8
   \   00000104   140059E3           CMP      R9,#+20
   \   00000108   F6FFFF3A           BCC      ??ReadTables_7
    617                  I--;
   \                     ??ReadTables_8:
   \   0000010C   019049E2           SUB      R9,R9,#+1
   \   00000110   000000EA           B        ??ReadTables_5
    618                }
    619              }
    620              else
    621                BitLength[I]=Length;
   \                     ??ReadTables_4:
   \   00000114   00B0CAE5           STRB     R11,[R10, #+0]
    622            }
   \                     ??ReadTables_5:
   \   00000118   019089E2           ADD      R9,R9,#+1
   \   0000011C   140059E3           CMP      R9,#+20
   \   00000120   DEFFFFBA           BLT      ??ReadTables_3
    623            MakeDecodeTables((char*)BitLength,3);
   \   00000124   0310A0E3           MOV      R1,#+3
   \   00000128   0D00A0E1           MOV      R0,SP
   \   0000012C   ........           BL       MakeDecodeTables
    624          
    625            const int TableSize=HUFF_TABLE_SIZE;
    626            for (I=0;I<TableSize;)
   \   00000130   0090A0E3           MOV      R9,#+0
    627            {
    628              if (InAddr>ReadTop-5)
   \                     ??ReadTables_9:
   \   00000134   000095E5           LDR      R0,[R5, #+0]
   \   00000138   001094E5           LDR      R1,[R4, #+0]
   \   0000013C   050040E2           SUB      R0,R0,#+5
   \   00000140   010050E1           CMP      R0,R1
   \   00000144   020000AA           BGE      ??ReadTables_10
    629                if (!UnpReadBuf())
   \   00000148   ........           BL       UnpReadBuf
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   5B00000A           BEQ      ??ReadTables_1
    630                  return(false);
    631              int Number=DecodeNumber(3);
   \                     ??ReadTables_10:
   \   00000154   0300A0E3           MOV      R0,#+3
   \   00000158   ........           BL       DecodeNumber
    632              if (Number<16)
   \   0000015C   100050E3           CMP      R0,#+16
   \   00000160   060000AA           BGE      ??ReadTables_11
    633              {
    634                Table[I]=(Number+UnpOldTable[I]) & 0xf;
   \   00000164   0820D9E7           LDRB     R2,[R9, +R8]
   \   00000168   14108DE2           ADD      R1,SP,#+20
   \   0000016C   000082E0           ADD      R0,R2,R0
   \   00000170   0F0000E2           AND      R0,R0,#0xF
   \   00000174   0100C9E7           STRB     R0,[R9, +R1]
    635                I++;
   \   00000178   019089E2           ADD      R9,R9,#+1
   \   0000017C   2A0000EA           B        ??ReadTables_12
    636              }
    637              else
    638                if (Number<18)
   \                     ??ReadTables_11:
   \   00000180   120050E3           CMP      R0,#+18
   \   00000184   170000AA           BGE      ??ReadTables_13
    639                {
    640                  int N;
    641                  if (Number==16)
   \   00000188   100050E3           CMP      R0,#+16
   \   0000018C   0400001A           BNE      ??ReadTables_14
    642                  {
    643                    N=(getbits() >> 13)+3;
   \   00000190   ........           BL       getbits
   \   00000194   0310A0E3           MOV      R1,#+3
   \   00000198   C0A681E0           ADD      R10,R1,R0, ASR #+13
    644                    addbits(3);
   \   0000019C   0300A0E3           MOV      R0,#+3
   \   000001A0   030000EA           B        ??ReadTables_15
    645                  }
    646                  else
    647                  {
    648                    N=(getbits() >> 9)+11;
   \                     ??ReadTables_14:
   \   000001A4   ........           BL       getbits
   \   000001A8   0B10A0E3           MOV      R1,#+11
   \   000001AC   C0A481E0           ADD      R10,R1,R0, ASR #+9
    649                    addbits(7);
   \   000001B0   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables_15:
   \   000001B4   ........           BL       addbits
    650                  }
    651                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables_16:
   \   000001B8   0A00A0E1           MOV      R0,R10
   \   000001BC   01A040E2           SUB      R10,R0,#+1
   \   000001C0   010050E3           CMP      R0,#+1
   \   000001C4   180000BA           BLT      ??ReadTables_12
   \   000001C8   650F59E3           CMP      R9,#+404
   \   000001CC   160000AA           BGE      ??ReadTables_12
    652                  {
    653                    Table[I]=Table[I-1];
   \   000001D0   14008DE2           ADD      R0,SP,#+20
   \   000001D4   000089E0           ADD      R0,R9,R0
   \   000001D8   011050E5           LDRB     R1,[R0, #-1]
    654                    I++;
   \   000001DC   019089E2           ADD      R9,R9,#+1
   \   000001E0   0010C0E5           STRB     R1,[R0, #+0]
   \   000001E4   F3FFFFEA           B        ??ReadTables_16
    655                  }
    656                }
    657                else
    658                {
    659                  int N;
    660                  if (Number==18)
   \                     ??ReadTables_13:
   \   000001E8   0400001A           BNE      ??ReadTables_17
    661                  {
    662                    N=(getbits() >> 13)+3;
   \   000001EC   ........           BL       getbits
   \   000001F0   0310A0E3           MOV      R1,#+3
   \   000001F4   C0A681E0           ADD      R10,R1,R0, ASR #+13
    663                    addbits(3);
   \   000001F8   0300A0E3           MOV      R0,#+3
   \   000001FC   030000EA           B        ??ReadTables_18
    664                  }
    665                  else
    666                  {
    667                    N=(getbits() >> 9)+11;
   \                     ??ReadTables_17:
   \   00000200   ........           BL       getbits
   \   00000204   0B10A0E3           MOV      R1,#+11
   \   00000208   C0A481E0           ADD      R10,R1,R0, ASR #+9
    668                    addbits(7);
   \   0000020C   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables_18:
   \   00000210   ........           BL       addbits
    669                  }
    670                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables_19:
   \   00000214   0A00A0E1           MOV      R0,R10
   \   00000218   01A040E2           SUB      R10,R0,#+1
   \   0000021C   010050E3           CMP      R0,#+1
   \   00000220   010000BA           BLT      ??ReadTables_12
   \   00000224   650F59E3           CMP      R9,#+404
   \   00000228   0A0000BA           BLT      ??ReadTables_20
   \                     ??ReadTables_12:
   \   0000022C   650F59E3           CMP      R9,#+404
   \   00000230   BFFFFFBA           BLT      ??ReadTables_9
    671                    Table[I++]=0;
    672                }
    673            }
    674            TablesRead=true;
   \   00000234   ........           LDR      R0,??DataTable74  ;; TablesRead
    675            if (InAddr>ReadTop)
   \   00000238   001094E5           LDR      R1,[R4, #+0]
   \   0000023C   006080E5           STR      R6,[R0, #+0]
   \   00000240   000095E5           LDR      R0,[R5, #+0]
   \   00000244   010050E1           CMP      R0,R1
   \   00000248   060000AA           BGE      ??ReadTables_21
    676              return(false);
   \   0000024C   0000A0E3           MOV      R0,#+0
   \   00000250   6ADF8DE2           ADD      SP,SP,#+424
   \   00000254   F08FBDE8           POP      {R4-R11,PC}
   \                     ??ReadTables_20:
   \   00000258   14008DE2           ADD      R0,SP,#+20
   \   0000025C   0070C9E7           STRB     R7,[R9, +R0]
   \   00000260   019089E2           ADD      R9,R9,#+1
   \   00000264   EAFFFFEA           B        ??ReadTables_19
    677            MakeDecodeTables(&Table[0],0);
   \                     ??ReadTables_21:
   \   00000268   0010A0E3           MOV      R1,#+0
   \   0000026C   14008DE2           ADD      R0,SP,#+20
   \   00000270   ........           BL       MakeDecodeTables
    678            MakeDecodeTables(&Table[NC],1);
   \   00000274   0610A0E1           MOV      R1,R6
   \   00000278   2B00A0E3           MOV      R0,#+43
   \   0000027C   400F80E3           ORR      R0,R0,#0x100
   \   00000280   14208DE2           ADD      R2,SP,#+20
   \   00000284   020080E0           ADD      R0,R0,R2
   \   00000288   ........           BL       MakeDecodeTables
    679            MakeDecodeTables(&Table[NC+DC],4);
   \   0000028C   0410A0E3           MOV      R1,#+4
   \   00000290   6700A0E3           MOV      R0,#+103
   \   00000294   400F80E3           ORR      R0,R0,#0x100
   \   00000298   14208DE2           ADD      R2,SP,#+20
   \   0000029C   020080E0           ADD      R0,R0,R2
   \   000002A0   ........           BL       MakeDecodeTables
    680            MakeDecodeTables(&Table[NC+DC+LDC],2);
   \   000002A4   0210A0E3           MOV      R1,#+2
   \   000002A8   630F8DE2           ADD      R0,SP,#+396
   \   000002AC   ........           BL       MakeDecodeTables
    681            memcpy(UnpOldTable,Table,sizeof(UnpOldTable));
   \   000002B0   652FA0E3           MOV      R2,#+404
   \   000002B4   14108DE2           ADD      R1,SP,#+20
   \   000002B8   0800A0E1           MOV      R0,R8
   \   000002BC   ........           _BLF     memcpy,??memcpy??rA
    682            return(true);
   \   000002C0   0600A0E1           MOV      R0,R6
   \                     ??ReadTables_1:
   \   000002C4   6ADF8DE2           ADD      SP,SP,#+424      ;; stack cleaning
   \   000002C8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    683          }
    684          
    685          

   \                                 In segment CODE, align 4, keep-with-next
    686          void UnpInitData(int Solid)
    687          {
   \                     UnpInitData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    688            if (!Solid)
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   1C00001A           BNE      ??UnpInitData_0
    689            {
    690              TablesRead=false;
   \   00000010   ........           LDR      R0,??DataTable74  ;; TablesRead
    691              memset(OldDist,0,sizeof(OldDist));
   \   00000014   1020A0E3           MOV      R2,#+16
   \   00000018   005080E5           STR      R5,[R0, #+0]
   \   0000001C   ........           LDR      R0,??DataTable75  ;; OldDist
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   ........           BL       memset
    692              OldDistPtr=0;
   \   00000028   ........           LDR      R0,??DataTable157  ;; OldDistPtr
    693              LastDist=LastLength=0;
    694              memset(Window,0,MAXWINSIZE);
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   005080E5           STR      R5,[R0, #+0]
   \   00000034   ........           LDR      R0,??DataTable77  ;; LastLength
   \   00000038   005080E5           STR      R5,[R0, #+0]
   \   0000003C   ........           LDR      R0,??DataTable78  ;; LastDist
   \   00000040   005080E5           STR      R5,[R0, #+0]
   \   00000044   ........           LDR      R0,??DataTable79  ;; MAXWINSIZE
   \   00000048   002090E5           LDR      R2,[R0, #+0]
   \   0000004C   ........           LDR      R0,??DataTable80  ;; Window
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   ........           BL       memset
    695              memset(UnpOldTable,0,sizeof(UnpOldTable));
   \   00000058   ........           LDR      R0,??DataTable81  ;; UnpOldTable
   \   0000005C   652FA0E3           MOV      R2,#+404
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   ........           BL       memset
    696              UnpPtr=WrPtr=0;
   \   00000068   ........           LDR      R0,??DataTable105  ;; WrPtr
    697              PPMEscChar=2;
   \   0000006C   0210A0E3           MOV      R1,#+2
   \   00000070   005080E5           STR      R5,[R0, #+0]
   \   00000074   ........           LDR      R0,??DataTable83  ;; UnpPtr
   \   00000078   005080E5           STR      R5,[R0, #+0]
   \   0000007C   3C009FE5           LDR      R0,??UnpInitData_1  ;; PPMEscChar
   \   00000080   001080E5           STR      R1,[R0, #+0]
    698          
    699              //InitFilters();
    700            }
    701            InitBitInput();
   \                     ??UnpInitData_0:
   \   00000084   ........           LDR      R0,??DataTable84  ;; InBit
   \   00000088   005080E5           STR      R5,[R0, #+0]
   \   0000008C   ........           LDR      R0,??DataTable85  ;; InAddr
   \   00000090   005080E5           STR      R5,[R0, #+0]
    702            PPMError=false;
   \   00000094   ........           LDR      R0,??DataTable86  ;; PPMError
   \   00000098   005080E5           STR      R5,[R0, #+0]
    703            WrittenFileSize=0;
   \   0000009C   ........           LDR      R0,??DataTable87  ;; WrittenFileSize
   \   000000A0   005080E5           STR      R5,[R0, #+0]
    704            ReadTop=0;
   \   000000A4   ........           LDR      R0,??DataTable99  ;; ReadTop
   \   000000A8   005080E5           STR      R5,[R0, #+0]
    705            ReadBorder=0;
   \   000000AC   ........           LDR      R0,??DataTable89  ;; ReadBorder
   \   000000B0   005080E5           STR      R5,[R0, #+0]
    706            UnpInitData20(Solid);
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       UnpInitData20
    707          }
   \   000000BC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??UnpInitData_1:
   \   000000C0   ........           DC32     PPMEscChar
    708          

   \                                 In segment CODE, align 4, keep-with-next
    709          void MakeDecodeTables(char *LenTab,int pos)
    710          {
    711            int LenCount[16],TmpPos[16],I,Size=LL[pos].DecodeCnt;
   \                     MakeDecodeTables:
   \   00000000   ........           LDR      R2,??DataTable90  ;; LL
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
    712            long M,N;
    713            memset(LenCount,0,sizeof(LenCount));
    714            memset(DecodeN+LL[pos].DecodePtr,0,Size*sizeof(int));
   \   00000008   ........           LDR      R7,??DataTable91  ;; DecodeN
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   8C00A0E3           MOV      R0,#+140
   \   00000014   902125E0           MLA      R5,R0,R1,R2
   \   00000018   80D04DE2           SUB      SP,SP,#+128
   \   0000001C   886095E5           LDR      R6,[R5, #+136]
   \   00000020   4020A0E3           MOV      R2,#+64
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           BL       memset
   \   00000030   840095E5           LDR      R0,[R5, #+132]
   \   00000034   0621A0E1           LSL      R2,R6,#+2
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   000187E0           ADD      R0,R7,R0, LSL #+2
   \   00000040   ........           BL       memset
    715            for (I=0;I<Size;I++)
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   010056E3           CMP      R6,#+1
   \   0000004C   0A0000AA           BGE      ??MakeDecodeTables_0
   \   00000050   0B0000EA           B        ??MakeDecodeTables_1
    716              LenCount[LenTab[I] & 0xF]++;
   \                     ??MakeDecodeTables_2:
   \   00000054   0430D0E7           LDRB     R3,[R0, +R4]
   \   00000058   0410D0E7           LDRB     R1,[R0, +R4]
   \   0000005C   0DC0A0E1           MOV      R12,SP
   \   00000060   0F3003E2           AND      R3,R3,#0xF
   \   00000064   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   00000068   0F1001E2           AND      R1,R1,#0xF
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   013083E2           ADD      R3,R3,#+1
   \   00000074   013182E7           STR      R3,[R2, +R1, LSL #+2]
   \   00000078   010080E2           ADD      R0,R0,#+1
   \                     ??MakeDecodeTables_0:
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   F3FFFFBA           BLT      ??MakeDecodeTables_2
    717          
    718            LenCount[0]=TmpPos[0]=0;
   \                     ??MakeDecodeTables_1:
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   40108DE5           STR      R1,[SP, #+64]
   \   0000008C   00108DE5           STR      R1,[SP, #+0]
    719            LL[pos].DecodePos[0]=LL[pos].DecodeLen[0]=0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   040085E5           STR      R0,[R5, #+4]
   \   00000098   440085E5           STR      R0,[R5, #+68]
    720            for (N=0,I=1;I<16;I++)
   \   0000009C   0100A0E3           MOV      R0,#+1
    721            {
    722              N=2*(N+LenCount[I]);
   \                     ??MakeDecodeTables_3:
   \   000000A0   0D20A0E1           MOV      R2,SP
   \   000000A4   002182E0           ADD      R2,R2,R0, LSL #+2
   \   000000A8   003092E5           LDR      R3,[R2, #+0]
    723              M=N<<(15-I);
    724              if (M>0xFFFF)
    725                M=0xFFFF;
    726              LL[pos].DecodeLen[I]=(int)M;
   \   000000AC   00C185E0           ADD      R12,R5,R0, LSL #+2
   \   000000B0   011083E0           ADD      R1,R3,R1
   \   000000B4   8110A0E1           LSL      R1,R1,#+1
   \   000000B8   0030A0E1           MOV      R3,R0
   \   000000BC   0F3063E2           RSB      R3,R3,#+15
   \   000000C0   1133A0E1           LSL      R3,R1,R3
   \   000000C4   400B53E3           CMP      R3,#+65536
   \   000000C8   FF30A0A3           MOVGE    R3,#+255
   \   000000CC   FF3C83A3           ORRGE    R3,R3,#0xFF00
   \   000000D0   04308CE5           STR      R3,[R12, #+4]
    727              TmpPos[I]=LL[pos].DecodePos[I]=LL[pos].DecodePos[I-1]+LenCount[I-1];
   \   000000D4   042012E5           LDR      R2,[R2, #-4]
   \   000000D8   013040E2           SUB      R3,R0,#+1
   \   000000DC   033185E0           ADD      R3,R5,R3, LSL #+2
   \   000000E0   443093E5           LDR      R3,[R3, #+68]
   \   000000E4   032082E0           ADD      R2,R2,R3
   \   000000E8   44208CE5           STR      R2,[R12, #+68]
   \   000000EC   40308DE2           ADD      R3,SP,#+64
   \   000000F0   002183E7           STR      R2,[R3, +R0, LSL #+2]
    728            }
   \   000000F4   010080E2           ADD      R0,R0,#+1
   \   000000F8   100050E3           CMP      R0,#+16
   \   000000FC   E7FFFFBA           BLT      ??MakeDecodeTables_3
    729          
    730            for (I=0;I<Size;I++)
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   010056E3           CMP      R6,#+1
   \   00000108   40C08DE2           ADD      R12,SP,#+64
   \   0000010C   150000AA           BGE      ??MakeDecodeTables_4
   \   00000110   006085E5           STR      R6,[R5, #+0]
   \   00000114   80D08DE2           ADD      SP,SP,#+128
   \   00000118   F080BDE8           POP      {R4-R7,PC}
    731              if (LenTab[I]!=0)
   \                     ??MakeDecodeTables_5:
   \   0000011C   0410D0E7           LDRB     R1,[R0, +R4]
   \   00000120   000051E3           CMP      R1,#+0
   \   00000124   0E00000A           BEQ      ??MakeDecodeTables_6
    732                DecodeN[LL[pos].DecodePtr+(TmpPos[LenTab[I] & 0xF]++)]=I;
   \   00000128   0420D0E7           LDRB     R2,[R0, +R4]
   \   0000012C   841095E5           LDR      R1,[R5, #+132]
   \   00000130   40308DE2           ADD      R3,SP,#+64
   \   00000134   0F2002E2           AND      R2,R2,#0xF
   \   00000138   022193E7           LDR      R2,[R3, +R2, LSL #+2]
   \   0000013C   011082E0           ADD      R1,R2,R1
   \   00000140   010187E7           STR      R0,[R7, +R1, LSL #+2]
   \   00000144   0430D0E7           LDRB     R3,[R0, +R4]
   \   00000148   0410D0E7           LDRB     R1,[R0, +R4]
   \   0000014C   40208DE2           ADD      R2,SP,#+64
   \   00000150   0F3003E2           AND      R3,R3,#0xF
   \   00000154   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   00000158   0F1001E2           AND      R1,R1,#0xF
   \   0000015C   013083E2           ADD      R3,R3,#+1
   \   00000160   013182E7           STR      R3,[R2, +R1, LSL #+2]
   \                     ??MakeDecodeTables_6:
   \   00000164   010080E2           ADD      R0,R0,#+1
   \                     ??MakeDecodeTables_4:
   \   00000168   060050E1           CMP      R0,R6
   \   0000016C   EAFFFFBA           BLT      ??MakeDecodeTables_5
    733            LL[pos].MaxNum=Size;
   \   00000170   006085E5           STR      R6,[R5, #+0]
    734          }
   \   00000174   80D08DE2           ADD      SP,SP,#+128
   \   00000178   F080BDE8           POP      {R4-R7,PC}       ;; return
    735          
    736          
    737          /////////////////unpack15
    738          #define STARTL1  2

   \                                 In segment DATA_I, align 4, align-sorted
    739          static int DecL1[]={0x8000,0xa000,0xc000,0xd000,0xe000,0xea00,
   \                     DecL1:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for DecL1>`
    740                                       0xee00,0xf000,0xf200,0xf200,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    741          static int PosL1[]={0,0,0,2,3,5,7,11,16,20,24,32,32};
   \                     PosL1:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosL1>`
    742          
    743          #define STARTL2  3

   \                                 In segment DATA_I, align 4, align-sorted
    744          static int DecL2[]={0xa000,0xc000,0xd000,0xe000,0xea00,0xee00,
   \                     DecL2:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for DecL2>`
    745                                       0xf000,0xf200,0xf240,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    746          static int PosL2[]={0,0,0,0,5,7,9,13,18,22,26,34,36};
   \                     PosL2:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosL2>`
    747          
    748          #define STARTHF0  4

   \                                 In segment DATA_I, align 4, align-sorted
    749          static int DecHf0[]={0x8000,0xc000,0xe000,0xf200,0xf200,0xf200,
   \                     DecHf0:
   \   00000000                      DS8 36
   \   00000024                      REQUIRE `?<Initializer for DecHf0>`
    750                                        0xf200,0xf200,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    751          static int PosHf0[]={0,0,0,0,0,8,16,24,33,33,33,33,33};
   \                     PosHf0:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf0>`
    752          
    753          
    754          #define STARTHF1  5

   \                                 In segment DATA_I, align 4, align-sorted
    755          static int DecHf1[]={0x2000,0xc000,0xe000,0xf000,0xf200,0xf200,
   \                     DecHf1:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for DecHf1>`
    756                                        0xf7e0,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    757          static int PosHf1[]={0,0,0,0,0,0,4,44,60,76,80,80,127};
   \                     PosHf1:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf1>`
    758          
    759          
    760          #define STARTHF2  5

   \                                 In segment DATA_I, align 4, align-sorted
    761          static int DecHf2[]={0x1000,0x2400,0x8000,0xc000,0xfa00,0xffff,
   \                     DecHf2:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for DecHf2>`
    762                                        0xffff,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    763          static int PosHf2[]={0,0,0,0,0,0,2,7,53,117,233,0,0};
   \                     PosHf2:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf2>`
    764          
    765          
    766          #define STARTHF3  6

   \                                 In segment DATA_I, align 4, align-sorted
    767          static int DecHf3[]={0x800,0x2400,0xee00,0xfe80,0xffff,0xffff,
   \                     DecHf3:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for DecHf3>`
    768                                        0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    769          static int PosHf3[]={0,0,0,0,0,0,0,2,16,218,251,0,0};
   \                     PosHf3:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf3>`
    770          
    771          
    772          #define STARTHF4  8

   \                                 In segment DATA_I, align 4, align-sorted
    773          static int DecHf4[]={0xff00,0xffff,0xffff,0xffff,0xffff,0xffff};
   \                     DecHf4:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for DecHf4>`

   \                                 In segment DATA_I, align 4, align-sorted
    774          static int PosHf4[]={0,0,0,0,0,0,0,0,0,255,0,0,0};
   \                     PosHf4:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf4>`
    775          
    776          

   \                                 In segment CODE, align 4, keep-with-next
    777          void Unpack15(bool Solid)
    778          {
   \                     Unpack15:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    779            if (Suspended)
   \   00000004   ........           LDR      R4,??DataTable205  ;; DestUnpSize
   \   00000008   ........           LDR      R5,??DataTable105  ;; WrPtr
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   ........           LDR      R0,??DataTable100  ;; Suspended
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   000050E3           CMP      R0,#+0
    780              UnpPtr=WrPtr;
   \   0000001C   00009515           LDRNE    R0,[R5, #+0]
   \   00000020   0D00001A           BNE      ??Unpack15_0
    781            else
    782            {
    783              UnpInitData(Solid);
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           BL       UnpInitData
    784              OldUnpInitData(Solid);
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           BL       OldUnpInitData
    785              UnpReadBuf();
   \   00000034   ........           BL       UnpReadBuf
    786              if (!Solid)
   \   00000038   000056E3           CMP      R6,#+0
   \   0000003C   0200001A           BNE      ??Unpack15_1
    787              {
    788                InitHuff();
   \   00000040   ........           BL       InitHuff
    789                UnpPtr=0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   000000EA           B        ??Unpack15_2
    790              }
    791              else
    792                UnpPtr=WrPtr;
   \                     ??Unpack15_1:
   \   0000004C   000095E5           LDR      R0,[R5, #+0]
    793              --DestUnpSize;
   \                     ??Unpack15_2:
   \   00000050   001094E5           LDR      R1,[R4, #+0]
   \   00000054   011041E2           SUB      R1,R1,#+1
   \   00000058   001084E5           STR      R1,[R4, #+0]
   \                     ??Unpack15_0:
   \   0000005C   ........           LDR      R6,??DataTable207  ;; UnpPtr
    794            }
    795            if (DestUnpSize>=0)
   \   00000060   ........           LDR      R7,??DataTable192  ;; FlagsCnt
   \   00000064   000086E5           STR      R0,[R6, #+0]
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0400004A           BMI      ??Unpack15_3
    796            {
    797              GetFlagsBuf();
   \   00000074   ........           BL       GetFlagsBuf
    798              FlagsCnt=8;
   \   00000078   0800A0E3           MOV      R0,#+8
   \   0000007C   000087E5           STR      R0,[R7, #+0]
   \   00000080   000000EA           B        ??Unpack15_3
    799            }
    800          
    801            while (DestUnpSize>=0)
    802            {
    803              UnpPtr&=MAXWINMASK;
    804          
    805              if (InAddr>ReadTop-30 && !UnpReadBuf())
    806                break;
    807              if (((WrPtr-UnpPtr) & MAXWINMASK)<270 && WrPtr!=UnpPtr)
    808              {
    809                OldUnpWriteBuf();
    810                if (Suspended)
    811                  return;
    812              }
    813              if (StMode)
    814              {
    815                HuffDecode();
   \                     ??Unpack15_4:
   \   00000084   ........           BL       HuffDecode
    816                continue;
    817              }
   \                     ??Unpack15_3:
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   4900004A           BMI      ??Unpack15_5
   \   00000094   ........           LDR      R8,??DataTable217  ;; MAXWINMASK
   \   00000098   000096E5           LDR      R0,[R6, #+0]
   \   0000009C   001098E5           LDR      R1,[R8, #+0]
   \   000000A0   000001E0           AND      R0,R1,R0
   \   000000A4   ........           LDR      R1,??DataTable98  ;; InAddr
   \   000000A8   000086E5           STR      R0,[R6, #+0]
   \   000000AC   ........           LDR      R0,??DataTable99  ;; ReadTop
   \   000000B0   001091E5           LDR      R1,[R1, #+0]
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   1E0040E2           SUB      R0,R0,#+30
   \   000000BC   010050E1           CMP      R0,R1
   \   000000C0   020000AA           BGE      ??Unpack15_6
   \   000000C4   ........           BL       UnpReadBuf
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   3A00000A           BEQ      ??Unpack15_5
   \                     ??Unpack15_6:
   \   000000D0   000096E5           LDR      R0,[R6, #+0]
   \   000000D4   001095E5           LDR      R1,[R5, #+0]
   \   000000D8   003098E5           LDR      R3,[R8, #+0]
   \   000000DC   002041E0           SUB      R2,R1,R0
   \   000000E0   022003E0           AND      R2,R3,R2
   \   000000E4   0E30A0E3           MOV      R3,#+14
   \   000000E8   403F83E3           ORR      R3,R3,#0x100
   \   000000EC   030052E1           CMP      R2,R3
   \   000000F0   060000AA           BGE      ??Unpack15_7
   \   000000F4   000051E1           CMP      R1,R0
   \   000000F8   0400000A           BEQ      ??Unpack15_7
   \   000000FC   ........           BL       OldUnpWriteBuf
   \   00000100   ........           LDR      R0,??DataTable100  ;; Suspended
   \   00000104   000090E5           LDR      R0,[R0, #+0]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   F08FBD18           POPNE    {R4-R11,PC}
   \                     ??Unpack15_7:
   \   00000110   ........           LDR      R0,??DataTable194  ;; StMode
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   D8FFFF1A           BNE      ??Unpack15_4
    818          
    819              if (--FlagsCnt < 0)
   \   00000120   000097E5           LDR      R0,[R7, #+0]
   \   00000124   0780A0E3           MOV      R8,#+7
   \   00000128   010050E2           SUBS     R0,R0,#+1
   \   0000012C   000087E5           STR      R0,[R7, #+0]
   \   00000130   0100005A           BPL      ??Unpack15_8
    820              {
    821                GetFlagsBuf();
   \   00000134   ........           BL       GetFlagsBuf
    822                FlagsCnt=7;
   \   00000138   008087E5           STR      R8,[R7, #+0]
    823              }
    824          
    825              if (FlagBuf & 0x80)
   \                     ??Unpack15_8:
   \   0000013C   ........           LDR      R9,??DataTable193  ;; FlagBuf
   \   00000140   ........           LDR      R10,??DataTable190  ;; Nlzb
   \   00000144   000099E5           LDR      R0,[R9, #+0]
   \   00000148   ........           LDR      R11,??DataTable191  ;; Nhfb
   \   0000014C   8010A0E1           LSL      R1,R0,#+1
   \   00000150   800010E3           TST      R0,#0x80
   \   00000154   001089E5           STR      R1,[R9, #+0]
   \   00000158   0500000A           BEQ      ??Unpack15_9
    826              {
    827                FlagBuf<<=1;
    828                if (Nlzb > Nhfb)
   \   0000015C   00009BE5           LDR      R0,[R11, #+0]
   \   00000160   00109AE5           LDR      R1,[R10, #+0]
   \   00000164   010050E1           CMP      R0,R1
   \   00000168   C5FFFFAA           BGE      ??Unpack15_4
    829                  LongLZ();
   \                     ??Unpack15_10:
   \   0000016C   ........           BL       LongLZ
   \   00000170   C4FFFFEA           B        ??Unpack15_3
    830                else
    831                  HuffDecode();
    832              }
    833              else
    834              {
    835                FlagBuf<<=1;
    836                if (--FlagsCnt < 0)
   \                     ??Unpack15_9:
   \   00000174   000097E5           LDR      R0,[R7, #+0]
   \   00000178   010050E2           SUBS     R0,R0,#+1
   \   0000017C   000087E5           STR      R0,[R7, #+0]
   \   00000180   0100005A           BPL      ??Unpack15_11
    837                {
    838                  GetFlagsBuf();
   \   00000184   ........           BL       GetFlagsBuf
    839                  FlagsCnt=7;
   \   00000188   008087E5           STR      R8,[R7, #+0]
    840                }
    841                if (FlagBuf & 0x80)
   \                     ??Unpack15_11:
   \   0000018C   000099E5           LDR      R0,[R9, #+0]
   \   00000190   8010A0E1           LSL      R1,R0,#+1
   \   00000194   800010E3           TST      R0,#0x80
   \   00000198   001089E5           STR      R1,[R9, #+0]
   \   0000019C   0400000A           BEQ      ??Unpack15_12
    842                {
    843                  FlagBuf<<=1;
    844                  if (Nlzb > Nhfb)
   \   000001A0   00009BE5           LDR      R0,[R11, #+0]
   \   000001A4   00109AE5           LDR      R1,[R10, #+0]
   \   000001A8   010050E1           CMP      R0,R1
   \   000001AC   EEFFFFAA           BGE      ??Unpack15_10
    845                    HuffDecode();
   \   000001B0   B3FFFFEA           B        ??Unpack15_4
    846                  else
    847                    LongLZ();
    848                }
    849                else
    850                {
    851                  FlagBuf<<=1;
    852                  ShortLZ();
   \                     ??Unpack15_12:
   \   000001B4   ........           BL       ShortLZ
   \   000001B8   B2FFFFEA           B        ??Unpack15_3
    853                }
    854              }
    855            }
    856            OldUnpWriteBuf();
   \                     ??Unpack15_5:
   \   000001BC   ........           BL       OldUnpWriteBuf
    857          }
   \   000001C0   F08FBDE8           POP      {R4-R11,PC}      ;; return
    858          
    859          

   \                                 In segment CODE, align 4, keep-with-next
    860          void OldUnpWriteBuf()
    861          {
   \                     OldUnpWriteBuf:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    862            if (UnpPtr!=WrPtr)
   \   00000004   ........           LDR      R4,??DataTable105  ;; WrPtr
   \   00000008   ........           LDR      R5,??DataTable207  ;; UnpPtr
   \   0000000C   002094E5           LDR      R2,[R4, #+0]
   \   00000010   00C095E5           LDR      R12,[R5, #+0]
    863              UnpSomeRead=true;
    864            if (UnpPtr<WrPtr)
   \   00000014   ........           LDR      R7,??DataTable216  ;; Window
   \   00000018   ........           LDR      R8,??DataTable108  ;; outhandle
   \   0000001C   ........           LDR      R9,??DataTable109  ;; err
   \   00000020   02005CE1           CMP      R12,R2
   \   00000024   ........           LDRNE    R0,??DataTable110  ;; UnpSomeRead
   \   00000028   0160A0E3           MOV      R6,#+1
   \   0000002C   00608015           STRNE    R6,[R0, #+0]
   \   00000030   000097E5           LDR      R0,[R7, #+0]
   \   00000034   02005CE1           CMP      R12,R2
   \   00000038   001082E0           ADD      R1,R2,R0
   \   0000003C   000098E5           LDR      R0,[R8, #+0]
   \   00000040   0930A0E1           MOV      R3,R9
   \   00000044   0E0000AA           BGE      ??OldUnpWriteBuf_0
    865            {
    866              UnpWrite(&Window[WrPtr],-WrPtr & MAXWINMASK);
   \   00000048   ........           LDR      R12,??DataTable217  ;; MAXWINMASK
   \   0000004C   002062E2           RSB      R2,R2,#+0
   \   00000050   00C09CE5           LDR      R12,[R12, #+0]
   \   00000054   02200CE0           AND      R2,R12,R2
   \   00000058   0C0000EF           SWI      +12
    867              UnpWrite(Window,UnpPtr);
   \   0000005C   002095E5           LDR      R2,[R5, #+0]
   \   00000060   001097E5           LDR      R1,[R7, #+0]
   \   00000064   000098E5           LDR      R0,[R8, #+0]
   \   00000068   0930A0E1           MOV      R3,R9
   \   0000006C   0C0000EF           SWI      +12
    868              UnpAllBuf=true;
   \   00000070   ........           LDR      R0,??DataTable112  ;; UnpAllBuf
   \   00000074   006080E5           STR      R6,[R0, #+0]
   \   00000078   000095E5           LDR      R0,[R5, #+0]
   \   0000007C   000084E5           STR      R0,[R4, #+0]
   \   00000080   F083BDE8           POP      {R4-R9,PC}
    869            }
    870            else
    871              UnpWrite(&Window[WrPtr],UnpPtr-WrPtr);
   \                     ??OldUnpWriteBuf_0:
   \   00000084   02204CE0           SUB      R2,R12,R2
   \   00000088   0C0000EF           SWI      +12
    872            WrPtr=UnpPtr;
   \   0000008C   000095E5           LDR      R0,[R5, #+0]
   \   00000090   000084E5           STR      R0,[R4, #+0]
    873          }
   \   00000094   F083BDE8           POP      {R4-R9,PC}       ;; return
    874          
    875          

   \                                 In segment CODE, align 4, keep-with-next
    876          void ShortLZ()
    877          {
    878            static int ShortLen1[]={1,3,4,4,5,6,7,8,8,4,4,5,6,6,4,0};
    879            static int ShortXor1[]={0,0xa0,0xd0,0xe0,0xf0,0xf8,0xfc,0xfe,
    880                                             0xff,0xc0,0x80,0x90,0x98,0x9c,0xb0};
    881            static int ShortLen2[]={2,3,3,3,4,4,5,6,6,4,4,5,6,6,4,0};
    882            static int ShortXor2[]={0,0x40,0x60,0xa0,0xd0,0xe0,0xf0,0xf8,
    883                                             0xfc,0xc0,0x80,0x90,0x98,0x9c,0xb0};
    884          
    885          
    886            int Length,SaveLength;
    887            int LastDistance;
    888            int Distance;
    889            int DistancePlace;
    890            NumHuf=0;
   \                     ShortLZ:
   \   00000000   ........           LDR      R0,??DataTable183  ;; NumHuf
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
    891          
    892            int BitField=getbits();
    893            if (LCount==2)
   \   00000008   ........           LDR      R4,??DataTable211  ;; LastDist
   \   0000000C   ........           LDR      R5,??DataTable212  ;; LastLength
   \   00000010   ........           LDR      R11,??DataTable195  ;; LCount
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0080A0E3           MOV      R8,#+0
   \   0000001C   008080E5           STR      R8,[R0, #+0]
   \   00000020   ........           BL       getbits
   \   00000024   009094E5           LDR      R9,[R4, #+0]
   \   00000028   00A095E5           LDR      R10,[R5, #+0]
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   00009BE5           LDR      R0,[R11, #+0]
   \   00000034   020050E3           CMP      R0,#+2
   \   00000038   0600001A           BNE      ??ShortLZ_0
    894            {
    895              addbits(1);
   \   0000003C   0100A0E3           MOV      R0,#+1
   \   00000040   ........           BL       addbits
    896              if (BitField >= 0x8000)
   \   00000044   800C56E3           CMP      R6,#+32768
    897              {
    898                OldCopyString((int)LastDist,LastLength);
   \   00000048   0A10A0A1           MOVGE    R1,R10
   \   0000004C   640000AA           BGE      ??ShortLZ_1
    899                return;
    900              }
    901              BitField <<= 1;
   \   00000050   8660A0E1           LSL      R6,R6,#+1
    902              LCount=0;
   \   00000054   00808BE5           STR      R8,[R11, #+0]
    903            }
    904          
    905            BitField>>=8;
   \                     ??ShortLZ_0:
   \   00000058   ........           LDR      R0,??DataTable182  ;; Buf60
   \   0000005C   38229FE5           LDR      R2,??ShortLZ_2   ;; ??ShortLen2
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   34329FE5           LDR      R3,??ShortLZ_2+0x4  ;; ??ShortLen1
   \   00000068   030080E2           ADD      R0,R0,#+3
   \   0000006C   0C0082E5           STR      R0,[R2, #+12]
   \   00000070   040083E5           STR      R0,[R3, #+4]
   \   00000074   ........           LDR      R0,??DataTable186  ;; AvrLn1
   \   00000078   4664A0E1           ASR      R6,R6,#+8
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   FF10A0E3           MOV      R1,#+255
   \   00000084   250050E3           CMP      R0,#+37
   \   00000088   0070A0E3           MOV      R7,#+0
   \   0000008C   090000AA           BGE      ??ShortLZ_3
    906          
    907            ShortLen1[1]=ShortLen2[3]=Buf60+3;
    908          
    909            if (AvrLn1<37)
    910            {
    911              for (Length=0;;Length++)
   \   00000090   0C229FE5           LDR      R2,??ShortLZ_2+0x8  ;; ??ShortXor1
   \   00000094   000000EA           B        ??ShortLZ_4
   \                     ??ShortLZ_5:
   \   00000098   017087E2           ADD      R7,R7,#+1
    912                if (((BitField^ShortXor1[Length]) & (~(0xff>>ShortLen1[Length])))==0)
   \                     ??ShortLZ_4:
   \   0000009C   070193E7           LDR      R0,[R3, +R7, LSL #+2]
   \   000000A0   07C192E7           LDR      R12,[R2, +R7, LSL #+2]
   \   000000A4   06E02CE0           EOR      LR,R12,R6
   \   000000A8   51C0E0E1           MVN      R12,R1, ASR R0
   \   000000AC   0E001CE1           TST      R12,LR
   \   000000B0   F8FFFF1A           BNE      ??ShortLZ_5
    913                  break;
    914              addbits(ShortLen1[Length]);
   \   000000B4   080000EA           B        ??ShortLZ_6
    915            }
    916            else
    917            {
    918              for (Length=0;;Length++)
   \                     ??ShortLZ_3:
   \   000000B8   E8319FE5           LDR      R3,??ShortLZ_2+0xC  ;; ??ShortXor2
   \   000000BC   000000EA           B        ??ShortLZ_7
   \                     ??ShortLZ_8:
   \   000000C0   017087E2           ADD      R7,R7,#+1
    919                if (((BitField^ShortXor2[Length]) & (~(0xff>>ShortLen2[Length])))==0)
   \                     ??ShortLZ_7:
   \   000000C4   070192E7           LDR      R0,[R2, +R7, LSL #+2]
   \   000000C8   07C193E7           LDR      R12,[R3, +R7, LSL #+2]
   \   000000CC   06E02CE0           EOR      LR,R12,R6
   \   000000D0   51C0E0E1           MVN      R12,R1, ASR R0
   \   000000D4   0E001CE1           TST      R12,LR
   \   000000D8   F8FFFF1A           BNE      ??ShortLZ_8
    920                  break;
    921              addbits(ShortLen2[Length]);
   \                     ??ShortLZ_6:
   \   000000DC   ........           BL       addbits
   \   000000E0   ........           LDR      R0,??DataTable157  ;; OldDistPtr
   \   000000E4   ........           LDR      R1,??DataTable210  ;; OldDist
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   090057E3           CMP      R7,#+9
   \   000000F0   012080E2           ADD      R2,R0,#+1
   \   000000F4   032002E2           AND      R2,R2,#0x3
   \   000000F8   00208DE5           STR      R2,[SP, #+0]
   \   000000FC   006181E0           ADD      R6,R1,R0, LSL #+2
   \   00000100   3A0000BA           BLT      ??ShortLZ_9
    922            }
    923          
    924            if (Length >= 9)
    925            {
    926              if (Length == 9)
   \   00000104   0400001A           BNE      ??ShortLZ_10
    927              {
    928                LCount++;
   \   00000108   00009BE5           LDR      R0,[R11, #+0]
    929                OldCopyString((int)LastDist,LastLength);
   \   0000010C   0A10A0E1           MOV      R1,R10
   \   00000110   010080E2           ADD      R0,R0,#+1
   \   00000114   00008BE5           STR      R0,[R11, #+0]
   \   00000118   5C0000EA           B        ??ShortLZ_11
    930                return;
    931              }
    932              if (Length == 14)
   \                     ??ShortLZ_10:
   \   0000011C   0E0057E3           CMP      R7,#+14
   \   00000120   00808BE5           STR      R8,[R11, #+0]
   \   00000124   0B00001A           BNE      ??ShortLZ_12
    933              {
    934                LCount=0;
    935                Length=DecodeNum(getbits(),STARTL2,DecL2,PosL2)+5;
   \   00000128   ........           BL       getbits
   \   0000012C   ........           LDR      R3,??DataTable140  ;; PosL2
   \   00000130   ........           LDR      R2,??DataTable141  ;; DecL2
   \   00000134   0310A0E3           MOV      R1,#+3
   \   00000138   ........           BL       DecodeNum
   \   0000013C   057080E2           ADD      R7,R0,#+5
    936                Distance=(getbits()>>1) | 0x8000;
   \   00000140   ........           BL       getbits
   \   00000144   801CA0E3           MOV      R1,#+32768
   \   00000148   C09081E1           ORR      R9,R1,R0, ASR #+1
    937                addbits(15);
   \   0000014C   0F00A0E3           MOV      R0,#+15
   \   00000150   ........           BL       addbits
    938                LastLength=Length;
   \   00000154   1F0000EA           B        ??ShortLZ_13
    939                LastDist=Distance;
    940                OldCopyString(Distance,Length);
    941                return;
    942              }
    943          
    944              LCount=0;
    945              SaveLength=Length;
   \                     ??ShortLZ_12:
   \   00000158   0780A0E1           MOV      R8,R7
    946              Distance=OldDist[(OldDistPtr-(Length-9)) & 3];
   \   0000015C   070040E0           SUB      R0,R0,R7
   \   00000160   090080E2           ADD      R0,R0,#+9
   \   00000164   030000E2           AND      R0,R0,#0x3
   \   00000168   009191E7           LDR      R9,[R1, +R0, LSL #+2]
    947              Length=DecodeNum(getbits(),STARTL1,DecL1,PosL1)+2;
   \   0000016C   ........           BL       getbits
   \   00000170   ........           LDR      R3,??DataTable142  ;; PosL1
   \   00000174   ........           LDR      R2,??DataTable143  ;; DecL1
   \   00000178   0210A0E3           MOV      R1,#+2
   \   0000017C   ........           BL       DecodeNum
   \   00000180   027080E2           ADD      R7,R0,#+2
    948              if (Length==0x101 && SaveLength==10)
   \   00000184   0100A0E3           MOV      R0,#+1
   \   00000188   400F80E3           ORR      R0,R0,#0x100
   \   0000018C   000057E1           CMP      R7,R0
   \   00000190   0A005803           CMPEQ    R8,#+10
   \   00000194   0500001A           BNE      ??ShortLZ_14
    949              {
    950                Buf60 ^= 1;
   \   00000198   ........           LDR      R1,??DataTable182  ;; Buf60
   \   0000019C   ........           LDR      R0,??DataTable182  ;; Buf60
   \   000001A0   001091E5           LDR      R1,[R1, #+0]
   \   000001A4   011021E2           EOR      R1,R1,#0x1
   \   000001A8   001080E5           STR      R1,[R0, #+0]
    951                return;
   \   000001AC   F18FBDE8           POP      {R0,R4-R11,PC}
    952              }
    953              if (Distance > 256)
   \                     ??ShortLZ_14:
   \   000001B0   000059E1           CMP      R9,R0
    954                Length++;
    955              if (Distance >= MaxDist3)
   \   000001B4   ........           LDR      R0,??DataTable189  ;; MaxDist3
   \   000001B8   017087A2           ADDGE    R7,R7,#+1
   \   000001BC   000090E5           LDR      R0,[R0, #+0]
    956                Length++;
    957          
    958              OldDist[OldDistPtr++]=Distance;
   \   000001C0   009086E5           STR      R9,[R6, #+0]
    959              OldDistPtr = OldDistPtr & 3;
   \   000001C4   00109DE5           LDR      R1,[SP, #+0]
   \   000001C8   000059E1           CMP      R9,R0
   \   000001CC   ........           LDR      R0,??DataTable157  ;; OldDistPtr
   \   000001D0   017087A2           ADDGE    R7,R7,#+1
   \   000001D4   001080E5           STR      R1,[R0, #+0]
    960              LastLength=Length;
   \                     ??ShortLZ_13:
   \   000001D8   007085E5           STR      R7,[R5, #+0]
    961              LastDist=Distance;
   \   000001DC   009084E5           STR      R9,[R4, #+0]
    962              OldCopyString(Distance,Length);
   \   000001E0   0710A0E1           MOV      R1,R7
   \                     ??ShortLZ_1:
   \   000001E4   0900A0E1           MOV      R0,R9
   \   000001E8   ........           BL       OldCopyString
    963              return;
   \   000001EC   F18FBDE8           POP      {R0,R4-R11,PC}
    964            }
    965          
    966            LCount=0;
    967            AvrLn1 += Length;
   \                     ??ShortLZ_9:
   \   000001F0   ........           LDR      R0,??DataTable186  ;; AvrLn1
   \   000001F4   ........           LDR      R1,??DataTable186  ;; AvrLn1
   \   000001F8   000090E5           LDR      R0,[R0, #+0]
   \   000001FC   00808BE5           STR      R8,[R11, #+0]
   \   00000200   000087E0           ADD      R0,R7,R0
   \   00000204   000081E5           STR      R0,[R1, #+0]
    968            AvrLn1 -= AvrLn1 >> 4;
   \   00000208   400240E0           SUB      R0,R0,R0, ASR #+4
   \   0000020C   000081E5           STR      R0,[R1, #+0]
    969          
    970            DistancePlace=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2) & 0xff;
   \   00000210   ........           BL       getbits
   \   00000214   ........           LDR      R3,??DataTable180  ;; PosHf2
   \   00000218   ........           LDR      R2,??DataTable181  ;; DecHf2
   \   0000021C   0510A0E3           MOV      R1,#+5
   \   00000220   ........           BL       DecodeNum
    971            Distance=ChSetA[DistancePlace];
   \   00000224   ........           LDR      R2,??DataTable200  ;; ChSetA
   \   00000228   FF1000E2           AND      R1,R0,#0xFF
   \   0000022C   010192E7           LDR      R0,[R2, +R1, LSL #+2]
    972            if (--DistancePlace != -1)
   \   00000230   011041E2           SUB      R1,R1,#+1
   \   00000234   010071E3           CMN      R1,#+1
   \   00000238   0C00000A           BEQ      ??ShortLZ_15
    973            {
    974              PlaceA[Distance]--;
   \   0000023C   ........           LDR      R3,??DataTable199  ;; PlaceA
    975              LastDistance=ChSetA[DistancePlace];
   \   00000240   011182E0           ADD      R1,R2,R1, LSL #+2
   \   00000244   008183E0           ADD      R8,R3,R0, LSL #+2
   \   00000248   009098E5           LDR      R9,[R8, #+0]
   \   0000024C   019049E2           SUB      R9,R9,#+1
   \   00000250   009088E5           STR      R9,[R8, #+0]
   \   00000254   002091E5           LDR      R2,[R1, #+0]
    976              PlaceA[LastDistance]++;
   \   00000258   023183E0           ADD      R3,R3,R2, LSL #+2
   \   0000025C   008093E5           LDR      R8,[R3, #+0]
   \   00000260   018088E2           ADD      R8,R8,#+1
   \   00000264   008083E5           STR      R8,[R3, #+0]
    977              ChSetA[DistancePlace+1]=LastDistance;
   \   00000268   042081E5           STR      R2,[R1, #+4]
    978              ChSetA[DistancePlace]=Distance;
   \   0000026C   000081E5           STR      R0,[R1, #+0]
    979            }
    980            Length+=2;
    981            OldDist[OldDistPtr++] = ++Distance;
   \                     ??ShortLZ_15:
   \   00000270   019080E2           ADD      R9,R0,#+1
    982            OldDistPtr = OldDistPtr & 3;
   \   00000274   ........           LDR      R0,??DataTable157  ;; OldDistPtr
   \   00000278   009086E5           STR      R9,[R6, #+0]
   \   0000027C   00109DE5           LDR      R1,[SP, #+0]
    983            LastLength=Length;
    984            LastDist=Distance;
   \   00000280   009084E5           STR      R9,[R4, #+0]
   \   00000284   001080E5           STR      R1,[R0, #+0]
   \   00000288   021087E2           ADD      R1,R7,#+2
   \   0000028C   001085E5           STR      R1,[R5, #+0]
    985            OldCopyString(Distance,Length);
   \                     ??ShortLZ_11:
   \   00000290   0900A0E1           MOV      R0,R9
   \   00000294   ........           BL       OldCopyString
   \   00000298   F18FBDE8           POP      {R0,R4-R11,PC}
   \                     ??ShortLZ_2:
   \   0000029C   ........           DC32     ??ShortLen2
   \   000002A0   ........           DC32     ??ShortLen1
   \   000002A4   ........           DC32     ??ShortXor1
   \   000002A8   ........           DC32     ??ShortXor2
    986          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortLen1:
   \   00000000                      DS8 64
   \   00000040                      REQUIRE `?<Initializer for ShortLen1>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortXor1:
   \   00000000                      DS8 60
   \   0000003C                      REQUIRE `?<Initializer for ShortXor1>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortLen2:
   \   00000000                      DS8 64
   \   00000040                      REQUIRE `?<Initializer for ShortLen2>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortXor2:
   \   00000000                      DS8 60
   \   0000003C                      REQUIRE `?<Initializer for ShortXor2>`
    987          
    988          

   \                                 In segment CODE, align 4, keep-with-next
    989          void LongLZ()
    990          {
    991            int Length;
    992            int Distance;
    993            int DistancePlace,NewDistancePlace;
    994            int OldAvr2,OldAvr3;
    995          
    996            NumHuf=0;
   \                     LongLZ:
   \   00000000   ........           LDR      R0,??DataTable183  ;; NumHuf
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
    997            Nlzb+=16;
   \   00000010   ........           LDR      R0,??DataTable190  ;; Nlzb
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   101081E2           ADD      R1,R1,#+16
    998            if (Nlzb > 0xff)
   \   0000001C   400F51E3           CMP      R1,#+256
   \   00000020   040000BA           BLT      ??LongLZ_0
    999            {
   1000              Nlzb=0x90;
   1001              Nhfb >>= 1;
   \   00000024   ........           LDR      R2,??DataTable191  ;; Nhfb
   \   00000028   9010A0E3           MOV      R1,#+144
   \   0000002C   003092E5           LDR      R3,[R2, #+0]
   \   00000030   C330A0E1           ASR      R3,R3,#+1
   \   00000034   003082E5           STR      R3,[R2, #+0]
   1002            }
   1003            OldAvr2=AvrLn2;
   \                     ??LongLZ_0:
   \   00000038   ........           LDR      R6,??DataTable185  ;; AvrLn2
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   \   00000040   008096E5           LDR      R8,[R6, #+0]
   1004          
   1005            int BitField=getbits();
   \   00000044   ........           BL       getbits
   \   00000048   0840A0E1           MOV      R4,R8
   1006            if (AvrLn2 >= 122)
   \   0000004C   7A0058E3           CMP      R8,#+122
   \   00000050   050000BA           BLT      ??LongLZ_1
   1007              Length=DecodeNum(BitField,STARTL2,DecL2,PosL2);
   \   00000054   ........           LDR      R3,??DataTable140  ;; PosL2
   \   00000058   ........           LDR      R2,??DataTable141  ;; DecL2
   \   0000005C   0310A0E3           MOV      R1,#+3
   \                     ??LongLZ_2:
   \   00000060   ........           BL       DecodeNum
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   130000EA           B        ??LongLZ_3
   1008            else
   1009              if (AvrLn2 >= 64)
   \                     ??LongLZ_1:
   \   0000006C   400058E3           CMP      R8,#+64
   \   00000070   030000BA           BLT      ??LongLZ_4
   1010                Length=DecodeNum(BitField,STARTL1,DecL1,PosL1);
   \   00000074   ........           LDR      R3,??DataTable142  ;; PosL1
   \   00000078   ........           LDR      R2,??DataTable143  ;; DecL1
   \   0000007C   0210A0E3           MOV      R1,#+2
   \   00000080   F6FFFFEA           B        ??LongLZ_2
   1011              else
   1012                if (BitField < 0x100)
   \                     ??LongLZ_4:
   \   00000084   400F50E3           CMP      R0,#+256
   1013                {
   1014                  Length=BitField;
   \   00000088   0050A0B1           MOVLT    R5,R0
   1015                  addbits(16);
   \   0000008C   1000A0B3           MOVLT    R0,#+16
   \   00000090   080000BA           BLT      ??LongLZ_5
   1016                }
   1017                else
   1018                {
   1019                  for (Length=0;((BitField<<Length)&0x8000)==0;Length++)
   \   00000094   0050A0E3           MOV      R5,#+0
   \   00000098   800C10E3           TST      R0,#0x8000
   \   0000009C   0100000A           BEQ      ??LongLZ_6
   \   000000A0   030000EA           B        ??LongLZ_7
   \                     ??LongLZ_8:
   \   000000A4   015085E2           ADD      R5,R5,#+1
   \                     ??LongLZ_6:
   \   000000A8   1015A0E1           LSL      R1,R0,R5
   \   000000AC   800C11E3           TST      R1,#0x8000
   \   000000B0   FBFFFF0A           BEQ      ??LongLZ_8
   1020                    ;
   1021                  addbits(Length+1);
   \                     ??LongLZ_7:
   \   000000B4   010085E2           ADD      R0,R5,#+1
   \                     ??LongLZ_5:
   \   000000B8   ........           BL       addbits
   1022                }
   1023          
   1024            AvrLn2 += Length;
   \                     ??LongLZ_3:
   \   000000BC   080085E0           ADD      R0,R5,R8
   1025            AvrLn2 -= AvrLn2 >> 5;
   1026          
   1027            BitField=getbits();
   1028            if (AvrPlcB > 0x28ff)
   \   000000C0   ........           LDR      R8,??DataTable187  ;; AvrPlcB
   \   000000C4   000086E5           STR      R0,[R6, #+0]
   \   000000C8   C00240E0           SUB      R0,R0,R0, ASR #+5
   \   000000CC   000086E5           STR      R0,[R6, #+0]
   \   000000D0   ........           BL       getbits
   \   000000D4   009098E5           LDR      R9,[R8, #+0]
   \   000000D8   A40D59E3           CMP      R9,#+10496
   \   000000DC   030000BA           BLT      ??LongLZ_9
   1029              DistancePlace=DecodeNum(BitField,STARTHF2,DecHf2,PosHf2);
   \   000000E0   ........           LDR      R3,??DataTable180  ;; PosHf2
   \   000000E4   ........           LDR      R2,??DataTable181  ;; DecHf2
   \                     ??LongLZ_10:
   \   000000E8   0510A0E3           MOV      R1,#+5
   \   000000EC   070000EA           B        ??LongLZ_11
   1030            else
   1031              if (AvrPlcB > 0x6ff)
   \                     ??LongLZ_9:
   \   000000F0   700E59E3           CMP      R9,#+1792
   \   000000F4   020000BA           BLT      ??LongLZ_12
   1032                DistancePlace=DecodeNum(BitField,STARTHF1,DecHf1,PosHf1);
   \   000000F8   ........           LDR      R3,??DataTable163  ;; PosHf1
   \   000000FC   ........           LDR      R2,??DataTable164  ;; DecHf1
   \   00000100   F8FFFFEA           B        ??LongLZ_10
   1033              else
   1034                DistancePlace=DecodeNum(BitField,STARTHF0,DecHf0,PosHf0);
   \                     ??LongLZ_12:
   \   00000104   ........           LDR      R3,??DataTable165  ;; PosHf0
   \   00000108   ........           LDR      R2,??DataTable166  ;; DecHf0
   \   0000010C   0410A0E3           MOV      R1,#+4
   \                     ??LongLZ_11:
   \   00000110   ........           BL       DecodeNum
   \   00000114   0060A0E1           MOV      R6,R0
   1035          
   1036            AvrPlcB += DistancePlace;
   \   00000118   090086E0           ADD      R0,R6,R9
   1037            AvrPlcB -= AvrPlcB >> 8;
   \   0000011C   ........           LDR      R9,??DataTable198  ;; ChSetB
   \   00000120   000088E5           STR      R0,[R8, #+0]
   \   00000124   400440E0           SUB      R0,R0,R0, ASR #+8
   \   00000128   000088E5           STR      R0,[R8, #+0]
   \   0000012C   ........           LDR      R8,??DataTable202  ;; NToPlB
   \   00000130   FF0007E2           AND      R0,R7,#0xFF
   \   00000134   007188E0           ADD      R7,R8,R0, LSL #+2
   \   00000138   FF0006E2           AND      R0,R6,#0xFF
   \   0000013C   00A189E0           ADD      R10,R9,R0, LSL #+2
   \   00000140   020000EA           B        ??LongLZ_13
   1038            while (1)
   1039            {
   1040              Distance = ChSetB[DistancePlace & 0xff];
   1041              NewDistancePlace = NToPlB[Distance++ & 0xff]++;
   1042              if (!(Distance & 0xff))
   1043                CorrHuff(ChSetB,NToPlB);
   \                     ??LongLZ_14:
   \   00000144   0810A0E1           MOV      R1,R8
   \   00000148   0900A0E1           MOV      R0,R9
   \   0000014C   ........           BL       CorrHuff
   \                     ??LongLZ_13:
   \   00000150   00009AE5           LDR      R0,[R10, #+0]
   \   00000154   002097E5           LDR      R2,[R7, #+0]
   \   00000158   FF1000E2           AND      R1,R0,#0xFF
   \   0000015C   011198E7           LDR      R1,[R8, +R1, LSL #+2]
   \   00000160   010080E2           ADD      R0,R0,#+1
   \   00000164   012082E2           ADD      R2,R2,#+1
   \   00000168   002087E5           STR      R2,[R7, #+0]
   \   0000016C   002CB0E1           LSLS     R2,R0,#+24
   \   00000170   F3FFFF0A           BEQ      ??LongLZ_14
   1044              else
   1045                break;
   1046            }
   1047          
   1048            ChSetB[DistancePlace]=ChSetB[NewDistancePlace];
   \   00000174   011189E0           ADD      R1,R9,R1, LSL #+2
   \   00000178   002091E5           LDR      R2,[R1, #+0]
   \   0000017C   062189E7           STR      R2,[R9, +R6, LSL #+2]
   1049            ChSetB[NewDistancePlace]=Distance;
   \   00000180   000081E5           STR      R0,[R1, #+0]
   1050          
   1051            Distance=((Distance & 0xff00) | (getbits() >> 8)) >> 1;
   \   00000184   FF6C00E2           AND      R6,R0,#0xFF00
   \   00000188   ........           BL       getbits
   \   0000018C   400486E1           ORR      R0,R6,R0, ASR #+8
   \   00000190   C060A0E1           ASR      R6,R0,#+1
   1052            addbits(7);
   \   00000194   0700A0E3           MOV      R0,#+7
   \   00000198   ........           BL       addbits
   1053          
   1054            OldAvr3=AvrLn3;
   \   0000019C   ........           LDR      R1,??DataTable184  ;; AvrLn3
   1055            if (Length!=1 && Length!=4)
   \   000001A0   ........           LDR      R0,??DataTable189  ;; MaxDist3
   \   000001A4   002091E5           LDR      R2,[R1, #+0]
   \   000001A8   007090E5           LDR      R7,[R0, #+0]
   \   000001AC   0230A0E1           MOV      R3,R2
   \   000001B0   010055E3           CMP      R5,#+1
   \   000001B4   04005513           CMPNE    R5,#+4
   \   000001B8   0B00000A           BEQ      ??LongLZ_15
   1056              if (Length==0 && Distance <= MaxDist3)
   \   000001BC   000055E3           CMP      R5,#+0
   \   000001C0   0500001A           BNE      ??LongLZ_16
   \   000001C4   060057E1           CMP      R7,R6
   \   000001C8   030000BA           BLT      ??LongLZ_16
   1057              {
   1058                AvrLn3++;
   \   000001CC   012082E2           ADD      R2,R2,#+1
   \   000001D0   002081E5           STR      R2,[R1, #+0]
   1059                AvrLn3 -= AvrLn3 >> 8;
   \   000001D4   422442E0           SUB      R2,R2,R2, ASR #+8
   \   000001D8   020000EA           B        ??LongLZ_17
   1060              }
   1061              else
   1062                if (AvrLn3 > 0)
   \                     ??LongLZ_16:
   \   000001DC   010052E3           CMP      R2,#+1
   \   000001E0   010000BA           BLT      ??LongLZ_15
   1063                  AvrLn3--;
   \   000001E4   012042E2           SUB      R2,R2,#+1
   \                     ??LongLZ_17:
   \   000001E8   002081E5           STR      R2,[R1, #+0]
   1064            Length+=3;
   \                     ??LongLZ_15:
   \   000001EC   031085E2           ADD      R1,R5,#+3
   1065            if (Distance >= MaxDist3)
   \   000001F0   070056E1           CMP      R6,R7
   1066              Length++;
   \   000001F4   011081A2           ADDGE    R1,R1,#+1
   1067            if (Distance <= 256)
   \   000001F8   0120A0E3           MOV      R2,#+1
   \   000001FC   402F82E3           ORR      R2,R2,#0x100
   \   00000200   020056E1           CMP      R6,R2
   1068              Length+=8;
   \   00000204   081081B2           ADDLT    R1,R1,#+8
   1069            if (OldAvr3 > 0xb0 || AvrPlc >= 0x2a00 && OldAvr2 < 0x40)
   \   00000208   B10053E3           CMP      R3,#+177
   \   0000020C   050000AA           BGE      ??LongLZ_18
   \   00000210   ........           LDR      R2,??DataTable188  ;; AvrPlc
   \   00000214   002092E5           LDR      R2,[R2, #+0]
   \   00000218   A80D52E3           CMP      R2,#+10752
   \   0000021C   030000BA           BLT      ??LongLZ_19
   \   00000220   400054E3           CMP      R4,#+64
   \   00000224   010000AA           BGE      ??LongLZ_19
   1070              MaxDist3=0x7f00;
   \                     ??LongLZ_18:
   \   00000228   7F2CA0E3           MOV      R2,#+32512
   \   0000022C   010000EA           B        ??LongLZ_20
   1071            else
   1072              MaxDist3=0x2001;
   \                     ??LongLZ_19:
   \   00000230   0120A0E3           MOV      R2,#+1
   \   00000234   802D82E3           ORR      R2,R2,#0x2000
   1073            OldDist[OldDistPtr++]=Distance;
   \                     ??LongLZ_20:
   \   00000238   ........           LDR      R3,??DataTable210  ;; OldDist
   \   0000023C   002080E5           STR      R2,[R0, #+0]
   \   00000240   ........           LDR      R0,??DataTable157  ;; OldDistPtr
   \   00000244   002090E5           LDR      R2,[R0, #+0]
   \   00000248   026183E7           STR      R6,[R3, +R2, LSL #+2]
   1074            OldDistPtr = OldDistPtr & 3;
   \   0000024C   012082E2           ADD      R2,R2,#+1
   \   00000250   032002E2           AND      R2,R2,#0x3
   \   00000254   002080E5           STR      R2,[R0, #+0]
   1075            LastLength=Length;
   \   00000258   ........           LDR      R0,??DataTable212  ;; LastLength
   \   0000025C   001080E5           STR      R1,[R0, #+0]
   1076            LastDist=Distance;
   \   00000260   ........           LDR      R0,??DataTable211  ;; LastDist
   \   00000264   006080E5           STR      R6,[R0, #+0]
   1077            OldCopyString(Distance,Length);
   \   00000268   0600A0E1           MOV      R0,R6
   \   0000026C   ........           BL       OldCopyString
   1078          }
   \   00000270   F087BDE8           POP      {R4-R10,PC}      ;; return
   1079          
   1080          

   \                                 In segment CODE, align 4, keep-with-next
   1081          void HuffDecode()
   1082          {
   \                     HuffDecode:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1083            int CurByte,NewBytePlace;
   1084            int Length;
   1085            int Distance;
   1086            int BytePlace;
   1087          
   1088            int BitField=getbits();
   1089          
   1090            if (AvrPlc > 0x75ff)
   \   00000004   ........           LDR      R9,??DataTable188  ;; AvrPlc
   \   00000008   ........           LDR      R4,??DataTable181  ;; DecHf2
   \   0000000C   ........           LDR      R5,??DataTable180  ;; PosHf2
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   ........           BL       getbits
   \   00000018   00A099E5           LDR      R10,[R9, #+0]
   \   0000001C   00B0A0E1           MOV      R11,R0
   \   00000020   760C5AE3           CMP      R10,#+30208
   \   00000024   030000BA           BLT      ??HuffDecode_0
   1091              BytePlace=DecodeNum(BitField,STARTHF4,DecHf4,PosHf4);
   \   00000028   04329FE5           LDR      R3,??HuffDecode_1  ;; PosHf4
   \   0000002C   04229FE5           LDR      R2,??HuffDecode_1+0x4  ;; DecHf4
   \   00000030   0810A0E3           MOV      R1,#+8
   \   00000034   130000EA           B        ??HuffDecode_2
   1092            else
   1093              if (AvrPlc > 0x5dff)
   \                     ??HuffDecode_0:
   \   00000038   5E0C5AE3           CMP      R10,#+24064
   \   0000003C   030000BA           BLT      ??HuffDecode_3
   1094                BytePlace=DecodeNum(BitField,STARTHF3,DecHf3,PosHf3);
   \   00000040   F4319FE5           LDR      R3,??HuffDecode_1+0x8  ;; PosHf3
   \   00000044   F4219FE5           LDR      R2,??HuffDecode_1+0xC  ;; DecHf3
   \   00000048   0610A0E3           MOV      R1,#+6
   \   0000004C   0D0000EA           B        ??HuffDecode_2
   1095              else
   1096                if (AvrPlc > 0x35ff)
   \                     ??HuffDecode_3:
   \   00000050   D80D5AE3           CMP      R10,#+13824
   \   00000054   030000BA           BLT      ??HuffDecode_4
   1097                  BytePlace=DecodeNum(BitField,STARTHF2,DecHf2,PosHf2);
   \   00000058   0530A0E1           MOV      R3,R5
   \   0000005C   0420A0E1           MOV      R2,R4
   \                     ??HuffDecode_5:
   \   00000060   0510A0E3           MOV      R1,#+5
   \   00000064   070000EA           B        ??HuffDecode_2
   1098                else
   1099                  if (AvrPlc > 0x0dff)
   \                     ??HuffDecode_4:
   \   00000068   E00E5AE3           CMP      R10,#+3584
   \   0000006C   020000BA           BLT      ??HuffDecode_6
   1100                    BytePlace=DecodeNum(BitField,STARTHF1,DecHf1,PosHf1);
   \   00000070   ........           LDR      R3,??DataTable163  ;; PosHf1
   \   00000074   ........           LDR      R2,??DataTable164  ;; DecHf1
   \   00000078   F8FFFFEA           B        ??HuffDecode_5
   1101                  else
   1102                    BytePlace=DecodeNum(BitField,STARTHF0,DecHf0,PosHf0);
   \                     ??HuffDecode_6:
   \   0000007C   ........           LDR      R3,??DataTable165  ;; PosHf0
   \   00000080   ........           LDR      R2,??DataTable166  ;; DecHf0
   \   00000084   0410A0E3           MOV      R1,#+4
   1103            BytePlace&=0xff;
   1104            if (StMode)
   \                     ??HuffDecode_2:
   \   00000088   ........           LDR      R8,??DataTable194  ;; StMode
   \   0000008C   ........           LDR      R7,??DataTable183  ;; NumHuf
   \   00000090   ........           BL       DecodeNum
   \   00000094   FF6000E2           AND      R6,R0,#0xFF
   \   00000098   000098E5           LDR      R0,[R8, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   2400000A           BEQ      ??HuffDecode_7
   1105            {
   1106              if (BytePlace==0 && BitField > 0xfff)
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0100001A           BNE      ??HuffDecode_8
   \   000000AC   400D5BE3           CMP      R11,#+4096
   1107                BytePlace=0x100;
   \   000000B0   406FA0A3           MOVGE    R6,#+256
   1108              if (--BytePlace==-1)
   \                     ??HuffDecode_8:
   \   000000B4   016046E2           SUB      R6,R6,#+1
   \   000000B8   010076E3           CMN      R6,#+1
   \   000000BC   2700001A           BNE      ??HuffDecode_9
   1109              {
   1110                BitField=getbits();
   \   000000C0   ........           BL       getbits
   \   000000C4   00B0A0E1           MOV      R11,R0
   1111                addbits(1);
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   ........           BL       addbits
   1112                if (BitField & 0x8000)
   \   000000D0   800C1BE3           TST      R11,#0x8000
   \   000000D4   0300000A           BEQ      ??HuffDecode_10
   1113                {
   1114                  NumHuf=StMode=0;
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   000088E5           STR      R0,[R8, #+0]
   \   000000E0   000087E5           STR      R0,[R7, #+0]
   1115                  return;
   \   000000E4   F18FBDE8           POP      {R0,R4-R11,PC}
   1116                }
   1117                else
   1118                {
   1119                  Length = (BitField & 0x4000) ? 4 : 3;
   \                     ??HuffDecode_10:
   \   000000E8   400C1BE3           TST      R11,#0x4000
   \   000000EC   0460A013           MOVNE    R6,#+4
   \   000000F0   0360A003           MOVEQ    R6,#+3
   1120                  addbits(1);
   \   000000F4   0100A0E3           MOV      R0,#+1
   \   000000F8   ........           BL       addbits
   1121                  Distance=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2);
   \   000000FC   ........           BL       getbits
   \   00000100   0530A0E1           MOV      R3,R5
   \   00000104   0420A0E1           MOV      R2,R4
   \   00000108   0510A0E3           MOV      R1,#+5
   \   0000010C   ........           BL       DecodeNum
   \   00000110   0040A0E1           MOV      R4,R0
   1122                  Distance = (Distance << 5) | (getbits() >> 11);
   \   00000114   ........           BL       getbits
   \   00000118   C005A0E1           ASR      R0,R0,#+11
   \   0000011C   844280E1           ORR      R4,R0,R4, LSL #+5
   1123                  addbits(5);
   \   00000120   0500A0E3           MOV      R0,#+5
   \   00000124   ........           BL       addbits
   1124                  OldCopyString(Distance,Length);
   \   00000128   0610A0E1           MOV      R1,R6
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           BL       OldCopyString
   1125                  return;
   \   00000134   F18FBDE8           POP      {R0,R4-R11,PC}
   1126                }
   1127              }
   1128            }
   1129            else
   1130              if (NumHuf++ >= 16 && FlagsCnt==0)
   \                     ??HuffDecode_7:
   \   00000138   000097E5           LDR      R0,[R7, #+0]
   \   0000013C   011080E2           ADD      R1,R0,#+1
   \   00000140   001087E5           STR      R1,[R7, #+0]
   \   00000144   100050E3           CMP      R0,#+16
   \   00000148   040000BA           BLT      ??HuffDecode_9
   \   0000014C   ........           LDR      R0,??DataTable192  ;; FlagsCnt
   \   00000150   000090E5           LDR      R0,[R0, #+0]
   \   00000154   000050E3           CMP      R0,#+0
   1131                StMode=1;
   \   00000158   0100A003           MOVEQ    R0,#+1
   \   0000015C   00008805           STREQ    R0,[R8, #+0]
   1132            AvrPlc += BytePlace;
   \                     ??HuffDecode_9:
   \   00000160   0A0086E0           ADD      R0,R6,R10
   \   00000164   000089E5           STR      R0,[R9, #+0]
   1133            AvrPlc -= AvrPlc >> 8;
   \   00000168   400440E0           SUB      R0,R0,R0, ASR #+8
   \   0000016C   000089E5           STR      R0,[R9, #+0]
   1134            Nhfb+=16;
   \   00000170   ........           LDR      R0,??DataTable191  ;; Nhfb
   \   00000174   001090E5           LDR      R1,[R0, #+0]
   \   00000178   101081E2           ADD      R1,R1,#+16
   \   0000017C   001080E5           STR      R1,[R0, #+0]
   1135            if (Nhfb > 0xff)
   \   00000180   400F51E3           CMP      R1,#+256
   \   00000184   050000BA           BLT      ??HuffDecode_11
   1136            {
   1137              Nhfb=0x90;
   \   00000188   9010A0E3           MOV      R1,#+144
   \   0000018C   001080E5           STR      R1,[R0, #+0]
   1138              Nlzb >>= 1;
   \   00000190   ........           LDR      R0,??DataTable190  ;; Nlzb
   \   00000194   001090E5           LDR      R1,[R0, #+0]
   \   00000198   C110A0E1           ASR      R1,R1,#+1
   \   0000019C   001080E5           STR      R1,[R0, #+0]
   1139            }
   1140          
   1141            Window[UnpPtr++]=(ChSet[BytePlace]>>8);
   \                     ??HuffDecode_11:
   \   000001A0   ........           LDR      R0,??DataTable207  ;; UnpPtr
   \   000001A4   ........           LDR      R4,??DataTable197  ;; ChSet
   \   000001A8   ........           LDR      R2,??DataTable216  ;; Window
   \   000001AC   001090E5           LDR      R1,[R0, #+0]
   \   000001B0   002092E5           LDR      R2,[R2, #+0]
   \   000001B4   063194E7           LDR      R3,[R4, +R6, LSL #+2]
   1142            --DestUnpSize;
   \   000001B8   ........           LDR      R5,??DataTable203  ;; NToPl
   \   000001BC   4334A0E1           ASR      R3,R3,#+8
   \   000001C0   0230C1E7           STRB     R3,[R1, +R2]
   \   000001C4   001090E5           LDR      R1,[R0, #+0]
   \   000001C8   011081E2           ADD      R1,R1,#+1
   \   000001CC   001080E5           STR      R1,[R0, #+0]
   \   000001D0   ........           LDR      R0,??DataTable205  ;; DestUnpSize
   \   000001D4   001090E5           LDR      R1,[R0, #+0]
   \   000001D8   011041E2           SUB      R1,R1,#+1
   \   000001DC   001080E5           STR      R1,[R0, #+0]
   \   000001E0   00009DE5           LDR      R0,[SP, #+0]
   \   000001E4   FF0000E2           AND      R0,R0,#0xFF
   \   000001E8   007185E0           ADD      R7,R5,R0, LSL #+2
   \   000001EC   020000EA           B        ??HuffDecode_12
   1143          
   1144            while (1)
   1145            {
   1146              CurByte=ChSet[BytePlace];
   1147              NewBytePlace=NToPl[CurByte++ & 0xff]++;
   1148              if ((CurByte & 0xff) > 0xa1)
   1149                CorrHuff(ChSet,NToPl);
   \                     ??HuffDecode_13:
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           BL       CorrHuff
   \                     ??HuffDecode_12:
   \   000001FC   060194E7           LDR      R0,[R4, +R6, LSL #+2]
   \   00000200   002097E5           LDR      R2,[R7, #+0]
   \   00000204   FF1000E2           AND      R1,R0,#0xFF
   \   00000208   011195E7           LDR      R1,[R5, +R1, LSL #+2]
   \   0000020C   010080E2           ADD      R0,R0,#+1
   \   00000210   012082E2           ADD      R2,R2,#+1
   \   00000214   002087E5           STR      R2,[R7, #+0]
   \   00000218   FF2000E2           AND      R2,R0,#0xFF
   \   0000021C   A20052E3           CMP      R2,#+162
   \   00000220   F2FFFFAA           BGE      ??HuffDecode_13
   1150              else
   1151                break;
   1152            }
   1153          
   1154            ChSet[BytePlace]=ChSet[NewBytePlace];
   \   00000224   012194E7           LDR      R2,[R4, +R1, LSL #+2]
   \   00000228   062184E7           STR      R2,[R4, +R6, LSL #+2]
   1155            ChSet[NewBytePlace]=CurByte;
   \   0000022C   010184E7           STR      R0,[R4, +R1, LSL #+2]
   1156          }
   \   00000230   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
   \                     ??HuffDecode_1:
   \   00000234   ........           DC32     PosHf4
   \   00000238   ........           DC32     DecHf4
   \   0000023C   ........           DC32     PosHf3
   \   00000240   ........           DC32     DecHf3
   1157          
   1158          

   \                                 In segment CODE, align 4, keep-with-next
   1159          void GetFlagsBuf()
   1160          {
   \                     GetFlagsBuf:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1161            int Flags,NewFlagsPlace;
   1162            int FlagsPlace=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2);
   \   00000004   ........           LDR      R5,??DataTable204  ;; NToPlC
   \   00000008   ........           LDR      R7,??DataTable193  ;; FlagBuf
   \   0000000C   ........           LDR      R8,??DataTable201  ;; ChSetC
   \   00000010   ........           BL       getbits
   \   00000014   ........           LDR      R3,??DataTable180  ;; PosHf2
   \   00000018   ........           LDR      R2,??DataTable181  ;; DecHf2
   \   0000001C   0510A0E3           MOV      R1,#+5
   \   00000020   ........           BL       DecodeNum
   \   00000024   0040A0E1           MOV      R4,R0
   \   00000028   FF0006E2           AND      R0,R6,#0xFF
   \   0000002C   006185E0           ADD      R6,R5,R0, LSL #+2
   \   00000030   020000EA           B        ??GetFlagsBuf_0
   1163          
   1164            while (1)
   1165            {
   1166              Flags=ChSetC[FlagsPlace];
   1167              FlagBuf=Flags>>8;
   1168              NewFlagsPlace=NToPlC[Flags++ & 0xff]++;
   1169              if ((Flags & 0xff) != 0)
   1170                break;
   1171              CorrHuff(ChSetC,NToPlC);
   \                     ??GetFlagsBuf_1:
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           BL       CorrHuff
   \                     ??GetFlagsBuf_0:
   \   00000040   040198E7           LDR      R0,[R8, +R4, LSL #+2]
   \   00000044   4014A0E1           ASR      R1,R0,#+8
   \   00000048   001087E5           STR      R1,[R7, #+0]
   \   0000004C   002096E5           LDR      R2,[R6, #+0]
   \   00000050   FF1000E2           AND      R1,R0,#0xFF
   \   00000054   011195E7           LDR      R1,[R5, +R1, LSL #+2]
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   012082E2           ADD      R2,R2,#+1
   \   00000060   002086E5           STR      R2,[R6, #+0]
   \   00000064   002CB0E1           LSLS     R2,R0,#+24
   \   00000068   F1FFFF0A           BEQ      ??GetFlagsBuf_1
   1172            }
   1173          
   1174            ChSetC[FlagsPlace]=ChSetC[NewFlagsPlace];
   \   0000006C   012198E7           LDR      R2,[R8, +R1, LSL #+2]
   \   00000070   042188E7           STR      R2,[R8, +R4, LSL #+2]
   1175            ChSetC[NewFlagsPlace]=Flags;
   \   00000074   010188E7           STR      R0,[R8, +R1, LSL #+2]
   1176          }
   \   00000078   F081BDE8           POP      {R4-R8,PC}       ;; return
   1177          
   1178          

   \                                 In segment CODE, align 4, keep-with-next
   1179          void OldUnpInitData(int Solid)
   1180          {
   1181            if (!Solid)
   \                     OldUnpInitData:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   1700001A           BNE      ??OldUnpInitData_0
   1182            {
   1183              AvrPlcB=AvrLn1=AvrLn2=AvrLn3=NumHuf=Buf60=0;
   \   0000000C   ........           LDR      R0,??DataTable182  ;; Buf60
   1184              AvrPlc=0x3500;
   \   00000010   D42DA0E3           MOV      R2,#+13568
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   ........           LDR      R0,??DataTable183  ;; NumHuf
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable184  ;; AvrLn3
   \   00000024   001080E5           STR      R1,[R0, #+0]
   \   00000028   ........           LDR      R0,??DataTable185  ;; AvrLn2
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable186  ;; AvrLn1
   \   00000034   001080E5           STR      R1,[R0, #+0]
   \   00000038   ........           LDR      R0,??DataTable187  ;; AvrPlcB
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   \   00000040   ........           LDR      R0,??DataTable188  ;; AvrPlc
   \   00000044   002080E5           STR      R2,[R0, #+0]
   1185              MaxDist3=0x2001;
   \   00000048   ........           LDR      R0,??DataTable189  ;; MaxDist3
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   802D82E3           ORR      R2,R2,#0x2000
   \   00000054   002080E5           STR      R2,[R0, #+0]
   1186              Nhfb=Nlzb=0x80;
   \   00000058   ........           LDR      R2,??DataTable190  ;; Nlzb
   \   0000005C   8000A0E3           MOV      R0,#+128
   \   00000060   000082E5           STR      R0,[R2, #+0]
   \   00000064   ........           LDR      R2,??DataTable191  ;; Nhfb
   \   00000068   000082E5           STR      R0,[R2, #+0]
   1187            }
   1188            FlagsCnt=0;
   \                     ??OldUnpInitData_0:
   \   0000006C   ........           LDR      R0,??DataTable192  ;; FlagsCnt
   \   00000070   001080E5           STR      R1,[R0, #+0]
   1189            FlagBuf=0;
   \   00000074   ........           LDR      R0,??DataTable193  ;; FlagBuf
   \   00000078   001080E5           STR      R1,[R0, #+0]
   1190            StMode=0;
   \   0000007C   ........           LDR      R0,??DataTable194  ;; StMode
   \   00000080   001080E5           STR      R1,[R0, #+0]
   1191            LCount=0;
   \   00000084   ........           LDR      R0,??DataTable195  ;; LCount
   \   00000088   001080E5           STR      R1,[R0, #+0]
   1192            ReadTop=0;
   \   0000008C   ........           LDR      R0,??DataTable247  ;; ReadTop
   \   00000090   001080E5           STR      R1,[R0, #+0]
   1193          }
   \   00000094   1EFF2FE1           BX       LR               ;; return
   1194          
   1195          

   \                                 In segment CODE, align 4, keep-with-next
   1196          void InitHuff()
   1197          {
   1198            for (int I=0;I<256;I++)
   \                     InitHuff:
   \   00000000   ........           LDR      R3,??DataTable197  ;; ChSet
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   ........           LDR      R4,??DataTable198  ;; ChSetB
   \   0000000C   0000A0E3           MOV      R0,#+0
   1199            {
   1200              Place[I]=PlaceA[I]=PlaceB[I]=I;
   \                     ??InitHuff_0:
   \   00000010   94109FE5           LDR      R1,??InitHuff_1  ;; PlaceB
   1201              PlaceC[I]=(~I+1) & 0xff;
   \   00000014   94209FE5           LDR      R2,??InitHuff_1+0x4  ;; PlaceC
   \   00000018   000181E7           STR      R0,[R1, +R0, LSL #+2]
   \   0000001C   ........           LDR      R1,??DataTable199  ;; PlaceA
   \   00000020   000181E7           STR      R0,[R1, +R0, LSL #+2]
   \   00000024   88109FE5           LDR      R1,??InitHuff_1+0x8  ;; Place
   \   00000028   000181E7           STR      R0,[R1, +R0, LSL #+2]
   \   0000002C   0010E0E1           MVN      R1,R0
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   FF1001E2           AND      R1,R1,#0xFF
   \   00000038   001182E7           STR      R1,[R2, +R0, LSL #+2]
   1202              ChSet[I]=ChSetB[I]=I<<8;
   \   0000003C   0024A0E1           LSL      R2,R0,#+8
   \   00000040   002184E7           STR      R2,[R4, +R0, LSL #+2]
   \   00000044   002183E7           STR      R2,[R3, +R0, LSL #+2]
   1203              ChSetA[I]=I;
   \   00000048   ........           LDR      R2,??DataTable200  ;; ChSetA
   1204              ChSetC[I]=((~I+1) & 0xff)<<8;
   \   0000004C   0114A0E1           LSL      R1,R1,#+8
   \   00000050   000182E7           STR      R0,[R2, +R0, LSL #+2]
   \   00000054   ........           LDR      R2,??DataTable201  ;; ChSetC
   \   00000058   001182E7           STR      R1,[R2, +R0, LSL #+2]
   1205            }
   \   0000005C   010080E2           ADD      R0,R0,#+1
   \   00000060   400F50E3           CMP      R0,#+256
   \   00000064   E9FFFFBA           BLT      ??InitHuff_0
   1206            memset(NToPl,0,sizeof(NToPl));
   1207            memset(NToPlB,0,sizeof(NToPlB));
   \   00000068   ........           LDR      R5,??DataTable202  ;; NToPlB
   \   0000006C   ........           LDR      R0,??DataTable203  ;; NToPl
   \   00000070   402EA0E3           MOV      R2,#+1024
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   ........           BL       memset
   \   0000007C   402EA0E3           MOV      R2,#+1024
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       memset
   1208            memset(NToPlC,0,sizeof(NToPlC));
   \   0000008C   ........           LDR      R0,??DataTable204  ;; NToPlC
   \   00000090   402EA0E3           MOV      R2,#+1024
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   ........           BL       memset
   1209            CorrHuff(ChSetB,NToPlB);
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       CorrHuff
   1210          }
   \   000000A8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??InitHuff_1:
   \   000000AC   ........           DC32     PlaceB
   \   000000B0   ........           DC32     PlaceC
   \   000000B4   ........           DC32     Place
   1211          
   1212          

   \                                 In segment CODE, align 4, keep-with-next
   1213          void CorrHuff(int *CharSet,int *NumToPlace)
   1214          {
   \                     CorrHuff:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   1215            int I,J;
   1216            for (I=7;I>=0;I--)
   \   00000008   0710A0E3           MOV      R1,#+7
   1217              for (J=0;J<32;J++,CharSet++)
   \                     ??CorrHuff_0:
   \   0000000C   0020A0E3           MOV      R2,#+0
   1218                *CharSet=(*CharSet & ~0xff) | I;
   \                     ??CorrHuff_1:
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   012082E2           ADD      R2,R2,#+1
   \   00000018   FF30C3E3           BIC      R3,R3,#0xFF
   \   0000001C   033081E1           ORR      R3,R1,R3
   \   00000020   ........           STR      R3,[R0], #+4
   \   00000024   200052E3           CMP      R2,#+32
   \   00000028   F8FFFFBA           BLT      ??CorrHuff_1
   \   0000002C   011051E2           SUBS     R1,R1,#+1
   \   00000030   F5FFFF5A           BPL      ??CorrHuff_0
   1219            memset(NumToPlace,0,sizeof(NToPl));
   \   00000034   402EA0E3           MOV      R2,#+1024
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       memset
   1220            for (I=6;I>=0;I--)
   \   00000044   0600A0E3           MOV      R0,#+6
   1221              NumToPlace[I]=(7-I)*32;
   \                     ??CorrHuff_2:
   \   00000048   071060E2           RSB      R1,R0,#+7
   \   0000004C   8112A0E1           LSL      R1,R1,#+5
   \   00000050   001184E7           STR      R1,[R4, +R0, LSL #+2]
   \   00000054   010050E2           SUBS     R0,R0,#+1
   \   00000058   FAFFFF5A           BPL      ??CorrHuff_2
   1222          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   1223          
   1224          

   \                                 In segment CODE, align 4, keep-with-next
   1225          void OldCopyString(int Distance,int Length)
   1226          {
   1227            DestUnpSize-=Length;
   \                     OldCopyString:
   \   00000000   ........           LDR      R2,??DataTable205  ;; DestUnpSize
   \   00000004   70002DE9           PUSH     {R4-R6}
   \   00000008   003092E5           LDR      R3,[R2, #+0]
   \   0000000C   013043E0           SUB      R3,R3,R1
   \   00000010   0D0000EA           B        ??OldCopyString_0
   1228            while (Length--)
   1229            {
   1230              Window[UnpPtr]=Window[(UnpPtr-Distance) & MAXWINMASK];
   \                     ??OldCopyString_1:
   \   00000014   ........           LDR      R4,??DataTable216  ;; Window
   \   00000018   ........           LDR      R2,??DataTable207  ;; UnpPtr
   \   0000001C   00C094E5           LDR      R12,[R4, #+0]
   \   00000020   ........           LDR      R4,??DataTable217  ;; MAXWINMASK
   \   00000024   003092E5           LDR      R3,[R2, #+0]
   \   00000028   006094E5           LDR      R6,[R4, #+0]
   \   0000002C   005043E0           SUB      R5,R3,R0
   \   00000030   055006E0           AND      R5,R6,R5
   \   00000034   0C50D5E7           LDRB     R5,[R5, +R12]
   \   00000038   0C50C3E7           STRB     R5,[R3, +R12]
   1231              UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   0000003C   003092E5           LDR      R3,[R2, #+0]
   \   00000040   004094E5           LDR      R4,[R4, #+0]
   \   00000044   013083E2           ADD      R3,R3,#+1
   \   00000048   033004E0           AND      R3,R4,R3
   \                     ??OldCopyString_0:
   \   0000004C   003082E5           STR      R3,[R2, #+0]
   1232            }
   \   00000050   0120A0E1           MOV      R2,R1
   \   00000054   011042E2           SUB      R1,R2,#+1
   \   00000058   000052E3           CMP      R2,#+0
   \   0000005C   ECFFFF1A           BNE      ??OldCopyString_1
   1233          }
   \   00000060   7000BDE8           POP      {R4-R6}
   \   00000064   1EFF2FE1           BX       LR               ;; return
   1234          
   1235          

   \                                 In segment CODE, align 4, keep-with-next
   1236          int DecodeNum(int Num,int StartPos,
   1237                                         int *DecTab,int *PosTab)
   1238          {
   \                     DecodeNum:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0270A0E1           MOV      R7,R2
   1239            int I;
   1240            for (Num&=0xfff0,I=0;DecTab[I]<=Num;I++)
   \   0000000C   F010A0E3           MOV      R1,#+240
   \   00000010   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000014   006001E0           AND      R6,R1,R0
   \   00000018   000097E5           LDR      R0,[R7, #+0]
   \   0000001C   0340A0E1           MOV      R4,R3
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   000056E1           CMP      R6,R0
   \   00000028   020000AA           BGE      ??DecodeNum_0
   \   0000002C   040000EA           B        ??DecodeNum_1
   1241              StartPos++;
   \                     ??DecodeNum_2:
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   018088E2           ADD      R8,R8,#+1
   \                     ??DecodeNum_0:
   \   00000038   080197E7           LDR      R0,[R7, +R8, LSL #+2]
   \   0000003C   000056E1           CMP      R6,R0
   \   00000040   FAFFFFAA           BGE      ??DecodeNum_2
   1242            addbits(StartPos);
   \                     ??DecodeNum_1:
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       addbits
   1243            return(((Num-(I ? DecTab[I-1]:0))>>(16-StartPos))+PosTab[StartPos]);
   \   0000004C   052194E7           LDR      R2,[R4, +R5, LSL #+2]
   \   00000050   000058E3           CMP      R8,#+0
   \   00000054   08018710           ADDNE    R0,R7,R8, LSL #+2
   \   00000058   04001015           LDRNE    R0,[R0, #-4]
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0000A003           MOVEQ    R0,#+0
   \   00000064   000046E0           SUB      R0,R6,R0
   \   00000068   101061E2           RSB      R1,R1,#+16
   \   0000006C   500182E0           ADD      R0,R2,R0, ASR R1
   \   00000070   F081BDE8           POP      {R4-R8,PC}       ;; return
   1244          }
   1245          
   1246          
   1247          
   1248          ///////////unpack20
   1249          

   \                                 In segment CODE, align 4, keep-with-next
   1250          void CopyString20(int Length,int Distance)
   1251          {
   1252            LastDist=OldDist[OldDistPtr++ & 3]=Distance;
   \                     CopyString20:
   \   00000000   ........           LDR      R2,??DataTable235  ;; OldDistPtr
   \   00000004   ........           LDR      R12,??DataTable210  ;; OldDist
   \   00000008   70002DE9           PUSH     {R4-R6}
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   034003E2           AND      R4,R3,#0x3
   \   00000014   04118CE7           STR      R1,[R12, +R4, LSL #+2]
   \   00000018   013083E2           ADD      R3,R3,#+1
   \   0000001C   003082E5           STR      R3,[R2, #+0]
   \   00000020   ........           LDR      R2,??DataTable211  ;; LastDist
   1253            LastLength=Length;
   1254            DestUnpSize-=Length;
   1255          
   1256            int DestPtr=UnpPtr-Distance;
   1257            if (DestPtr<MAXWINSIZE-300 && UnpPtr<MAXWINSIZE-300)
   \   00000024   2B40E0E3           MVN      R4,#+43
   \   00000028   001082E5           STR      R1,[R2, #+0]
   \   0000002C   ........           LDR      R2,??DataTable212  ;; LastLength
   \   00000030   404FC4E3           BIC      R4,R4,#0x100
   \   00000034   000082E5           STR      R0,[R2, #+0]
   \   00000038   ........           LDR      R2,??DataTable220  ;; DestUnpSize
   \   0000003C   003092E5           LDR      R3,[R2, #+0]
   \   00000040   003043E0           SUB      R3,R3,R0
   \   00000044   003082E5           STR      R3,[R2, #+0]
   \   00000048   ........           LDR      R2,??DataTable221  ;; UnpPtr
   \   0000004C   ........           LDR      R3,??DataTable215  ;; MAXWINSIZE
   \   00000050   00C092E5           LDR      R12,[R2, #+0]
   \   00000054   003093E5           LDR      R3,[R3, #+0]
   \   00000058   01104CE0           SUB      R1,R12,R1
   \   0000005C   034084E0           ADD      R4,R4,R3
   \   00000060   ........           LDR      R3,??DataTable216  ;; Window
   \   00000064   040051E1           CMP      R1,R4
   \   00000068   04005CB1           CMPLT    R12,R4
   \   0000006C   280000AA           BGE      ??CopyString20_0
   1258            {
   1259              Window[UnpPtr++]=Window[DestPtr++];
   \   00000070   004093E5           LDR      R4,[R3, #+0]
   1260              Window[UnpPtr++]=Window[DestPtr++];
   \   00000074   030050E3           CMP      R0,#+3
   \   00000078   0450D1E7           LDRB     R5,[R1, +R4]
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   0450CCE7           STRB     R5,[R12, +R4]
   \   00000084   004092E5           LDR      R4,[R2, #+0]
   \   00000088   00C093E5           LDR      R12,[R3, #+0]
   \   0000008C   014084E2           ADD      R4,R4,#+1
   \   00000090   004082E5           STR      R4,[R2, #+0]
   \   00000094   0C50D1E7           LDRB     R5,[R1, +R12]
   \   00000098   011081E2           ADD      R1,R1,#+1
   \   0000009C   0C50C4E7           STRB     R5,[R4, +R12]
   \   000000A0   004092E5           LDR      R4,[R2, #+0]
   \   000000A4   014084E2           ADD      R4,R4,#+1
   \   000000A8   004082E5           STR      R4,[R2, #+0]
   \   000000AC   1C0000BA           BLT      ??CopyString20_1
   1261              while (Length>2)
   1262              {
   1263                Length--;
   1264                Window[UnpPtr++]=Window[DestPtr++];
   \                     ??CopyString20_2:
   \   000000B0   004093E5           LDR      R4,[R3, #+0]
   \   000000B4   005092E5           LDR      R5,[R2, #+0]
   \   000000B8   04C0D1E7           LDRB     R12,[R1, +R4]
   \   000000BC   010040E2           SUB      R0,R0,#+1
   \   000000C0   011081E2           ADD      R1,R1,#+1
   \   000000C4   04C0C5E7           STRB     R12,[R5, +R4]
   \   000000C8   004092E5           LDR      R4,[R2, #+0]
   1265              }
   \   000000CC   030050E3           CMP      R0,#+3
   \   000000D0   014084E2           ADD      R4,R4,#+1
   \   000000D4   004082E5           STR      R4,[R2, #+0]
   \   000000D8   110000BA           BLT      ??CopyString20_1
   \   000000DC   F3FFFFEA           B        ??CopyString20_2
   1266            }
   1267            else
   1268              while (Length--)
   1269              {
   1270                Window[UnpPtr]=Window[DestPtr++ & MAXWINMASK];
   \                     ??CopyString20_3:
   \   000000E0   ........           LDR      R12,??DataTable217  ;; MAXWINMASK
   \   000000E4   004093E5           LDR      R4,[R3, #+0]
   \   000000E8   00609CE5           LDR      R6,[R12, #+0]
   \   000000EC   005092E5           LDR      R5,[R2, #+0]
   \   000000F0   016006E0           AND      R6,R6,R1
   \   000000F4   0460D6E7           LDRB     R6,[R6, +R4]
   \   000000F8   011081E2           ADD      R1,R1,#+1
   \   000000FC   0460C5E7           STRB     R6,[R5, +R4]
   1271                UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   00000100   004092E5           LDR      R4,[R2, #+0]
   \   00000104   00509CE5           LDR      R5,[R12, #+0]
   \   00000108   014084E2           ADD      R4,R4,#+1
   \   0000010C   044005E0           AND      R4,R5,R4
   \   00000110   004082E5           STR      R4,[R2, #+0]
   1272              }
   \                     ??CopyString20_0:
   \   00000114   0040A0E1           MOV      R4,R0
   \   00000118   010044E2           SUB      R0,R4,#+1
   \   0000011C   000054E3           CMP      R4,#+0
   \   00000120   EEFFFF1A           BNE      ??CopyString20_3
   1273          }
   \                     ??CopyString20_1:
   \   00000124   7000BDE8           POP      {R4-R6}
   \   00000128   1EFF2FE1           BX       LR               ;; return
   1274          
   1275          

   \                                 In segment CODE, align 4, keep-with-next
   1276          void Unpack20(bool Solid)
   1277          {
   \                     Unpack20:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1278            int Bits;
   1279          
   1280            if (Suspended)
   \   00000004   ........           LDR      R7,??DataTable218  ;; Suspended
   \   00000008   ........           LDR      R6,??DataTable219  ;; WrPtr
   \   0000000C   ........           LDR      R4,??DataTable220  ;; DestUnpSize
   \   00000010   ........           LDR      R5,??DataTable221  ;; UnpPtr
   \   00000014   0080A0E1           MOV      R8,R0
   \   00000018   000097E5           LDR      R0,[R7, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   1281              UnpPtr=WrPtr;
   \   00000020   00009615           LDRNE    R0,[R6, #+0]
   \   00000024   00008515           STRNE    R0,[R5, #+0]
   \   00000028   1100001A           BNE      ??Unpack20_0
   1282            else
   1283            {
   1284              UnpInitData(Solid);
   \   0000002C   0800A0E1           MOV      R0,R8
   \   00000030   ........           BL       UnpInitData
   1285              if (!UnpReadBuf())
   \   00000034   ........           BL       UnpReadBuf
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F087BD08           POPEQ    {R4-R10,PC}
   1286                return;
   1287              if (!Solid)
   \   00000040   000058E3           CMP      R8,#+0
   \   00000044   0700001A           BNE      ??Unpack20_1
   1288                if (!ReadTables20())
   \   00000048   ........           BL       ReadTables20
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F087BD08           POPEQ    {R4-R10,PC}
   1289                  return;
   1290              --DestUnpSize;
   \   00000054   030000EA           B        ??Unpack20_1
   1291            }
   1292          
   1293            while (DestUnpSize>=0)
   1294            {
   1295              UnpPtr&=MAXWINMASK;
   1296          
   1297              if (InAddr>ReadTop-30)
   1298                if (!UnpReadBuf())
   1299                  break;
   1300              if (((WrPtr-UnpPtr) & MAXWINMASK)<270 && WrPtr!=UnpPtr)
   1301              {
   1302                OldUnpWriteBuf();
   1303                if (Suspended)
   1304                  return;
   1305              }
   1306              if (UnpAudioBlock)
   1307              {
   1308                int AudioNumber=DecodeNumber(9+UnpCurChannel);
   1309          
   1310                if (AudioNumber==256)
   1311                {
   1312                  if (!ReadTables20())
   1313                    break;
   1314                  continue;
   1315                }
   1316                Window[UnpPtr++]=DecodeAudio(AudioNumber);
   1317                if (++UnpCurChannel==UnpChannels)
   1318                  UnpCurChannel=0;
   1319                --DestUnpSize;
   1320                continue;
   1321              }
   1322          
   1323              int Number=DecodeNumber(5);
   1324              if (Number<256)
   1325              {
   1326                Window[UnpPtr++]=Number;
   \                     ??Unpack20_2:
   \   00000058   0000C9E5           STRB     R0,[R9, #+0]
   \   0000005C   000095E5           LDR      R0,[R5, #+0]
   \   00000060   010080E2           ADD      R0,R0,#+1
   \   00000064   000085E5           STR      R0,[R5, #+0]
   1327                --DestUnpSize;
   \                     ??Unpack20_1:
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   000084E5           STR      R0,[R4, #+0]
   1328                continue;
   1329              }
   \                     ??Unpack20_0:
   \   00000074   000094E5           LDR      R0,[R4, #+0]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   2E00004A           BMI      ??Unpack20_3
   \   00000080   ........           LDR      R9,??DataTable222  ;; MAXWINMASK
   \   00000084   000095E5           LDR      R0,[R5, #+0]
   \   00000088   001099E5           LDR      R1,[R9, #+0]
   \   0000008C   000001E0           AND      R0,R1,R0
   \   00000090   ........           LDR      R1,??DataTable248  ;; InAddr
   \   00000094   000085E5           STR      R0,[R5, #+0]
   \   00000098   ........           LDR      R0,??DataTable247  ;; ReadTop
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   1E0040E2           SUB      R0,R0,#+30
   \   000000A8   010050E1           CMP      R0,R1
   \   000000AC   020000AA           BGE      ??Unpack20_4
   \   000000B0   ........           BL       UnpReadBuf
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   1F00000A           BEQ      ??Unpack20_3
   \                     ??Unpack20_4:
   \   000000BC   000095E5           LDR      R0,[R5, #+0]
   \   000000C0   001096E5           LDR      R1,[R6, #+0]
   \   000000C4   003099E5           LDR      R3,[R9, #+0]
   \   000000C8   0E80A0E3           MOV      R8,#+14
   \   000000CC   408F88E3           ORR      R8,R8,#0x100
   \   000000D0   002041E0           SUB      R2,R1,R0
   \   000000D4   022003E0           AND      R2,R3,R2
   \   000000D8   080052E1           CMP      R2,R8
   \   000000DC   050000AA           BGE      ??Unpack20_5
   \   000000E0   000051E1           CMP      R1,R0
   \   000000E4   0300000A           BEQ      ??Unpack20_5
   \   000000E8   ........           BL       OldUnpWriteBuf
   \   000000EC   000097E5           LDR      R0,[R7, #+0]
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   F087BD18           POPNE    {R4-R10,PC}
   \                     ??Unpack20_5:
   \   000000F8   ........           LDR      R0,??DataTable264  ;; Window
   \   000000FC   00A095E5           LDR      R10,[R5, #+0]
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   00908AE0           ADD      R9,R10,R0
   \   00000108   ........           LDR      R0,??DataTable249  ;; UnpAudioBlock
   \   0000010C   000090E5           LDR      R0,[R0, #+0]
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   1900000A           BEQ      ??Unpack20_6
   \   00000118   ........           LDR      R8,??DataTable257  ;; UnpCurChannel
   \   0000011C   000098E5           LDR      R0,[R8, #+0]
   \   00000120   090080E2           ADD      R0,R0,#+9
   \   00000124   ........           BL       DecodeNumber
   \   00000128   400F50E3           CMP      R0,#+256
   \   0000012C   0500001A           BNE      ??Unpack20_7
   \   00000130   ........           BL       ReadTables20
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   CDFFFF1A           BNE      ??Unpack20_0
   1330              if (Number>269)
   1331              {
   1332                int Length=(LDecode[Number-=270]&0xff)+3;
   1333                if ((Bits=(LBits[Number]&0xff))>0)
   1334                {
   1335                  Length+=getbits()>>(16-Bits);
   1336                  addbits(Bits);
   1337                }
   1338          
   1339                int DistNumber=DecodeNumber(6);
   1340                int Distance=DDecode[DistNumber]+1;
   1341                if ((Bits=(DBits[DistNumber]&0xff))>0)
   1342                {
   1343                  Distance+=getbits()>>(16-Bits);
   1344                  addbits(Bits);
   1345                }
   1346          
   1347                if (Distance>=0x2000)
   1348                {
   1349                  Length++;
   1350                  if (Distance>=0x40000L)
   1351                    Length++;
   1352                }
   1353          
   1354                CopyString20(Length,Distance);
   1355                continue;
   1356              }
   1357              if (Number==269)
   1358              {
   1359                if (!ReadTables20())
   1360                  break;
   1361                continue;
   1362              }
   1363              if (Number==256)
   1364              {
   1365                CopyString20(LastLength,LastDist);
   1366                continue;
   1367              }
   1368              if (Number<261)
   1369              {
   1370                int Distance=OldDist[(OldDistPtr-(Number-256)) & 3];
   1371                int LengthNumber=DecodeNumber(7);
   1372                int Length=(LDecode[LengthNumber]&0xff)+2;
   1373                if ((Bits=(LBits[LengthNumber]&0xff))>0)
   1374                {
   1375                  Length+=getbits()>>(16-Bits);
   1376                  addbits(Bits);
   1377                }
   1378                if (Distance>=0x101)
   1379                {
   1380                  Length++;
   1381                  if (Distance>=0x2000)
   1382                  {
   1383                    Length++;
   1384                    if (Distance>=0x40000)
   1385                      Length++;
   1386                  }
   1387                }
   1388                CopyString20(Length,Distance);
   1389                continue;
   1390              }
   1391              if (Number<270)
   1392              {
   1393                int Distance=(SDDecode[Number-=261]&0xff)+1;
   1394                if ((Bits=(SDBits[Number]&0xff))>0)
   1395                {
   1396                  Distance+=getbits()>>(16-Bits);
   1397                  addbits(Bits);
   1398                }
   1399                CopyString20(2,Distance);
   1400                continue;
   1401             }
   1402            }
   1403            ReadLastTables();
   \                     ??Unpack20_3:
   \   0000013C   ........           BL       ReadLastTables
   1404            OldUnpWriteBuf();
   \   00000140   ........           BL       OldUnpWriteBuf
   1405          }
   \   00000144   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??Unpack20_7:
   \   00000148   01108AE2           ADD      R1,R10,#+1
   \   0000014C   001085E5           STR      R1,[R5, #+0]
   \   00000150   ........           BL       DecodeAudio
   \   00000154   ........           LDR      R1,??DataTable253  ;; UnpChannels
   \   00000158   0000C9E5           STRB     R0,[R9, #+0]
   \   0000015C   000098E5           LDR      R0,[R8, #+0]
   \   00000160   001091E5           LDR      R1,[R1, #+0]
   \   00000164   010080E2           ADD      R0,R0,#+1
   \   00000168   000088E5           STR      R0,[R8, #+0]
   \   0000016C   010050E1           CMP      R0,R1
   \   00000170   BCFFFF1A           BNE      ??Unpack20_1
   \   00000174   0000A0E3           MOV      R0,#+0
   \   00000178   000088E5           STR      R0,[R8, #+0]
   \   0000017C   B9FFFFEA           B        ??Unpack20_1
   \                     ??Unpack20_6:
   \   00000180   0500A0E3           MOV      R0,#+5
   \   00000184   ........           BL       DecodeNumber
   \   00000188   400F50E3           CMP      R0,#+256
   \   0000018C   B1FFFFBA           BLT      ??Unpack20_2
   \   00000190   ........           LDR      R9,??DataTable229  ;; LBits
   \   00000194   ........           LDR      R10,??DataTable230  ;; LDecode
   \   00000198   080050E1           CMP      R0,R8
   \   0000019C   230000BA           BLT      ??Unpack20_8
   \   000001A0   001068E2           RSB      R1,R8,#+0
   \   000001A4   000081E0           ADD      R0,R1,R0
   \   000001A8   0A10D0E7           LDRB     R1,[R0, +R10]
   \   000001AC   0990D0E7           LDRB     R9,[R0, +R9]
   \   000001B0   038081E2           ADD      R8,R1,#+3
   \   000001B4   010059E3           CMP      R9,#+1
   \   000001B8   050000BA           BLT      ??Unpack20_9
   \   000001BC   ........           BL       getbits
   \   000001C0   0910A0E1           MOV      R1,R9
   \   000001C4   101061E2           RSB      R1,R1,#+16
   \   000001C8   508188E0           ADD      R8,R8,R0, ASR R1
   \   000001CC   0900A0E1           MOV      R0,R9
   \   000001D0   ........           BL       addbits
   \                     ??Unpack20_9:
   \   000001D4   0600A0E3           MOV      R0,#+6
   \   000001D8   ........           BL       DecodeNumber
   \   000001DC   ........           LDR      R1,??DataTable231  ;; DDecode
   \   000001E0   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   000001E4   01A081E2           ADD      R10,R1,#+1
   \   000001E8   ........           LDR      R1,??DataTable232  ;; DBits
   \   000001EC   0190D0E7           LDRB     R9,[R0, +R1]
   \   000001F0   010059E3           CMP      R9,#+1
   \   000001F4   050000BA           BLT      ??Unpack20_10
   \   000001F8   ........           BL       getbits
   \   000001FC   0910A0E1           MOV      R1,R9
   \   00000200   101061E2           RSB      R1,R1,#+16
   \   00000204   50A18AE0           ADD      R10,R10,R0, ASR R1
   \   00000208   0900A0E1           MOV      R0,R9
   \   0000020C   ........           BL       addbits
   \                     ??Unpack20_10:
   \   00000210   800D5AE3           CMP      R10,#+8192
   \   00000214   018088A2           ADDGE    R8,R8,#+1
   \   00000218   400A5AA3           CMPGE    R10,#+262144
   \   0000021C   018088A2           ADDGE    R8,R8,#+1
   \   00000220   0A10A0E1           MOV      R1,R10
   \   00000224   0800A0E1           MOV      R0,R8
   \                     ??Unpack20_11:
   \   00000228   ........           BL       CopyString20
   \   0000022C   90FFFFEA           B        ??Unpack20_0
   \                     ??Unpack20_8:
   \   00000230   011048E2           SUB      R1,R8,#+1
   \   00000234   010050E1           CMP      R0,R1
   \   00000238   0500001A           BNE      ??Unpack20_12
   \   0000023C   ........           BL       ReadTables20
   \   00000240   000050E3           CMP      R0,#+0
   \   00000244   8AFFFF1A           BNE      ??Unpack20_0
   \   00000248   ........           BL       ReadLastTables
   \   0000024C   ........           BL       OldUnpWriteBuf
   \   00000250   F087BDE8           POP      {R4-R10,PC}
   \                     ??Unpack20_12:
   \   00000254   400F50E3           CMP      R0,#+256
   \   00000258   0400001A           BNE      ??Unpack20_13
   \   0000025C   ........           LDR      R0,??DataTable233  ;; LastDist
   \   00000260   001090E5           LDR      R1,[R0, #+0]
   \   00000264   ........           LDR      R0,??DataTable234  ;; LastLength
   \   00000268   000090E5           LDR      R0,[R0, #+0]
   \   0000026C   EDFFFFEA           B        ??Unpack20_11
   \                     ??Unpack20_13:
   \   00000270   0810C1E3           BIC      R1,R1,#0x8
   \   00000274   010050E1           CMP      R0,R1
   \   00000278   1D0000AA           BGE      ??Unpack20_14
   \   0000027C   ........           LDR      R1,??DataTable235  ;; OldDistPtr
   \   00000280   001091E5           LDR      R1,[R1, #+0]
   \   00000284   000041E0           SUB      R0,R1,R0
   \   00000288   ........           LDR      R1,??DataTable236  ;; OldDist
   \   0000028C   030000E2           AND      R0,R0,#0x3
   \   00000290   008191E7           LDR      R8,[R1, +R0, LSL #+2]
   \   00000294   0700A0E3           MOV      R0,#+7
   \   00000298   ........           BL       DecodeNumber
   \   0000029C   0A10D0E7           LDRB     R1,[R0, +R10]
   \   000002A0   0990D0E7           LDRB     R9,[R0, +R9]
   \   000002A4   02A081E2           ADD      R10,R1,#+2
   \   000002A8   010059E3           CMP      R9,#+1
   \   000002AC   050000BA           BLT      ??Unpack20_15
   \   000002B0   ........           BL       getbits
   \   000002B4   0910A0E1           MOV      R1,R9
   \   000002B8   101061E2           RSB      R1,R1,#+16
   \   000002BC   50A18AE0           ADD      R10,R10,R0, ASR R1
   \   000002C0   0900A0E1           MOV      R0,R9
   \   000002C4   ........           BL       addbits
   \                     ??Unpack20_15:
   \   000002C8   0100A0E3           MOV      R0,#+1
   \   000002CC   400F80E3           ORR      R0,R0,#0x100
   \   000002D0   000058E1           CMP      R8,R0
   \   000002D4   01A08AA2           ADDGE    R10,R10,#+1
   \   000002D8   800D58A3           CMPGE    R8,#+8192
   \   000002DC   01A08AA2           ADDGE    R10,R10,#+1
   \   000002E0   400A58A3           CMPGE    R8,#+262144
   \   000002E4   01A08AA2           ADDGE    R10,R10,#+1
   \   000002E8   0810A0E1           MOV      R1,R8
   \   000002EC   0A00A0E1           MOV      R0,R10
   \   000002F0   CCFFFFEA           B        ??Unpack20_11
   \                     ??Unpack20_14:
   \   000002F4   001061E2           RSB      R1,R1,#+0
   \   000002F8   000081E0           ADD      R0,R1,R0
   \   000002FC   ........           LDR      R1,??DataTable237  ;; SDDecode
   \   00000300   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000304   018081E2           ADD      R8,R1,#+1
   \   00000308   ........           LDR      R1,??DataTable238  ;; SDBits
   \   0000030C   0190D0E7           LDRB     R9,[R0, +R1]
   \   00000310   010059E3           CMP      R9,#+1
   \   00000314   050000BA           BLT      ??Unpack20_16
   \   00000318   ........           BL       getbits
   \   0000031C   0910A0E1           MOV      R1,R9
   \   00000320   101061E2           RSB      R1,R1,#+16
   \   00000324   508188E0           ADD      R8,R8,R0, ASR R1
   \   00000328   0900A0E1           MOV      R0,R9
   \   0000032C   ........           BL       addbits
   \                     ??Unpack20_16:
   \   00000330   0810A0E1           MOV      R1,R8
   \   00000334   0200A0E3           MOV      R0,#+2
   \   00000338   BAFFFFEA           B        ??Unpack20_11
   1406          
   1407          

   \                                 In segment CODE, align 4, keep-with-next
   1408          bool ReadTables20()
   1409          {
   \                     ReadTables20:
   \   00000000   ........           LDR      R0,??DataTable247  ;; ReadTop
   \   00000004   ........           LDR      R1,??DataTable248  ;; InAddr
   \   00000008   F04F2DE9           PUSH     {R4-R11,LR}
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   40DE4DE2           SUB      SP,SP,#+1024
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   190040E2           SUB      R0,R0,#+25
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   020000AA           BGE      ??ReadTables20_0
   1410            char BitLength[BC20];
   1411            char Table[MC20*4];
   1412            int TableSize,N,I;
   1413            if (InAddr>ReadTop-25)
   1414              if (!UnpReadBuf())
   \   00000028   ........           BL       UnpReadBuf
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   9500000A           BEQ      ??ReadTables20_1
   1415                return(false);
   1416            int BitField=getbits();
   1417            UnpAudioBlock=(BitField & 0x8000);
   \                     ??ReadTables20_0:
   \   00000034   ........           LDR      R4,??DataTable249  ;; UnpAudioBlock
   1418          
   1419            if (!(BitField & 0x4000))
   \   00000038   ........           LDR      R5,??DataTable255  ;; UnpOldTable20
   \   0000003C   ........           BL       getbits
   \   00000040   0090A0E1           MOV      R9,R0
   \   00000044   800C09E2           AND      R0,R9,#0x8000
   \   00000048   000084E5           STR      R0,[R4, #+0]
   \   0000004C   0460A0E3           MOV      R6,#+4
   \   00000050   406E86E3           ORR      R6,R6,#0x400
   \   00000054   400C19E3           TST      R9,#0x4000
   \   00000058   0300001A           BNE      ??ReadTables20_2
   1420              memset(UnpOldTable20,0,sizeof(UnpOldTable20));
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           BL       memset
   1421            addbits(2);
   1422          
   1423            if (UnpAudioBlock)
   \                     ??ReadTables20_2:
   \   0000006C   ........           LDR      R7,??DataTable253  ;; UnpChannels
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       addbits
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   0080A0E3           MOV      R8,#+0
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0B00000A           BEQ      ??ReadTables20_3
   1424            {
   1425              UnpChannels=((BitField>>12) & 3)+1;
   \   00000088   0300A0E3           MOV      R0,#+3
   \   0000008C   490600E0           AND      R0,R0,R9, ASR #+12
   \   00000090   019080E2           ADD      R9,R0,#+1
   1426              if (UnpCurChannel>=UnpChannels)
   \   00000094   ........           LDR      R0,??DataTable257  ;; UnpCurChannel
   \   00000098   009087E5           STR      R9,[R7, #+0]
   \   0000009C   001090E5           LDR      R1,[R0, #+0]
   \   000000A0   090051E1           CMP      R1,R9
   1427                UnpCurChannel=0;
   \   000000A4   008080A5           STRGE    R8,[R0, #+0]
   1428              addbits(2);
   \   000000A8   0200A0E3           MOV      R0,#+2
   \   000000AC   ........           BL       addbits
   1429              TableSize=MC20*UnpChannels;
   \   000000B0   099489E0           ADD      R9,R9,R9, LSL #+8
   \   000000B4   010000EA           B        ??ReadTables20_4
   1430            }
   1431            else
   1432              TableSize=NC20+DC20+RC20;
   \                     ??ReadTables20_3:
   \   000000B8   7690A0E3           MOV      R9,#+118
   \   000000BC   409F89E3           ORR      R9,R9,#0x100
   1433          
   1434            for (I=0;I<BC20;I++)
   \                     ??ReadTables20_4:
   \   000000C0   00A0A0E3           MOV      R10,#+0
   1435            {
   1436              BitLength[I]=(getbits() >> 12);
   \                     ??ReadTables20_5:
   \   000000C4   ........           BL       getbits
   \   000000C8   4006A0E1           ASR      R0,R0,#+12
   \   000000CC   0D10A0E1           MOV      R1,SP
   \   000000D0   0100CAE7           STRB     R0,[R10, +R1]
   1437              addbits(4);
   \   000000D4   0400A0E3           MOV      R0,#+4
   \   000000D8   ........           BL       addbits
   1438            }
   \   000000DC   01A08AE2           ADD      R10,R10,#+1
   \   000000E0   13005AE3           CMP      R10,#+19
   \   000000E4   F6FFFFBA           BLT      ??ReadTables20_5
   1439            MakeDecodeTables(BitLength,8);
   \   000000E8   0810A0E3           MOV      R1,#+8
   \   000000EC   0D00A0E1           MOV      R0,SP
   \   000000F0   ........           BL       MakeDecodeTables
   1440            I=0;
   \   000000F4   00A0A0E3           MOV      R10,#+0
   \   000000F8   050000EA           B        ??ReadTables20_6
   1441            while (I<TableSize)
   1442            {
   1443              if (InAddr>ReadTop-5)
   1444                if (!UnpReadBuf())
   1445                  return(false);
   1446              int Number=DecodeNumber(8);
   1447              if (Number<16)
   1448              {
   1449                Table[I]=(Number+UnpOldTable20[I]) & 0xf;
   \                     ??ReadTables20_7:
   \   000000FC   0520DAE7           LDRB     R2,[R10, +R5]
   \   00000100   14108DE2           ADD      R1,SP,#+20
   \   00000104   000082E0           ADD      R0,R2,R0
   \   00000108   0F0000E2           AND      R0,R0,#0xF
   \   0000010C   0100CAE7           STRB     R0,[R10, +R1]
   1450                I++;
   \   00000110   01A08AE2           ADD      R10,R10,#+1
   1451              }
   \                     ??ReadTables20_6:
   \   00000114   ........           LDR      R0,??DataTable248  ;; InAddr
   \   00000118   ........           LDR      R1,??DataTable247  ;; ReadTop
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   001091E5           LDR      R1,[R1, #+0]
   \   00000124   09005AE1           CMP      R10,R9
   \   00000128   310000AA           BGE      ??ReadTables20_8
   \   0000012C   051041E2           SUB      R1,R1,#+5
   \   00000130   000051E1           CMP      R1,R0
   \   00000134   020000AA           BGE      ??ReadTables20_9
   \   00000138   ........           BL       UnpReadBuf
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   5100000A           BEQ      ??ReadTables20_1
   \                     ??ReadTables20_9:
   \   00000144   0800A0E3           MOV      R0,#+8
   \   00000148   ........           BL       DecodeNumber
   \   0000014C   100050E3           CMP      R0,#+16
   \   00000150   E9FFFFBA           BLT      ??ReadTables20_7
   1452              else
   1453                if (Number==16)
   \   00000154   1000001A           BNE      ??ReadTables20_10
   1454                {
   1455                  N=(getbits() >> 14)+3;
   \   00000158   ........           BL       getbits
   \   0000015C   0310A0E3           MOV      R1,#+3
   \   00000160   40B781E0           ADD      R11,R1,R0, ASR #+14
   1456                  addbits(2);
   \   00000164   0200A0E3           MOV      R0,#+2
   \   00000168   ........           BL       addbits
   1457                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables20_11:
   \   0000016C   0B00A0E1           MOV      R0,R11
   \   00000170   01B040E2           SUB      R11,R0,#+1
   \   00000174   010050E3           CMP      R0,#+1
   \   00000178   E5FFFFBA           BLT      ??ReadTables20_6
   \   0000017C   09005AE1           CMP      R10,R9
   \   00000180   E3FFFFAA           BGE      ??ReadTables20_6
   1458                  {
   1459                    Table[I]=Table[I-1];
   \   00000184   14008DE2           ADD      R0,SP,#+20
   \   00000188   00008AE0           ADD      R0,R10,R0
   \   0000018C   011050E5           LDRB     R1,[R0, #-1]
   1460                    I++;
   \   00000190   01A08AE2           ADD      R10,R10,#+1
   \   00000194   0010C0E5           STRB     R1,[R0, #+0]
   \   00000198   F3FFFFEA           B        ??ReadTables20_11
   1461                  }
   1462                }
   1463                else
   1464                {
   1465                  if (Number==17)
   \                     ??ReadTables20_10:
   \   0000019C   110050E3           CMP      R0,#+17
   \   000001A0   0400001A           BNE      ??ReadTables20_12
   1466                  {
   1467                    N=(getbits() >> 13)+3;
   \   000001A4   ........           BL       getbits
   \   000001A8   0310A0E3           MOV      R1,#+3
   \   000001AC   C0B681E0           ADD      R11,R1,R0, ASR #+13
   1468                    addbits(3);
   \   000001B0   0300A0E3           MOV      R0,#+3
   \   000001B4   030000EA           B        ??ReadTables20_13
   1469                  }
   1470                  else
   1471                  {
   1472                    N=(getbits() >> 9)+11;
   \                     ??ReadTables20_12:
   \   000001B8   ........           BL       getbits
   \   000001BC   0B10A0E3           MOV      R1,#+11
   \   000001C0   C0B481E0           ADD      R11,R1,R0, ASR #+9
   1473                    addbits(7);
   \   000001C4   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables20_13:
   \   000001C8   ........           BL       addbits
   1474                  }
   1475                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables20_14:
   \   000001CC   0B00A0E1           MOV      R0,R11
   \   000001D0   01B040E2           SUB      R11,R0,#+1
   \   000001D4   010050E3           CMP      R0,#+1
   \   000001D8   CDFFFFBA           BLT      ??ReadTables20_6
   \   000001DC   09005AE1           CMP      R10,R9
   \   000001E0   CBFFFFAA           BGE      ??ReadTables20_6
   1476                    Table[I++]=0;
   \   000001E4   14008DE2           ADD      R0,SP,#+20
   \   000001E8   0080CAE7           STRB     R8,[R10, +R0]
   \   000001EC   01A08AE2           ADD      R10,R10,#+1
   \   000001F0   F5FFFFEA           B        ??ReadTables20_14
   1477                }
   1478            }
   1479            if (InAddr>ReadTop)
   \                     ??ReadTables20_8:
   \   000001F4   000051E1           CMP      R1,R0
   \   000001F8   220000BA           BLT      ??ReadTables20_15
   1480              return(true);
   1481            if (UnpAudioBlock)
   \   000001FC   000094E5           LDR      R0,[R4, #+0]
   \   00000200   000050E3           CMP      R0,#+0
   \   00000204   0D00000A           BEQ      ??ReadTables20_16
   1482              for (I=0;I<UnpChannels;I++)
   \   00000208   000097E5           LDR      R0,[R7, #+0]
   \   0000020C   00A0A0E3           MOV      R10,#+0
   \   00000210   010050E3           CMP      R0,#+1
   \   00000214   170000BA           BLT      ??ReadTables20_17
   \                     ??ReadTables20_18:
   \   00000218   000097E5           LDR      R0,[R7, #+0]
   \   0000021C   00005AE1           CMP      R10,R0
   \   00000220   140000AA           BGE      ??ReadTables20_17
   1483                MakeDecodeTables(&Table[I*MC20],9+I);
   \   00000224   09108AE2           ADD      R1,R10,#+9
   \   00000228   0A048AE0           ADD      R0,R10,R10, LSL #+8
   \   0000022C   14208DE2           ADD      R2,SP,#+20
   \   00000230   020080E0           ADD      R0,R0,R2
   \   00000234   ........           BL       MakeDecodeTables
   \   00000238   01A08AE2           ADD      R10,R10,#+1
   \   0000023C   F5FFFFEA           B        ??ReadTables20_18
   1484            else
   1485            {
   1486              MakeDecodeTables(&Table[0],5);
   \                     ??ReadTables20_16:
   \   00000240   0510A0E3           MOV      R1,#+5
   \   00000244   14008DE2           ADD      R0,SP,#+20
   \   00000248   ........           BL       MakeDecodeTables
   1487              MakeDecodeTables(&Table[NC20],6);
   \   0000024C   0610A0E3           MOV      R1,#+6
   \   00000250   490F81E2           ADD      R0,R1,#+292
   \   00000254   14208DE2           ADD      R2,SP,#+20
   \   00000258   020080E0           ADD      R0,R0,R2
   \   0000025C   ........           BL       MakeDecodeTables
   1488              MakeDecodeTables(&Table[NC20+DC20],7);
   \   00000260   0710A0E3           MOV      R1,#+7
   \   00000264   5A00A0E3           MOV      R0,#+90
   \   00000268   400F80E3           ORR      R0,R0,#0x100
   \   0000026C   14208DE2           ADD      R2,SP,#+20
   \   00000270   020080E0           ADD      R0,R0,R2
   \   00000274   ........           BL       MakeDecodeTables
   1489            }
   1490            memcpy(UnpOldTable20,Table,sizeof(UnpOldTable20));
   \                     ??ReadTables20_17:
   \   00000278   0620A0E1           MOV      R2,R6
   \   0000027C   14108DE2           ADD      R1,SP,#+20
   \   00000280   0500A0E1           MOV      R0,R5
   \   00000284   ........           _BLF     memcpy,??memcpy??rA
   1491            return(true);
   \                     ??ReadTables20_15:
   \   00000288   0100A0E3           MOV      R0,#+1
   \                     ??ReadTables20_1:
   \   0000028C   18D08DE2           ADD      SP,SP,#+24
   \   00000290   40DE8DE2           ADD      SP,SP,#+1024
   \   00000294   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1492          }
   1493          
   1494          

   \                                 In segment CODE, align 4, keep-with-next
   1495          void ReadLastTables()
   1496          {
   1497            if (ReadTop>=InAddr+5)
   \                     ReadLastTables:
   \   00000000   ........           LDR      R0,??DataTable247  ;; ReadTop
   \   00000004   ........           LDR      R1,??DataTable248  ;; InAddr
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   051081E2           ADD      R1,R1,#+5
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   0080BDB8           POPLT    {PC}
   1498              if (UnpAudioBlock)
   \   00000020   ........           LDR      R0,??DataTable249  ;; UnpAudioBlock
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0500000A           BEQ      ??ReadLastTables_0
   1499              {
   1500                if (DecodeNumber(9+UnpCurChannel)==256)
   \   00000030   ........           LDR      R0,??DataTable257  ;; UnpCurChannel
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   090080E2           ADD      R0,R0,#+9
   \   0000003C   ........           BL       DecodeNumber
   \   00000040   400F50E3           CMP      R0,#+256
   \   00000044   040000EA           B        ??ReadLastTables_1
   1501                  ReadTables20();
   1502              }
   1503              else
   1504                if (DecodeNumber(5)==269)
   \                     ??ReadLastTables_0:
   \   00000048   0500A0E3           MOV      R0,#+5
   \   0000004C   ........           BL       DecodeNumber
   \   00000050   0D10A0E3           MOV      R1,#+13
   \   00000054   401F81E3           ORR      R1,R1,#0x100
   \   00000058   010050E1           CMP      R0,R1
   \                     ??ReadLastTables_1:
   \   0000005C   0080BD18           POPNE    {PC}
   1505                  ReadTables20();
   \   00000060   ........           BL       ReadTables20
   1506          }
   \   00000064   0080BDE8           POP      {PC}             ;; return
   1507          
   1508          

   \                                 In segment CODE, align 4, keep-with-next
   1509          void UnpInitData20(int Solid)
   1510          {
   \                     UnpInitData20:
   \   00000000   00402DE9           PUSH     {LR}
   1511            if (!Solid)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0080BD18           POPNE    {PC}
   1512            {
   1513              UnpChannelDelta=UnpCurChannel=0;
   \   0000000C   ........           LDR      R1,??DataTable257  ;; UnpCurChannel
   1514              UnpChannels=1;
   1515              memset(AudV,0,sizeof(AudV));
   \   00000010   5C2FA0E3           MOV      R2,#+368
   \   00000014   000081E5           STR      R0,[R1, #+0]
   \   00000018   ........           LDR      R1,??DataTable258  ;; UnpChannelDelta
   \   0000001C   000081E5           STR      R0,[R1, #+0]
   \   00000020   ........           LDR      R0,??DataTable253  ;; UnpChannels
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
   \   0000002C   ........           LDR      R0,??DataTable256  ;; AudV
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   ........           BL       memset
   1516              memset(UnpOldTable20,0,sizeof(UnpOldTable20));
   \   00000038   ........           LDR      R0,??DataTable255  ;; UnpOldTable20
   \   0000003C   0420A0E3           MOV      R2,#+4
   \   00000040   402E82E3           ORR      R2,R2,#0x400
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           BL       memset
   1517            }
   1518          }
   \   0000004C   0080BDE8           POP      {PC}             ;; return
   1519          
   1520          

   \                                 In segment CODE, align 4, keep-with-next
   1521          char DecodeAudio(int Delta)
   1522          {
   1523          //  struct AudioVariables *V=&AudV[UnpCurChannel];
   1524            AudV[UnpCurChannel].ByteCount++;
   \                     DecodeAudio:
   \   00000000   ........           LDR      R2,??DataTable256  ;; AudV
   \   00000004   0010A0E1           MOV      R1,R0
   \   00000008   ........           LDR      R0,??DataTable257  ;; UnpCurChannel
   \   0000000C   70002DE9           PUSH     {R4-R6}
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   5C30A0E3           MOV      R3,#+92
   \   00000018   932022E0           MLA      R2,R3,R0,R2
   \   0000001C   540092E5           LDR      R0,[R2, #+84]
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   540082E5           STR      R0,[R2, #+84]
   1525            AudV[UnpCurChannel].D4=AudV[UnpCurChannel].D3;
   \   00000028   1C0092E5           LDR      R0,[R2, #+28]
   \   0000002C   200082E5           STR      R0,[R2, #+32]
   1526            AudV[UnpCurChannel].D3=AudV[UnpCurChannel].D2;
   \   00000030   180092E5           LDR      R0,[R2, #+24]
   \   00000034   1C0082E5           STR      R0,[R2, #+28]
   1527            AudV[UnpCurChannel].D2=AudV[UnpCurChannel].LastDelta-AudV[UnpCurChannel].D1;
   \   00000038   240092E5           LDR      R0,[R2, #+36]
   \   0000003C   143092E5           LDR      R3,[R2, #+20]
   \   00000040   030040E0           SUB      R0,R0,R3
   1528            AudV[UnpCurChannel].D1=AudV[UnpCurChannel].LastDelta;
   1529            int PCh=8*AudV[UnpCurChannel].LastChar+AudV[UnpCurChannel].K1*AudV[UnpCurChannel].D1+AudV[UnpCurChannel].K2*AudV[UnpCurChannel].D2+AudV[UnpCurChannel].K3*AudV[UnpCurChannel].D3+AudV[UnpCurChannel].K4*AudV[UnpCurChannel].D4+AudV[UnpCurChannel].K5*UnpChannelDelta;
   1530            PCh=(PCh>>3) & 0xFF;
   1531          
   1532            int Ch=PCh-Delta;
   \   00000044   ........           LDR      R3,??DataTable258  ;; UnpChannelDelta
   \   00000048   180082E5           STR      R0,[R2, #+24]
   \   0000004C   240092E5           LDR      R0,[R2, #+36]
   \   00000050   140082E5           STR      R0,[R2, #+20]
   \   00000054   004092E5           LDR      R4,[R2, #+0]
   \   00000058   145092E5           LDR      R5,[R2, #+20]
   \   0000005C   580092E5           LDR      R0,[R2, #+88]
   \   00000060   00C093E5           LDR      R12,[R3, #+0]
   \   00000064   950404E0           MUL      R4,R5,R4
   \   00000068   185092E5           LDR      R5,[R2, #+24]
   \   0000006C   800184E0           ADD      R0,R4,R0, LSL #+3
   \   00000070   044092E5           LDR      R4,[R2, #+4]
   \   00000074   950420E0           MLA      R0,R5,R4,R0
   \   00000078   084092E5           LDR      R4,[R2, #+8]
   \   0000007C   1C5092E5           LDR      R5,[R2, #+28]
   \   00000080   950420E0           MLA      R0,R5,R4,R0
   \   00000084   0C4092E5           LDR      R4,[R2, #+12]
   \   00000088   205092E5           LDR      R5,[R2, #+32]
   \   0000008C   950420E0           MLA      R0,R5,R4,R0
   \   00000090   104092E5           LDR      R4,[R2, #+16]
   1533          
   1534            int D=((signed char)Delta)<<3;
   1535          
   1536            AudV[UnpCurChannel].Dif[0]+=abs(D);
   \   00000094   285092E5           LDR      R5,[R2, #+40]
   \   00000098   9C0420E0           MLA      R0,R12,R4,R0
   \   0000009C   FF40A0E3           MOV      R4,#+255
   \   000000A0   C00104E0           AND      R0,R4,R0, ASR #+3
   \   000000A4   010040E0           SUB      R0,R0,R1
   \   000000A8   011CA0E1           MOV      R1,R1, LSL #+24
   \   000000AC   411CA0E1           MOV      R1,R1, ASR #+24
   \   000000B0   8111B0E1           LSLS     R1,R1,#+3
   \   000000B4   0140A0E1           MOV      R4,R1
   \   000000B8   00406442           RSBMI    R4,R4,#+0
   \   000000BC   054084E0           ADD      R4,R4,R5
   \   000000C0   284082E5           STR      R4,[R2, #+40]
   1537            AudV[UnpCurChannel].Dif[1]+=abs(D-AudV[UnpCurChannel].D1);
   \   000000C4   144092E5           LDR      R4,[R2, #+20]
   \   000000C8   2C5092E5           LDR      R5,[R2, #+44]
   \   000000CC   044051E0           SUBS     R4,R1,R4
   \   000000D0   00406442           RSBMI    R4,R4,#+0
   \   000000D4   054084E0           ADD      R4,R4,R5
   \   000000D8   2C4082E5           STR      R4,[R2, #+44]
   1538            AudV[UnpCurChannel].Dif[2]+=abs(D+AudV[UnpCurChannel].D1);
   \   000000DC   144092E5           LDR      R4,[R2, #+20]
   \   000000E0   305092E5           LDR      R5,[R2, #+48]
   \   000000E4   014094E0           ADDS     R4,R4,R1
   \   000000E8   00406442           RSBMI    R4,R4,#+0
   \   000000EC   054084E0           ADD      R4,R4,R5
   \   000000F0   304082E5           STR      R4,[R2, #+48]
   1539            AudV[UnpCurChannel].Dif[3]+=abs(D-AudV[UnpCurChannel].D2);
   \   000000F4   184092E5           LDR      R4,[R2, #+24]
   \   000000F8   345092E5           LDR      R5,[R2, #+52]
   \   000000FC   044051E0           SUBS     R4,R1,R4
   \   00000100   00406442           RSBMI    R4,R4,#+0
   \   00000104   054084E0           ADD      R4,R4,R5
   \   00000108   344082E5           STR      R4,[R2, #+52]
   1540            AudV[UnpCurChannel].Dif[4]+=abs(D+AudV[UnpCurChannel].D2);
   \   0000010C   184092E5           LDR      R4,[R2, #+24]
   \   00000110   385092E5           LDR      R5,[R2, #+56]
   \   00000114   014094E0           ADDS     R4,R4,R1
   \   00000118   00406442           RSBMI    R4,R4,#+0
   \   0000011C   054084E0           ADD      R4,R4,R5
   \   00000120   384082E5           STR      R4,[R2, #+56]
   1541            AudV[UnpCurChannel].Dif[5]+=abs(D-AudV[UnpCurChannel].D3);
   \   00000124   1C4092E5           LDR      R4,[R2, #+28]
   \   00000128   3C5092E5           LDR      R5,[R2, #+60]
   \   0000012C   044051E0           SUBS     R4,R1,R4
   \   00000130   00406442           RSBMI    R4,R4,#+0
   \   00000134   054084E0           ADD      R4,R4,R5
   \   00000138   3C4082E5           STR      R4,[R2, #+60]
   1542            AudV[UnpCurChannel].Dif[6]+=abs(D+AudV[UnpCurChannel].D3);
   \   0000013C   1C4092E5           LDR      R4,[R2, #+28]
   \   00000140   405092E5           LDR      R5,[R2, #+64]
   \   00000144   014094E0           ADDS     R4,R4,R1
   \   00000148   00406442           RSBMI    R4,R4,#+0
   \   0000014C   054084E0           ADD      R4,R4,R5
   \   00000150   404082E5           STR      R4,[R2, #+64]
   1543            AudV[UnpCurChannel].Dif[7]+=abs(D-AudV[UnpCurChannel].D4);
   \   00000154   204092E5           LDR      R4,[R2, #+32]
   \   00000158   445092E5           LDR      R5,[R2, #+68]
   \   0000015C   044051E0           SUBS     R4,R1,R4
   \   00000160   00406442           RSBMI    R4,R4,#+0
   \   00000164   054084E0           ADD      R4,R4,R5
   \   00000168   444082E5           STR      R4,[R2, #+68]
   1544            AudV[UnpCurChannel].Dif[8]+=abs(D+AudV[UnpCurChannel].D4);
   \   0000016C   204092E5           LDR      R4,[R2, #+32]
   \   00000170   485092E5           LDR      R5,[R2, #+72]
   \   00000174   014094E0           ADDS     R4,R4,R1
   \   00000178   00406442           RSBMI    R4,R4,#+0
   \   0000017C   054084E0           ADD      R4,R4,R5
   \   00000180   484082E5           STR      R4,[R2, #+72]
   1545            AudV[UnpCurChannel].Dif[9]+=abs(D-UnpChannelDelta);
   \   00000184   4C5092E5           LDR      R5,[R2, #+76]
   \   00000188   0C4051E0           SUBS     R4,R1,R12
   \   0000018C   00406442           RSBMI    R4,R4,#+0
   \   00000190   054084E0           ADD      R4,R4,R5
   \   00000194   4C4082E5           STR      R4,[R2, #+76]
   1546            AudV[UnpCurChannel].Dif[10]+=abs(D+UnpChannelDelta);
   \   00000198   504092E5           LDR      R4,[R2, #+80]
   \   0000019C   01109CE0           ADDS     R1,R12,R1
   \   000001A0   00106142           RSBMI    R1,R1,#+0
   \   000001A4   041081E0           ADD      R1,R1,R4
   \   000001A8   501082E5           STR      R1,[R2, #+80]
   1547          
   1548            UnpChannelDelta=AudV[UnpCurChannel].LastDelta=(signed char)(Ch-AudV[UnpCurChannel].LastChar);
   \   000001AC   584092E5           LDR      R4,[R2, #+88]
   \   000001B0   041040E0           SUB      R1,R0,R4
   \   000001B4   011CA0E1           MOV      R1,R1, LSL #+24
   \   000001B8   411CA0E1           MOV      R1,R1, ASR #+24
   \   000001BC   241082E5           STR      R1,[R2, #+36]
   \   000001C0   001083E5           STR      R1,[R3, #+0]
   1549            AudV[UnpCurChannel].LastChar=Ch;
   \   000001C4   580082E5           STR      R0,[R2, #+88]
   1550          
   1551            if ((AudV[UnpCurChannel].ByteCount & 0x1F)==0)
   \   000001C8   541092E5           LDR      R1,[R2, #+84]
   \   000001CC   1F0011E3           TST      R1,#0x1F
   \   000001D0   2800001A           BNE      ??DecodeAudio_1
   1552            {
   1553              int MinDif=AudV[UnpCurChannel].Dif[0],NumMinDif=0;
   \   000001D4   281092E5           LDR      R1,[R2, #+40]
   \   000001D8   0030A0E3           MOV      R3,#+0
   1554              AudV[UnpCurChannel].Dif[0]=0;
   \   000001DC   0040A0E3           MOV      R4,#+0
   \   000001E0   284082E5           STR      R4,[R2, #+40]
   1555              for (int I=1;I<sizeof(AudV[UnpCurChannel].Dif)/sizeof(AudV[UnpCurChannel].Dif[0]);I++)
   \   000001E4   01C0A0E3           MOV      R12,#+1
   \   000001E8   060000EA           B        ??DecodeAudio_2
   1556              {
   1557                if (AudV[UnpCurChannel].Dif[I]<MinDif)
   \                     ??DecodeAudio_3:
   \   000001EC   0C5182E0           ADD      R5,R2,R12, LSL #+2
   \   000001F0   286095E5           LDR      R6,[R5, #+40]
   1558                {
   1559                  MinDif=AudV[UnpCurChannel].Dif[I];
   1560                  NumMinDif=I;
   1561                }
   1562                AudV[UnpCurChannel].Dif[I]=0;
   \   000001F4   284085E5           STR      R4,[R5, #+40]
   \   000001F8   010056E1           CMP      R6,R1
   \   000001FC   0610A0B1           MOVLT    R1,R6
   \   00000200   0C30A0B1           MOVLT    R3,R12
   1563              }
   \   00000204   01C08CE2           ADD      R12,R12,#+1
   \                     ??DecodeAudio_2:
   \   00000208   0B005CE3           CMP      R12,#+11
   \   0000020C   F6FFFF3A           BCC      ??DecodeAudio_3
   1564              switch(NumMinDif)
   \   00000210   0F10E0E3           MVN      R1,#+15
   \   00000214   013043E2           SUB      R3,R3,#+1
   \   00000218   090053E3           CMP      R3,#+9
   \   0000021C   1500008A           BHI      ??DecodeAudio_1
   \   00000220   014F8FE2           ADR      R4,??DecodeAudio_0
   \   00000224   0340D4E7           LDRB     R4,[R4, R3]
   \   00000228   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??DecodeAudio_0:
   \   0000022C   02080D15           DC8      +2,+8,+13,+21
   \   00000230   1A20252B           DC8      +26,+32,+37,+43
   \   00000234   30350000           DC8      +48,+53,+0,+0
   1565              {
   1566                case 1:
   1567                  if (AudV[UnpCurChannel].K1>=-16)
   \                     ??DecodeAudio_4:
   \   00000238   003092E5           LDR      R3,[R2, #+0]
   \   0000023C   010053E1           CMP      R3,R1
   \   00000240   0C0000BA           BLT      ??DecodeAudio_1
   1568                    AudV[UnpCurChannel].K1--;
   \   00000244   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_5:
   \   00000248   001082E5           STR      R1,[R2, #+0]
   \   0000024C   090000EA           B        ??DecodeAudio_1
   1569                  break;
   1570                case 2:
   1571                  if (AudV[UnpCurChannel].K1<16)
   \                     ??DecodeAudio_6:
   \   00000250   003092E5           LDR      R3,[R2, #+0]
   \   00000254   100053E3           CMP      R3,#+16
   \   00000258   060000AA           BGE      ??DecodeAudio_1
   1572                    AudV[UnpCurChannel].K1++;
   \   0000025C   011083E2           ADD      R1,R3,#+1
   \   00000260   F8FFFFEA           B        ??DecodeAudio_5
   1573                  break;
   1574                case 3:
   1575                  if (AudV[UnpCurChannel].K2>=-16)
   \                     ??DecodeAudio_7:
   \   00000264   043092E5           LDR      R3,[R2, #+4]
   \   00000268   010053E1           CMP      R3,R1
   \   0000026C   010000BA           BLT      ??DecodeAudio_1
   1576                    AudV[UnpCurChannel].K2--;
   \   00000270   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_8:
   \   00000274   041082E5           STR      R1,[R2, #+4]
   \                     ??DecodeAudio_1:
   \   00000278   7000BDE8           POP      {R4-R6}
   \   0000027C   FF0000E2           AND      R0,R0,#0xFF
   \   00000280   1EFF2FE1           BX       LR
   1577                  break;
   1578                case 4:
   1579                  if (AudV[UnpCurChannel].K2<16)
   \                     ??DecodeAudio_9:
   \   00000284   043092E5           LDR      R3,[R2, #+4]
   \   00000288   100053E3           CMP      R3,#+16
   \   0000028C   F9FFFFAA           BGE      ??DecodeAudio_1
   1580                    AudV[UnpCurChannel].K2++;
   \   00000290   011083E2           ADD      R1,R3,#+1
   \   00000294   F6FFFFEA           B        ??DecodeAudio_8
   1581                  break;
   1582                case 5:
   1583                  if (AudV[UnpCurChannel].K3>=-16)
   \                     ??DecodeAudio_10:
   \   00000298   083092E5           LDR      R3,[R2, #+8]
   \   0000029C   010053E1           CMP      R3,R1
   \   000002A0   F4FFFFBA           BLT      ??DecodeAudio_1
   1584                    AudV[UnpCurChannel].K3--;
   \   000002A4   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_11:
   \   000002A8   081082E5           STR      R1,[R2, #+8]
   \   000002AC   F1FFFFEA           B        ??DecodeAudio_1
   1585                  break;
   1586                case 6:
   1587                  if (AudV[UnpCurChannel].K3<16)
   \                     ??DecodeAudio_12:
   \   000002B0   083092E5           LDR      R3,[R2, #+8]
   \   000002B4   100053E3           CMP      R3,#+16
   \   000002B8   EEFFFFAA           BGE      ??DecodeAudio_1
   1588                    AudV[UnpCurChannel].K3++;
   \   000002BC   011083E2           ADD      R1,R3,#+1
   \   000002C0   F8FFFFEA           B        ??DecodeAudio_11
   1589                  break;
   1590                case 7:
   1591                  if (AudV[UnpCurChannel].K4>=-16)
   \                     ??DecodeAudio_13:
   \   000002C4   0C3092E5           LDR      R3,[R2, #+12]
   \   000002C8   010053E1           CMP      R3,R1
   \   000002CC   E9FFFFBA           BLT      ??DecodeAudio_1
   1592                    AudV[UnpCurChannel].K4--;
   \   000002D0   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_14:
   \   000002D4   0C1082E5           STR      R1,[R2, #+12]
   \   000002D8   E6FFFFEA           B        ??DecodeAudio_1
   1593                  break;
   1594                case 8:
   1595                  if (AudV[UnpCurChannel].K4<16)
   \                     ??DecodeAudio_15:
   \   000002DC   0C3092E5           LDR      R3,[R2, #+12]
   \   000002E0   100053E3           CMP      R3,#+16
   \   000002E4   E3FFFFAA           BGE      ??DecodeAudio_1
   1596                    AudV[UnpCurChannel].K4++;
   \   000002E8   011083E2           ADD      R1,R3,#+1
   \   000002EC   F8FFFFEA           B        ??DecodeAudio_14
   1597                  break;
   1598                case 9:
   1599                  if (AudV[UnpCurChannel].K5>=-16)
   \                     ??DecodeAudio_16:
   \   000002F0   103092E5           LDR      R3,[R2, #+16]
   \   000002F4   010053E1           CMP      R3,R1
   \   000002F8   DEFFFFBA           BLT      ??DecodeAudio_1
   1600                    AudV[UnpCurChannel].K5--;
   \   000002FC   011043E2           SUB      R1,R3,#+1
   \   00000300   030000EA           B        ??DecodeAudio_17
   1601                  break;
   1602                case 10:
   1603                  if (AudV[UnpCurChannel].K5<16)
   \                     ??DecodeAudio_18:
   \   00000304   103092E5           LDR      R3,[R2, #+16]
   \   00000308   100053E3           CMP      R3,#+16
   \   0000030C   D9FFFFAA           BGE      ??DecodeAudio_1
   1604                    AudV[UnpCurChannel].K5++;
   \   00000310   011083E2           ADD      R1,R3,#+1
   \                     ??DecodeAudio_17:
   \   00000314   101082E5           STR      R1,[R2, #+16]
   1605                  break;
   1606              }
   1607            }
   1608            return(Ch);
   \                     ??DecodeAudio_19:
   \   00000318   D6FFFFEA           B        ??DecodeAudio_1
   1609          }
   1610          
   1611          
   1612          
   1613          

   \                                 In segment CODE, align 4, keep-with-next
   1614          int UnpRead(char *Addr,int Count)
   1615          {
   1616            int i;
   1617            i=fread32(in,Addr,Count,&err);
   \                     UnpRead:
   \   00000000   ........           LDR      R3,??DataTable266  ;; err
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   ........           LDR      R0,??DataTable267  ;; in
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0B0000EF           SWI      +11
   1618            if(i<0) return -1;
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0000E043           MVNMI    R0,#+0
   1619            return i;
   \   00000024   0080BDE8           POP      {PC}             ;; return
   1620          }
   1621          
   1622          

   \                                 In segment CODE, align 4, keep-with-next
   1623          void UnpWrite(char *Addr,int Count)
   1624          {
   1625            fwrite32(outhandle,Addr,Count,&err);
   \                     UnpWrite:
   \   00000000   ........           LDR      R3,??DataTable266  ;; err
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   ........           LDR      R0,??DataTable273  ;; outhandle
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0C0000EF           SWI      +12
   1626          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   1627          
   1628          //int getint(unsigned char *ptr){
   1629          //  return ptr[0]|(ptr[1]<<8)|((ptr[2])<<16)|((ptr[3])<<24);
   1630          //}
   1631          

   \                                 In segment CODE, align 4, keep-with-next
   1632          void prepname(char *file){
   \                     prepname:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   080000EA           B        ??prepname_0
   1633            unsigned int err;
   1634            do{
   1635              while(*++file && *file!='\\');
   \                     ??prepname_1:
   \   00000010   5C0050E3           CMP      R0,#+92
   \   00000014   0600001A           BNE      ??prepname_0
   1636              if(!*file) break;
   1637              *file=0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0000C4E5           STRB     R0,[R4, #+0]
   1638              mkdir(filename,&err);
   \   00000020   ........           LDR      R0,??DataTable274  ;; filename
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   100000EF           SWI      +16
   1639              *file='\\';
   \   0000002C   5C00A0E3           MOV      R0,#+92
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
   1640            }while(1);
   \                     ??prepname_0:
   \   00000034   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F3FFFF1A           BNE      ??prepname_1
   1641          }
   \   00000040   1180BDE8           POP      {R0,R4,PC}       ;; return
   1642            /*
   1643          int main(char *exename, char *fname)
   1644          {
   1645            int in,out;
   1646            int packsize=1, unpacksize=2, filenamesize=3;
   1647            unsigned int err;
   1648            char *buf, *file=filename;
   1649          ////// // char dummy[sizeof(MAIN_CSM)];
   1650            if(fname && (in=fopen(fname,A_ReadOnly+A_BIN,0,&err))!=-1){
   1651              strcpy(filename,fname);
   1652              file=filename+strlen(filename);
   1653              while(file>filename && *file!='\\') --file;
   1654              ++file;
   1655              while(1){
   1656                if(fread(in,file,30,&err)!=30) break;
   1657                if(getint(file)!=0x4034b50) break;
   1658                packsize=getint(file+18);
   1659                unpacksize=getint(file+22);
   1660                filenamesize=getint(file+26);
   1661                fread(in,file,filenamesize,&err);
   1662                file[filenamesize]=0;
   1663                if(file[filenamesize-1]!='/'){
   1664                  if((buf=(char*)malloc((packsize==unpacksize)?packsize:(packsize+unpacksize)))!=NULL){
   1665                    fread32(in,buf,packsize,&err);
   1666                    prepname(file);
   1667                    if ((out=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err))!=-1){
   1668                      if(packsize==unpacksize){
   1669                        fwrite32(out,buf,packsize,&err);
   1670                      }else{
   1671                        unzip((Byte*)buf,packsize,(Byte*)(buf+packsize),unpacksize);
   1672                        fwrite32(out,buf+packsize,unpacksize,&err);
   1673                      }
   1674                      fclose(out,&err);
   1675                    }
   1676                    mfree(buf);
   1677                  }
   1678                }
   1679              }
   1680          ////////  CreateCSM(&maincsm,dummy,0);  
   1681            fclose(in,&err);
   1682           }
   1683          /////// // FreeWS(ws_filelist);
   1684          /////// // ws_filelist=NULL;
   1685           SUBPROC((void *)ElfKiller);
   1686           return (0);
   1687          }
   1688          */
   1689          

   \                                 In segment CODE, align 4, keep-with-next
   1690          void ElfKiller(void)
   1691          {
   1692          extern void *ELF_BEGIN;
   1693          if(Window!=0) mfree(Window);
   \                     ElfKiller:
   \   00000000   ........           LDR      R0,??DataTable264  ;; Window
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??ElfKiller_0
   \   00000014   150000EF           SWI      +21
   1694          if(InBuf!=0) mfree(InBuf);
   \                     ??ElfKiller_0:
   \   00000018   ........           LDR      R0,??DataTable276  ;; InBuf
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??ElfKiller_1
   \   00000028   150000EF           SWI      +21
   1695          ((void (*)(void *))(mfree_adr()))(&ELF_BEGIN);
   \                     ??ElfKiller_1:
   \   0000002C   158000EF           SWI      +32789
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   04009FE5           LDR      R0,??ElfKiller_2  ;; ELF_BEGIN
   \   00000038   0040BDE8           POP      {LR}             ;; Pop
   \   0000003C   01F0A0E1           MOV      PC,R1            ;; tailcall
   \                     ??ElfKiller_2:
   \   00000040   ........           DC32     ELF_BEGIN
   1696          }
   1697          

   \                                 In segment CODE, align 4, keep-with-next
   1698          int main(char *exename, char *fname)
   1699          {
   \                     main:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0160B0E1           MOVS     R6,R1
   1700            int i;
   1701            char *file=filename;
   1702          ////// // char dummy[sizeof(MAIN_CSM)];
   1703            if(fname && (in=fopen(fname,A_ReadOnly+A_BIN,P_READ,&err))!=-1){
   \   0000000C   C000000A           BEQ      ??main_0
   \   00000010   ........           LDR      R4,??DataTable266  ;; err
   \   00000014   ........           LDR      R5,??DataTable267  ;; in
   \   00000018   0430A0E1           MOV      R3,R4
   \   0000001C   8020A0E3           MOV      R2,#+128
   \   00000020   801CA0E3           MOV      R1,#+32768
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   0A0000EF           SWI      +10
   \   0000002C   000085E5           STR      R0,[R5, #+0]
   \   00000030   010070E3           CMN      R0,#+1
   \   00000034   B600000A           BEQ      ??main_0
   \   00000038   ........           LDR      R0,??DataTable274  ;; filename
   \   0000003C   0610A0E1           MOV      R1,R6
   1704              strcpy(filename,fname);
   \   00000040   ........           _BLF     strcpy,??strcpy??rA
   1705              file=filename+strlen(filename);
   \   00000044   ........           LDR      R0,??DataTable274  ;; filename
   \   00000048   ........           _BLF     strlen,??strlen??rA
   \   0000004C   ........           LDR      R1,??DataTable274  ;; filename
   \   00000050   016080E0           ADD      R6,R0,R1
   1706              while(--file>filename && *file!='.');
   \                     ??main_1:
   \   00000054   ........           LDR      R0,??DataTable274  ;; filename
   \   00000058   016046E2           SUB      R6,R6,#+1
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   0200002A           BCS      ??main_2
   \   00000064   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000068   2E0050E3           CMP      R0,#+46
   \   0000006C   F8FFFF1A           BNE      ??main_1
   \                     ??main_2:
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   0000C6E5           STRB     R0,[R6, #+0]
   1707              *file=0;
   1708              mkdir(filename,&err);
   \   00000078   ........           LDR      R0,??DataTable274  ;; filename
   \   0000007C   0410A0E1           MOV      R1,R4
   \   00000080   100000EF           SWI      +16
   1709              *file++='\\';
   \   00000084   5C00A0E3           MOV      R0,#+92
   \   00000088   ........           STRB     R0,[R6], #+1
   1710            if(fread(in,file,7,&err)==7 && file[0]==0x52 && file[1]==0x61 && file[2]==0x72){
   \   0000008C   000095E5           LDR      R0,[R5, #+0]
   \   00000090   0430A0E1           MOV      R3,R4
   \   00000094   0720A0E3           MOV      R2,#+7
   \   00000098   0610A0E1           MOV      R1,R6
   \   0000009C   0B0000EF           SWI      +11
   \   000000A0   070050E3           CMP      R0,#+7
   \   000000A4   0000D605           LDRBEQ   R0,[R6, #+0]
   \   000000A8   52005003           CMPEQ    R0,#+82
   \   000000AC   0100D605           LDRBEQ   R0,[R6, #+1]
   \   000000B0   61005003           CMPEQ    R0,#+97
   \   000000B4   0200D605           LDRBEQ   R0,[R6, #+2]
   \   000000B8   72005003           CMPEQ    R0,#+114
   \   000000BC   9100001A           BNE      ??main_3
   1711          //  AllSize=lseek(in,0,2,&err,&err);
   1712            NextPos=0x14;
   \   000000C0   5C729FE5           LDR      R7,??main_4      ;; NextPos
   1713            UnpackInit();
   \   000000C4   5C929FE5           LDR      R9,??main_4+0x4  ;; PackSize
   \   000000C8   1400A0E3           MOV      R0,#+20
   \   000000CC   000087E5           STR      R0,[R7, #+0]
   \   000000D0   ........           BL       UnpackInit
   \   000000D4   030000EA           B        ??main_5
   1714          do{
   1715            lseek(in,NextPos,0,&err,&err);
   1716            if(fread(in,file,0x20,&err)!=0x20) break;  
   1717            HeadType=file[2]&0xff;
   1718            Flags=(file[3]&0xff)+((file[4]&0xff)<<8);
   1719            HeadSize=(file[5]&0xff)+((file[6]&0xff)<<8);
   1720            UnpSize=(file[7]&0xff)+((file[8]&0xff)<<8)
   1721              +((file[9]&0xff)<<16)+((file[10]&0xff)<<24);
   1722            PackSize=(file[11]&0xff)+((file[12]&0xff)<<8)
   1723              +((file[13]&0xff)<<16)+((file[14]&0xff)<<24);
   1724            Version=file[24]&0xff;
   1725            Method=file[25]&0xff;
   1726            NameSize=(file[26]&0xff)+((file[27]&0xff)<<8);
   1727            Attrib=file[28]&0xff;
   1728            if(Attrib & 0x10) //dir
   1729              NextPos+=HeadSize+UnpSize;
   \                     ??main_6:
   \   000000D8   002097E5           LDR      R2,[R7, #+0]
   \   000000DC   000081E0           ADD      R0,R1,R0
   \   000000E0   020080E0           ADD      R0,R0,R2
   \   000000E4   000087E5           STR      R0,[R7, #+0]
   \                     ??main_5:
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   01002DE9           PUSH     {R0}
   \   000000F0   001097E5           LDR      R1,[R7, #+0]
   \   000000F4   0430A0E1           MOV      R3,R4
   \   000000F8   000095E5           LDR      R0,[R5, #+0]
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0F0000EF           SWI      +15
   \   00000104   000095E5           LDR      R0,[R5, #+0]
   \   00000108   0430A0E1           MOV      R3,R4
   \   0000010C   2020A0E3           MOV      R2,#+32
   \   00000110   0610A0E1           MOV      R1,R6
   \   00000114   0B0000EF           SWI      +11
   \   00000118   200050E3           CMP      R0,#+32
   \   0000011C   04D08DE2           ADD      SP,SP,#+4
   \   00000120   7800001A           BNE      ??main_3
   \   00000124   0210D6E5           LDRB     R1,[R6, #+2]
   \   00000128   FC019FE5           LDR      R0,??main_4+0x8  ;; HeadType
   \   0000012C   FC819FE5           LDR      R8,??main_4+0xC  ;; Flags
   \   00000130   FCA19FE5           LDR      R10,??main_4+0x10  ;; Version
   \   00000134   FCB19FE5           LDR      R11,??main_4+0x14  ;; NameSize
   \   00000138   FCC19FE5           LDR      R12,??main_4+0x18  ;; Attrib
   \   0000013C   001080E5           STR      R1,[R0, #+0]
   \   00000140   0300D6E5           LDRB     R0,[R6, #+3]
   \   00000144   0410D6E5           LDRB     R1,[R6, #+4]
   \   00000148   010480E0           ADD      R0,R0,R1, LSL #+8
   \   0000014C   000088E5           STR      R0,[R8, #+0]
   \   00000150   0500D6E5           LDRB     R0,[R6, #+5]
   \   00000154   0610D6E5           LDRB     R1,[R6, #+6]
   \   00000158   010480E0           ADD      R0,R0,R1, LSL #+8
   \   0000015C   DC119FE5           LDR      R1,??main_4+0x1C  ;; HeadSize
   \   00000160   000081E5           STR      R0,[R1, #+0]
   \   00000164   0710D6E5           LDRB     R1,[R6, #+7]
   \   00000168   0820D6E5           LDRB     R2,[R6, #+8]
   \   0000016C   021481E0           ADD      R1,R1,R2, LSL #+8
   \   00000170   0920D6E5           LDRB     R2,[R6, #+9]
   \   00000174   021881E0           ADD      R1,R1,R2, LSL #+16
   \   00000178   0A20D6E5           LDRB     R2,[R6, #+10]
   \   0000017C   021C81E0           ADD      R1,R1,R2, LSL #+24
   \   00000180   BC219FE5           LDR      R2,??main_4+0x20  ;; UnpSize
   \   00000184   001082E5           STR      R1,[R2, #+0]
   \   00000188   0B20D6E5           LDRB     R2,[R6, #+11]
   \   0000018C   0C30D6E5           LDRB     R3,[R6, #+12]
   \   00000190   032482E0           ADD      R2,R2,R3, LSL #+8
   \   00000194   0D30D6E5           LDRB     R3,[R6, #+13]
   \   00000198   032882E0           ADD      R2,R2,R3, LSL #+16
   \   0000019C   0E30D6E5           LDRB     R3,[R6, #+14]
   \   000001A0   032C82E0           ADD      R2,R2,R3, LSL #+24
   \   000001A4   002089E5           STR      R2,[R9, #+0]
   \   000001A8   1820D6E5           LDRB     R2,[R6, #+24]
   \   000001AC   00208AE5           STR      R2,[R10, #+0]
   \   000001B0   1930D6E5           LDRB     R3,[R6, #+25]
   \   000001B4   8C219FE5           LDR      R2,??main_4+0x24  ;; Method
   \   000001B8   003082E5           STR      R3,[R2, #+0]
   \   000001BC   1A20D6E5           LDRB     R2,[R6, #+26]
   \   000001C0   1B30D6E5           LDRB     R3,[R6, #+27]
   \   000001C4   032482E0           ADD      R2,R2,R3, LSL #+8
   \   000001C8   00208BE5           STR      R2,[R11, #+0]
   \   000001CC   1C30D6E5           LDRB     R3,[R6, #+28]
   \   000001D0   00308CE5           STR      R3,[R12, #+0]
   \   000001D4   100013E3           TST      R3,#0x10
   \   000001D8   BEFFFF1A           BNE      ??main_6
   1730            else{
   1731              if(fread(in,file,NameSize,&err)!=NameSize) break;  
   \   000001DC   000095E5           LDR      R0,[R5, #+0]
   \   000001E0   0430A0E1           MOV      R3,R4
   \   000001E4   0610A0E1           MOV      R1,R6
   \   000001E8   0B0000EF           SWI      +11
   \   000001EC   00109BE5           LDR      R1,[R11, #+0]
   \   000001F0   010050E1           CMP      R0,R1
   \   000001F4   4300001A           BNE      ??main_3
   1732              file[NameSize]=0;
   1733              prepname(file);
   1734              if ((outhandle=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err))!=-1){
   \   000001F8   ........           LDR      R11,??DataTable273  ;; outhandle
   \   000001FC   0000A0E3           MOV      R0,#+0
   \   00000200   0600C1E7           STRB     R0,[R1, +R6]
   \   00000204   0600A0E1           MOV      R0,R6
   \   00000208   ........           BL       prepname
   \   0000020C   ........           LDR      R0,??DataTable274  ;; filename
   \   00000210   0430A0E1           MOV      R3,R4
   \   00000214   602FA0E3           MOV      R2,#+384
   \   00000218   0210A0E3           MOV      R1,#+2
   \   0000021C   811C81E3           ORR      R1,R1,#0x8100
   \   00000220   0A0000EF           SWI      +10
   \   00000224   00008BE5           STR      R0,[R11, #+0]
   \   00000228   010070E3           CMN      R0,#+1
   \   0000022C   ADFFFF0A           BEQ      ??main_5
   1735              lseek(in,NextPos+=HeadSize,0,&err,&err);
   \   00000230   08119FE5           LDR      R1,??main_4+0x1C  ;; HeadSize
   \   00000234   000097E5           LDR      R0,[R7, #+0]
   \   00000238   001091E5           LDR      R1,[R1, #+0]
   \   0000023C   0430A0E1           MOV      R3,R4
   \   00000240   001081E0           ADD      R1,R1,R0
   \   00000244   001087E5           STR      R1,[R7, #+0]
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   01002DE9           PUSH     {R0}
   \   00000250   000095E5           LDR      R0,[R5, #+0]
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0F0000EF           SWI      +15
   1736               DestUnpSize=PackSize;
   \   0000025C   000099E5           LDR      R0,[R9, #+0]
   \   00000260   ........           LDR      R1,??DataTable275  ;; DestUnpSize
   1737               NextPos+=UnpSize;
   \   00000264   002097E5           LDR      R2,[R7, #+0]
   \   00000268   000081E5           STR      R0,[R1, #+0]
   \   0000026C   D0109FE5           LDR      R1,??main_4+0x20  ;; UnpSize
   \   00000270   001091E5           LDR      R1,[R1, #+0]
   \   00000274   022081E0           ADD      R2,R1,R2
   \   00000278   002087E5           STR      R2,[R7, #+0]
   1738                if(PackSize!=UnpSize && PackSize>0)
   \   0000027C   010050E1           CMP      R0,R1
   \   00000280   04D08DE2           ADD      SP,SP,#+4
   \   00000284   1900000A           BEQ      ??main_7
   \   00000288   010050E3           CMP      R0,#+1
   \   0000028C   170000BA           BLT      ??main_7
   1739                  DoUnpack(Version,(Flags & 0x10)!=0);
   \   00000290   000098E5           LDR      R0,[R8, #+0]
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   FF0000E2           AND      R0,R0,#0xFF
   \   0000029C   201201E0           AND      R1,R1,R0, LSR #+4
   \   000002A0   00009AE5           LDR      R0,[R10, #+0]
   \   000002A4   ........           BL       DoUnpack
   1740                else //store
   1741                 while(PackSize>0){
   1742                   i=(PackSize<MAX_SIZE)?PackSize:MAX_SIZE;
   1743                   fread32(in,InBuf,i,&err);
   1744                   fwrite32(outhandle,InBuf,i,&err);
   1745                   PackSize-=i;
   1746                 }
   1747               fclose(outhandle,&err);
   \                     ??main_8:
   \   000002A8   00009BE5           LDR      R0,[R11, #+0]
   \   000002AC   0410A0E1           MOV      R1,R4
   \   000002B0   0D0000EF           SWI      +13
   \   000002B4   8BFFFFEA           B        ??main_5
   \                     ??main_9:
   \   000002B8   ........           LDR      R10,??DataTable276  ;; InBuf
   \   000002BC   000095E5           LDR      R0,[R5, #+0]
   \   000002C0   00109AE5           LDR      R1,[R10, #+0]
   \   000002C4   0430A0E1           MOV      R3,R4
   \   000002C8   0820A0E1           MOV      R2,R8
   \   000002CC   0B0000EF           SWI      +11
   \   000002D0   00109AE5           LDR      R1,[R10, #+0]
   \   000002D4   00009BE5           LDR      R0,[R11, #+0]
   \   000002D8   0430A0E1           MOV      R3,R4
   \   000002DC   0820A0E1           MOV      R2,R8
   \   000002E0   0C0000EF           SWI      +12
   \   000002E4   000099E5           LDR      R0,[R9, #+0]
   \   000002E8   080040E0           SUB      R0,R0,R8
   \   000002EC   000089E5           STR      R0,[R9, #+0]
   \                     ??main_7:
   \   000002F0   008099E5           LDR      R8,[R9, #+0]
   \   000002F4   010058E3           CMP      R8,#+1
   \   000002F8   EAFFFFBA           BLT      ??main_8
   \   000002FC   800C58E3           CMP      R8,#+32768
   \   00000300   808CA0A3           MOVGE    R8,#+32768
   \   00000304   EBFFFFEA           B        ??main_9
   1748              }
   1749            }
   1750          }while(1);//NextPos<AllSize-10);
   1751          }
   1752          fclose(in,&err);
   \                     ??main_3:
   \   00000308   000095E5           LDR      R0,[R5, #+0]
   \   0000030C   0410A0E1           MOV      R1,R4
   \   00000310   0D0000EF           SWI      +13
   1753            }
   1754            SUBPROC((void *)ElfKiller);
   \                     ??main_0:
   \   00000314   30009FE5           LDR      R0,??main_4+0x28  ;; ElfKiller
   \   00000318   710100EF           SWI      +369
   1755           return 0;
   \   0000031C   0000A0E3           MOV      R0,#+0
   \   00000320   F28FBDE8           POP      {R1,R4-R11,PC}   ;; return
   \                     ??main_4:
   \   00000324   ........           DC32     NextPos
   \   00000328   ........           DC32     PackSize
   \   0000032C   ........           DC32     HeadType
   \   00000330   ........           DC32     Flags
   \   00000334   ........           DC32     Version
   \   00000338   ........           DC32     NameSize
   \   0000033C   ........           DC32     Attrib
   \   00000340   ........           DC32     HeadSize
   \   00000344   ........           DC32     UnpSize
   \   00000348   ........           DC32     Method
   \   0000034C   ........           DC32     ElfKiller
   1756          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     UnpAllBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     LL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     MAXWINMASK

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     Suspended

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     FileExtracted

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     LBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     LDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     DDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     DBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     SDDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     SDBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   ........           DC32     InBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable60:
   \   00000000   ........           DC32     UnpSomeRead

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable63:
   \   00000000   ........           DC32     DestUnpSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   ........           DC32     UnpBlockType

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     PrevLowDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     LowDistRepCount

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     TablesRead

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   ........           DC32     LastLength

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     LastDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     MAXWINSIZE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     Window

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   ........           DC32     UnpOldTable

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   ........           DC32     UnpPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   ........           DC32     InBit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   ........           DC32     InAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   ........           DC32     PPMError

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   ........           DC32     WrittenFileSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable89:
   \   00000000   ........           DC32     ReadBorder

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     LL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable91:
   \   00000000   ........           DC32     DecodeN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable98:
   \   00000000   ........           DC32     InAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     ReadTop

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   ........           DC32     Suspended

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   ........           DC32     WrPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   ........           DC32     outhandle

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   ........           DC32     err

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable110:
   \   00000000   ........           DC32     UnpSomeRead

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable112:
   \   00000000   ........           DC32     UnpAllBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable140:
   \   00000000   ........           DC32     PosL2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable141:
   \   00000000   ........           DC32     DecL2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable142:
   \   00000000   ........           DC32     PosL1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable143:
   \   00000000   ........           DC32     DecL1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable157:
   \   00000000   ........           DC32     OldDistPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable163:
   \   00000000   ........           DC32     PosHf1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable164:
   \   00000000   ........           DC32     DecHf1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable165:
   \   00000000   ........           DC32     PosHf0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable166:
   \   00000000   ........           DC32     DecHf0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable180:
   \   00000000   ........           DC32     PosHf2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable181:
   \   00000000   ........           DC32     DecHf2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable182:
   \   00000000   ........           DC32     Buf60

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable183:
   \   00000000   ........           DC32     NumHuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable184:
   \   00000000   ........           DC32     AvrLn3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable185:
   \   00000000   ........           DC32     AvrLn2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable186:
   \   00000000   ........           DC32     AvrLn1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable187:
   \   00000000   ........           DC32     AvrPlcB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable188:
   \   00000000   ........           DC32     AvrPlc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable189:
   \   00000000   ........           DC32     MaxDist3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable190:
   \   00000000   ........           DC32     Nlzb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable191:
   \   00000000   ........           DC32     Nhfb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable192:
   \   00000000   ........           DC32     FlagsCnt

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable193:
   \   00000000   ........           DC32     FlagBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable194:
   \   00000000   ........           DC32     StMode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable195:
   \   00000000   ........           DC32     LCount

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable197:
   \   00000000   ........           DC32     ChSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable198:
   \   00000000   ........           DC32     ChSetB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable199:
   \   00000000   ........           DC32     PlaceA

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable200:
   \   00000000   ........           DC32     ChSetA

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable201:
   \   00000000   ........           DC32     ChSetC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable202:
   \   00000000   ........           DC32     NToPlB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable203:
   \   00000000   ........           DC32     NToPl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable204:
   \   00000000   ........           DC32     NToPlC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable205:
   \   00000000   ........           DC32     DestUnpSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable207:
   \   00000000   ........           DC32     UnpPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable210:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable211:
   \   00000000   ........           DC32     LastDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable212:
   \   00000000   ........           DC32     LastLength

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable215:
   \   00000000   ........           DC32     MAXWINSIZE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable216:
   \   00000000   ........           DC32     Window

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable217:
   \   00000000   ........           DC32     MAXWINMASK

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable218:
   \   00000000   ........           DC32     Suspended

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable219:
   \   00000000   ........           DC32     WrPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable220:
   \   00000000   ........           DC32     DestUnpSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable221:
   \   00000000   ........           DC32     UnpPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable222:
   \   00000000   ........           DC32     MAXWINMASK

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable229:
   \   00000000   ........           DC32     LBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable230:
   \   00000000   ........           DC32     LDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable231:
   \   00000000   ........           DC32     DDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable232:
   \   00000000   ........           DC32     DBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable233:
   \   00000000   ........           DC32     LastDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable234:
   \   00000000   ........           DC32     LastLength

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable235:
   \   00000000   ........           DC32     OldDistPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable236:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable237:
   \   00000000   ........           DC32     SDDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable238:
   \   00000000   ........           DC32     SDBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable247:
   \   00000000   ........           DC32     ReadTop

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable248:
   \   00000000   ........           DC32     InAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable249:
   \   00000000   ........           DC32     UnpAudioBlock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable253:
   \   00000000   ........           DC32     UnpChannels

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable255:
   \   00000000   ........           DC32     UnpOldTable20

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable256:
   \   00000000   ........           DC32     AudV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable257:
   \   00000000   ........           DC32     UnpCurChannel

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable258:
   \   00000000   ........           DC32     UnpChannelDelta

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable264:
   \   00000000   ........           DC32     Window

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable266:
   \   00000000   ........           DC32     err

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable267:
   \   00000000   ........           DC32     in

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable273:
   \   00000000   ........           DC32     outhandle

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable274:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable275:
   \   00000000   ........           DC32     DestUnpSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable276:
   \   00000000   ........           DC32     InBuf

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LDecode>`:
   \   00000000   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48
   \              0607080A0C0E
   \              1014181C2028
   \              30          
   \   00000013   384050607080       DC8 56, 64, 80, 96, 112, 128, 160, 192, 224
   \              A0C0E0      

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LBits>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4
   \              000001010101
   \              020202020303
   \              0303040404  
   \   00000017   0405050505         DC8 4, 5, 5, 5, 5

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DDecode>`:
   \   00000000   000000000100       DC32 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256
   \              000002000000
   \              030000000400
   \              000006000000
   \              080000000C00
   \              000010000000
   \              180000002000
   \              000030000000
   \              400000006000
   \              000080000000
   \              C00000000001
   \              0000        
   \   00000044   800100000002       DC32 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288
   \              000000030000
   \              000400000006
   \              000000080000
   \              000C00000010
   \              000000180000
   \              002000000030
   \              0000        
   \   00000070   004000000060       DC32 16384, 24576, 32768, 49152, 65536, 98304, 131072, 196608, 262144
   \              000000800000
   \              00C000000000
   \              010000800100
   \              000002000000
   \              030000000400
   \   00000094   000005000000       DC32 327680, 393216, 458752, 524288, 589824, 655360, 720896, 786432
   \              060000000700
   \              000008000000
   \              090000000A00
   \              00000B000000
   \              0C00        
   \   000000B4   00000D000000       DC32 851968, 917504, 983040
   \              0E0000000F00

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DBits>`:
   \   00000000   000000000101       DC8 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
   \              020203030404
   \              050506060707
   \              08080909    
   \   00000016   0A0A0B0B0C0C       DC8 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16
   \              0D0D0E0E0F0F
   \              1010101010  
   \   00000027   101010101010       DC8 16, 16, 16, 16, 16, 16, 16, 16, 16
   \              101010      

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DBitLengthCounts>`:
   \   00000000   040000000200       DC32 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14, 0, 12
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000E00
   \              000000000000
   \              0C000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SDDecode>`:
   \   00000000   000408102040       DC8 0, 4, 8, 16, 32, 64, 128, 192
   \              80C0        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SDBits>`:
   \   00000000   020203040506       DC8 2, 2, 3, 4, 5, 6, 6, 6
   \              0606        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LLSize>`:
   \   00000000   2B0100003C00       DC32 299, 60, 28, 20, 17, 298, 48, 28, 19, 257, 257, 257, 257
   \              00001C000000
   \              140000001100
   \              00002A010000
   \              300000001C00
   \              000013000000
   \              010100000101
   \              000001010000
   \              01010000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecL1>`:
   \   00000000   0080000000A0       DC32 32768, 40960, 49152, 53248, 57344, 59904, 60928, 61440, 61952
   \              000000C00000
   \              00D0000000E0
   \              000000EA0000
   \              00EE000000F0
   \              000000F20000
   \   00000024   00F20000FFFF       DC32 61952, 65535
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosL1>`:
   \   00000000   000000000000       DC32 0, 0, 0, 2, 3, 5, 7, 11, 16, 20, 24, 32, 32
   \              000000000000
   \              020000000300
   \              000005000000
   \              070000000B00
   \              000010000000
   \              140000001800
   \              000020000000
   \              20000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecL2>`:
   \   00000000   00A0000000C0       DC32 40960, 49152, 53248, 57344, 59904, 60928, 61440, 61952, 62016
   \              000000D00000
   \              00E0000000EA
   \              000000EE0000
   \              00F0000000F2
   \              000040F20000
   \   00000024   FFFF0000           DC32 65535

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosL2>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 5, 7, 9, 13, 18, 22, 26, 34, 36
   \              000000000000
   \              000000000500
   \              000007000000
   \              090000000D00
   \              000012000000
   \              160000001A00
   \              000022000000
   \              24000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf0>`:
   \   00000000   0080000000C0       DC32 32768, 49152, 57344, 61952, 61952, 61952, 61952, 61952, 65535
   \              000000E00000
   \              00F2000000F2
   \              000000F20000
   \              00F2000000F2
   \              0000FFFF0000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf0>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 8, 16, 24, 33, 33, 33, 33, 33
   \              000000000000
   \              000000000000
   \              000008000000
   \              100000001800
   \              000021000000
   \              210000002100
   \              000021000000
   \              21000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf1>`:
   \   00000000   0020000000C0       DC32 8192, 49152, 57344, 61440, 61952, 61952, 63456, 65535
   \              000000E00000
   \              00F0000000F2
   \              000000F20000
   \              E0F70000FFFF
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf1>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 4, 44, 60, 76, 80, 80, 127
   \              000000000000
   \              000000000000
   \              000000000000
   \              040000002C00
   \              00003C000000
   \              4C0000005000
   \              000050000000
   \              7F000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf2>`:
   \   00000000   001000000024       DC32 4096, 9216, 32768, 49152, 64000, 65535, 65535, 65535
   \              000000800000
   \              00C0000000FA
   \              0000FFFF0000
   \              FFFF0000FFFF
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf2>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 2, 7, 53, 117, 233, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              020000000700
   \              000035000000
   \              75000000E900
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf3>`:
   \   00000000   000800000024       DC32 2048, 9216, 60928, 65152, 65535, 65535, 65535
   \              000000EE0000
   \              80FE0000FFFF
   \              0000FFFF0000
   \              FFFF0000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf3>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 2, 16, 218, 251, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000200
   \              000010000000
   \              DA000000FB00
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf4>`:
   \   00000000   00FF0000FFFF       DC32 65280, 65535, 65535, 65535, 65535, 65535
   \              0000FFFF0000
   \              FFFF0000FFFF
   \              0000FFFF0000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf4>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              FF0000000000
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortLen1>`:
   \   00000000   010000000300       DC32 1, 3, 4, 4, 5, 6, 7, 8, 8, 4, 4, 5, 6, 6, 4, 0
   \              000004000000
   \              040000000500
   \              000006000000
   \              070000000800
   \              000008000000
   \              040000000400
   \              000005000000
   \              060000000600
   \              000004000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortXor1>`:
   \   00000000   00000000A000       DC32 0, 160, 208, 224, 240, 248, 252, 254, 255, 192, 128, 144, 152, 156
   \              0000D0000000
   \              E0000000F000
   \              0000F8000000
   \              FC000000FE00
   \              0000FF000000
   \              C00000008000
   \              000090000000
   \              980000009C00
   \              0000        
   \   00000038   B0000000           DC32 176

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortLen2>`:
   \   00000000   020000000300       DC32 2, 3, 3, 3, 4, 4, 5, 6, 6, 4, 4, 5, 6, 6, 4, 0
   \              000003000000
   \              030000000400
   \              000004000000
   \              050000000600
   \              000006000000
   \              040000000400
   \              000005000000
   \              060000000600
   \              000004000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortXor2>`:
   \   00000000   000000004000       DC32 0, 64, 96, 160, 208, 224, 240, 248, 252, 192, 128, 144, 152, 156
   \              000060000000
   \              A0000000D000
   \              0000E0000000
   \              F0000000F800
   \              0000FC000000
   \              C00000008000
   \              000090000000
   \              980000009C00
   \              0000        
   \   00000038   B0000000           DC32 176
   1757          
   1758           
   1759          
   1760          //      sprintf(filename,"\n%d %d %d",packsize,unpacksize,filenamesize);
   1761          //   out=fopen("0:\\ZBin\\123",A_ReadWrite+A_BIN+A_Append+A_Create,P_READ+P_WRITE,&err);
   1762          //   fwrite(out,filename,100,&err);
   1763          //   fclose(out,&err);
   1764          
   1765          
   1766          //  out=fopen("0:\\ZBin\\123",A_ReadWrite+A_BIN+A_Append+A_Create,P_READ+P_WRITE,&err);
   1767          //  fwrite32(out,filename,100,&err);
   1768          //  fclose(out,&err);
   1769            //fread32(in,filename,100,&err);

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     CopyString          12
     CopyString20        12
     CorrHuff             8
     DecodeAudio         12
     DecodeNum           24
     DecodeNumber        16
     DoUnpack             4
     ElfKiller            4
     GetFlagsBuf         24
     HuffDecode          40
     InitBitInput         0
     InitHuff            12
     InitLL               0
     IsFileExtracted      0
     LongLZ              32
     MakeDecodeTables   148
     OldCopyString       12
     OldUnpInitData       0
     OldUnpWriteBuf      28
     ReadEndOfBlock      20
     ReadLastTables       4
     ReadTables         460
     ReadTables20      1084
     SetDestSize          0
     SetSuspended         0
     ShortLZ             40
     UnpInitData         12
     UnpInitData20        4
     UnpRead              4
     UnpReadBuf          24
     UnpWrite             4
     UnpWriteArea         4
     UnpWriteBuf         12
     UnpWriteData        12
     Unpack15            36
     Unpack20            32
     Unpack29            36
     UnpackInit          12
     addbits              0
     getbits              0
     main                44
     memset               0
     prepname            12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     filename                        256
     memset                           24
     in                                4
     outhandle                         4
     err                               4
     HeadType                          4
     Flags                             4
     HeadSize                          4
     PackSize                          4
     UnpSize                           4
     Version                           4
     Method                            4
     NameSize                          4
     NextPos                           4
     Attrib                            4
     AllSize                           4
     MAX_SIZE                          4
     MAXWINSIZE                        4
     MAXWINMASK                        4
     SIZEOF_SHORTBLOCKHEAD             4
     LHD_SOLID                         4
     ATTR_SUB                          4
     LOW_DIST_REP_COUNT                4
     BLOCK_LZ                          4
     BLOCK_PPM                         4
     LDecode                          28
     LBits                            28
     DDecode                         192
     DBits                            48
     DBitLengthCounts                 76
     SDDecode                          8
     SDBits                            8
     LLSize                           52
     DecodeN                        7380
     LL                             1820
     InitLL                           60
     UnpOldTable                     404
     Window                            4
     InBuf                             4
     InAddr                            4
     InBit                             4
     InitBitInput                     24
     addbits                          40
     getbits                          72
     PPMEscChar                        4
     LastFilter                        4
     TablesRead                        4
     OldDist                          16
     OldDistPtr                        4
     LastDist                          4
     LastLength                        4
     UnpPtr                            4
     WrPtr                             4
     ReadTop                           4
     ReadBorder                        4
     UnpBlockType                      4
     DestUnpSize                       4
     Suspended                         4
     UnpAllBuf                         4
     UnpSomeRead                       4
     WrittenFileSize                   4
     FileExtracted                     4
     PPMError                          4
     PrevLowDist                       4
     LowDistRepCount                   4
     ChSet                          1024
     ChSetA                         1024
     ChSetB                         1024
     ChSetC                         1024
     Place                          1024
     PlaceA                         1024
     PlaceB                         1024
     PlaceC                         1024
     NToPl                          1024
     NToPlB                         1024
     NToPlC                         1024
     FlagBuf                           4
     AvrPlc                            4
     AvrPlcB                           4
     AvrLn1                            4
     AvrLn2                            4
     AvrLn3                            4
     Buf60                             4
     NumHuf                            4
     StMode                            4
     LCount                            4
     FlagsCnt                          4
     Nhfb                              4
     Nlzb                              4
     MaxDist3                          4
     UnpOldTable20                  1028
     UnpAudioBlock                     4
     UnpChannels                       4
     UnpCurChannel                     4
     UnpChannelDelta                   4
     AudV                            368
     IsFileExtracted                  12
     SetDestSize                      24
     SetSuspended                     12
     UnpackInit                      144
     DoUnpack                         92
     CopyString                      176
     DecodeNumber                    336
     Unpack29                        984
     ReadEndOfBlock                  128
     UnpReadBuf                      168
     UnpWriteBuf                      36
     UnpWriteArea                     36
     UnpWriteData                     84
     ReadTables                      716
     UnpInitData                     196
     MakeDecodeTables                380
     DecL1                            44
     PosL1                            52
     DecL2                            40
     PosL2                            52
     DecHf0                           36
     PosHf0                           52
     DecHf1                           32
     PosHf1                           52
     DecHf2                           32
     PosHf2                           52
     DecHf3                           28
     PosHf3                           52
     DecHf4                           24
     PosHf4                           52
     Unpack15                        452
     OldUnpWriteBuf                  152
     ShortLZ                         684
     ShortLen1                        64
     ShortXor1                        60
     ShortLen2                        64
     ShortXor2                        60
     LongLZ                          628
     HuffDecode                      580
     GetFlagsBuf                     124
     OldUnpInitData                  152
     InitHuff                        184
     CorrHuff                         96
     OldCopyString                   104
     DecodeNum                       116
     CopyString20                    300
     Unpack20                        828
     ReadTables20                    664
     ReadLastTables                  104
     UnpInitData20                    80
     DecodeAudio                     796
     UnpRead                          40
     UnpWrite                         32
     prepname                         68
     ElfKiller                        68
     main                            848
     ??DataTable17                     4
     ??DataTable25                     4
     ??DataTable34                     4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable48                     4
     ??DataTable49                     4
     ??DataTable51                     4
     ??DataTable52                     4
     ??DataTable56                     4
     ??DataTable60                     4
     ??DataTable63                     4
     ??DataTable69                     4
     ??DataTable71                     4
     ??DataTable72                     4
     ??DataTable74                     4
     ??DataTable75                     4
     ??DataTable77                     4
     ??DataTable78                     4
     ??DataTable79                     4
     ??DataTable80                     4
     ??DataTable81                     4
     ??DataTable83                     4
     ??DataTable84                     4
     ??DataTable85                     4
     ??DataTable86                     4
     ??DataTable87                     4
     ??DataTable89                     4
     ??DataTable90                     4
     ??DataTable91                     4
     ??DataTable98                     4
     ??DataTable99                     4
     ??DataTable100                    4
     ??DataTable105                    4
     ??DataTable108                    4
     ??DataTable109                    4
     ??DataTable110                    4
     ??DataTable112                    4
     ??DataTable140                    4
     ??DataTable141                    4
     ??DataTable142                    4
     ??DataTable143                    4
     ??DataTable157                    4
     ??DataTable163                    4
     ??DataTable164                    4
     ??DataTable165                    4
     ??DataTable166                    4
     ??DataTable180                    4
     ??DataTable181                    4
     ??DataTable182                    4
     ??DataTable183                    4
     ??DataTable184                    4
     ??DataTable185                    4
     ??DataTable186                    4
     ??DataTable187                    4
     ??DataTable188                    4
     ??DataTable189                    4
     ??DataTable190                    4
     ??DataTable191                    4
     ??DataTable192                    4
     ??DataTable193                    4
     ??DataTable194                    4
     ??DataTable195                    4
     ??DataTable197                    4
     ??DataTable198                    4
     ??DataTable199                    4
     ??DataTable200                    4
     ??DataTable201                    4
     ??DataTable202                    4
     ??DataTable203                    4
     ??DataTable204                    4
     ??DataTable205                    4
     ??DataTable207                    4
     ??DataTable210                    4
     ??DataTable211                    4
     ??DataTable212                    4
     ??DataTable215                    4
     ??DataTable216                    4
     ??DataTable217                    4
     ??DataTable218                    4
     ??DataTable219                    4
     ??DataTable220                    4
     ??DataTable221                    4
     ??DataTable222                    4
     ??DataTable229                    4
     ??DataTable230                    4
     ??DataTable231                    4
     ??DataTable232                    4
     ??DataTable233                    4
     ??DataTable234                    4
     ??DataTable235                    4
     ??DataTable236                    4
     ??DataTable237                    4
     ??DataTable238                    4
     ??DataTable247                    4
     ??DataTable248                    4
     ??DataTable249                    4
     ??DataTable253                    4
     ??DataTable255                    4
     ??DataTable256                    4
     ??DataTable257                    4
     ??DataTable258                    4
     ??DataTable264                    4
     ??DataTable266                    4
     ??DataTable267                    4
     ??DataTable273                    4
     ??DataTable274                    4
     ??DataTable275                    4
     ??DataTable276                    4
     ?<Initializer for LDecode>       28
     ?<Initializer for LBits>         28
     ?<Initializer for DDecode>      192
     ?<Initializer for DBits>         48
     ?<Initializer for DBitLengthCounts>
                                      76
     ?<Initializer for SDDecode>       8
     ?<Initializer for SDBits>         8
     ?<Initializer for LLSize>        52
     ?<Initializer for DecL1>         44
     ?<Initializer for PosL1>         52
     ?<Initializer for DecL2>         40
     ?<Initializer for PosL2>         52
     ?<Initializer for DecHf0>        36
     ?<Initializer for PosHf0>        52
     ?<Initializer for DecHf1>        32
     ?<Initializer for PosHf1>        52
     ?<Initializer for DecHf2>        32
     ?<Initializer for PosHf2>        52
     ?<Initializer for DecHf3>        28
     ?<Initializer for PosHf3>        52
     ?<Initializer for DecHf4>        24
     ?<Initializer for PosHf4>        52
     ?<Initializer for ShortLen1>     64
     ?<Initializer for ShortXor1>     60
     ?<Initializer for ShortLen2>     64
     ?<Initializer for ShortXor2>     60
      Others                         232

 
 11 496 bytes in segment CODE
     28 bytes in segment DATA_C
  1 288 bytes in segment DATA_I
  1 288 bytes in segment DATA_ID
 22 768 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 11 288 bytes of CODE  memory (+ 232 bytes shared)
  1 316 bytes of CONST memory
 24 056 bytes of DATA  memory

Errors: none
Warnings: none

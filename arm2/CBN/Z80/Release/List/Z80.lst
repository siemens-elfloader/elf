##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    31/Mar/2011  22:56:22 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CBN\Z80\Z80.C                                 #
#    Command line    =  C:\arm\CBN\Z80\Z80.C -D NEWSGOLD -D UNPACK -lC       #
#                       C:\arm\CBN\Z80\Release\List\ -o                      #
#                       C:\arm\CBN\Z80\Release\Obj\ -s9 --no_unroll          #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --char_is_signed --fpu None -I "C:\arm2\Embedded     #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\CBN\Z80\Release\List\Z80.lst                  #
#    Object file     =  C:\arm\CBN\Z80\Release\Obj\Z80.r79                   #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CBN\Z80\Z80.C
      1          
      2          //часть inline функципй (типа popw) могут содержать ошибки
      3          //где _pc++ ++ !!!!!!!!!!! не проверялись!!!
      4          //также возможны ошибки из-за убранного &0xff в некоторых местах (для ускорения)
      5          
      6          //#pragma optimize=no_code_motion
      7          
      8          //z80 emulator
      9          //Взято с http://cbn.narod.ru  (c)bn
     10          //при сборке добавить в проект библ. Zlib (взять из других примеров)
     11          //и #define UNPACK #define NEWSGOLD
     12          // функцию loadfile взять из сорцов словаря, например
     13          // поддержка rar, 7z вырезана
     14          
     15          #include "..\swilib.h"
     16          
     17          #define public
     18          #define private
     19          #define static
     20          #define protected
     21          #define final
     22          #define boolean char
     23          #define byte char
     24          #define false 0
     25          #define true 1
     26          #define null 0
     27          //#define u16 unsigned short
     28          #define useasm
     29          
     30          inline int max(int x, int y){ return (x>y)?x:y;}
     31          inline int min(int x, int y){ return (x<y)?x:y;}
     32          
     33          extern void lddrr(void *to, void *from, int size);
     34          extern void ldirr(void *to, void *from, int size);
     35          
     36          public final void ex_af_af();
     37          public void reset();
     38          

   \                                 In segment DATA_I, align 4, align-sorted
     39          char *Title="Z80 0.88 (c)bn";
   \                     Title:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for Title>`
     40          void UpdateCSMname();
     41          

   \                                 In segment DATA_Z, align 4, align-sorted
     42          char filename[128], *file;
   \                     filename:
   \   00000000                      DS8 128

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     file:
   \   00000000                      DS8 4
     43          //unsigned int err;
     44          

   \                                 In segment DATA_C, align 4, align-sorted
     45          const int paramlength=151;
   \                     paramlength:
   \   00000000   97000000           DC32 151

   \                                 In segment DATA_C, align 4, align-sorted
     46          const unsigned char fpstab[]={262/5,262/6,262/7,262/8,262/9,262/10,262/11,262/12,262/13,262/14};
   \                     fpstab:
   \   00000000   342B25201D1A       DC8 52, 43, 37, 32, 29, 26, 23, 21, 20, 18, 0, 0
   \              171514120000

   \                                 In segment DATA_Z, align 4, align-sorted
     47          char param[151];
   \                     param:
   \   00000000                      DS8 152

   \                                 In segment DATA_Z, align 4, align-sorted
     48          char menu[256];
   \                     menu:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 1, align-sorted
     49          unsigned char count, redkey, rrkey;
   \                     count:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     redkey:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     rrkey:
   \   00000000                      DS8 1
     50          

   \                                 In segment DATA_Z, align 4, align-sorted
     51          GBSTMR timer;
   \                     timer:
   \   00000000                      DS8 16
     52          //WSHDR *info_ws=0;
     53          
     54          #define RGB8(R,G,B) (B+(G<<2)+(R<<5))
     55          

   \                                 In segment DATA_I, align 4, align-sorted
     56          char help[]=
   \                     help:
   \   00000000                      DS8 160
   \   000000A0                      REQUIRE `?<Initializer for help>`
     57          " Z80 elf 0.88"
     58          "\n1.Load 0-9,#"
     59          "\n2.Save 0-9,#"
     60          "\n3.Fps 0-9:%d"
     61          "\n4.Int 1-5:%d"
     62          "\n7.Rotate"
     63          "\n8.Resize"
     64          "\nLeft:Altern Key"
     65          "\nGreen:Redefine:"
     66          "\nkey:value:Green"
     67          "\ncbn.narod.ru"
     68          "\ncbn@yandex.ru";
     69          
     70          private final void execute_id_cb(int op, int z);
     71          public int inb( int port );
     72          private final int execute_cb();
     73          public void outb( int port, int outByte, int tstates );
     74          private final int execute_id();
     75          private final int execute_ed( int local_tstates );
     76          void loadsave(int num, boolean save);
     77          void drawhelp();
     78          //void debsave();
     79          

   \                                 In segment DATA_I, align 4, align-sorted
     80            int  maxx=176>>3;
   \                     maxx:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for maxx>`

   \                                 In segment DATA_Z, align 1, align-sorted
     81            boolean ldir=false, fz128=false, fsna=true, fneed128=false, 
   \                     ldir:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fz128:
   \   00000000                      DS8 1

   \                                 In segment DATA_I, align 1, align-sorted
   \                     fsna:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for fsna>`

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fneed128:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     82              frotate=false, fzxrotate=false, fzxsmall=false;
   \                     frotate:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fzxrotate:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fzxsmall:
   \   00000000                      DS8 1
     83          

   \                                 In segment DATA_I, align 4, align-sorted
     84            volatile int mode=100;
   \                     mode:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for mode>`

   \                                 In segment DATA_Z, align 4, align-sorted
     85            volatile  int minx=0, miny=0;
   \                     minx:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     miny:
   \   00000000                      DS8 4
     86          
     87          extern char *screen;//[width*height]; // Экран 132*176
     88          extern int width, height, screensize;
     89          extern void DrawScreen(); // Функция перерисовки экрана
     90          extern unsigned char C65, S75, EL71;

   \                                 In segment DATA_Z, align 4, align-sorted
     91          char scrbuf[192*256];//буфер экрана
   \                     scrbuf:
   \   00000000                      DS8 49152
     92          

   \                                 In segment DATA_I, align 4, align-sorted
     93            int maxy=132>>3; ///ПОСЧИТАТЬ!
   \                     maxy:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for maxy>`
     94            

   \                                 In segment DATA_Z, align 4, align-sorted
     95            unsigned char *scrrot=null; //free!!!
   \                     scrrot:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     96            unsigned char  *mem=null, *zx=null ;// new byte[ 65536 ]; //free!!
   \                     mem:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     zx:
   \   00000000                      DS8 4
     97          

   \                                 In segment DATA_I, align 4, align-sorted
     98            int newBorder = 7; 
   \                     newBorder:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for newBorder>`

   \                                 In segment DATA_Z, align 4, align-sorted
     99          	int t, tm, tmp, temp; //temp
   \                     tm:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     tmp:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     temp:
   \   00000000                      DS8 4

   \                                 In segment DATA_C, align 4, align-sorted
    100          	const int zxpage[]= //page0-7
   \                     zxpage:
   \   00000000   000001000040       DC32 65536, 81920, 32768, 98304, 114688, 16384, 131072, 147456
   \              010000800000
   \              0080010000C0
   \              010000400000
   \              000002000040
   \              0200        
    101          		{0x10000, 0x14000, 0x8000, 0x18000, 0x1c000, 0x4000, 0x20000, 0x24000};

   \                                 In segment DATA_C, align 4, align-sorted
    102          	const int romstart=0x10000, rompage=0x4000, rombuf1=0x14000,
   \                     romstart:
   \   00000000   00000100           DC32 65536

   \                                 In segment DATA_C, align 4, align-sorted
   \                     rompage:
   \   00000000   00400000           DC32 16384

   \                                 In segment DATA_C, align 4, align-sorted
   \                     rombuf1:
   \   00000000   00400100           DC32 81920

   \                                 In segment DATA_C, align 4, align-sorted
    103          	  rombuf2=0, rom48size=0x20040, rom128size=0x30000, rom48=0x28000, rom128=0x2c000, rombank=0xc000;
   \                     rombuf2:
   \   00000000   00000000           DC32 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     rom48size:
   \   00000000   40000200           DC32 131136

   \                                 In segment DATA_C, align 4, align-sorted
   \                     rom128size:
   \   00000000   00000300           DC32 196608

   \                                 In segment DATA_C, align 4, align-sorted
   \                     rom48:
   \   00000000   00800200           DC32 163840

   \                                 In segment DATA_C, align 4, align-sorted
   \                     rom128:
   \   00000000   00C00200           DC32 180224

   \                                 In segment DATA_C, align 4, align-sorted
   \                     rombank:
   \   00000000   00C00000           DC32 49152

   \                                 In segment DATA_Z, align 1, align-sorted
    104          	byte pport=0, trdos=0;//35 offset
   \                     pport:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     trdos:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 4, align-sorted
    105          	int keylines[8];	// Линии кл.
   \                     keylines:
   \   00000000                      DS8 32
    106            //int colors[] = {0,0xee,0xee0000,0xee00ee, // Цвета
    107            //	  0xee00,0xeeee,0xeeee00,0xeeeeee,
    108          	//  0,0xff,0xff0000,0xff00ff,
    109          	//  0xff00,0xffff,0xffff00,0xffffff};

   \                                 In segment DATA_I, align 4, align-sorted
    110            byte colors[] = {0,0x2,0xc0,0xc2, // Цвета ? 0x3  0xc3
   \                     colors:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for colors>`
    111            	0x18,0x1e,0xd8,0xda, //?1f
    112          	  0,0x3,0xe0,0xe3,
    113          	  0x1c,0x1f,0xfc,0xff};
    114          

   \                                 In segment DATA_I, align 4, align-sorted
    115            int fps=262/6, tst=4;
   \                     fps:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for fps>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     `tst`:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for tst>`

   \                                 In segment DATA_Z, align 4, align-sorted
    116            int alternate=0;
   \                     alternate:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    117            byte *tape=null;
   \                     tape:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    118          	int *tapeidx=null;
   \                     tapeidx:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    119          	int tapecur=0, tapeptr=0;
   \                     tapecur:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     tapeptr:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 1, align-sorted
    120          	boolean autostart=true, startape=false;//?
   \                     autostart:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for autostart>`

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     startape:
   \   00000000                      DS8 1
    121          

   \                                 In segment DATA_Z, align 4, align-sorted
    122          	public int zxfilesize=0;
   \                     zxfilesize:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
    123            public int tstatesPerInterrupt=4*20000; //rp.mhz 4000 000
   \                     tstatesPerInterrupt:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for tstatesPerInterrupt>`
    124          
    125          

   \                                 In segment CODE, align 4, keep-with-next
    126          void drawsym(char *out, char c){ // Отобразить символ на экране
    127            int i,j;
    128            byte b, *bptr=(char*)mem+((fz128)?rom48:romstart)+0x3d00+((c-=0x20)<=0?0:(c<<3));
   \                     drawsym:
   \   00000000   ........           LDR      R2,??DataTable0  ;; fz128
   \   00000004   ........           LDR      R3,??DataTable48  ;; mem
   \   00000008   30002DE9           PUSH     {R4,R5}
   \   0000000C   D020D2E1           LDRSB    R2,[R2, #+0]
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   201041E2           SUB      R1,R1,#+32
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   A02BA013           MOVNE    R2,#+163840
   \   00000020   402BA003           MOVEQ    R2,#+65536
   \   00000024   011CA0E1           MOV      R1,R1, LSL #+24
   \   00000028   411CA0E1           MOV      R1,R1, ASR #+24
   \   0000002C   010051E3           CMP      R1,#+1
   \   00000030   0010A0B3           MOVLT    R1,#+0
   \   00000034   8111A0A1           LSLGE    R1,R1,#+3
   \   00000038   032082E0           ADD      R2,R2,R3
   \   0000003C   021081E0           ADD      R1,R1,R2
   \   00000040   F41D81E2           ADD      R1,R1,#+15616
    129            for(j=0;j<8;j++){
   \   00000044   0020A0E3           MOV      R2,#+0
    130              b=*bptr++;
   \                     ??drawsym_0:
   \   00000048   ........           LDRSB    R3,[R1], #+1
    131              for(i=0;i<8;i++){
   \   0000004C   00C0A0E3           MOV      R12,#+0
    132                *out++=(b&0x80)?0xff:3; //colors
   \                     ??drawsym_1:
   \   00000050   0040A0E1           MOV      R4,R0
   \   00000054   010084E2           ADD      R0,R4,#+1
   \   00000058   800013E3           TST      R3,#0x80
   \   0000005C   0050E013           MVNNE    R5,#+0
   \   00000060   0350A003           MOVEQ    R5,#+3
   \   00000064   0050C4E5           STRB     R5,[R4, #+0]
    133                b<<=1;
   \   00000068   833CA0E1           LSL      R3,R3,#+25
   \   0000006C   433CA0E1           ASR      R3,R3,#+24
    134              }
   \   00000070   01C08CE2           ADD      R12,R12,#+1
   \   00000074   08005CE3           CMP      R12,#+8
   \   00000078   F4FFFFBA           BLT      ??drawsym_1
    135              out+=width-8;
   \   0000007C   ........           LDR      R3,??DataTable7  ;; width
    136            }
   \   00000080   012082E2           ADD      R2,R2,#+1
   \   00000084   003093E5           LDR      R3,[R3, #+0]
   \   00000088   080052E3           CMP      R2,#+8
   \   0000008C   000083E0           ADD      R0,R3,R0
   \   00000090   080040E2           SUB      R0,R0,#+8
   \   00000094   EBFFFFBA           BLT      ??drawsym_0
    137          }
   \   00000098   3000BDE8           POP      {R4,R5}
   \   0000009C   1EFF2FE1           BX       LR               ;; return
    138          

   \                                 In segment CODE, align 4, keep-with-next
    139          void drawhelp(){
   \                     drawhelp:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    140            int i=0,j,x=0,y=0;
   \   00000004   0040A0E3           MOV      R4,#+0
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   0460A0E1           MOV      R6,R4
    141          //  char *s=help;
    142            for(j=0;j<10;j++)
   \   00000010   0400A0E1           MOV      R0,R4
    143              if(fpstab[j]==fps) break;
   \                     ??drawhelp_0:
   \   00000014   ........           LDR      R1,??DataTable3  ;; fpstab
   \   00000018   ........           LDR      R2,??DataTable4  ;; fps
   \   0000001C   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000020   002092E5           LDR      R2,[R2, #+0]
   \   00000024   020051E1           CMP      R1,R2
   \   00000028   0300000A           BEQ      ??drawhelp_1
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \   00000030   0A0050E3           CMP      R0,#+10
   \   00000034   F6FFFFBA           BLT      ??drawhelp_0
    144            if(j==10) j=0;
   \   00000038   0000A003           MOVEQ    R0,#+0
    145            sprintf(menu,help,j+5,tst);
   \                     ??drawhelp_1:
   \   0000003C   98709FE5           LDR      R7,??drawhelp_2  ;; menu
   \   00000040   ........           LDR      R1,??DataTable5  ;; `tst`
   \   00000044   052080E2           ADD      R2,R0,#+5
   \   00000048   003091E5           LDR      R3,[R1, #+0]
   \   0000004C   8C109FE5           LDR      R1,??drawhelp_2+0x4  ;; help
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   160000EF           SWI      +22
   \   00000058   090000EA           B        ??drawhelp_3
    146            while(menu[i]){
    147              if(menu[i]=='\n' || x>=width/8){ x=0; ++y;}
    148              if(y>=height/10) break;
    149              drawsym((char*)screen+y*width*10+x*8+4,menu[i]);
   \                     ??drawhelp_4:
   \   0000005C   ........           LDR      R3,??DataTable6  ;; screen
   \   00000060   960000E0           MUL      R0,R6,R0
   \   00000064   003093E5           LDR      R3,[R3, #+0]
   \   00000068   0A20A0E3           MOV      R2,#+10
   \   0000006C   853183E0           ADD      R3,R3,R5, LSL #+3
   \   00000070   923020E0           MLA      R0,R2,R0,R3
    150              ++x;
   \   00000074   015085E2           ADD      R5,R5,#+1
   \   00000078   040080E2           ADD      R0,R0,#+4
   \   0000007C   ........           BL       drawsym
    151              ++i;
   \   00000080   014084E2           ADD      R4,R4,#+1
   \                     ??drawhelp_3:
   \   00000084   D71094E1           LDRSB    R1,[R4, +R7]
   \   00000088   000051E3           CMP      R1,#+0
   \   0000008C   F080BD08           POPEQ    {R4-R7,PC}
   \   00000090   ........           LDR      R0,??DataTable7  ;; width
   \   00000094   0A0051E3           CMP      R1,#+10
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   0300000A           BEQ      ??drawhelp_5
   \   000000A0   4021A0E1           ASR      R2,R0,#+2
   \   000000A4   A22E80E0           ADD      R2,R0,R2, LSR #+29
   \   000000A8   C20155E1           CMP      R5,R2, ASR #+3
   \   000000AC   010000BA           BLT      ??drawhelp_6
   \                     ??drawhelp_5:
   \   000000B0   0050A0E3           MOV      R5,#+0
   \   000000B4   016086E2           ADD      R6,R6,#+1
   \                     ??drawhelp_6:
   \   000000B8   ........           LDR      R2,??DataTable8  ;; height
   \   000000BC   ........           LDR      R3,??DataTable9  ;; 0x66666667
   \   000000C0   002092E5           LDR      R2,[R2, #+0]
   \   000000C4   93C2CEE0           SMULL    R12,LR,R3,R2
   \   000000C8   4EE1A0E1           ASR      LR,LR,#+2
   \   000000CC   A22F8EE0           ADD      R2,LR,R2, LSR #+31
   \   000000D0   020056E1           CMP      R6,R2
   \   000000D4   E0FFFFBA           BLT      ??drawhelp_4
    152            }
    153          }
   \   000000D8   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??drawhelp_2:
   \   000000DC   ........           DC32     menu
   \   000000E0   ........           DC32     help
    154          
    155            
    156          //        protected int tstatesPerInterrupt = clockFrequencyInMHz * 2000000) / 50);
    157          

   \                                 In segment DATA_Z, align 4, align-sorted
    158          	public static final int IM0 = 0;
   \                     IM0:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
    159          	public static final int IM1 = 1;
   \                     IM1:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for IM1>`

   \                                 In segment DATA_I, align 4, align-sorted
    160          	public static final int IM2 = 2;
   \                     IM2:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for IM2>`
    161          

   \                                 In segment DATA_I, align 4, align-sorted
    162          	private static final int F_C  = 0x01;
   \                     F_C:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_C>`

   \                                 In segment DATA_I, align 4, align-sorted
    163          	private static final int F_N  = 0x02;
   \                     F_N:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_N>`

   \                                 In segment DATA_I, align 4, align-sorted
    164          	private static final int F_PV = 0x04;
   \                     F_PV:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_PV>`

   \                                 In segment DATA_I, align 4, align-sorted
    165          	private static final int F_3  = 0x08;
   \                     F_3:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_3>`

   \                                 In segment DATA_I, align 4, align-sorted
    166          	private static final int F_H  = 0x10;
   \                     F_H:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_H>`

   \                                 In segment DATA_I, align 4, align-sorted
    167          	private static final int F_5  = 0x20;
   \                     F_5:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_5>`

   \                                 In segment DATA_I, align 4, align-sorted
    168          	private static final int F_Z  = 0x40;
   \                     F_Z:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_Z>`

   \                                 In segment DATA_I, align 4, align-sorted
    169          	private static final int F_S  = 0x80;
   \                     F_S:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for F_S>`
    170          

   \                                 In segment DATA_I, align 4, align-sorted
    171          	private static final int PF = 0x04;
   \                     PF:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for PF>`

   \                                 In segment DATA_Z, align 4, align-sorted
    172          	private static final int p_ = 0;
   \                     p_:
   \   00000000                      DS8 4
    173          

   \                                 In segment DATA_Z, align 4, align-sorted
    174          	private static final boolean parity[256];
   \                     parity:
   \   00000000                      DS8 256
    175            
    176            

   \                                 In segment CODE, align 4, keep-with-next
    177            void initparity(){  //!!!!!!!
    178             int i,j;
    179             boolean p;
    180             for ( i = 0; i < 256; i++ ) {
   \                     initparity:
   \   00000000   0000A0E3           MOV      R0,#+0
    181          			p = true;
   \                     ??initparity_0:
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0120A0E3           MOV      R2,#+1
    182          			for ( j = 0; j < 8; j++ ) {
   \   0000000C   0030A0E3           MOV      R3,#+0
    183          				if ( (i & (1<<j)) != 0 ) {
   \                     ??initparity_1:
   \   00000010   110310E1           TST      R0,R1, LSL R3
   \   00000014   0200000A           BEQ      ??initparity_2
    184          					p = !p;
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0120A003           MOVEQ    R2,#+1
   \   00000020   0020A013           MOVNE    R2,#+0
    185          				}
    186          			}
   \                     ??initparity_2:
   \   00000024   013083E2           ADD      R3,R3,#+1
   \   00000028   080053E3           CMP      R3,#+8
   \   0000002C   F7FFFFBA           BLT      ??initparity_1
    187          			parity[ i ] = p;
   \   00000030   ........           LDR      R1,??DataTable193  ;; parity
   \   00000034   0120C0E7           STRB     R2,[R0, +R1]
    188          		}
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   400F50E3           CMP      R0,#+256
   \   00000040   EFFFFFBA           BLT      ??initparity_0
    189          	}
   \   00000044   1EFF2FE1           BX       LR               ;; return
    190            
    191          
    192          
    193          	/** Main Registers */

   \                                 In segment DATA_Z, align 4, align-sorted
    194          	protected int        _A = 0, _HL = 0, _B = 0, _C = 0, _DE = 0;
   \                     _A:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _HL:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _B:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _C:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _DE:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 1, align-sorted
    195          	protected boolean    fS = false, fZ  = false, f5 = false, fH = false;
   \                     fS:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fZ:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     f5:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fH:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
    196          	protected boolean    f3 = false, fPV = false, fN = false, fC = false;
   \                     f3:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fPV:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fN:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     fC:
   \   00000000                      DS8 1
    197          
    198          	/** Alternative registers */

   \                                 In segment DATA_Z, align 4, align-sorted
    199          	protected int        _AF_ = 0, _HL_ = 0, _BC_ = 0, _DE_ = 0;
   \                     _AF_:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _HL_:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _BC_:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _DE_:
   \   00000000                      DS8 4
    200          
    201          	/** Index registers -  ID is used as temporal register for ix/iy */

   \                                 In segment DATA_Z, align 4, align-sorted
    202          	protected int        _IX = 0, _IY = 0, _ID = 0;
   \                     _IX:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _IY:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _ID:
   \   00000000                      DS8 4
    203          
    204          	/** Stack Pointer and Program Counter */

   \                                 In segment DATA_Z, align 4, align-sorted
    205          	protected int        _SP = 0, _PC = 0;
   \                     _SP:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _PC:
   \   00000000                      DS8 4
    206          
    207          	/** Interrupt and Refresh registers */

   \                                 In segment DATA_Z, align 4, align-sorted
    208          	protected int        _I = 0, _R = 0, _R7 = 0;
   \                     _I:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _R:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     _R7:
   \   00000000                      DS8 4
    209          
    210          	/** Interrupt mode */

   \                                 In segment DATA_I, align 1, align-sorted
    211          	protected boolean    _IFF1 = true, _IFF2 = true;
   \                     _IFF1:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for _IFF1>`

   \                                 In segment DATA_I, align 1, align-sorted
   \                     _IFF2:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for _IFF2>`

   \                                 In segment DATA_I, align 4, align-sorted
    212          	protected int        _IM = 2;
   \                     _IM:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for _IM>`
    213          
    214          	/** the main memory */
    215          //	public final int  mem[] = new int[ 65536 ];
    216          
    217                	/** Access to 8-bit register */
    218          	inline public final int  A() { return _A; }
    219          	inline public final void xA( int bite ) {
    220          		_A = bite;
    221          	}
    222          
    223          
    224          	/** Access to Flags register */
    225          	inline public final void setZ( boolean f ) { fZ = f; }
    226          	inline public final void setC( boolean f ) { fC = f; }
    227          	inline public final void setS( boolean f ) { fS = f; }
    228          	inline public final void setH( boolean f ) { fH = f; }
    229          	inline public final void setN( boolean f ) { fN = f; }
    230          	inline public final void setPV( boolean f ) {fPV = f;}
    231          	inline public final void set3( boolean f ) { f3 = f; }
    232          	inline public final void set5( boolean f ) { f5 = f; }
    233          
    234          	inline public final boolean Zset()  { return fZ; }
    235          	inline public final boolean Cset()  { return fC; }
    236          	inline public final boolean Sset()  { return fS; }
    237          	inline public final boolean Hset()  { return fH; }
    238          	inline public final boolean Nset()  { return fN; }
    239          	inline public final boolean PVset() { return fPV; }
    240                
    241          

   \                                 In segment CODE, align 4, keep-with-next
    242          	public final int F() {
    243          		return	(Sset()  ? F_S  : 0)  |
    244          			(Zset()  ? F_Z  : 0)  |
    245          			(f5      ? F_5  : 0)  |
    246          			(Hset()  ? F_H  : 0)  |
    247          			(f3      ? F_3  : 0)  |
    248          			(PVset() ? F_PV : 0)  |
    249          			(Nset()  ? F_N  : 0)  |
    250          			(Cset()  ? F_C  : 0);
   \                     F:
   \   00000000   ........           LDR      R0,??DataTable187  ;; fS
   \   00000004   ........           LDR      R1,??DataTable195  ;; fZ
   \   00000008   ........           LDR      R2,??DataTable191  ;; f5
   \   0000000C   ........           LDR      R3,??DataTable204  ;; fH
   \   00000010   70002DE9           PUSH     {R4-R6}
   \   00000014   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000018   D010D1E1           LDRSB    R1,[R1, #+0]
   \   0000001C   D020D2E1           LDRSB    R2,[R2, #+0]
   \   00000020   D030D3E1           LDRSB    R3,[R3, #+0]
   \   00000024   ........           LDR      R4,??DataTable201  ;; f3
   \   00000028   ........           LDR      R5,??DataTable205  ;; fN
   \   0000002C   D040D4E1           LDRSB    R4,[R4, #+0]
   \   00000030   D050D5E1           LDRSB    R5,[R5, #+0]
   \   00000034   ........           LDR      R6,??DataTable197  ;; fC
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   ........           LDRNE    R0,??DataTable186  ;; F_S
   \   00000040   D060D6E1           LDRSB    R6,[R6, #+0]
   \   00000044   00009015           LDRNE    R0,[R0, #+0]
   \   00000048   000051E3           CMP      R1,#+0
   \   0000004C   ........           LDRNE    R1,??DataTable29  ;; F_Z
   \   00000050   00109115           LDRNE    R1,[R1, #+0]
   \   00000054   000052E3           CMP      R2,#+0
   \   00000058   ........           LDRNE    R2,??DataTable202  ;; F_5
   \   0000005C   000081E1           ORR      R0,R1,R0
   \   00000060   00209215           LDRNE    R2,[R2, #+0]
   \   00000064   000053E3           CMP      R3,#+0
   \   00000068   ........           LDRNE    R3,??DataTable156  ;; F_H
   \   0000006C   000082E1           ORR      R0,R2,R0
   \   00000070   00309315           LDRNE    R3,[R3, #+0]
   \   00000074   000054E3           CMP      R4,#+0
   \   00000078   ........           LDRNE    R4,??DataTable200  ;; F_3
   \   0000007C   00C0A003           MOVEQ    R12,#+0
   \   00000080   00C09415           LDRNE    R12,[R4, #+0]
   \   00000084   ........           LDR      R4,??DataTable194  ;; fPV
   \   00000088   000083E1           ORR      R0,R3,R0
   \   0000008C   D040D4E1           LDRSB    R4,[R4, #+0]
   \   00000090   00008CE1           ORR      R0,R12,R0
   \   00000094   000054E3           CMP      R4,#+0
   \   00000098   ........           LDRNE    R4,??DataTable37  ;; F_PV
   \   0000009C   00409415           LDRNE    R4,[R4, #+0]
   \   000000A0   000055E3           CMP      R5,#+0
   \   000000A4   ........           LDRNE    R5,??DataTable39  ;; F_N
   \   000000A8   000084E1           ORR      R0,R4,R0
   \   000000AC   00509515           LDRNE    R5,[R5, #+0]
   \   000000B0   000056E3           CMP      R6,#+0
   \   000000B4   ........           LDRNE    R6,??DataTable41  ;; F_C
   \   000000B8   000085E1           ORR      R0,R5,R0
   \   000000BC   00609615           LDRNE    R6,[R6, #+0]
   \   000000C0   000086E1           ORR      R0,R6,R0
   \   000000C4   7000BDE8           POP      {R4-R6}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
    251          	}

   \                                 In segment CODE, align 4, keep-with-next
    252          	public final void xF( int bite ) {
    253          		fS  = (bite & F_S)  != 0;
   \                     xF:
   \   00000000   ........           LDR      R2,??DataTable186  ;; F_S
   \   00000004   ........           LDR      R3,??DataTable187  ;; fS
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   000012E1           TST      R2,R0
   \   00000014   0120A013           MOVNE    R2,#+1
   \   00000018   0020A003           MOVEQ    R2,#+0
   \   0000001C   0020C3E5           STRB     R2,[R3, #+0]
    254          		fZ  = (bite & F_Z)  != 0;
   \   00000020   ........           LDR      R2,??DataTable29  ;; F_Z
   \   00000024   ........           LDR      R3,??DataTable195  ;; fZ
   \   00000028   002092E5           LDR      R2,[R2, #+0]
   \   0000002C   000012E1           TST      R2,R0
   \   00000030   0120A013           MOVNE    R2,#+1
   \   00000034   0020A003           MOVEQ    R2,#+0
   \   00000038   0020C3E5           STRB     R2,[R3, #+0]
    255          		f5  = (bite & F_5)  != 0;
   \   0000003C   ........           LDR      R2,??DataTable202  ;; F_5
   \   00000040   ........           LDR      R3,??DataTable191  ;; f5
   \   00000044   002092E5           LDR      R2,[R2, #+0]
   \   00000048   000012E1           TST      R2,R0
   \   0000004C   0120A013           MOVNE    R2,#+1
   \   00000050   0020A003           MOVEQ    R2,#+0
   \   00000054   0020C3E5           STRB     R2,[R3, #+0]
    256          		fH  = (bite & F_H)  != 0;
   \   00000058   ........           LDR      R2,??DataTable156  ;; F_H
   \   0000005C   ........           LDR      R3,??DataTable204  ;; fH
   \   00000060   002092E5           LDR      R2,[R2, #+0]
   \   00000064   000012E1           TST      R2,R0
   \   00000068   0120A013           MOVNE    R2,#+1
   \   0000006C   0020A003           MOVEQ    R2,#+0
   \   00000070   0020C3E5           STRB     R2,[R3, #+0]
    257          		f3  = (bite & F_3)  != 0;
   \   00000074   ........           LDR      R2,??DataTable200  ;; F_3
   \   00000078   ........           LDR      R3,??DataTable201  ;; f3
   \   0000007C   002092E5           LDR      R2,[R2, #+0]
   \   00000080   000012E1           TST      R2,R0
   \   00000084   0120A013           MOVNE    R2,#+1
   \   00000088   0020A003           MOVEQ    R2,#+0
   \   0000008C   0020C3E5           STRB     R2,[R3, #+0]
    258          		fPV = (bite & F_PV) != 0;
   \   00000090   ........           LDR      R2,??DataTable37  ;; F_PV
   \   00000094   ........           LDR      R3,??DataTable194  ;; fPV
   \   00000098   002092E5           LDR      R2,[R2, #+0]
   \   0000009C   000012E1           TST      R2,R0
   \   000000A0   0120A013           MOVNE    R2,#+1
   \   000000A4   0020A003           MOVEQ    R2,#+0
   \   000000A8   0020C3E5           STRB     R2,[R3, #+0]
    259          		fN  = (bite & F_N)  != 0;
   \   000000AC   ........           LDR      R2,??DataTable39  ;; F_N
   \   000000B0   ........           LDR      R3,??DataTable205  ;; fN
   \   000000B4   002092E5           LDR      R2,[R2, #+0]
   \   000000B8   000012E1           TST      R2,R0
   \   000000BC   0120A013           MOVNE    R2,#+1
   \   000000C0   0020A003           MOVEQ    R2,#+0
   \   000000C4   0020C3E5           STRB     R2,[R3, #+0]
    260          		fC  = (bite & F_C)  != 0;
   \   000000C8   ........           LDR      R2,??DataTable41  ;; F_C
   \   000000CC   002092E5           LDR      R2,[R2, #+0]
   \   000000D0   000012E1           TST      R2,R0
   \   000000D4   ........           LDR      R0,??DataTable197  ;; fC
   \   000000D8   0110A013           MOVNE    R1,#+1
   \   000000DC   0010C0E5           STRB     R1,[R0, #+0]
    261          	}
   \   000000E0   1EFF2FE1           BX       LR               ;; return
    262          
    263          	inline public final int  B() { return _B; }
    264          	inline public final void xB( int bite ) {
    265          		_B = bite;
    266          	}
    267          	inline public final int  C() { return _C; }
    268          	inline public final void xC( int bite ) {
    269          		_C = bite;
    270          	}
    271          
    272          	inline public final int  D() { return (_DE >> 8); }
    273          	inline public final void xD( int bite ) {
    274          		_DE = (bite << 8) | (_DE & 0x00ff);
    275          	}
    276          	inline public final int  E() { return (_DE & 0xff); }
    277          	inline public final void xE( int bite ) {
    278          		_DE = (_DE & 0xff00) | bite;
    279          	}
    280          
    281          	inline public final int  H() { return (_HL >> 8); }
    282          	inline public final void xH( int bite ) {
    283          		_HL = (bite << 8) | (_HL & 0x00ff);
    284          	}
    285          	inline public final int  L() { return (_HL & 0xff); }
    286          	inline public final void xL( int bite ) {
    287          		_HL = (_HL & 0xff00) | bite;
    288          	}
    289          
    290                  
    291          	/** Access as 16-bit registers*/
    292          	inline public final int  AF() { return (A() << 8) | F(); }
    293          	inline public final void xAF( int word ) {
    294          		xA( word >> 8 );
    295          		xF( word & 0xff );
    296          	}
    297          
    298          	inline public final int  BC() { return (B() << 8) | C(); }
    299          	inline public final void xBC( int word ) {
    300          		xB( word >> 8 );
    301          		xC( word & 0xff );
    302          	}
    303          
    304          	inline public final int  DE() { return _DE; }
    305          	inline public final void xDE( int word ) {
    306          		_DE = word;
    307          	}
    308          
    309          	inline public final int  HL() { return _HL; }
    310          	inline public final void xHL( int word ) {
    311          		_HL = word;
    312          	}
    313          
    314          	inline public final int  PC() { return _PC; }
    315          	inline public final void xPC( int word ) {
    316          		_PC = word;
    317          	}
    318          
    319          	inline public final int  SP() { return _SP; }
    320          	inline public final void xSP( int word ) {
    321          		_SP = word;
    322          	}
    323          
    324          	inline public final int  ID() { return _ID; }
    325          	inline public final void xID( int word ) {
    326          		_ID = word;
    327          	}
    328          
    329          	inline public final int  IX() { return _IX; }
    330          	inline public final void xIX( int word ) {
    331          		_IX = word;
    332          	}
    333          
    334          	inline public final int  IY() { return _IY; }
    335          	inline public final void xIY( int word ) {
    336          		_IY = word;
    337          	}
    338          
    339          
    340          	inline public final int  IDH() { return (_ID >> 8); }
    341          	inline public final void xIDH( int bite ) {
    342          		_ID = (bite << 8) | (_ID & 0x00ff);
    343          	}
    344          	inline public final int  IDL() { return (_ID & 0xff); }
    345          	inline public final void xIDL( int bite ) {
    346          		_ID = (_ID & 0xff00) | bite;
    347          	}
    348          
    349          
    350          	/** Memory refresh register */
    351          	inline public final int  R7() { return _R7; }
    352          	inline public final int  R() { return (_R & 0x7f) | _R7; }
    353          	inline public final void xR( int bite ) {
    354          		_R  = bite;
    355          		_R7 = bite & 0x80;
    356          	}
    357          
    358          	inline public final void REFRESH( int t ) {
    359          		_R += t;
    360          	}
    361          
    362          
    363          	/** Interrupt mode and interrupt register */
    364          	inline public final int  I() { return _I; }
    365          	inline public final void xI( int bite ) {
    366          		_I = bite;
    367          	}
    368          
    369          	inline public final boolean IFF1() { return _IFF1; }
    370          	inline public final void xIFF1( boolean iff1 ) {
    371          		_IFF1 = iff1;
    372          	}
    373          
    374          	inline public final boolean IFF2() { return _IFF2; }
    375          	inline public final void xIFF2( boolean iff2 ) {
    376          		_IFF2 = iff2;
    377          	}
    378          
    379          	inline public final int IM() { return _IM; }
    380          	inline public final void xIM( int im ) {
    381          		_IM = im;
    382          	}
    383          
    384          
    385          
    386          	/** Access to a byte */
    387          	inline private final int peekb( int addr ) {
    388          		return mem[ addr ];
    389          	}
    390          	inline public void pokeb( int addr, int newByte ) {
    391          		mem[ addr ] = newByte;
    392          	}
    393          
    394          
    395          	/** Access to a Word */
    396          	inline public void pokew( int addr, int word ) {
    397          		pokeb( addr, word & 0xff );
    398          //		addr++;
    399          		pokeb( (addr+1) & 0xffff, word >> 8 );
    400          	}
    401          	inline private final int peekw( int addr ) {
    402          //		int        t = peekb( addr );
    403          //		addr++;
    404          //		return t | (peekb( addr & 0xffff ) << 8);
    405                      return mem[addr] | (mem[(addr+1) & 0xffff] << 8);
    406          	}
    407          
    408          	/** Access to Program counter */
    409          /*	inline private final int nxtpcb() {
    410          		int pc = PC();
    411          		int t = peekb( pc );
    412          		xPC( ++pc & 0xffff );
    413          		return t;
    414          	}
    415          	inline private final int nxtpcw() {
    416          		int pc = PC();
    417          		int t = peekb( pc );
    418          		t |= ( peekb( ++pc & 0xffff ) << 8 );
    419          		xPC( ++pc & 0xffff );
    420          		return t;
    421          	}
    422          */
    423          	inline private final int nxtpcb() {
    424                      return mem[_PC++];
    425          //		int pc = PC();
    426          //		int t = peekb( pc );
    427          //		xPC( ++pc & 0xffff );
    428          //		return t;
    429          	}

   \                                 In segment CODE, align 4, keep-with-next
    430          	inline private final int nxtpcw() { 
    431                     return mem[_PC++]|(mem[_PC++]<<8); //??ERROR here!!!!!!!!!!
                                                             ^
Warning[Pa079]: undefined behavior: variable "_PC" (or a value reached by some
          form of indirection through it) is modified more than once without
          an intervening sequence point in this statement
   \                     nxtpcw:
   \   00000000   28009FE5           LDR      R0,??nxtpcw_0    ;; _PC
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   012081E2           ADD      R2,R1,#+1
   \   0000000C   002080E5           STR      R2,[R0, #+0]
   \   00000010   013082E2           ADD      R3,R2,#+1
   \   00000014   003080E5           STR      R3,[R0, #+0]
   \   00000018   14009FE5           LDR      R0,??nxtpcw_0+0x4  ;; mem
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0010D1E7           LDRB     R1,[R1, +R0]
   \   00000024   0000D2E7           LDRB     R0,[R2, +R0]
   \   00000028   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??nxtpcw_0:
   \   00000030   ........           DC32     _PC
   \   00000034   ........           DC32     mem
    432          //		int pc = PC();
    433          //		int t = peekb( pc );
    434          //		t |= ( peekb( ++pc & 0xffff ) << 8 );
    435          //		xPC( ++pc & 0xffff );
    436          //		return t;
    437          	}
    438          
    439          
    440                  
    441          	/** Access to index register */
    442          	inline private final int ID_d() {
    443          		return ((ID()+(byte)nxtpcb()) & 0xffff);
    444          	}
    445          
    446          
    447          	/** Access to stack */

   \                                 In segment CODE, align 4, keep-with-next
    448          	inline public final void pushw( int word ) {
    449          //		int        sp = ((SP()-2) & 0xffff);
    450          //		xSP( sp );
    451          		pokew( _SP=(_SP-2)&0xffff, word );
   \                     pushw:
   \   00000000   38209FE5           LDR      R2,??pushw_0     ;; _SP
   \   00000004   FF10A0E3           MOV      R1,#+255
   \   00000008   003092E5           LDR      R3,[R2, #+0]
   \   0000000C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000010   023043E2           SUB      R3,R3,#+2
   \   00000014   033001E0           AND      R3,R1,R3
   \   00000018   003082E5           STR      R3,[R2, #+0]
   \   0000001C   20209FE5           LDR      R2,??pushw_0+0x4  ;; mem
   \   00000020   00C092E5           LDR      R12,[R2, #+0]
   \   00000024   0C00C3E7           STRB     R0,[R3, +R12]
   \   00000028   002092E5           LDR      R2,[R2, #+0]
   \   0000002C   013083E2           ADD      R3,R3,#+1
   \   00000030   031001E0           AND      R1,R1,R3
   \   00000034   4004A0E1           ASR      R0,R0,#+8
   \   00000038   0200C1E7           STRB     R0,[R1, +R2]
    452          	}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
   \                     ??pushw_0:
   \   00000040   ........           DC32     _SP
   \   00000044   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
    453          	inline public final int popw() {
    454                    return mem[_SP++]|(mem[_SP++]<<8);
                                                            ^
Warning[Pa079]: undefined behavior: variable "_SP" (or a value reached by some
          form of indirection through it) is modified more than once without
          an intervening sequence point in this statement
   \                     popw:
   \   00000000   28009FE5           LDR      R0,??popw_0      ;; _SP
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   012081E2           ADD      R2,R1,#+1
   \   0000000C   002080E5           STR      R2,[R0, #+0]
   \   00000010   013082E2           ADD      R3,R2,#+1
   \   00000014   003080E5           STR      R3,[R0, #+0]
   \   00000018   14009FE5           LDR      R0,??popw_0+0x4  ;; mem
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0010D1E7           LDRB     R1,[R1, +R0]
   \   00000024   0000D2E7           LDRB     R0,[R2, +R0]
   \   00000028   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??popw_0:
   \   00000030   ........           DC32     _SP
   \   00000034   ........           DC32     mem
    455          //		int	sp = SP();
    456          //		int	t  = peekb( sp );
    457          //			sp++;
    458          //			t |= (peekb( sp & 0xffff) << 8);
    459          //			xSP( ++sp & 0xffff );
    460          //		return t;
    461          	}
    462          
    463          
    464          	/** Stack operations for "call" instructions" */
    465          	inline public final void pushpc() { pushw( PC() ); }
    466          	inline public final void poppc()  { xPC( popw() ); }
    467          
    468          
    469          
    470          
    471          	/** IO ports  */
    472          //	public void outb( int port, int bite, int tstates ) {
    473          //	}
    474          //	public int inb( int port ) {
    475          //		return 0xff;
    476          //	}
    477          
    478          	/** Interrupt manager  */
    479          	inline private static final boolean interruptTriggered( int tstates ) {
    480          		return (tstates >= 0);
    481          	}
    482          

   \                                 In segment CODE, align 4, keep-with-next
    483          	public int interrupt() {
   \                     interrupt:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    484          		// If it's not a masking interrupt
    485          		if ( !IFF1() ) {
   \   00000004   ........           LDR      R5,??DataTable43  ;; _IFF1
   \   00000008   D000D5E1           LDRSB    R0,[R5, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
    486          			return 0;
   \   00000010   0000A003           MOVEQ    R0,#+0
   \   00000014   F080BD08           POPEQ    {R4-R7,PC}
    487          		}
    488          
    489          		switch( IM() ) {
   \   00000018   ........           LDR      R1,??DataTable44  ;; _IM
   \   0000001C   ........           LDR      R4,??DataTable45  ;; _PC
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   ........           LDR      R7,??DataTable220  ;; _IFF2
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   010051E3           CMP      R1,#+1
   \   00000034   0300009A           BLS      ??interrupt_0
   \   00000038   021051E2           SUBS     R1,R1,#+2
   \   0000003C   0800000A           BEQ      ??interrupt_1
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   F080BDE8           POP      {R4-R7,PC}
    490          		case 0://IM0:
    491          		case 1://IM1:
    492          			pushpc();
   \                     ??interrupt_0:
   \   00000048   ........           _BLF     pushw,??pushw??rA
    493          			xIFF1( false );
   \   0000004C   0060C5E5           STRB     R6,[R5, #+0]
    494          			xIFF2( false );
   \   00000050   0060C7E5           STRB     R6,[R7, #+0]
    495          			xPC( 56 );
   \   00000054   3800A0E3           MOV      R0,#+56
   \   00000058   000084E5           STR      R0,[R4, #+0]
    496          			return 13;
   \   0000005C   0D00A0E3           MOV      R0,#+13
   \   00000060   F080BDE8           POP      {R4-R7,PC}
    497          		case 2://IM2:
    498          			pushpc();
   \                     ??interrupt_1:
   \   00000064   ........           _BLF     pushw,??pushw??rA
    499          			xIFF1( false );
    500          			xIFF2( false );
    501          			int t = (I()<<8) | 0x00ff;
   \   00000068   ........           LDR      R0,??DataTable212  ;; _I
   \   0000006C   FF10A0E3           MOV      R1,#+255
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   0060C5E5           STRB     R6,[R5, #+0]
   \   00000078   000481E1           ORR      R0,R1,R0, LSL #+8
    502          			xPC( peekw(t) );
   \   0000007C   ........           LDR      R1,??DataTable48  ;; mem
   \   00000080   0060C7E5           STRB     R6,[R7, #+0]
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   0120D0E7           LDRB     R2,[R0, +R1]
   \   0000008C   010080E2           ADD      R0,R0,#+1
   \   00000090   0008A0E1           LSL      R0,R0,#+16
   \   00000094   2008D1E7           LDRB     R0,[R1, +R0, LSR #+16]
   \   00000098   000482E1           ORR      R0,R2,R0, LSL #+8
   \   0000009C   000084E5           STR      R0,[R4, #+0]
    503          			return 19;
   \   000000A0   1300A0E3           MOV      R0,#+19
   \   000000A4   F080BDE8           POP      {R4-R7,PC}       ;; return
    504          		}
    505          
    506          		return 0;
    507          	}
    508          

   \                                 In segment CODE, align 4, keep-with-next
    509          	private final int in_bc() {
    510          		int        ans = inb( BC() );
   \                     in_bc:
   \   00000000   ........           LDR      R0,??DataTable49  ;; _B
   \   00000004   ........           LDR      R1,??DataTable50  ;; _C
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000018   ........           BL       inb
    511          
    512          		setZ( ans == 0 );
   \   0000001C   ........           LDR      R3,??DataTable195  ;; fZ
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0120A003           MOVEQ    R2,#+1
   \   00000028   0020A013           MOVNE    R2,#+0
   \   0000002C   0020C3E5           STRB     R2,[R3, #+0]
    513          		setS( (ans & F_S)!=0 );
   \   00000030   ........           LDR      R2,??DataTable186  ;; F_S
   \   00000034   ........           LDR      R3,??DataTable187  ;; fS
   \   00000038   002092E5           LDR      R2,[R2, #+0]
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   000012E1           TST      R2,R0
   \   00000044   0120A013           MOVNE    R2,#+1
   \   00000048   0020A003           MOVEQ    R2,#+0
   \   0000004C   0020C3E5           STRB     R2,[R3, #+0]
    514          		set3( (ans & F_3)!=0 );
   \   00000050   ........           LDR      R2,??DataTable200  ;; F_3
   \   00000054   ........           LDR      R3,??DataTable201  ;; f3
   \   00000058   002092E5           LDR      R2,[R2, #+0]
   \   0000005C   000012E1           TST      R2,R0
   \   00000060   0120A013           MOVNE    R2,#+1
   \   00000064   0020A003           MOVEQ    R2,#+0
   \   00000068   0020C3E5           STRB     R2,[R3, #+0]
    515          		set5( (ans & F_5)!=0 );
   \   0000006C   ........           LDR      R2,??DataTable202  ;; F_5
   \   00000070   ........           LDR      R3,??DataTable191  ;; f5
   \   00000074   002092E5           LDR      R2,[R2, #+0]
   \   00000078   000012E1           TST      R2,R0
   \   0000007C   0120A013           MOVNE    R2,#+1
   \   00000080   0020A003           MOVEQ    R2,#+0
   \   00000084   0020C3E5           STRB     R2,[R3, #+0]
    516          		setPV( parity[ ans ] );
   \   00000088   ........           LDR      R3,??DataTable193  ;; parity
   \   0000008C   ........           LDR      R2,??DataTable194  ;; fPV
   \   00000090   D33090E1           LDRSB    R3,[R0, +R3]
   \   00000094   0030C2E5           STRB     R3,[R2, #+0]
    517          		setN( false );
   \   00000098   ........           LDR      R2,??DataTable205  ;; fN
   \   0000009C   0010C2E5           STRB     R1,[R2, #+0]
    518          		setH( false );
   \   000000A0   ........           LDR      R2,??DataTable204  ;; fH
   \   000000A4   0010C2E5           STRB     R1,[R2, #+0]
    519          
    520          		return ans;
   \   000000A8   0080BDE8           POP      {PC}             ;; return
    521          	}
    522          
    523          	/** Add with carry, altering all flags */

   \                                 In segment CODE, align 4, keep-with-next
    524          	private final void
    525          	adc_a( int b )
    526          	{
    527          		int a    = A();
   \                     adc_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
   \   00000004   F0032DE9           PUSH     {R4-R9}
    528          		int c    = Cset() ? 1 : 0;
   \   00000008   ........           LDR      R6,??DataTable197  ;; fC
    529          		int wans = a + b + c;
    530          		int ans  = wans & 0xff;
    531          
    532          		setS( (ans & F_S)  != 0 );
   \   0000000C   ........           LDR      R8,??DataTable186  ;; F_S
   \   00000010   D030D6E1           LDRSB    R3,[R6, #+0]
   \   00000014   002091E5           LDR      R2,[R1, #+0]
   \   00000018   008098E5           LDR      R8,[R8, #+0]
   \   0000001C   ........           LDR      R9,??DataTable187  ;; fS
   \   00000020   000053E3           CMP      R3,#+0
   \   00000024   0130A013           MOVNE    R3,#+1
   \   00000028   024080E0           ADD      R4,R0,R2
   \   0000002C   047083E0           ADD      R7,R3,R4
   \   00000030   FFC007E2           AND      R12,R7,#0xFF
   \   00000034   0C0018E1           TST      R8,R12
   \   00000038   0180A013           MOVNE    R8,#+1
   \   0000003C   0080A003           MOVEQ    R8,#+0
   \   00000040   0080C9E5           STRB     R8,[R9, #+0]
    533          		set3( (ans & F_3)  != 0 );
   \   00000044   ........           LDR      R8,??DataTable200  ;; F_3
   \   00000048   ........           LDR      R9,??DataTable201  ;; f3
   \   0000004C   008098E5           LDR      R8,[R8, #+0]
   \   00000050   0150A0E3           MOV      R5,#+1
   \   00000054   0C0018E1           TST      R8,R12
   \   00000058   0180A013           MOVNE    R8,#+1
   \   0000005C   0080A003           MOVEQ    R8,#+0
   \   00000060   0080C9E5           STRB     R8,[R9, #+0]
    534          		set5( (ans & F_5)  != 0 );
   \   00000064   ........           LDR      R8,??DataTable202  ;; F_5
   \   00000068   ........           LDR      R9,??DataTable191  ;; f5
   \   0000006C   008098E5           LDR      R8,[R8, #+0]
   \   00000070   0040A0E3           MOV      R4,#+0
   \   00000074   0C0018E1           TST      R8,R12
   \   00000078   0180A013           MOVNE    R8,#+1
   \   0000007C   0080A003           MOVEQ    R8,#+0
   \   00000080   0080C9E5           STRB     R8,[R9, #+0]
    535          		setZ( (ans)        == 0 );
   \   00000084   ........           LDR      R9,??DataTable195  ;; fZ
   \   00000088   00005CE3           CMP      R12,#+0
   \   0000008C   0180A003           MOVEQ    R8,#+1
   \   00000090   0080A013           MOVNE    R8,#+0
    536          		setC( (wans&0x100) != 0 );
   \   00000094   400F17E3           TST      R7,#0x100
   \   00000098   0170A013           MOVNE    R7,#+1
   \   0000009C   0070A003           MOVEQ    R7,#+0
   \   000000A0   0070C6E5           STRB     R7,[R6, #+0]
    537          		setPV( ((a ^ ~b) & (a ^ ans) & 0x80) != 0 );
   \   000000A4   0070A0E1           MOV      R7,R0
   \   000000A8   0770E0E1           MVN      R7,R7
   \   000000AC   026027E0           EOR      R6,R7,R2
   \   000000B0   02702CE0           EOR      R7,R12,R2
    538          		setH(  (((a & 0x0f) + (b & 0x0f) + c) & F_H) != 0 );
   \   000000B4   0F2002E2           AND      R2,R2,#0xF
   \   000000B8   0F0000E2           AND      R0,R0,#0xF
   \   000000BC   020080E0           ADD      R0,R0,R2
   \   000000C0   ........           LDR      R2,??DataTable156  ;; F_H
   \   000000C4   066007E0           AND      R6,R7,R6
   \   000000C8   002092E5           LDR      R2,[R2, #+0]
   \   000000CC   800016E3           TST      R6,#0x80
   \   000000D0   0160A013           MOVNE    R6,#+1
   \   000000D4   0060A003           MOVEQ    R6,#+0
   \   000000D8   ........           LDR      R7,??DataTable194  ;; fPV
   \   000000DC   000083E0           ADD      R0,R3,R0
   \   000000E0   000012E1           TST      R2,R0
   \   000000E4   ........           LDR      R0,??DataTable204  ;; fH
   \   000000E8   0050A003           MOVEQ    R5,#+0
   \   000000EC   0050C0E5           STRB     R5,[R0, #+0]
    539          		setN( false );
   \   000000F0   ........           LDR      R0,??DataTable205  ;; fN
   \   000000F4   0080C9E5           STRB     R8,[R9, #+0]
   \   000000F8   0060C7E5           STRB     R6,[R7, #+0]
   \   000000FC   0040C0E5           STRB     R4,[R0, #+0]
    540          
    541          		xA( ans );
   \   00000100   00C081E5           STR      R12,[R1, #+0]
    542          	}
   \   00000104   F003BDE8           POP      {R4-R9}
   \   00000108   1EFF2FE1           BX       LR               ;; return
    543          
    544          	/** Add without carry, altering all flags */

   \                                 In segment CODE, align 4, keep-with-next
    545          	private final void
    546          	add_a( int b )
    547          	{
    548          		int a    = A();
   \                     add_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
   \   00000004   70002DE9           PUSH     {R4-R6}
   \   00000008   00C091E5           LDR      R12,[R1, #+0]
    549          		int wans = a + b;
    550          		int ans  = wans & 0xff;
    551          
    552          		setS( (ans & F_S)  != 0 );
   \   0000000C   ........           LDR      R5,??DataTable186  ;; F_S
   \   00000010   ........           LDR      R6,??DataTable187  ;; fS
   \   00000014   005095E5           LDR      R5,[R5, #+0]
   \   00000018   0C4080E0           ADD      R4,R0,R12
   \   0000001C   FF2004E2           AND      R2,R4,#0xFF
   \   00000020   020015E1           TST      R5,R2
   \   00000024   0150A013           MOVNE    R5,#+1
   \   00000028   0050A003           MOVEQ    R5,#+0
   \   0000002C   0050C6E5           STRB     R5,[R6, #+0]
    553          		set3( (ans & F_3)  != 0 );
   \   00000030   ........           LDR      R5,??DataTable200  ;; F_3
   \   00000034   ........           LDR      R6,??DataTable201  ;; f3
   \   00000038   005095E5           LDR      R5,[R5, #+0]
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   020015E1           TST      R5,R2
   \   00000044   0150A013           MOVNE    R5,#+1
   \   00000048   0050A003           MOVEQ    R5,#+0
   \   0000004C   0050C6E5           STRB     R5,[R6, #+0]
    554          		set5( (ans & F_5)  != 0 );
   \   00000050   ........           LDR      R5,??DataTable202  ;; F_5
   \   00000054   ........           LDR      R6,??DataTable191  ;; f5
   \   00000058   005095E5           LDR      R5,[R5, #+0]
    555          		setZ( (ans)        == 0 );
    556          		setC( (wans&0x100) != 0 );
    557          		setPV( ((a ^ ~b) & (a ^ ans) & 0x80) != 0 );
    558          		setH(  (((a & 0x0f) + (b & 0x0f)) & F_H) != 0 );
    559          		setN( false );
    560          
    561          		xA( ans );
   \   0000005C   002081E5           STR      R2,[R1, #+0]
   \   00000060   020015E1           TST      R5,R2
   \   00000064   0150A013           MOVNE    R5,#+1
   \   00000068   0050A003           MOVEQ    R5,#+0
   \   0000006C   0050C6E5           STRB     R5,[R6, #+0]
   \   00000070   ........           LDR      R6,??DataTable195  ;; fZ
   \   00000074   000052E3           CMP      R2,#+0
   \   00000078   0150A003           MOVEQ    R5,#+1
   \   0000007C   0050A013           MOVNE    R5,#+0
   \   00000080   0050C6E5           STRB     R5,[R6, #+0]
   \   00000084   ........           LDR      R5,??DataTable197  ;; fC
   \   00000088   400F14E3           TST      R4,#0x100
   \   0000008C   0140A013           MOVNE    R4,#+1
   \   00000090   0040A003           MOVEQ    R4,#+0
   \   00000094   0040C5E5           STRB     R4,[R5, #+0]
   \   00000098   0050A0E1           MOV      R5,R0
   \   0000009C   0550E0E1           MVN      R5,R5
   \   000000A0   0C4025E0           EOR      R4,R5,R12
   \   000000A4   0C5022E0           EOR      R5,R2,R12
   \   000000A8   044005E0           AND      R4,R5,R4
   \   000000AC   ........           LDR      R5,??DataTable194  ;; fPV
   \   000000B0   800014E3           TST      R4,#0x80
   \   000000B4   0140A013           MOVNE    R4,#+1
   \   000000B8   0040A003           MOVEQ    R4,#+0
   \   000000BC   0040C5E5           STRB     R4,[R5, #+0]
   \   000000C0   0F400CE2           AND      R4,R12,#0xF
   \   000000C4   0F0000E2           AND      R0,R0,#0xF
   \   000000C8   040080E0           ADD      R0,R0,R4
   \   000000CC   ........           LDR      R4,??DataTable156  ;; F_H
   \   000000D0   004094E5           LDR      R4,[R4, #+0]
   \   000000D4   000014E1           TST      R4,R0
   \   000000D8   ........           LDR      R4,??DataTable204  ;; fH
   \   000000DC   0100A013           MOVNE    R0,#+1
   \   000000E0   0000A003           MOVEQ    R0,#+0
   \   000000E4   0000C4E5           STRB     R0,[R4, #+0]
   \   000000E8   ........           LDR      R0,??DataTable205  ;; fN
   \   000000EC   0030C0E5           STRB     R3,[R0, #+0]
    562          	}
   \   000000F0   7000BDE8           POP      {R4-R6}
   \   000000F4   1EFF2FE1           BX       LR               ;; return
    563          	
    564          	/**Substract with carry, altering all flags */

   \                                 In segment CODE, align 4, keep-with-next
    565          	private final void
    566          	sbc_a( int b )
    567          	{
    568          		int a    = A();
   \                     sbc_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
   \   00000004   F0032DE9           PUSH     {R4-R9}
    569          		int c    = Cset() ? 1 : 0;
   \   00000008   ........           LDR      R6,??DataTable197  ;; fC
    570          		int wans = a - b - c;
    571          		int ans  = wans & 0xff;
    572          
    573          		setS( (ans & F_S)  != 0 );
   \   0000000C   ........           LDR      R8,??DataTable186  ;; F_S
   \   00000010   D030D6E1           LDRSB    R3,[R6, #+0]
   \   00000014   002091E5           LDR      R2,[R1, #+0]
   \   00000018   008098E5           LDR      R8,[R8, #+0]
   \   0000001C   ........           LDR      R9,??DataTable187  ;; fS
   \   00000020   000053E3           CMP      R3,#+0
   \   00000024   0130A013           MOVNE    R3,#+1
   \   00000028   004042E0           SUB      R4,R2,R0
   \   0000002C   037044E0           SUB      R7,R4,R3
   \   00000030   FFC007E2           AND      R12,R7,#0xFF
   \   00000034   0C0018E1           TST      R8,R12
   \   00000038   0180A013           MOVNE    R8,#+1
   \   0000003C   0080A003           MOVEQ    R8,#+0
   \   00000040   0080C9E5           STRB     R8,[R9, #+0]
    574          		set3( (ans & F_3)  != 0 );
   \   00000044   ........           LDR      R8,??DataTable200  ;; F_3
   \   00000048   ........           LDR      R9,??DataTable201  ;; f3
   \   0000004C   008098E5           LDR      R8,[R8, #+0]
   \   00000050   0040A0E3           MOV      R4,#+0
   \   00000054   0C0018E1           TST      R8,R12
   \   00000058   0180A013           MOVNE    R8,#+1
   \   0000005C   0080A003           MOVEQ    R8,#+0
   \   00000060   0080C9E5           STRB     R8,[R9, #+0]
    575          		set5( (ans & F_5)  != 0 );
   \   00000064   ........           LDR      R8,??DataTable202  ;; F_5
   \   00000068   ........           LDR      R9,??DataTable191  ;; f5
   \   0000006C   008098E5           LDR      R8,[R8, #+0]
   \   00000070   0150A0E3           MOV      R5,#+1
   \   00000074   0C0018E1           TST      R8,R12
   \   00000078   0180A013           MOVNE    R8,#+1
   \   0000007C   0080A003           MOVEQ    R8,#+0
   \   00000080   0080C9E5           STRB     R8,[R9, #+0]
    576          		setZ( (ans)        == 0 );
   \   00000084   ........           LDR      R9,??DataTable195  ;; fZ
   \   00000088   00005CE3           CMP      R12,#+0
   \   0000008C   0180A003           MOVEQ    R8,#+1
   \   00000090   0080A013           MOVNE    R8,#+0
    577          		setC( (wans&0x100) != 0 );
   \   00000094   400F17E3           TST      R7,#0x100
   \   00000098   0170A013           MOVNE    R7,#+1
   \   0000009C   0070A003           MOVEQ    R7,#+0
   \   000000A0   0070C6E5           STRB     R7,[R6, #+0]
    578          		setPV( ((a ^ b) & (a ^ ans) & 0x80) != 0 );
   \   000000A4   026020E0           EOR      R6,R0,R2
   \   000000A8   02702CE0           EOR      R7,R12,R2
    579          		setH(  (((a & 0x0f) - (b & 0x0f) - c) & F_H) != 0 );
   \   000000AC   0F2002E2           AND      R2,R2,#0xF
   \   000000B0   0F0000E2           AND      R0,R0,#0xF
   \   000000B4   000042E0           SUB      R0,R2,R0
   \   000000B8   ........           LDR      R2,??DataTable156  ;; F_H
   \   000000BC   066007E0           AND      R6,R7,R6
   \   000000C0   002092E5           LDR      R2,[R2, #+0]
   \   000000C4   800016E3           TST      R6,#0x80
   \   000000C8   0160A013           MOVNE    R6,#+1
   \   000000CC   0060A003           MOVEQ    R6,#+0
   \   000000D0   ........           LDR      R7,??DataTable194  ;; fPV
   \   000000D4   030040E0           SUB      R0,R0,R3
   \   000000D8   000012E1           TST      R2,R0
   \   000000DC   ........           LDR      R0,??DataTable204  ;; fH
   \   000000E0   0140A013           MOVNE    R4,#+1
   \   000000E4   0040C0E5           STRB     R4,[R0, #+0]
    580          		setN( true );
   \   000000E8   ........           LDR      R0,??DataTable205  ;; fN
   \   000000EC   0080C9E5           STRB     R8,[R9, #+0]
   \   000000F0   0060C7E5           STRB     R6,[R7, #+0]
   \   000000F4   0050C0E5           STRB     R5,[R0, #+0]
    581          
    582          		xA( ans );
   \   000000F8   00C081E5           STR      R12,[R1, #+0]
    583          	}
   \   000000FC   F003BDE8           POP      {R4-R9}
   \   00000100   1EFF2FE1           BX       LR               ;; return
    584          
    585          	/** Subtract without carry - alters all flags */

   \                                 In segment CODE, align 4, keep-with-next
    586          	private final void
    587          	sub_a( int b )
    588          	{
    589          		int a    = A();
   \                     sub_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
   \   00000004   70002DE9           PUSH     {R4-R6}
   \   00000008   002091E5           LDR      R2,[R1, #+0]
    590          		int wans = a - b;
    591          		int ans  = wans & 0xff;
    592          
    593          		setS( (ans & F_S)  != 0 );
   \   0000000C   ........           LDR      R5,??DataTable186  ;; F_S
   \   00000010   ........           LDR      R6,??DataTable187  ;; fS
   \   00000014   005095E5           LDR      R5,[R5, #+0]
   \   00000018   004042E0           SUB      R4,R2,R0
   \   0000001C   FF3004E2           AND      R3,R4,#0xFF
   \   00000020   030015E1           TST      R5,R3
   \   00000024   0150A013           MOVNE    R5,#+1
   \   00000028   0050A003           MOVEQ    R5,#+0
   \   0000002C   0050C6E5           STRB     R5,[R6, #+0]
    594          		set3( (ans & F_3)  != 0 );
   \   00000030   ........           LDR      R5,??DataTable200  ;; F_3
   \   00000034   ........           LDR      R6,??DataTable201  ;; f3
   \   00000038   005095E5           LDR      R5,[R5, #+0]
   \   0000003C   00C0A0E3           MOV      R12,#+0
   \   00000040   030015E1           TST      R5,R3
   \   00000044   0150A013           MOVNE    R5,#+1
   \   00000048   0050A003           MOVEQ    R5,#+0
   \   0000004C   0050C6E5           STRB     R5,[R6, #+0]
    595          		set5( (ans & F_5)  != 0 );
   \   00000050   ........           LDR      R5,??DataTable202  ;; F_5
   \   00000054   ........           LDR      R6,??DataTable191  ;; f5
   \   00000058   005095E5           LDR      R5,[R5, #+0]
    596          		setZ( (ans)        == 0 );
    597          		setC( (wans&0x100) != 0 );
    598          		setPV( ((a ^ b) & (a ^ ans) & 0x80) != 0 );
    599          		setH(  (((a & 0x0f) - (b & 0x0f)) & F_H) != 0 );
    600          		setN( true );
    601          
    602          		xA( ans );
   \   0000005C   003081E5           STR      R3,[R1, #+0]
   \   00000060   030015E1           TST      R5,R3
   \   00000064   0150A013           MOVNE    R5,#+1
   \   00000068   0050A003           MOVEQ    R5,#+0
   \   0000006C   0050C6E5           STRB     R5,[R6, #+0]
   \   00000070   ........           LDR      R6,??DataTable195  ;; fZ
   \   00000074   000053E3           CMP      R3,#+0
   \   00000078   0150A003           MOVEQ    R5,#+1
   \   0000007C   0050A013           MOVNE    R5,#+0
   \   00000080   0050C6E5           STRB     R5,[R6, #+0]
   \   00000084   ........           LDR      R5,??DataTable197  ;; fC
   \   00000088   400F14E3           TST      R4,#0x100
   \   0000008C   0140A013           MOVNE    R4,#+1
   \   00000090   0040A003           MOVEQ    R4,#+0
   \   00000094   0040C5E5           STRB     R4,[R5, #+0]
   \   00000098   024020E0           EOR      R4,R0,R2
   \   0000009C   025023E0           EOR      R5,R3,R2
   \   000000A0   0F2002E2           AND      R2,R2,#0xF
   \   000000A4   0F0000E2           AND      R0,R0,#0xF
   \   000000A8   000042E0           SUB      R0,R2,R0
   \   000000AC   ........           LDR      R2,??DataTable156  ;; F_H
   \   000000B0   044005E0           AND      R4,R5,R4
   \   000000B4   002092E5           LDR      R2,[R2, #+0]
   \   000000B8   ........           LDR      R5,??DataTable194  ;; fPV
   \   000000BC   800014E3           TST      R4,#0x80
   \   000000C0   0140A013           MOVNE    R4,#+1
   \   000000C4   0040A003           MOVEQ    R4,#+0
   \   000000C8   000012E1           TST      R2,R0
   \   000000CC   ........           LDR      R0,??DataTable204  ;; fH
   \   000000D0   01C0A013           MOVNE    R12,#+1
   \   000000D4   00C0C0E5           STRB     R12,[R0, #+0]
   \   000000D8   ........           LDR      R0,??DataTable205  ;; fN
   \   000000DC   0040C5E5           STRB     R4,[R5, #+0]
   \   000000E0   0120A0E3           MOV      R2,#+1
   \   000000E4   0020C0E5           STRB     R2,[R0, #+0]
    603          	}
   \   000000E8   7000BDE8           POP      {R4-R6}
   \   000000EC   1EFF2FE1           BX       LR               ;; return
    604          
    605          	/** Left rotation, alters flags H N C 3 5 */

   \                                 In segment CODE, align 4, keep-with-next
    606          	private final void
    607          	rlc_a()
    608          	{
    609          		int     ans = A();
   \                     rlc_a:
   \   00000000   ........           LDR      R0,??DataTable241  ;; _A
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   002090E5           LDR      R2,[R0, #+0]
    610          		boolean c   = (ans & 0x80) != 0;
    611          
    612          		if ( c ) {
    613          			ans = (ans << 1)|0x01;
    614          		} else {
    615          			ans <<= 1;
    616          		}
    617          		ans &= 0xff;
    618          
    619          		set3( (ans & F_3)  != 0 );
   \   0000000C   ........           LDR      R4,??DataTable200  ;; F_3
   \   00000010   ........           LDR      R5,??DataTable201  ;; f3
   \   00000014   004094E5           LDR      R4,[R4, #+0]
   \   00000018   800012E3           TST      R2,#0x80
   \   0000001C   0110A013           MOVNE    R1,#+1
   \   00000020   0010A003           MOVEQ    R1,#+0
   \   00000024   8220A0E1           LSL      R2,R2,#+1
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   01208213           ORRNE    R2,R2,#0x1
   \   00000030   FF2002E2           AND      R2,R2,#0xFF
   \   00000034   020014E1           TST      R4,R2
   \   00000038   0140A013           MOVNE    R4,#+1
   \   0000003C   0040A003           MOVEQ    R4,#+0
   \   00000040   0040C5E5           STRB     R4,[R5, #+0]
    620          		set5( (ans & F_5)  != 0 );
   \   00000044   ........           LDR      R4,??DataTable202  ;; F_5
   \   00000048   0130A0E3           MOV      R3,#+1
   \   0000004C   004094E5           LDR      R4,[R4, #+0]
   \   00000050   00C0A0E3           MOV      R12,#+0
   \   00000054   020014E1           TST      R4,R2
   \   00000058   ........           LDR      R4,??DataTable191  ;; f5
   \   0000005C   0030A003           MOVEQ    R3,#+0
   \   00000060   0030C4E5           STRB     R3,[R4, #+0]
    621          		setN( false );
   \   00000064   ........           LDR      R3,??DataTable205  ;; fN
    622          		setH( false );
    623          		setC( c );
    624          
    625          		xA( ans );
   \   00000068   002080E5           STR      R2,[R0, #+0]
   \   0000006C   00C0C3E5           STRB     R12,[R3, #+0]
   \   00000070   ........           LDR      R3,??DataTable204  ;; fH
   \   00000074   00C0C3E5           STRB     R12,[R3, #+0]
   \   00000078   ........           LDR      R3,??DataTable197  ;; fC
   \   0000007C   0010C3E5           STRB     R1,[R3, #+0]
    626          	}
   \   00000080   3000BDE8           POP      {R4,R5}
   \   00000084   1EFF2FE1           BX       LR               ;; return
    627          
    628          	/** Right rotation, alters flags H N C 3 5 */

   \                                 In segment CODE, align 4, keep-with-next
    629          	private final void
    630          	rrc_a()
    631          	{
    632          		int     ans = A();
   \                     rrc_a:
   \   00000000   ........           LDR      R0,??DataTable241  ;; _A
    633          		boolean c   = (ans & 0x01) != 0;
    634          
    635          		if ( c ) {
    636          			ans = (ans >> 1)|0x80;
    637          		} else {
    638          			ans >>= 1;
    639          		}
    640          
    641          		set3( (ans & F_3)  != 0 );
   \   00000004   ........           LDR      R12,??DataTable200  ;; F_3
   \   00000008   10002DE9           PUSH     {R4}
   \   0000000C   002090E5           LDR      R2,[R0, #+0]
   \   00000010   00C09CE5           LDR      R12,[R12, #+0]
   \   00000014   ........           LDR      R4,??DataTable201  ;; f3
   \   00000018   011012E2           ANDS     R1,R2,#0x1
   \   0000001C   8030A013           MOVNE    R3,#+128
   \   00000020   C2208311           ORRNE    R2,R3,R2, ASR #+1
   \   00000024   C220A001           ASREQ    R2,R2,#+1
   \   00000028   02001CE1           TST      R12,R2
   \   0000002C   01C0A013           MOVNE    R12,#+1
   \   00000030   00C0A003           MOVEQ    R12,#+0
   \   00000034   00C0C4E5           STRB     R12,[R4, #+0]
    642          		set5( (ans & F_5)  != 0 );
   \   00000038   ........           LDR      R4,??DataTable202  ;; F_5
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   004094E5           LDR      R4,[R4, #+0]
    643          		setN( false );
    644          		setH( false );
    645          		setC( c );
    646          
    647          		xA( ans );
   \   00000044   002080E5           STR      R2,[R0, #+0]
   \   00000048   020014E1           TST      R4,R2
   \   0000004C   ........           LDR      R4,??DataTable191  ;; f5
   \   00000050   01C0A013           MOVNE    R12,#+1
   \   00000054   00C0A003           MOVEQ    R12,#+0
   \   00000058   00C0C4E5           STRB     R12,[R4, #+0]
   \   0000005C   ........           LDR      R4,??DataTable205  ;; fN
   \   00000060   0030C4E5           STRB     R3,[R4, #+0]
   \   00000064   ........           LDR      R4,??DataTable204  ;; fH
   \   00000068   0030C4E5           STRB     R3,[R4, #+0]
   \   0000006C   ........           LDR      R3,??DataTable197  ;; fC
   \   00000070   0010C3E5           STRB     R1,[R3, #+0]
    648          	}
   \   00000074   1000BDE8           POP      {R4}
   \   00000078   1EFF2FE1           BX       LR               ;; return
    649          
    650          	/** Left rotation with carry, alters flags H N C 3 5 */

   \                                 In segment CODE, align 4, keep-with-next
    651          	private final void
    652          	rl_a()
    653          	{
    654          		int     ans = A();
   \                     rl_a:
   \   00000000   ........           LDR      R0,??DataTable241  ;; _A
   \   00000004   70002DE9           PUSH     {R4-R6}
   \   00000008   002090E5           LDR      R2,[R0, #+0]
    655          		boolean c   = (ans & 0x80) != 0;
   \   0000000C   800012E3           TST      R2,#0x80
    656          
    657          		if ( Cset() ) {
    658          			ans = (ans << 1) | 0x01;
    659          		} else {
    660          			ans <<= 1;
    661          		}
    662          
    663          		ans &= 0xff;
    664          
    665          		set3( (ans & F_3)  != 0 );
   \   00000010   ........           LDR      R5,??DataTable200  ;; F_3
   \   00000014   ........           LDR      R6,??DataTable201  ;; f3
   \   00000018   005095E5           LDR      R5,[R5, #+0]
   \   0000001C   8230A0E1           LSL      R3,R2,#+1
   \   00000020   ........           LDR      R2,??DataTable197  ;; fC
   \   00000024   0110A013           MOVNE    R1,#+1
   \   00000028   D040D2E1           LDRSB    R4,[R2, #+0]
   \   0000002C   0010A003           MOVEQ    R1,#+0
   \   00000030   00C0A0E3           MOV      R12,#+0
   \   00000034   000054E3           CMP      R4,#+0
   \   00000038   01308313           ORRNE    R3,R3,#0x1
   \   0000003C   FF3003E2           AND      R3,R3,#0xFF
   \   00000040   030015E1           TST      R5,R3
   \   00000044   0150A013           MOVNE    R5,#+1
   \   00000048   0050A003           MOVEQ    R5,#+0
   \   0000004C   0050C6E5           STRB     R5,[R6, #+0]
    666          		set5( (ans & F_5)  != 0 );
   \   00000050   ........           LDR      R5,??DataTable202  ;; F_5
   \   00000054   0140A0E3           MOV      R4,#+1
   \   00000058   005095E5           LDR      R5,[R5, #+0]
    667          		setN( false );
    668          		setH( false );
    669          		setC( c );
   \   0000005C   0010C2E5           STRB     R1,[R2, #+0]
   \   00000060   030015E1           TST      R5,R3
   \   00000064   ........           LDR      R5,??DataTable191  ;; f5
   \   00000068   0040A003           MOVEQ    R4,#+0
   \   0000006C   0040C5E5           STRB     R4,[R5, #+0]
   \   00000070   ........           LDR      R4,??DataTable205  ;; fN
    670          
    671          		xA( ans );
   \   00000074   003080E5           STR      R3,[R0, #+0]
   \   00000078   00C0C4E5           STRB     R12,[R4, #+0]
   \   0000007C   ........           LDR      R4,??DataTable204  ;; fH
   \   00000080   00C0C4E5           STRB     R12,[R4, #+0]
    672          	}
   \   00000084   7000BDE8           POP      {R4-R6}
   \   00000088   1EFF2FE1           BX       LR               ;; return
    673          
    674          	/** Right rotation with carry, alters flags H N C 3 5 */

   \                                 In segment CODE, align 4, keep-with-next
    675          	private final void
    676          	rr_a()
    677          	{
    678          		int     ans = A();
   \                     rr_a:
   \   00000000   ........           LDR      R0,??DataTable241  ;; _A
    679          		boolean c   = (ans & 0x01) != 0;
    680          
    681          		if ( Cset() ) {
   \   00000004   ........           LDR      R2,??DataTable197  ;; fC
   \   00000008   30002DE9           PUSH     {R4,R5}
   \   0000000C   003090E5           LDR      R3,[R0, #+0]
   \   00000010   D040D2E1           LDRSB    R4,[R2, #+0]
    682          			ans = (ans >> 1) | 0x80;
    683          		} else {
    684          			ans >>= 1;
    685          		}
    686          
    687          		set3( (ans & F_3)  != 0 );
   \   00000014   ........           LDR      R5,??DataTable201  ;; f3
   \   00000018   011003E2           AND      R1,R3,#0x1
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   8040A013           MOVNE    R4,#+128
   \   00000024   C3308411           ORRNE    R3,R4,R3, ASR #+1
   \   00000028   ........           LDR      R4,??DataTable200  ;; F_3
   \   0000002C   C330A001           ASREQ    R3,R3,#+1
   \   00000030   004094E5           LDR      R4,[R4, #+0]
   \   00000034   00C0A0E3           MOV      R12,#+0
   \   00000038   030014E1           TST      R4,R3
   \   0000003C   0140A013           MOVNE    R4,#+1
   \   00000040   0040A003           MOVEQ    R4,#+0
   \   00000044   0040C5E5           STRB     R4,[R5, #+0]
    688          		set5( (ans & F_5)  != 0 );
   \   00000048   ........           LDR      R4,??DataTable202  ;; F_5
   \   0000004C   ........           LDR      R5,??DataTable191  ;; f5
   \   00000050   004094E5           LDR      R4,[R4, #+0]
    689          		setN( false );
    690          		setH( false );
    691          		setC( c );
   \   00000054   0010C2E5           STRB     R1,[R2, #+0]
   \   00000058   030014E1           TST      R4,R3
   \   0000005C   0140A013           MOVNE    R4,#+1
   \   00000060   0040A003           MOVEQ    R4,#+0
   \   00000064   0040C5E5           STRB     R4,[R5, #+0]
   \   00000068   ........           LDR      R4,??DataTable205  ;; fN
    692          
    693          		xA( ans );
   \   0000006C   003080E5           STR      R3,[R0, #+0]
   \   00000070   00C0C4E5           STRB     R12,[R4, #+0]
   \   00000074   ........           LDR      R4,??DataTable204  ;; fH
   \   00000078   00C0C4E5           STRB     R12,[R4, #+0]
    694          	}
   \   0000007C   3000BDE8           POP      {R4,R5}
   \   00000080   1EFF2FE1           BX       LR               ;; return
    695          
    696          	/** Compare - alters all flags */

   \                                 In segment CODE, align 4, keep-with-next
    697          	private final void
    698          	cp_a( int b )
    699          	{
    700          		int a    = A();
   \                     cp_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   001091E5           LDR      R1,[R1, #+0]
    701          		int wans = a - b;
    702          		int ans  = wans & 0xff;
    703          
    704          		setS( (ans & F_S) != 0 );
   \   0000000C   ........           LDR      R4,??DataTable186  ;; F_S
   \   00000010   ........           LDR      R5,??DataTable187  ;; fS
   \   00000014   004094E5           LDR      R4,[R4, #+0]
   \   00000018   00C041E0           SUB      R12,R1,R0
   \   0000001C   FF200CE2           AND      R2,R12,#0xFF
   \   00000020   020014E1           TST      R4,R2
   \   00000024   0140A013           MOVNE    R4,#+1
   \   00000028   0040A003           MOVEQ    R4,#+0
   \   0000002C   0040C5E5           STRB     R4,[R5, #+0]
    705          		set3( (b & F_3)   != 0 );
   \   00000030   ........           LDR      R4,??DataTable200  ;; F_3
   \   00000034   ........           LDR      R5,??DataTable201  ;; f3
   \   00000038   004094E5           LDR      R4,[R4, #+0]
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   000014E1           TST      R4,R0
   \   00000044   0140A013           MOVNE    R4,#+1
   \   00000048   0040A003           MOVEQ    R4,#+0
   \   0000004C   0040C5E5           STRB     R4,[R5, #+0]
    706          		set5( (b & F_5)   != 0 );
   \   00000050   ........           LDR      R4,??DataTable202  ;; F_5
   \   00000054   ........           LDR      R5,??DataTable191  ;; f5
   \   00000058   004094E5           LDR      R4,[R4, #+0]
   \   0000005C   000014E1           TST      R4,R0
   \   00000060   0140A013           MOVNE    R4,#+1
   \   00000064   0040A003           MOVEQ    R4,#+0
   \   00000068   0040C5E5           STRB     R4,[R5, #+0]
    707          		setN( true );
   \   0000006C   ........           LDR      R4,??DataTable205  ;; fN
   \   00000070   0150A0E3           MOV      R5,#+1
   \   00000074   0050C4E5           STRB     R5,[R4, #+0]
    708          		setZ( ans == 0 );
   \   00000078   ........           LDR      R5,??DataTable195  ;; fZ
   \   0000007C   000052E3           CMP      R2,#+0
   \   00000080   0140A003           MOVEQ    R4,#+1
   \   00000084   0040A013           MOVNE    R4,#+0
   \   00000088   0040C5E5           STRB     R4,[R5, #+0]
    709          		setC( (wans & 0x100)!=0 );
   \   0000008C   ........           LDR      R5,??DataTable197  ;; fC
   \   00000090   400F1CE3           TST      R12,#0x100
   \   00000094   0140A013           MOVNE    R4,#+1
   \   00000098   0040A003           MOVEQ    R4,#+0
   \   0000009C   0040C5E5           STRB     R4,[R5, #+0]
    710          		setH( (((a & 0x0f) - (b & 0x0f)) & F_H) != 0 );
   \   000000A0   0F4001E2           AND      R4,R1,#0xF
   \   000000A4   0F5000E2           AND      R5,R0,#0xF
   \   000000A8   054044E0           SUB      R4,R4,R5
   \   000000AC   ........           LDR      R5,??DataTable156  ;; F_H
    711          		setPV( ((a ^ b) & (a ^ ans) & 0x80) != 0 );
   \   000000B0   010020E0           EOR      R0,R0,R1
   \   000000B4   005095E5           LDR      R5,[R5, #+0]
   \   000000B8   011022E0           EOR      R1,R2,R1
   \   000000BC   040015E1           TST      R5,R4
   \   000000C0   ........           LDR      R4,??DataTable204  ;; fH
   \   000000C4   000001E0           AND      R0,R1,R0
   \   000000C8   ........           LDR      R1,??DataTable194  ;; fPV
   \   000000CC   0130A013           MOVNE    R3,#+1
   \   000000D0   0030C4E5           STRB     R3,[R4, #+0]
   \   000000D4   800010E3           TST      R0,#0x80
   \   000000D8   0100A013           MOVNE    R0,#+1
   \   000000DC   0000A003           MOVEQ    R0,#+0
   \   000000E0   0000C1E5           STRB     R0,[R1, #+0]
    712          	}
   \   000000E4   3000BDE8           POP      {R4,R5}
   \   000000E8   1EFF2FE1           BX       LR               ;; return
    713          
    714          	/** Bitwise and - alters all flags*/

   \                                 In segment CODE, align 4, keep-with-next
    715          	private final void
    716          	and_a( int b )
    717          	{
    718          		int ans = A() & b;
   \                     and_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
    719          
    720          		setS( (ans & F_S) != 0 );
   \   00000004   ........           LDR      R3,??DataTable186  ;; F_S
   \   00000008   002091E5           LDR      R2,[R1, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   ........           LDR      R12,??DataTable187  ;; fS
   \   00000014   020000E0           AND      R0,R0,R2
   \   00000018   000013E1           TST      R3,R0
   \   0000001C   0130A013           MOVNE    R3,#+1
   \   00000020   0030A003           MOVEQ    R3,#+0
   \   00000024   0030CCE5           STRB     R3,[R12, #+0]
    721          		set3( (ans & F_3) != 0 );
   \   00000028   ........           LDR      R3,??DataTable200  ;; F_3
   \   0000002C   ........           LDR      R12,??DataTable201  ;; f3
   \   00000030   003093E5           LDR      R3,[R3, #+0]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000013E1           TST      R3,R0
   \   0000003C   0130A013           MOVNE    R3,#+1
   \   00000040   0030A003           MOVEQ    R3,#+0
   \   00000044   0030CCE5           STRB     R3,[R12, #+0]
    722          		set5( (ans & F_5) != 0 );
   \   00000048   ........           LDR      R3,??DataTable202  ;; F_5
   \   0000004C   ........           LDR      R12,??DataTable191  ;; f5
   \   00000050   003093E5           LDR      R3,[R3, #+0]
   \   00000054   000013E1           TST      R3,R0
   \   00000058   0130A013           MOVNE    R3,#+1
   \   0000005C   0030A003           MOVEQ    R3,#+0
   \   00000060   0030CCE5           STRB     R3,[R12, #+0]
    723          		setH( true );
   \   00000064   ........           LDR      R3,??DataTable204  ;; fH
   \   00000068   01C0A0E3           MOV      R12,#+1
   \   0000006C   00C0C3E5           STRB     R12,[R3, #+0]
    724          		setPV( parity[ ans ] );
   \   00000070   ........           LDR      R12,??DataTable193  ;; parity
   \   00000074   ........           LDR      R3,??DataTable194  ;; fPV
   \   00000078   DCC090E1           LDRSB    R12,[R0, +R12]
    725          		setZ( ans == 0 );
   \   0000007C   000050E3           CMP      R0,#+0
    726          		setN( false );
    727          		setC( false );
    728          
    729          		xA( ans );
   \   00000080   000081E5           STR      R0,[R1, #+0]
   \   00000084   00C0C3E5           STRB     R12,[R3, #+0]
   \   00000088   ........           LDR      R12,??DataTable195  ;; fZ
   \   0000008C   0130A003           MOVEQ    R3,#+1
   \   00000090   0030A013           MOVNE    R3,#+0
   \   00000094   0030CCE5           STRB     R3,[R12, #+0]
   \   00000098   ........           LDR      R3,??DataTable205  ;; fN
   \   0000009C   0020C3E5           STRB     R2,[R3, #+0]
   \   000000A0   ........           LDR      R3,??DataTable197  ;; fC
   \   000000A4   0020C3E5           STRB     R2,[R3, #+0]
    730          	}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
    731          
    732          	/** Bitwise or - alters all flags */

   \                                 In segment CODE, align 4, keep-with-next
    733          	private final void
    734          	or_a( int b )
    735          	{
    736          		int ans = A() | b;
   \                     or_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
    737          
    738          		setS( (ans & F_S) != 0 );
   \   00000004   ........           LDR      R3,??DataTable186  ;; F_S
   \   00000008   002091E5           LDR      R2,[R1, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   ........           LDR      R12,??DataTable187  ;; fS
   \   00000014   020080E1           ORR      R0,R0,R2
   \   00000018   000013E1           TST      R3,R0
   \   0000001C   0130A013           MOVNE    R3,#+1
   \   00000020   0030A003           MOVEQ    R3,#+0
   \   00000024   0030CCE5           STRB     R3,[R12, #+0]
    739          		set3( (ans & F_3) != 0 );
   \   00000028   ........           LDR      R3,??DataTable200  ;; F_3
   \   0000002C   ........           LDR      R12,??DataTable201  ;; f3
   \   00000030   003093E5           LDR      R3,[R3, #+0]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000013E1           TST      R3,R0
   \   0000003C   0130A013           MOVNE    R3,#+1
   \   00000040   0030A003           MOVEQ    R3,#+0
   \   00000044   0030CCE5           STRB     R3,[R12, #+0]
    740          		set5( (ans & F_5) != 0 );
   \   00000048   ........           LDR      R3,??DataTable202  ;; F_5
   \   0000004C   ........           LDR      R12,??DataTable191  ;; f5
   \   00000050   003093E5           LDR      R3,[R3, #+0]
   \   00000054   000013E1           TST      R3,R0
   \   00000058   0130A013           MOVNE    R3,#+1
   \   0000005C   0030A003           MOVEQ    R3,#+0
   \   00000060   0030CCE5           STRB     R3,[R12, #+0]
    741          		setH( false );
   \   00000064   ........           LDR      R3,??DataTable204  ;; fH
    742          		setPV( parity[ ans ] );
   \   00000068   ........           LDR      R12,??DataTable193  ;; parity
   \   0000006C   0020C3E5           STRB     R2,[R3, #+0]
   \   00000070   DCC090E1           LDRSB    R12,[R0, +R12]
   \   00000074   ........           LDR      R3,??DataTable194  ;; fPV
    743          		setZ( ans == 0 );
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   00C0C3E5           STRB     R12,[R3, #+0]
   \   00000080   ........           LDR      R12,??DataTable195  ;; fZ
   \   00000084   0130A003           MOVEQ    R3,#+1
   \   00000088   0030A013           MOVNE    R3,#+0
   \   0000008C   0030CCE5           STRB     R3,[R12, #+0]
    744          		setN( false );
   \   00000090   ........           LDR      R3,??DataTable205  ;; fN
    745          		setC( false );
    746          
    747          		xA( ans );
   \   00000094   000081E5           STR      R0,[R1, #+0]
   \   00000098   0020C3E5           STRB     R2,[R3, #+0]
   \   0000009C   ........           LDR      R3,??DataTable197  ;; fC
   \   000000A0   0020C3E5           STRB     R2,[R3, #+0]
    748          	}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
    749          
    750          	/** Bitwise exclusive or - alters all flags */

   \                                 In segment CODE, align 4, keep-with-next
    751          	private final void
    752          	xor_a( int b )
    753          	{
    754          		int ans = (A() ^ b) & 0xff;
   \                     xor_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
    755          
    756          		setS( (ans & F_S) != 0 );
   \   00000004   ........           LDR      R3,??DataTable186  ;; F_S
   \   00000008   002091E5           LDR      R2,[R1, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   ........           LDR      R12,??DataTable187  ;; fS
   \   00000014   020020E0           EOR      R0,R0,R2
   \   00000018   FF0000E2           AND      R0,R0,#0xFF
   \   0000001C   000013E1           TST      R3,R0
   \   00000020   0130A013           MOVNE    R3,#+1
   \   00000024   0030A003           MOVEQ    R3,#+0
   \   00000028   0030CCE5           STRB     R3,[R12, #+0]
    757          		set3( (ans & F_3) != 0 );
   \   0000002C   ........           LDR      R3,??DataTable200  ;; F_3
   \   00000030   ........           LDR      R12,??DataTable201  ;; f3
   \   00000034   003093E5           LDR      R3,[R3, #+0]
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   000013E1           TST      R3,R0
   \   00000040   0130A013           MOVNE    R3,#+1
   \   00000044   0030A003           MOVEQ    R3,#+0
   \   00000048   0030CCE5           STRB     R3,[R12, #+0]
    758          		set5( (ans & F_5) != 0 );
   \   0000004C   ........           LDR      R3,??DataTable202  ;; F_5
   \   00000050   ........           LDR      R12,??DataTable191  ;; f5
   \   00000054   003093E5           LDR      R3,[R3, #+0]
   \   00000058   000013E1           TST      R3,R0
   \   0000005C   0130A013           MOVNE    R3,#+1
   \   00000060   0030A003           MOVEQ    R3,#+0
   \   00000064   0030CCE5           STRB     R3,[R12, #+0]
    759          		setH( false );
   \   00000068   ........           LDR      R3,??DataTable204  ;; fH
    760          		setPV( parity[ ans ] );
   \   0000006C   ........           LDR      R12,??DataTable193  ;; parity
   \   00000070   0020C3E5           STRB     R2,[R3, #+0]
   \   00000074   DCC090E1           LDRSB    R12,[R0, +R12]
   \   00000078   ........           LDR      R3,??DataTable194  ;; fPV
    761          		setZ( ans == 0 );
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   00C0C3E5           STRB     R12,[R3, #+0]
   \   00000084   ........           LDR      R12,??DataTable195  ;; fZ
   \   00000088   0130A003           MOVEQ    R3,#+1
   \   0000008C   0030A013           MOVNE    R3,#+0
   \   00000090   0030CCE5           STRB     R3,[R12, #+0]
    762          		setN( false );
   \   00000094   ........           LDR      R3,??DataTable205  ;; fN
    763          		setC( false );    
    764          
    765          		xA( ans );
   \   00000098   000081E5           STR      R0,[R1, #+0]
   \   0000009C   0020C3E5           STRB     R2,[R3, #+0]
   \   000000A0   ........           LDR      R3,??DataTable197  ;; fC
   \   000000A4   0020C3E5           STRB     R2,[R3, #+0]
    766          	}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
    767          
    768          	/** Negation (complement 2) - alters all flags */

   \                                 In segment CODE, align 4, keep-with-next
    769          	private final void
    770          	neg_a()
    771          	{
    772          		int t = A();
   \                     neg_a:
   \   00000000   ........           LDR      R1,??DataTable241  ;; _A
   \   00000004   000091E5           LDR      R0,[R1, #+0]
    773          
    774          		xA( 0 );
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   002081E5           STR      R2,[R1, #+0]
    775          		sub_a(t);
   \   00000010   ........           B        sub_a            ;; tailcall
    776          	}
    777          
    778          	/** Complement-1, alters flags N H 3 5 */

   \                                 In segment CODE, align 4, keep-with-next
    779          	private final void
    780          	cpl_a()
    781          	{
    782          		int ans = A() ^ 0xff;
   \                     cpl_a:
   \   00000000   ........           LDR      R0,??DataTable241  ;; _A
    783          
    784          		set3( (ans & F_3) != 0 );
   \   00000004   ........           LDR      R3,??DataTable200  ;; F_3
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   ........           LDR      R12,??DataTable201  ;; f3
   \   00000014   FF1021E2           EOR      R1,R1,#0xFF
   \   00000018   010013E1           TST      R3,R1
   \   0000001C   0130A013           MOVNE    R3,#+1
   \   00000020   0030A003           MOVEQ    R3,#+0
   \   00000024   0030CCE5           STRB     R3,[R12, #+0]
    785          		set5( (ans & F_5) != 0 );
   \   00000028   ........           LDR      R3,??DataTable202  ;; F_5
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   003093E5           LDR      R3,[R3, #+0]
    786          		setH( true );
    787          		setN( true );
    788          
    789          		xA( ans );
   \   00000034   001080E5           STR      R1,[R0, #+0]
   \   00000038   010013E1           TST      R3,R1
   \   0000003C   ........           LDR      R3,??DataTable405  ;; f5
   \   00000040   0120A013           MOVNE    R2,#+1
   \   00000044   0020C3E5           STRB     R2,[R3, #+0]
   \   00000048   ........           LDR      R3,??DataTable204  ;; fH
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   0020C3E5           STRB     R2,[R3, #+0]
   \   00000054   ........           LDR      R3,??DataTable205  ;; fN
   \   00000058   0020C3E5           STRB     R2,[R3, #+0]
    790          	}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
    791          
    792          	/** DAA (Decimal Adjust Accumulator), alters all flags */

   \                                 In segment CODE, align 4, keep-with-next
    793          	private final void
    794          	daa_a()
    795          	{
    796          		int        ans = A();
    797          		int        incr = 0;
    798          		boolean    carry = Cset();
    799          
    800          		if ((Hset()) || ((ans & 0x0f) > 0x09)) {
   \                     daa_a:
   \   00000000   ........           LDR      R2,??DataTable408  ;; fH
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   D020D2E1           LDRSB    R2,[R2, #+0]
   \   0000000C   ........           LDR      R4,??DataTable241  ;; _A
   \   00000010   ........           LDR      R5,??DataTable387  ;; fC
   \   00000014   001094E5           LDR      R1,[R4, #+0]
   \   00000018   D060D5E1           LDRSB    R6,[R5, #+0]
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   0200001A           BNE      ??daa_a_0
   \   00000028   0F2001E2           AND      R2,R1,#0xF
   \   0000002C   0A0052E3           CMP      R2,#+10
   \   00000030   000000BA           BLT      ??daa_a_1
    801          			incr |= 0x06;
   \                     ??daa_a_0:
   \   00000034   0600A0E3           MOV      R0,#+6
    802          		}
    803          		if (carry || (ans > 0x9f) || ((ans > 0x8f) && ((ans & 0x0f) > 0x09))) {
   \                     ??daa_a_1:
   \   00000038   000056E3           CMP      R6,#+0
   \   0000003C   0500001A           BNE      ??daa_a_2
   \   00000040   A00051E3           CMP      R1,#+160
   \   00000044   030000AA           BGE      ??daa_a_2
   \   00000048   900051E3           CMP      R1,#+144
   \   0000004C   0F2001A2           ANDGE    R2,R1,#0xF
   \   00000050   0A0052A3           CMPGE    R2,#+10
   \   00000054   000000BA           BLT      ??daa_a_3
    804          			incr |= 0x60;
   \                     ??daa_a_2:
   \   00000058   600080E3           ORR      R0,R0,#0x60
    805          		}
    806          		if (ans > 0x99) {
   \                     ??daa_a_3:
   \   0000005C   9A0051E3           CMP      R1,#+154
    807          			carry = true;
    808          		}
    809          		if (Nset()) {
   \   00000060   ........           LDR      R1,??DataTable409  ;; fN
   \   00000064   0160A0A3           MOVGE    R6,#+1
   \   00000068   D010D1E1           LDRSB    R1,[R1, #+0]
   \   0000006C   000051E3           CMP      R1,#+0
   \   00000070   0100000A           BEQ      ??daa_a_4
    810          			sub_a(incr);
   \   00000074   ........           BL       sub_a
   \   00000078   000000EA           B        ??daa_a_5
    811          		} else {
    812          			add_a(incr);
   \                     ??daa_a_4:
   \   0000007C   ........           BL       add_a
    813          		}
    814          
    815          		ans = A();
    816          
    817          		setC( carry );
    818          		setPV( parity[ ans ] );
   \                     ??daa_a_5:
   \   00000080   001094E5           LDR      R1,[R4, #+0]
   \   00000084   ........           LDR      R2,??DataTable383  ;; parity
   \   00000088   ........           LDR      R0,??DataTable407  ;; fPV
   \   0000008C   0060C5E5           STRB     R6,[R5, #+0]
   \   00000090   D21091E1           LDRSB    R1,[R1, +R2]
   \   00000094   0010C0E5           STRB     R1,[R0, #+0]
    819          	}
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
    820          
    821          	/** Load a with i */

   \                                 In segment CODE, align 4, keep-with-next
    822          	private final void
    823          	ld_a_i()
    824          	{
    825          		int ans = I();
   \                     ld_a_i:
   \   00000000   ........           LDR      R0,??DataTable212  ;; _I
    826          
    827          		setS( (ans & F_S) != 0 );
   \   00000004   ........           LDR      R2,??DataTable401  ;; F_S
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   ........           LDR      R3,??DataTable400  ;; fS
   \   00000014   000012E1           TST      R2,R0
   \   00000018   0120A013           MOVNE    R2,#+1
   \   0000001C   0020A003           MOVEQ    R2,#+0
   \   00000020   0020C3E5           STRB     R2,[R3, #+0]
    828          		set3( (ans & F_3) != 0 );
   \   00000024   ........           LDR      R2,??DataTable413  ;; F_3
   \   00000028   ........           LDR      R3,??DataTable414  ;; f3
   \   0000002C   002092E5           LDR      R2,[R2, #+0]
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   000012E1           TST      R2,R0
   \   00000038   0120A013           MOVNE    R2,#+1
   \   0000003C   0020A003           MOVEQ    R2,#+0
   \   00000040   0020C3E5           STRB     R2,[R3, #+0]
    829          		set5( (ans & F_5) != 0 );
   \   00000044   ........           LDR      R2,??DataTable415  ;; F_5
   \   00000048   ........           LDR      R3,??DataTable405  ;; f5
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   000012E1           TST      R2,R0
   \   00000054   0120A013           MOVNE    R2,#+1
   \   00000058   0020A003           MOVEQ    R2,#+0
   \   0000005C   0020C3E5           STRB     R2,[R3, #+0]
    830          		setZ( ans == 0 );
   \   00000060   ........           LDR      R3,??DataTable419  ;; fZ
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0120A003           MOVEQ    R2,#+1
   \   0000006C   0020A013           MOVNE    R2,#+0
   \   00000070   0020C3E5           STRB     R2,[R3, #+0]
    831          		setPV( IFF2() );
   \   00000074   ........           LDR      R3,??DataTable220  ;; _IFF2
   \   00000078   ........           LDR      R2,??DataTable407  ;; fPV
   \   0000007C   D030D3E1           LDRSB    R3,[R3, #+0]
   \   00000080   0030C2E5           STRB     R3,[R2, #+0]
    832          		setH( false );
   \   00000084   ........           LDR      R2,??DataTable408  ;; fH
   \   00000088   0010C2E5           STRB     R1,[R2, #+0]
    833          		setN( false );
   \   0000008C   ........           LDR      R2,??DataTable409  ;; fN
   \   00000090   0010C2E5           STRB     R1,[R2, #+0]
    834          
    835          		xA( ans );
   \   00000094   ........           LDR      R1,??DataTable241  ;; _A
   \   00000098   000081E5           STR      R0,[R1, #+0]
    836          	}
   \   0000009C   1EFF2FE1           BX       LR               ;; return
    837          
    838          	/** Load a with r  */

   \                                 In segment CODE, align 4, keep-with-next
    839          	private final void
    840          	ld_a_r()
    841          	{
    842          		int ans = R();
   \                     ld_a_r:
   \   00000000   ........           LDR      R0,??DataTable225  ;; _R
   \   00000004   ........           LDR      R1,??DataTable226  ;; _R7
    843          
    844          		setS( (ans & F_S) != 0 );
   \   00000008   ........           LDR      R2,??DataTable401  ;; F_S
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   002092E5           LDR      R2,[R2, #+0]
   \   00000018   ........           LDR      R3,??DataTable400  ;; fS
   \   0000001C   7F0000E2           AND      R0,R0,#0x7F
   \   00000020   000081E1           ORR      R0,R1,R0
   \   00000024   000012E1           TST      R2,R0
   \   00000028   0120A013           MOVNE    R2,#+1
   \   0000002C   0020A003           MOVEQ    R2,#+0
   \   00000030   0020C3E5           STRB     R2,[R3, #+0]
    845          		set3( (ans & F_3) != 0 );
   \   00000034   ........           LDR      R2,??DataTable413  ;; F_3
   \   00000038   ........           LDR      R3,??DataTable414  ;; f3
   \   0000003C   002092E5           LDR      R2,[R2, #+0]
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   000012E1           TST      R2,R0
   \   00000048   0120A013           MOVNE    R2,#+1
   \   0000004C   0020A003           MOVEQ    R2,#+0
   \   00000050   0020C3E5           STRB     R2,[R3, #+0]
    846          		set5( (ans & F_5) != 0 );
   \   00000054   ........           LDR      R2,??DataTable415  ;; F_5
   \   00000058   ........           LDR      R3,??DataTable405  ;; f5
   \   0000005C   002092E5           LDR      R2,[R2, #+0]
   \   00000060   000012E1           TST      R2,R0
   \   00000064   0120A013           MOVNE    R2,#+1
   \   00000068   0020A003           MOVEQ    R2,#+0
   \   0000006C   0020C3E5           STRB     R2,[R3, #+0]
    847          		setZ( ans == 0 );
   \   00000070   ........           LDR      R3,??DataTable419  ;; fZ
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0120A003           MOVEQ    R2,#+1
   \   0000007C   0020A013           MOVNE    R2,#+0
   \   00000080   0020C3E5           STRB     R2,[R3, #+0]
    848          		setPV( IFF2() );
   \   00000084   ........           LDR      R3,??DataTable263  ;; _IFF2
   \   00000088   ........           LDR      R2,??DataTable407  ;; fPV
   \   0000008C   D030D3E1           LDRSB    R3,[R3, #+0]
   \   00000090   0030C2E5           STRB     R3,[R2, #+0]
    849          		setH( false );
   \   00000094   ........           LDR      R2,??DataTable408  ;; fH
   \   00000098   0010C2E5           STRB     R1,[R2, #+0]
    850          		setN( false );
   \   0000009C   ........           LDR      R2,??DataTable409  ;; fN
   \   000000A0   0010C2E5           STRB     R1,[R2, #+0]
    851          
    852          		xA( ans );
   \   000000A4   ........           LDR      R1,??DataTable241  ;; _A
   \   000000A8   000081E5           STR      R0,[R1, #+0]
    853          	}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
    854          
    855          	/** Right rotation between A and (HL)*/

   \                                 In segment CODE, align 4, keep-with-next
    856          	private final void
    857          	rrd_a()
    858          	{
    859          		int ans = A();
    860          		int t   = peekb( HL() );
    861          		int q   = t;
   \                     rrd_a:
   \   00000000   ........           LDR      R2,??DataTable253  ;; _HL
   \   00000004   ........           LDR      R3,??DataTable254  ;; mem
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   ........           LDR      R0,??DataTable241  ;; _A
   \   00000014   032082E0           ADD      R2,R2,R3
   \   00000018   0030D2E5           LDRB     R3,[R2, #+0]
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
    862          
    863          		t   = (t >> 4) | (ans << 4);
   \   00000020   01C2A0E1           LSL      R12,R1,#+4
   \   00000024   43C28CE1           ORR      R12,R12,R3, ASR #+4
    864          		ans = (ans & 0xf0) | (q & 0x0f);
   \   00000028   F01001E2           AND      R1,R1,#0xF0
   \   0000002C   0F3003E2           AND      R3,R3,#0xF
   \   00000030   011083E1           ORR      R1,R3,R1
    865          		pokeb( HL(), t );
    866          
    867          		setS( (ans & F_S) != 0 );
   \   00000034   ........           LDR      R3,??DataTable401  ;; F_S
   \   00000038   00C0C2E5           STRB     R12,[R2, #+0]
   \   0000003C   003093E5           LDR      R3,[R3, #+0]
   \   00000040   ........           LDR      R12,??DataTable400  ;; fS
   \   00000044   010013E1           TST      R3,R1
   \   00000048   0130A013           MOVNE    R3,#+1
   \   0000004C   0030A003           MOVEQ    R3,#+0
   \   00000050   0030CCE5           STRB     R3,[R12, #+0]
    868          		set3( (ans & F_3) != 0 );
   \   00000054   ........           LDR      R3,??DataTable413  ;; F_3
   \   00000058   ........           LDR      R12,??DataTable414  ;; f3
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   010013E1           TST      R3,R1
   \   00000068   0130A013           MOVNE    R3,#+1
   \   0000006C   0030A003           MOVEQ    R3,#+0
   \   00000070   0030CCE5           STRB     R3,[R12, #+0]
    869          		set5( (ans & F_5) != 0 );
   \   00000074   ........           LDR      R3,??DataTable415  ;; F_5
   \   00000078   ........           LDR      R12,??DataTable405  ;; f5
   \   0000007C   003093E5           LDR      R3,[R3, #+0]
    870          		setZ( ans == 0 );
    871          		setPV( IFF2() );
    872          		setH( false );    
    873          		setN( false );        
    874          
    875          		xA( ans );
   \   00000080   001080E5           STR      R1,[R0, #+0]
   \   00000084   010013E1           TST      R3,R1
   \   00000088   0130A013           MOVNE    R3,#+1
   \   0000008C   0030A003           MOVEQ    R3,#+0
   \   00000090   0030CCE5           STRB     R3,[R12, #+0]
   \   00000094   ........           LDR      R12,??DataTable419  ;; fZ
   \   00000098   000051E3           CMP      R1,#+0
   \   0000009C   0130A003           MOVEQ    R3,#+1
   \   000000A0   0030A013           MOVNE    R3,#+0
   \   000000A4   0030CCE5           STRB     R3,[R12, #+0]
   \   000000A8   ........           LDR      R12,??DataTable263  ;; _IFF2
   \   000000AC   ........           LDR      R3,??DataTable407  ;; fPV
   \   000000B0   D0C0DCE1           LDRSB    R12,[R12, #+0]
   \   000000B4   00C0C3E5           STRB     R12,[R3, #+0]
   \   000000B8   ........           LDR      R3,??DataTable408  ;; fH
   \   000000BC   0020C3E5           STRB     R2,[R3, #+0]
   \   000000C0   ........           LDR      R3,??DataTable409  ;; fN
   \   000000C4   0020C3E5           STRB     R2,[R3, #+0]
    876          	}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
    877          
    878          	/** Left rotate between A and (HL) */

   \                                 In segment CODE, align 4, keep-with-next
    879          	private final void
    880          	rld_a()
    881          	{
    882          		int ans = A();
    883          		int t   = peekb( HL() );
    884          		int q   = t;
   \                     rld_a:
   \   00000000   ........           LDR      R2,??DataTable253  ;; _HL
   \   00000004   ........           LDR      R3,??DataTable254  ;; mem
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   ........           LDR      R0,??DataTable285  ;; _A
   \   00000014   032082E0           ADD      R2,R2,R3
   \   00000018   0030D2E5           LDRB     R3,[R2, #+0]
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
    885          
    886          		t   = (t << 4) | (ans & 0x0f);
   \   00000020   0FC001E2           AND      R12,R1,#0xF
   \   00000024   03C28CE1           ORR      R12,R12,R3, LSL #+4
    887          		ans = (ans & 0xf0) | (q >> 4);
   \   00000028   F01001E2           AND      R1,R1,#0xF0
   \   0000002C   431281E1           ORR      R1,R1,R3, ASR #+4
    888          		pokeb( HL(), (t & 0xff) );
    889          
    890          		setS( (ans & F_S) != 0 );
   \   00000030   ........           LDR      R3,??DataTable401  ;; F_S
   \   00000034   00C0C2E5           STRB     R12,[R2, #+0]
   \   00000038   003093E5           LDR      R3,[R3, #+0]
   \   0000003C   ........           LDR      R12,??DataTable400  ;; fS
   \   00000040   010013E1           TST      R3,R1
   \   00000044   0130A013           MOVNE    R3,#+1
   \   00000048   0030A003           MOVEQ    R3,#+0
   \   0000004C   0030CCE5           STRB     R3,[R12, #+0]
    891          		set3( (ans & F_3) != 0 );
   \   00000050   ........           LDR      R3,??DataTable413  ;; F_3
   \   00000054   ........           LDR      R12,??DataTable414  ;; f3
   \   00000058   003093E5           LDR      R3,[R3, #+0]
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   010013E1           TST      R3,R1
   \   00000064   0130A013           MOVNE    R3,#+1
   \   00000068   0030A003           MOVEQ    R3,#+0
   \   0000006C   0030CCE5           STRB     R3,[R12, #+0]
    892          		set5( (ans & F_5) != 0 );
   \   00000070   ........           LDR      R3,??DataTable415  ;; F_5
   \   00000074   ........           LDR      R12,??DataTable405  ;; f5
   \   00000078   003093E5           LDR      R3,[R3, #+0]
    893          		setZ( ans == 0 );
    894          		setPV( IFF2() );
    895          		setH( false );
    896          		setN( false );
    897          
    898          		xA( ans );
   \   0000007C   001080E5           STR      R1,[R0, #+0]
   \   00000080   010013E1           TST      R3,R1
   \   00000084   0130A013           MOVNE    R3,#+1
   \   00000088   0030A003           MOVEQ    R3,#+0
   \   0000008C   0030CCE5           STRB     R3,[R12, #+0]
   \   00000090   ........           LDR      R12,??DataTable419  ;; fZ
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   0130A003           MOVEQ    R3,#+1
   \   0000009C   0030A013           MOVNE    R3,#+0
   \   000000A0   0030CCE5           STRB     R3,[R12, #+0]
   \   000000A4   ........           LDR      R12,??DataTable263  ;; _IFF2
   \   000000A8   ........           LDR      R3,??DataTable407  ;; fPV
   \   000000AC   D0C0DCE1           LDRSB    R12,[R12, #+0]
   \   000000B0   00C0C3E5           STRB     R12,[R3, #+0]
   \   000000B4   ........           LDR      R3,??DataTable408  ;; fH
   \   000000B8   0020C3E5           STRB     R2,[R3, #+0]
   \   000000BC   ........           LDR      R3,??DataTable409  ;; fN
   \   000000C0   0020C3E5           STRB     R2,[R3, #+0]
    899          	}
   \   000000C4   1EFF2FE1           BX       LR               ;; return
    900          
    901          	/** Test bit, alters all flags except C*/

   \                                 In segment CODE, align 4, keep-with-next
    902          	private final void
    903          	bit( int b, int r )
    904          	{
   \                     bit:
   \   00000000   30002DE9           PUSH     {R4,R5}
    905          		boolean    bitSet = ((r & b) != 0);
    906          
    907          		setN( false );
   \   00000004   ........           LDR      R4,??DataTable409  ;; fN
    908          		setH( true );
    909          		set3( (r & F_3) != 0 );
   \   00000008   ........           LDR      R5,??DataTable414  ;; f3
   \   0000000C   0030A0E3           MOV      R3,#+0
   \   00000010   0030C4E5           STRB     R3,[R4, #+0]
   \   00000014   ........           LDR      R4,??DataTable408  ;; fH
   \   00000018   01C0A0E3           MOV      R12,#+1
   \   0000001C   00C0C4E5           STRB     R12,[R4, #+0]
   \   00000020   ........           LDR      R4,??DataTable413  ;; F_3
   \   00000024   010010E1           TST      R0,R1
   \   00000028   004094E5           LDR      R4,[R4, #+0]
   \   0000002C   0120A013           MOVNE    R2,#+1
   \   00000030   0020A003           MOVEQ    R2,#+0
   \   00000034   010014E1           TST      R4,R1
   \   00000038   0140A013           MOVNE    R4,#+1
   \   0000003C   0040A003           MOVEQ    R4,#+0
   \   00000040   0040C5E5           STRB     R4,[R5, #+0]
    910          		set5( (r & F_5) != 0 );
   \   00000044   ........           LDR      R4,??DataTable415  ;; F_5
   \   00000048   004094E5           LDR      R4,[R4, #+0]
   \   0000004C   010014E1           TST      R4,R1
   \   00000050   ........           LDR      R4,??DataTable405  ;; f5
   \   00000054   0110A013           MOVNE    R1,#+1
   \   00000058   0010A003           MOVEQ    R1,#+0
   \   0000005C   0010C4E5           STRB     R1,[R4, #+0]
    911          		setS( (b == F_S) ? bitSet : false );
   \   00000060   ........           LDR      R1,??DataTable401  ;; F_S
   \   00000064   001091E5           LDR      R1,[R1, #+0]
   \   00000068   010050E1           CMP      R0,R1
   \   0000006C   ........           LDR      R1,??DataTable400  ;; fS
   \   00000070   0200A001           MOVEQ    R0,R2
   \   00000074   0000A013           MOVNE    R0,#+0
   \   00000078   0000C1E5           STRB     R0,[R1, #+0]
    912          		setZ(  !bitSet );
   \   0000007C   ........           LDR      R1,??DataTable419  ;; fZ
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100A003           MOVEQ    R0,#+1
   \   00000088   0000A013           MOVNE    R0,#+0
   \   0000008C   0000C1E5           STRB     R0,[R1, #+0]
    913          		setPV( !bitSet );
   \   00000090   ........           LDR      R0,??DataTable407  ;; fPV
   \   00000094   0130A003           MOVEQ    R3,#+1
   \   00000098   0030C0E5           STRB     R3,[R0, #+0]
    914          	}
   \   0000009C   3000BDE8           POP      {R4,R5}
   \   000000A0   1EFF2FE1           BX       LR               ;; return
    915          
    916          	/** Set flag C (carry), alters flags N H 3 5 C */

   \                                 In segment CODE, align 4, keep-with-next
    917          	private final void
    918          	scf()
    919          	{
    920          		int        ans = A();
   \                     scf:
   \   00000000   ........           LDR      R0,??DataTable285  ;; _A
    921          
    922          		set3( (ans & F_3) != 0 );
   \   00000004   ........           LDR      R2,??DataTable413  ;; F_3
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   ........           LDR      R3,??DataTable414  ;; f3
   \   00000014   000012E1           TST      R2,R0
   \   00000018   0120A013           MOVNE    R2,#+1
   \   0000001C   0020A003           MOVEQ    R2,#+0
   \   00000020   0020C3E5           STRB     R2,[R3, #+0]
    923          		set5( (ans & F_5) != 0 );
   \   00000024   ........           LDR      R2,??DataTable415  ;; F_5
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   002092E5           LDR      R2,[R2, #+0]
   \   00000030   000012E1           TST      R2,R0
   \   00000034   ........           LDR      R2,??DataTable405  ;; f5
   \   00000038   0100A013           MOVNE    R0,#+1
   \   0000003C   0000A003           MOVEQ    R0,#+0
   \   00000040   0000C2E5           STRB     R0,[R2, #+0]
    924          		setN( false );
   \   00000044   ........           LDR      R0,??DataTable409  ;; fN
   \   00000048   0010C0E5           STRB     R1,[R0, #+0]
    925          		setH( false );
   \   0000004C   ........           LDR      R0,??DataTable408  ;; fH
   \   00000050   0010C0E5           STRB     R1,[R0, #+0]
    926          		setC( true );
   \   00000054   ........           LDR      R0,??DataTable387  ;; fC
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   0010C0E5           STRB     R1,[R0, #+0]
    927          	}
   \   00000060   1EFF2FE1           BX       LR               ;; return
    928          
    929          	/** Complement flag C (carry), alters flags N H 3 5 C */

   \                                 In segment CODE, align 4, keep-with-next
    930          	private final void
    931          	ccf()
    932          	{
    933          		int        ans = A();
   \                     ccf:
   \   00000000   ........           LDR      R0,??DataTable285  ;; _A
    934          
    935          		set3( (ans & F_3) != 0 );
   \   00000004   ........           LDR      R2,??DataTable413  ;; F_3
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   ........           LDR      R3,??DataTable414  ;; f3
   \   00000014   000012E1           TST      R2,R0
   \   00000018   0120A013           MOVNE    R2,#+1
   \   0000001C   0020A003           MOVEQ    R2,#+0
   \   00000020   0020C3E5           STRB     R2,[R3, #+0]
    936          		set5( (ans & F_5) != 0 );
   \   00000024   ........           LDR      R2,??DataTable415  ;; F_5
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   002092E5           LDR      R2,[R2, #+0]
   \   00000030   000012E1           TST      R2,R0
   \   00000034   ........           LDR      R2,??DataTable405  ;; f5
   \   00000038   0100A013           MOVNE    R0,#+1
   \   0000003C   0000A003           MOVEQ    R0,#+0
   \   00000040   0000C2E5           STRB     R0,[R2, #+0]
    937          		setN( false );
   \   00000044   ........           LDR      R0,??DataTable409  ;; fN
   \   00000048   0010C0E5           STRB     R1,[R0, #+0]
    938          		setC( Cset() ? false : true );
   \   0000004C   ........           LDR      R0,??DataTable387  ;; fC
   \   00000050   D020D0E1           LDRSB    R2,[R0, #+0]
   \   00000054   000052E3           CMP      R2,#+0
   \   00000058   0110A003           MOVEQ    R1,#+1
   \   0000005C   0010C0E5           STRB     R1,[R0, #+0]
    939          	}
   \   00000060   1EFF2FE1           BX       LR               ;; return
    940          
    941          	/** Left rotation, alters all flags*/

   \                                 In segment CODE, align 4, keep-with-next
    942          	private final int
    943          	rlc( int ans )
    944          	{
    945          		boolean c = (ans & 0x80) != 0;
    946          
    947          		if ( c ) {
    948          			ans = (ans << 1)|0x01;
    949          		} else {
    950          			ans <<= 1;
    951          		}
    952          		ans &= 0xff;
    953          
    954          		setS( (ans & F_S) != 0 );
   \                     rlc:
   \   00000000   ........           LDR      R12,??DataTable401  ;; F_S
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   00C09CE5           LDR      R12,[R12, #+0]
   \   0000000C   ........           LDR      R4,??DataTable400  ;; fS
   \   00000010   800010E3           TST      R0,#0x80
   \   00000014   0110A013           MOVNE    R1,#+1
   \   00000018   0010A003           MOVEQ    R1,#+0
   \   0000001C   8000A0E1           LSL      R0,R0,#+1
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   01008013           ORRNE    R0,R0,#0x1
   \   00000028   FF0000E2           AND      R0,R0,#0xFF
   \   0000002C   00001CE1           TST      R12,R0
   \   00000030   01C0A013           MOVNE    R12,#+1
   \   00000034   00C0A003           MOVEQ    R12,#+0
   \   00000038   00C0C4E5           STRB     R12,[R4, #+0]
    955          		set3( (ans & F_3) != 0 );
   \   0000003C   ........           LDR      R4,??DataTable413  ;; F_3
   \   00000040   0120A0E3           MOV      R2,#+1
   \   00000044   004094E5           LDR      R4,[R4, #+0]
   \   00000048   0030A0E3           MOV      R3,#+0
   \   0000004C   000014E1           TST      R4,R0
   \   00000050   ........           LDR      R4,??DataTable414  ;; f3
   \   00000054   01C0A013           MOVNE    R12,#+1
   \   00000058   00C0A003           MOVEQ    R12,#+0
   \   0000005C   00C0C4E5           STRB     R12,[R4, #+0]
    956          		set5( (ans & F_5) != 0 );
   \   00000060   ........           LDR      R4,??DataTable415  ;; F_5
   \   00000064   004094E5           LDR      R4,[R4, #+0]
   \   00000068   000014E1           TST      R4,R0
   \   0000006C   ........           LDR      R4,??DataTable405  ;; f5
   \   00000070   01C0A013           MOVNE    R12,#+1
   \   00000074   00C0A003           MOVEQ    R12,#+0
   \   00000078   00C0C4E5           STRB     R12,[R4, #+0]
    957          		setZ( (ans) == 0 );
   \   0000007C   ........           LDR      R4,??DataTable419  ;; fZ
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0020A013           MOVNE    R2,#+0
   \   00000088   0020C4E5           STRB     R2,[R4, #+0]
    958          		setPV( parity[ ans ] );
   \   0000008C   ........           LDR      R4,??DataTable383  ;; parity
   \   00000090   ........           LDR      R2,??DataTable407  ;; fPV
   \   00000094   D44090E1           LDRSB    R4,[R0, +R4]
   \   00000098   0040C2E5           STRB     R4,[R2, #+0]
    959          		setH( false );
   \   0000009C   ........           LDR      R2,??DataTable408  ;; fH
   \   000000A0   0030C2E5           STRB     R3,[R2, #+0]
    960          		setN( false );
   \   000000A4   ........           LDR      R2,??DataTable409  ;; fN
   \   000000A8   0030C2E5           STRB     R3,[R2, #+0]
    961          		setC( c );
   \   000000AC   ........           LDR      R2,??DataTable387  ;; fC
   \   000000B0   0010C2E5           STRB     R1,[R2, #+0]
    962          
    963          		return(ans);
   \   000000B4   1000BDE8           POP      {R4}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
    964          	}
    965          
    966          	/** Right rotation, alters all flags*/

   \                                 In segment CODE, align 4, keep-with-next
    967          	private final int
    968          	rrc( int ans )
    969          	{
    970          		boolean c = (ans & 0x01) != 0;
    971          
    972          		if ( c ) {
    973          			ans = (ans >> 1)|0x80;
    974          		} else {
    975          			ans >>= 1;
    976          		}
    977          
    978          		setS( (ans & F_S) != 0 );
   \                     rrc:
   \   00000000   ........           LDR      R3,??DataTable401  ;; F_S
   \   00000004   ........           LDR      R12,??DataTable400  ;; fS
   \   00000008   003093E5           LDR      R3,[R3, #+0]
   \   0000000C   011000E2           AND      R1,R0,#0x1
   \   00000010   C000A0E1           ASR      R0,R0,#+1
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   80008013           ORRNE    R0,R0,#0x80
   \   0000001C   000013E1           TST      R3,R0
   \   00000020   0130A013           MOVNE    R3,#+1
   \   00000024   0030A003           MOVEQ    R3,#+0
   \   00000028   0030CCE5           STRB     R3,[R12, #+0]
    979          		set3( (ans & F_3) != 0 );
   \   0000002C   ........           LDR      R3,??DataTable413  ;; F_3
   \   00000030   ........           LDR      R12,??DataTable414  ;; f3
   \   00000034   003093E5           LDR      R3,[R3, #+0]
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   000013E1           TST      R3,R0
   \   00000040   0130A013           MOVNE    R3,#+1
   \   00000044   0030A003           MOVEQ    R3,#+0
   \   00000048   0030CCE5           STRB     R3,[R12, #+0]
    980          		set5( (ans & F_5) != 0 );
   \   0000004C   ........           LDR      R3,??DataTable415  ;; F_5
   \   00000050   ........           LDR      R12,??DataTable405  ;; f5
   \   00000054   003093E5           LDR      R3,[R3, #+0]
   \   00000058   000013E1           TST      R3,R0
   \   0000005C   0130A013           MOVNE    R3,#+1
   \   00000060   0030A003           MOVEQ    R3,#+0
   \   00000064   0030CCE5           STRB     R3,[R12, #+0]
    981          		setZ( (ans) == 0 );
   \   00000068   ........           LDR      R12,??DataTable419  ;; fZ
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0130A003           MOVEQ    R3,#+1
   \   00000074   0030A013           MOVNE    R3,#+0
   \   00000078   0030CCE5           STRB     R3,[R12, #+0]
    982          		setPV( parity[ ans ] );
   \   0000007C   ........           LDR      R12,??DataTable383  ;; parity
   \   00000080   ........           LDR      R3,??DataTable407  ;; fPV
   \   00000084   DCC090E1           LDRSB    R12,[R0, +R12]
   \   00000088   00C0C3E5           STRB     R12,[R3, #+0]
    983          		setH( false );
   \   0000008C   ........           LDR      R3,??DataTable408  ;; fH
   \   00000090   0020C3E5           STRB     R2,[R3, #+0]
    984          		setN( false );
   \   00000094   ........           LDR      R3,??DataTable409  ;; fN
   \   00000098   0020C3E5           STRB     R2,[R3, #+0]
    985          		setC( c );
   \   0000009C   ........           LDR      R2,??DataTable387  ;; fC
   \   000000A0   0010C2E5           STRB     R1,[R2, #+0]
    986          
    987          		return(ans);
   \   000000A4   1EFF2FE1           BX       LR               ;; return
    988          	}
    989          
    990          	/** Left rotation with carry, alters all flags*/

   \                                 In segment CODE, align 4, keep-with-next
    991          	private final int
    992          	rl( int ans )
    993          	{
    994          		boolean c = (ans & 0x80) != 0;
    995          
    996          		if ( Cset() ) {
   \                     rl:
   \   00000000   ........           LDR      R2,??DataTable387  ;; fC
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   D030D2E1           LDRSB    R3,[R2, #+0]
    997          			ans = (ans << 1) | 0x01;
    998          		} else {
    999          			ans <<= 1;
   1000          		}
   1001          		ans &= 0xff;
   1002          
   1003          		setS( (ans & F_S) != 0 );
   \   0000000C   ........           LDR      R4,??DataTable401  ;; F_S
   \   00000010   ........           LDR      R5,??DataTable400  ;; fS
   \   00000014   004094E5           LDR      R4,[R4, #+0]
   \   00000018   800010E3           TST      R0,#0x80
   \   0000001C   0110A013           MOVNE    R1,#+1
   \   00000020   0010A003           MOVEQ    R1,#+0
   \   00000024   8000A0E1           LSL      R0,R0,#+1
   \   00000028   000053E3           CMP      R3,#+0
   \   0000002C   01008013           ORRNE    R0,R0,#0x1
   \   00000030   FF0000E2           AND      R0,R0,#0xFF
   \   00000034   000014E1           TST      R4,R0
   \   00000038   0140A013           MOVNE    R4,#+1
   \   0000003C   0040A003           MOVEQ    R4,#+0
   \   00000040   0040C5E5           STRB     R4,[R5, #+0]
   1004          		set3( (ans & F_3) != 0 );
   \   00000044   ........           LDR      R4,??DataTable413  ;; F_3
   \   00000048   ........           LDR      R5,??DataTable414  ;; f3
   \   0000004C   004094E5           LDR      R4,[R4, #+0]
   \   00000050   01C0A0E3           MOV      R12,#+1
   \   00000054   000014E1           TST      R4,R0
   \   00000058   0140A013           MOVNE    R4,#+1
   \   0000005C   0040A003           MOVEQ    R4,#+0
   \   00000060   0040C5E5           STRB     R4,[R5, #+0]
   1005          		set5( (ans & F_5) != 0 );
   \   00000064   ........           LDR      R4,??DataTable415  ;; F_5
   \   00000068   ........           LDR      R5,??DataTable405  ;; f5
   \   0000006C   004094E5           LDR      R4,[R4, #+0]
   \   00000070   0030A0E3           MOV      R3,#+0
   \   00000074   000014E1           TST      R4,R0
   \   00000078   0140A013           MOVNE    R4,#+1
   \   0000007C   0040A003           MOVEQ    R4,#+0
   \   00000080   0040C5E5           STRB     R4,[R5, #+0]
   1006          		setZ( (ans) == 0 );
   \   00000084   ........           LDR      R4,??DataTable419  ;; fZ
   1007          		setPV( parity[ ans ] );
   \   00000088   ........           LDR      R5,??DataTable383  ;; parity
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   00C0A013           MOVNE    R12,#+0
   \   00000094   00C0C4E5           STRB     R12,[R4, #+0]
   \   00000098   D55090E1           LDRSB    R5,[R0, +R5]
   \   0000009C   ........           LDR      R4,??DataTable407  ;; fPV
   1008          		setH( false );
   1009          		setN( false );
   1010          		setC( c );
   \   000000A0   0010C2E5           STRB     R1,[R2, #+0]
   \   000000A4   0050C4E5           STRB     R5,[R4, #+0]
   \   000000A8   ........           LDR      R4,??DataTable408  ;; fH
   \   000000AC   0030C4E5           STRB     R3,[R4, #+0]
   \   000000B0   ........           LDR      R4,??DataTable409  ;; fN
   \   000000B4   0030C4E5           STRB     R3,[R4, #+0]
   1011          
   1012          		return(ans);
   \   000000B8   3000BDE8           POP      {R4,R5}
   \   000000BC   1EFF2FE1           BX       LR               ;; return
   1013          	}
   1014          
   1015          	/** Right rotation with carry, alters all flags*/

   \                                 In segment CODE, align 4, keep-with-next
   1016          	private final int
   1017          	rr( int ans )
   1018          	{
   1019          		boolean c = (ans & 0x01) != 0;
   1020          
   1021          		if ( Cset() ) {
   \                     rr:
   \   00000000   ........           LDR      R2,??DataTable387  ;; fC
   1022          			ans = (ans >> 1) | 0x80;
   1023          		} else {
   1024          			ans >>= 1;
   1025          		}
   1026          
   1027          		setS( (ans & F_S) != 0 );
   \   00000004   ........           LDR      R12,??DataTable401  ;; F_S
   \   00000008   10002DE9           PUSH     {R4}
   \   0000000C   D030D2E1           LDRSB    R3,[R2, #+0]
   \   00000010   00C09CE5           LDR      R12,[R12, #+0]
   \   00000014   ........           LDR      R4,??DataTable400  ;; fS
   \   00000018   011000E2           AND      R1,R0,#0x1
   \   0000001C   C000A0E1           ASR      R0,R0,#+1
   \   00000020   000053E3           CMP      R3,#+0
   \   00000024   80008013           ORRNE    R0,R0,#0x80
   \   00000028   0030A013           MOVNE    R3,#+0
   \   0000002C   00001CE1           TST      R12,R0
   \   00000030   01C0A013           MOVNE    R12,#+1
   \   00000034   03C0A001           MOVEQ    R12,R3
   \   00000038   00C0C4E5           STRB     R12,[R4, #+0]
   1028          		set3( (ans & F_3) != 0 );
   \   0000003C   ........           LDR      R4,??DataTable413  ;; F_3
   \   00000040   004094E5           LDR      R4,[R4, #+0]
   \   00000044   000014E1           TST      R4,R0
   \   00000048   ........           LDR      R4,??DataTable414  ;; f3
   \   0000004C   01C0A013           MOVNE    R12,#+1
   \   00000050   03C0A001           MOVEQ    R12,R3
   \   00000054   00C0C4E5           STRB     R12,[R4, #+0]
   1029          		set5( (ans & F_5) != 0 );
   \   00000058   ........           LDR      R4,??DataTable415  ;; F_5
   \   0000005C   004094E5           LDR      R4,[R4, #+0]
   \   00000060   000014E1           TST      R4,R0
   \   00000064   ........           LDR      R4,??DataTable405  ;; f5
   \   00000068   01C0A013           MOVNE    R12,#+1
   \   0000006C   03C0A001           MOVEQ    R12,R3
   \   00000070   00C0C4E5           STRB     R12,[R4, #+0]
   1030          		setZ( (ans) == 0 );
   \   00000074   ........           LDR      R4,??DataTable419  ;; fZ
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   01C0A003           MOVEQ    R12,#+1
   \   00000080   03C0A011           MOVNE    R12,R3
   \   00000084   00C0C4E5           STRB     R12,[R4, #+0]
   1031          		setPV( parity[ ans ] );
   \   00000088   ........           LDR      R12,??DataTable383  ;; parity
   \   0000008C   ........           LDR      R4,??DataTable407  ;; fPV
   \   00000090   DCC090E1           LDRSB    R12,[R0, +R12]
   1032          		setH( false );
   1033          		setN( false );
   1034          		setC( c );
   \   00000094   0010C2E5           STRB     R1,[R2, #+0]
   \   00000098   00C0C4E5           STRB     R12,[R4, #+0]
   \   0000009C   ........           LDR      R4,??DataTable408  ;; fH
   \   000000A0   0030C4E5           STRB     R3,[R4, #+0]
   \   000000A4   ........           LDR      R4,??DataTable409  ;; fN
   \   000000A8   0030C4E5           STRB     R3,[R4, #+0]
   1035          
   1036          		return(ans);
   \   000000AC   1000BDE8           POP      {R4}
   \   000000B0   1EFF2FE1           BX       LR               ;; return
   1037          	}
   1038          
   1039          	/** SLA, alters all flags (probado) */

   \                                 In segment CODE, align 4, keep-with-next
   1040          	private final int
   1041          	sla( int ans )
   1042          	{
   1043          		boolean c = (ans & 0x80) != 0;
   1044          		ans = (ans << 1) & 0xff;
   1045          
   1046          		setS( (ans & F_S) != 0 );
   \                     sla:
   \   00000000   ........           LDR      R3,??DataTable401  ;; F_S
   \   00000004   ........           LDR      R12,??DataTable400  ;; fS
   \   00000008   003093E5           LDR      R3,[R3, #+0]
   \   0000000C   800010E3           TST      R0,#0x80
   \   00000010   0110A013           MOVNE    R1,#+1
   \   00000014   0010A003           MOVEQ    R1,#+0
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   800002E0           AND      R0,R2,R0, LSL #+1
   \   00000020   000013E1           TST      R3,R0
   \   00000024   0130A013           MOVNE    R3,#+1
   \   00000028   0030A003           MOVEQ    R3,#+0
   \   0000002C   0030CCE5           STRB     R3,[R12, #+0]
   1047          		set3( (ans & F_3) != 0 );
   \   00000030   ........           LDR      R3,??DataTable413  ;; F_3
   \   00000034   ........           LDR      R12,??DataTable414  ;; f3
   \   00000038   003093E5           LDR      R3,[R3, #+0]
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   000013E1           TST      R3,R0
   \   00000044   0130A013           MOVNE    R3,#+1
   \   00000048   0030A003           MOVEQ    R3,#+0
   \   0000004C   0030CCE5           STRB     R3,[R12, #+0]
   1048          		set5( (ans & F_5) != 0 );
   \   00000050   ........           LDR      R3,??DataTable415  ;; F_5
   \   00000054   ........           LDR      R12,??DataTable405  ;; f5
   \   00000058   003093E5           LDR      R3,[R3, #+0]
   \   0000005C   000013E1           TST      R3,R0
   \   00000060   0130A013           MOVNE    R3,#+1
   \   00000064   0030A003           MOVEQ    R3,#+0
   \   00000068   0030CCE5           STRB     R3,[R12, #+0]
   1049          		setZ( (ans) == 0 );
   \   0000006C   ........           LDR      R12,??DataTable419  ;; fZ
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0130A003           MOVEQ    R3,#+1
   \   00000078   0030A013           MOVNE    R3,#+0
   \   0000007C   0030CCE5           STRB     R3,[R12, #+0]
   1050          		setPV( parity[ ans ] );
   \   00000080   ........           LDR      R12,??DataTable383  ;; parity
   \   00000084   ........           LDR      R3,??DataTable407  ;; fPV
   \   00000088   DCC090E1           LDRSB    R12,[R0, +R12]
   \   0000008C   00C0C3E5           STRB     R12,[R3, #+0]
   1051          		setH( false );
   \   00000090   ........           LDR      R3,??DataTable408  ;; fH
   \   00000094   0020C3E5           STRB     R2,[R3, #+0]
   1052          		setN( false );
   \   00000098   ........           LDR      R3,??DataTable409  ;; fN
   \   0000009C   0020C3E5           STRB     R2,[R3, #+0]
   1053          		setC( c );
   \   000000A0   ........           LDR      R2,??DataTable387  ;; fC
   \   000000A4   0010C2E5           STRB     R1,[R2, #+0]
   1054          
   1055          		return(ans);
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   1056          	}
   1057          
   1058          	/** SLS, alters all flags (Shift Left and Set) */

   \                                 In segment CODE, align 4, keep-with-next
   1059          	private final int
   1060          	sls( int ans )
   1061          	{
   1062          		boolean c = (ans & 0x80) != 0;
   1063          		ans = ((ans << 1) | 0x01) & 0xff;
   1064          
   1065          		setS( (ans & F_S) != 0 );
   \                     sls:
   \   00000000   ........           LDR      R12,??DataTable401  ;; F_S
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   00C09CE5           LDR      R12,[R12, #+0]
   \   0000000C   ........           LDR      R4,??DataTable400  ;; fS
   \   00000010   800010E3           TST      R0,#0x80
   \   00000014   0110A013           MOVNE    R1,#+1
   \   00000018   0010A003           MOVEQ    R1,#+0
   \   0000001C   FF20A0E3           MOV      R2,#+255
   \   00000020   800002E0           AND      R0,R2,R0, LSL #+1
   \   00000024   010080E3           ORR      R0,R0,#0x1
   \   00000028   00001CE1           TST      R12,R0
   \   0000002C   01C0A013           MOVNE    R12,#+1
   \   00000030   00C0A003           MOVEQ    R12,#+0
   \   00000034   00C0C4E5           STRB     R12,[R4, #+0]
   1066          		set3( (ans & F_3) != 0 );
   \   00000038   ........           LDR      R4,??DataTable413  ;; F_3
   \   0000003C   0130A0E3           MOV      R3,#+1
   \   00000040   004094E5           LDR      R4,[R4, #+0]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   000014E1           TST      R4,R0
   \   0000004C   ........           LDR      R4,??DataTable414  ;; f3
   \   00000050   01C0A013           MOVNE    R12,#+1
   \   00000054   00C0A003           MOVEQ    R12,#+0
   \   00000058   00C0C4E5           STRB     R12,[R4, #+0]
   1067          		set5( (ans & F_5) != 0 );
   \   0000005C   ........           LDR      R4,??DataTable415  ;; F_5
   \   00000060   004094E5           LDR      R4,[R4, #+0]
   \   00000064   000014E1           TST      R4,R0
   \   00000068   ........           LDR      R4,??DataTable405  ;; f5
   \   0000006C   01C0A013           MOVNE    R12,#+1
   \   00000070   00C0A003           MOVEQ    R12,#+0
   \   00000074   00C0C4E5           STRB     R12,[R4, #+0]
   1068          		setZ( (ans) == 0 );
   \   00000078   ........           LDR      R4,??DataTable419  ;; fZ
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0030A013           MOVNE    R3,#+0
   \   00000084   0030C4E5           STRB     R3,[R4, #+0]
   1069          		setPV( parity[ ans ] );
   \   00000088   ........           LDR      R4,??DataTable383  ;; parity
   \   0000008C   ........           LDR      R3,??DataTable407  ;; fPV
   \   00000090   D44090E1           LDRSB    R4,[R0, +R4]
   \   00000094   0040C3E5           STRB     R4,[R3, #+0]
   1070          		setH( false );
   \   00000098   ........           LDR      R3,??DataTable408  ;; fH
   \   0000009C   0020C3E5           STRB     R2,[R3, #+0]
   1071          		setN( false );
   \   000000A0   ........           LDR      R3,??DataTable409  ;; fN
   \   000000A4   0020C3E5           STRB     R2,[R3, #+0]
   1072          		setC( c );
   \   000000A8   ........           LDR      R2,??DataTable387  ;; fC
   \   000000AC   0010C2E5           STRB     R1,[R2, #+0]
   1073          
   1074          		return(ans);
   \   000000B0   1000BDE8           POP      {R4}
   \   000000B4   1EFF2FE1           BX       LR               ;; return
   1075          	}
   1076          
   1077          	/** SRA (Shift Right Arithmetically), alters all flags*/

   \                                 In segment CODE, align 4, keep-with-next
   1078          	private final int
   1079          	sra( int ans )
   1080          	{
   1081          		boolean c = (ans & 0x01) != 0;
   1082          		ans = (ans >> 1) | (ans & 0x80);
   1083          
   1084          		setS( (ans & F_S) != 0 );
   \                     sra:
   \   00000000   ........           LDR      R3,??DataTable401  ;; F_S
   \   00000004   ........           LDR      R12,??DataTable400  ;; fS
   \   00000008   003093E5           LDR      R3,[R3, #+0]
   \   0000000C   011000E2           AND      R1,R0,#0x1
   \   00000010   802000E2           AND      R2,R0,#0x80
   \   00000014   C00082E1           ORR      R0,R2,R0, ASR #+1
   \   00000018   000013E1           TST      R3,R0
   \   0000001C   0130A013           MOVNE    R3,#+1
   \   00000020   0030A003           MOVEQ    R3,#+0
   \   00000024   0030CCE5           STRB     R3,[R12, #+0]
   1085          		set3( (ans & F_3) != 0 );
   \   00000028   ........           LDR      R3,??DataTable413  ;; F_3
   \   0000002C   ........           LDR      R12,??DataTable414  ;; f3
   \   00000030   003093E5           LDR      R3,[R3, #+0]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   000013E1           TST      R3,R0
   \   0000003C   0130A013           MOVNE    R3,#+1
   \   00000040   0030A003           MOVEQ    R3,#+0
   \   00000044   0030CCE5           STRB     R3,[R12, #+0]
   1086          		set5( (ans & F_5) != 0 );
   \   00000048   ........           LDR      R3,??DataTable415  ;; F_5
   \   0000004C   ........           LDR      R12,??DataTable405  ;; f5
   \   00000050   003093E5           LDR      R3,[R3, #+0]
   \   00000054   000013E1           TST      R3,R0
   \   00000058   0130A013           MOVNE    R3,#+1
   \   0000005C   0030A003           MOVEQ    R3,#+0
   \   00000060   0030CCE5           STRB     R3,[R12, #+0]
   1087          		setZ( (ans) == 0 );
   \   00000064   ........           LDR      R12,??DataTable419  ;; fZ
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0130A003           MOVEQ    R3,#+1
   \   00000070   0030A013           MOVNE    R3,#+0
   \   00000074   0030CCE5           STRB     R3,[R12, #+0]
   1088          		setPV( parity[ ans ] );
   \   00000078   ........           LDR      R12,??DataTable383  ;; parity
   \   0000007C   ........           LDR      R3,??DataTable407  ;; fPV
   \   00000080   DCC090E1           LDRSB    R12,[R0, +R12]
   \   00000084   00C0C3E5           STRB     R12,[R3, #+0]
   1089          		setH( false );
   \   00000088   ........           LDR      R3,??DataTable408  ;; fH
   \   0000008C   0020C3E5           STRB     R2,[R3, #+0]
   1090          		setN( false );
   \   00000090   ........           LDR      R3,??DataTable409  ;; fN
   \   00000094   0020C3E5           STRB     R2,[R3, #+0]
   1091          		setC( c );
   \   00000098   ........           LDR      R2,??DataTable387  ;; fC
   \   0000009C   0010C2E5           STRB     R1,[R2, #+0]
   1092          
   1093          		return(ans);
   \   000000A0   1EFF2FE1           BX       LR               ;; return
   1094          	}
   1095          
   1096          	/** SRL (Shift Right Logically), alters all flags */

   \                                 In segment CODE, align 4, keep-with-next
   1097          	private final int srl( int ans ) {
   1098          		boolean c = (ans & 0x01) != 0;
   1099          		ans = ans >> 1;
   1100          
   1101          		setS( (ans & F_S) != 0 );
   \                     srl:
   \   00000000   ........           LDR      R3,??DataTable401  ;; F_S
   \   00000004   ........           LDR      R12,??DataTable400  ;; fS
   \   00000008   003093E5           LDR      R3,[R3, #+0]
   \   0000000C   011000E2           AND      R1,R0,#0x1
   \   00000010   C000A0E1           ASR      R0,R0,#+1
   \   00000014   000013E1           TST      R3,R0
   \   00000018   0130A013           MOVNE    R3,#+1
   \   0000001C   0030A003           MOVEQ    R3,#+0
   \   00000020   0030CCE5           STRB     R3,[R12, #+0]
   1102          		set3( (ans & F_3) != 0 );
   \   00000024   ........           LDR      R3,??DataTable413  ;; F_3
   \   00000028   ........           LDR      R12,??DataTable414  ;; f3
   \   0000002C   003093E5           LDR      R3,[R3, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   000013E1           TST      R3,R0
   \   00000038   0130A013           MOVNE    R3,#+1
   \   0000003C   0030A003           MOVEQ    R3,#+0
   \   00000040   0030CCE5           STRB     R3,[R12, #+0]
   1103          		set5( (ans & F_5) != 0 );
   \   00000044   ........           LDR      R3,??DataTable415  ;; F_5
   \   00000048   ........           LDR      R12,??DataTable405  ;; f5
   \   0000004C   003093E5           LDR      R3,[R3, #+0]
   \   00000050   000013E1           TST      R3,R0
   \   00000054   0130A013           MOVNE    R3,#+1
   \   00000058   0030A003           MOVEQ    R3,#+0
   \   0000005C   0030CCE5           STRB     R3,[R12, #+0]
   1104          		setZ( (ans) == 0 );
   \   00000060   ........           LDR      R12,??DataTable419  ;; fZ
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0130A003           MOVEQ    R3,#+1
   \   0000006C   0030A013           MOVNE    R3,#+0
   \   00000070   0030CCE5           STRB     R3,[R12, #+0]
   1105          		setPV( parity[ ans ] );
   \   00000074   ........           LDR      R12,??DataTable383  ;; parity
   \   00000078   ........           LDR      R3,??DataTable407  ;; fPV
   \   0000007C   DCC090E1           LDRSB    R12,[R0, +R12]
   \   00000080   00C0C3E5           STRB     R12,[R3, #+0]
   1106          		setH( false );
   \   00000084   ........           LDR      R3,??DataTable408  ;; fH
   \   00000088   0020C3E5           STRB     R2,[R3, #+0]
   1107          		setN( false );
   \   0000008C   ........           LDR      R3,??DataTable409  ;; fN
   \   00000090   0020C3E5           STRB     R2,[R3, #+0]
   1108          		setC( c );
   \   00000094   ........           LDR      R2,??DataTable387  ;; fC
   \   00000098   0010C2E5           STRB     R1,[R2, #+0]
   1109          
   1110          		return(ans);
   \   0000009C   1EFF2FE1           BX       LR               ;; return
   1111          	}
   1112          
   1113          	/** Decrement, alters all flags except C (carry)*/

   \                                 In segment CODE, align 4, keep-with-next
   1114          	private final int dec8( int ans ) {
   1115          		boolean    pv = (ans == 0x80);
   1116          		boolean    h  = (((ans & 0x0f) - 1) & F_H) != 0;
   \                     dec8:
   \   00000000   ........           LDR      R12,??DataTable399  ;; F_H
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   00C09CE5           LDR      R12,[R12, #+0]
   \   0000000C   800050E3           CMP      R0,#+128
   \   00000010   0120A003           MOVEQ    R2,#+1
   \   00000014   0020A013           MOVNE    R2,#+0
   1117          		ans = (ans - 1) & 0xff;
   1118          
   1119          		setS( (ans & F_S) != 0 );
   \   00000018   ........           LDR      R4,??DataTable400  ;; fS
   \   0000001C   0F3000E2           AND      R3,R0,#0xF
   \   00000020   013043E2           SUB      R3,R3,#+1
   \   00000024   03001CE1           TST      R12,R3
   \   00000028   ........           LDR      R12,??DataTable401  ;; F_S
   \   0000002C   0130A013           MOVNE    R3,#+1
   \   00000030   00C09CE5           LDR      R12,[R12, #+0]
   \   00000034   0030A003           MOVEQ    R3,#+0
   \   00000038   010040E2           SUB      R0,R0,#+1
   \   0000003C   FF0000E2           AND      R0,R0,#0xFF
   \   00000040   00001CE1           TST      R12,R0
   \   00000044   01C0A013           MOVNE    R12,#+1
   \   00000048   00C0A003           MOVEQ    R12,#+0
   \   0000004C   00C0C4E5           STRB     R12,[R4, #+0]
   1120          		set3( (ans & F_3) != 0 );
   \   00000050   ........           LDR      R4,??DataTable413  ;; F_3
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   004094E5           LDR      R4,[R4, #+0]
   \   0000005C   000014E1           TST      R4,R0
   \   00000060   ........           LDR      R4,??DataTable414  ;; f3
   \   00000064   01C0A013           MOVNE    R12,#+1
   \   00000068   00C0A003           MOVEQ    R12,#+0
   \   0000006C   00C0C4E5           STRB     R12,[R4, #+0]
   1121          		set5( (ans & F_5) != 0 );
   \   00000070   ........           LDR      R4,??DataTable415  ;; F_5
   \   00000074   004094E5           LDR      R4,[R4, #+0]
   \   00000078   000014E1           TST      R4,R0
   \   0000007C   ........           LDR      R4,??DataTable405  ;; f5
   \   00000080   01C0A013           MOVNE    R12,#+1
   \   00000084   00C0A003           MOVEQ    R12,#+0
   \   00000088   00C0C4E5           STRB     R12,[R4, #+0]
   1122          		setZ( (ans) == 0 );
   \   0000008C   ........           LDR      R4,??DataTable419  ;; fZ
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0110A003           MOVEQ    R1,#+1
   \   00000098   0010C4E5           STRB     R1,[R4, #+0]
   1123          		setPV( pv );
   \   0000009C   ........           LDR      R1,??DataTable407  ;; fPV
   \   000000A0   0020C1E5           STRB     R2,[R1, #+0]
   1124          		setH( h );
   \   000000A4   ........           LDR      R1,??DataTable408  ;; fH
   1125          		setN( true );
   \   000000A8   0120A0E3           MOV      R2,#+1
   \   000000AC   0030C1E5           STRB     R3,[R1, #+0]
   \   000000B0   ........           LDR      R1,??DataTable409  ;; fN
   \   000000B4   0020C1E5           STRB     R2,[R1, #+0]
   1126          
   1127          		return(ans);
   \   000000B8   1000BDE8           POP      {R4}
   \   000000BC   1EFF2FE1           BX       LR               ;; return
   1128          	}
   1129          
   1130          	/** Increment, alters all flags except C (carry) */

   \                                 In segment CODE, align 4, keep-with-next
   1131          	private final int inc8( int ans ) {
   1132          		boolean    pv = (ans == 0x7f);
   1133          		boolean    h  = (((ans & 0x0f) + 1) & F_H) != 0;
   \                     inc8:
   \   00000000   ........           LDR      R12,??DataTable399  ;; F_H
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   00C09CE5           LDR      R12,[R12, #+0]
   1134          		ans = (ans + 1) & 0xff;
   1135          
   1136          		setS( (ans & F_S) != 0 );
   \   0000000C   ........           LDR      R5,??DataTable400  ;; fS
   \   00000010   7F0050E3           CMP      R0,#+127
   \   00000014   0130A003           MOVEQ    R3,#+1
   \   00000018   0030A013           MOVNE    R3,#+0
   \   0000001C   0F4000E2           AND      R4,R0,#0xF
   \   00000020   014084E2           ADD      R4,R4,#+1
   \   00000024   04001CE1           TST      R12,R4
   \   00000028   ........           LDR      R4,??DataTable401  ;; F_S
   \   0000002C   01C0A013           MOVNE    R12,#+1
   \   00000030   004094E5           LDR      R4,[R4, #+0]
   \   00000034   00C0A003           MOVEQ    R12,#+0
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   FF0000E2           AND      R0,R0,#0xFF
   \   00000040   000014E1           TST      R4,R0
   \   00000044   0140A013           MOVNE    R4,#+1
   \   00000048   0040A003           MOVEQ    R4,#+0
   \   0000004C   0040C5E5           STRB     R4,[R5, #+0]
   1137          		set3( (ans & F_3) != 0 );
   \   00000050   ........           LDR      R4,??DataTable413  ;; F_3
   \   00000054   ........           LDR      R5,??DataTable414  ;; f3
   \   00000058   004094E5           LDR      R4,[R4, #+0]
   \   0000005C   0120A0E3           MOV      R2,#+1
   \   00000060   000014E1           TST      R4,R0
   \   00000064   0140A013           MOVNE    R4,#+1
   \   00000068   0040A003           MOVEQ    R4,#+0
   \   0000006C   0040C5E5           STRB     R4,[R5, #+0]
   1138          		set5( (ans & F_5) != 0 );
   \   00000070   ........           LDR      R4,??DataTable415  ;; F_5
   \   00000074   ........           LDR      R5,??DataTable405  ;; f5
   \   00000078   004094E5           LDR      R4,[R4, #+0]
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   000014E1           TST      R4,R0
   \   00000084   0140A013           MOVNE    R4,#+1
   \   00000088   0040A003           MOVEQ    R4,#+0
   \   0000008C   0040C5E5           STRB     R4,[R5, #+0]
   1139          		setZ( (ans) == 0 );
   \   00000090   ........           LDR      R4,??DataTable419  ;; fZ
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0020A013           MOVNE    R2,#+0
   \   0000009C   0020C4E5           STRB     R2,[R4, #+0]
   1140          		setPV( pv );
   \   000000A0   ........           LDR      R2,??DataTable407  ;; fPV
   \   000000A4   0030C2E5           STRB     R3,[R2, #+0]
   1141          		setH( h );
   \   000000A8   ........           LDR      R2,??DataTable408  ;; fH
   \   000000AC   00C0C2E5           STRB     R12,[R2, #+0]
   1142          		setN( false );
   \   000000B0   ........           LDR      R2,??DataTable409  ;; fN
   \   000000B4   0010C2E5           STRB     R1,[R2, #+0]
   1143          
   1144          		return(ans);
   \   000000B8   3000BDE8           POP      {R4,R5}
   \   000000BC   1EFF2FE1           BX       LR               ;; return
   1145          	}
   1146          
   1147          	/** Suma con acarreo (no probado) */

   \                                 In segment CODE, align 4, keep-with-next
   1148          	private final int adc16( int a, int b ) {
   \                     adc16:
   \   00000000   F0012DE9           PUSH     {R4-R8}
   1149          		int c    = Cset() ? 1 : 0;
   \   00000004   ........           LDR      R4,??DataTable428  ;; fC
   1150          		int lans = a + b + c;
   1151          		int ans  = lans & 0xffff;
   1152          
   1153          		setS( (ans & (F_S<<8)) != 0 );
   \   00000008   ........           LDR      R7,??DataTable429  ;; F_S
   \   0000000C   ........           LDR      R8,??DataTable430  ;; fS
   \   00000010   007097E5           LDR      R7,[R7, #+0]
   \   00000014   0120A0E1           MOV      R2,R1
   \   00000018   D010D4E1           LDRSB    R1,[R4, #+0]
   \   0000001C   0160A0E3           MOV      R6,#+1
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   01C0A013           MOVNE    R12,#+1
   \   0000002C   00C0A003           MOVEQ    R12,#+0
   \   00000030   001082E0           ADD      R1,R2,R0
   \   00000034   01508CE0           ADD      R5,R12,R1
   \   00000038   0518A0E1           LSL      R1,R5,#+16
   \   0000003C   2118A0E1           LSR      R1,R1,#+16
   \   00000040   070411E1           TST      R1,R7, LSL #+8
   \   00000044   0170A013           MOVNE    R7,#+1
   \   00000048   0070A003           MOVEQ    R7,#+0
   \   0000004C   0070C8E5           STRB     R7,[R8, #+0]
   1154          		set3( (ans & (F_3<<8)) != 0 );
   \   00000050   ........           LDR      R7,??DataTable413  ;; F_3
   \   00000054   ........           LDR      R8,??DataTable414  ;; f3
   \   00000058   007097E5           LDR      R7,[R7, #+0]
   \   0000005C   070411E1           TST      R1,R7, LSL #+8
   \   00000060   0170A013           MOVNE    R7,#+1
   \   00000064   0070A003           MOVEQ    R7,#+0
   \   00000068   0070C8E5           STRB     R7,[R8, #+0]
   1155          		set5( (ans & (F_5<<8)) != 0 );
   \   0000006C   ........           LDR      R7,??DataTable415  ;; F_5
   \   00000070   ........           LDR      R8,??DataTable434  ;; f5
   \   00000074   007097E5           LDR      R7,[R7, #+0]
   \   00000078   070411E1           TST      R1,R7, LSL #+8
   \   0000007C   0170A013           MOVNE    R7,#+1
   \   00000080   0070A003           MOVEQ    R7,#+0
   1156          		setZ( (ans) == 0 );
   \   00000084   000051E3           CMP      R1,#+0
   \   00000088   0060A013           MOVNE    R6,#+0
   1157          		setC( (lans & 0x10000)!=0 );
   \   0000008C   400B15E3           TST      R5,#0x10000
   \   00000090   0150A013           MOVNE    R5,#+1
   \   00000094   0050A003           MOVEQ    R5,#+0
   \   00000098   0050C4E5           STRB     R5,[R4, #+0]
   1158          		setPV( ((a ^ ~b) & (a ^ ans) & 0x8000)!=0 );
   \   0000009C   0250A0E1           MOV      R5,R2
   \   000000A0   0550E0E1           MVN      R5,R5
   \   000000A4   004025E0           EOR      R4,R5,R0
   \   000000A8   005021E0           EOR      R5,R1,R0
   \   000000AC   044005E0           AND      R4,R5,R4
   \   000000B0   ........           LDR      R5,??DataTable435  ;; fPV
   \   000000B4   800C14E3           TST      R4,#0x8000
   \   000000B8   0140A013           MOVNE    R4,#+1
   \   000000BC   0040A003           MOVEQ    R4,#+0
   \   000000C0   0040C5E5           STRB     R4,[R5, #+0]
   1159          		setH( (((a & 0x0fff) + (b & 0x0fff) + c) & 0x1000)!=0 );
   \   000000C4   FF40A0E3           MOV      R4,#+255
   \   000000C8   F04E84E3           ORR      R4,R4,#0xF00
   \   000000CC   000004E0           AND      R0,R4,R0
   \   000000D0   022004E0           AND      R2,R4,R2
   \   000000D4   000082E0           ADD      R0,R2,R0
   \   000000D8   ........           LDR      R2,??DataTable436  ;; fH
   \   000000DC   0070C8E5           STRB     R7,[R8, #+0]
   \   000000E0   ........           LDR      R7,??DataTable419  ;; fZ
   \   000000E4   00008CE0           ADD      R0,R12,R0
   \   000000E8   400D10E3           TST      R0,#0x1000
   \   000000EC   0100A013           MOVNE    R0,#+1
   \   000000F0   0000A003           MOVEQ    R0,#+0
   \   000000F4   0000C2E5           STRB     R0,[R2, #+0]
   1160          		setN( false );
   \   000000F8   ........           LDR      R0,??DataTable438  ;; fN
   \   000000FC   0060C7E5           STRB     R6,[R7, #+0]
   \   00000100   0030C0E5           STRB     R3,[R0, #+0]
   1161          
   1162          		return(ans);
   \   00000104   F001BDE8           POP      {R4-R8}
   \   00000108   0100A0E1           MOV      R0,R1
   \   0000010C   1EFF2FE1           BX       LR               ;; return
   1163          	}
   1164          
   1165          	/** Add */

   \                                 In segment CODE, align 4, keep-with-next
   1166          	private final int add16( int a, int b ) {
   \                     add16:
   \   00000000   30002DE9           PUSH     {R4,R5}
   1167          		int lans = a + b;
   1168          		int ans  = lans & 0xffff;
   1169          
   1170          		set3( (ans & (F_3<<8)) != 0 );
   \   00000004   ........           LDR      R4,??DataTable431  ;; F_3
   \   00000008   ........           LDR      R5,??DataTable432  ;; f3
   \   0000000C   004094E5           LDR      R4,[R4, #+0]
   \   00000010   00C081E0           ADD      R12,R1,R0
   \   00000014   0C28A0E1           LSL      R2,R12,#+16
   \   00000018   2228A0E1           LSR      R2,R2,#+16
   \   0000001C   040412E1           TST      R2,R4, LSL #+8
   \   00000020   0140A013           MOVNE    R4,#+1
   \   00000024   0040A003           MOVEQ    R4,#+0
   \   00000028   0040C5E5           STRB     R4,[R5, #+0]
   1171          		set5( (ans & (F_5<<8)) != 0 );
   \   0000002C   ........           LDR      R4,??DataTable433  ;; F_5
   \   00000030   ........           LDR      R5,??DataTable434  ;; f5
   \   00000034   004094E5           LDR      R4,[R4, #+0]
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   040412E1           TST      R2,R4, LSL #+8
   \   00000040   0140A013           MOVNE    R4,#+1
   \   00000044   0040A003           MOVEQ    R4,#+0
   \   00000048   0040C5E5           STRB     R4,[R5, #+0]
   1172          		setC( (lans & 0x10000)!=0 );
   \   0000004C   ........           LDR      R5,??DataTable428  ;; fC
   \   00000050   400B1CE3           TST      R12,#0x10000
   \   00000054   0140A013           MOVNE    R4,#+1
   \   00000058   0040A003           MOVEQ    R4,#+0
   \   0000005C   0040C5E5           STRB     R4,[R5, #+0]
   1173          		setH( (((a & 0x0fff) + (b & 0x0fff)) & 0x1000)!=0 );
   \   00000060   FF40A0E3           MOV      R4,#+255
   \   00000064   F04E84E3           ORR      R4,R4,#0xF00
   \   00000068   000004E0           AND      R0,R4,R0
   \   0000006C   011004E0           AND      R1,R4,R1
   \   00000070   000081E0           ADD      R0,R1,R0
   \   00000074   ........           LDR      R1,??DataTable436  ;; fH
   \   00000078   400D10E3           TST      R0,#0x1000
   \   0000007C   0100A013           MOVNE    R0,#+1
   \   00000080   0000A003           MOVEQ    R0,#+0
   \   00000084   0000C1E5           STRB     R0,[R1, #+0]
   1174          		setN( false );
   \   00000088   ........           LDR      R0,??DataTable438  ;; fN
   \   0000008C   0030C0E5           STRB     R3,[R0, #+0]
   1175          
   1176          		return(ans);
   \   00000090   3000BDE8           POP      {R4,R5}
   \   00000094   0200A0E1           MOV      R0,R2
   \   00000098   1EFF2FE1           BX       LR               ;; return
   1177          	}
   1178          
   1179          	/** Add with carry */

   \                                 In segment CODE, align 4, keep-with-next
   1180          	private final int sbc16( int a, int b ) {
   \                     sbc16:
   \   00000000   F0012DE9           PUSH     {R4-R8}
   1181          		int c    = Cset() ? 1 : 0;
   \   00000004   ........           LDR      R4,??DataTable428  ;; fC
   1182          		int lans = a - b - c;
   1183          		int ans  = lans & 0xffff;
   1184          
   1185          		setS( (ans & (F_S<<8)) != 0 );
   \   00000008   ........           LDR      R7,??DataTable429  ;; F_S
   \   0000000C   ........           LDR      R8,??DataTable430  ;; fS
   \   00000010   007097E5           LDR      R7,[R7, #+0]
   \   00000014   0120A0E1           MOV      R2,R1
   \   00000018   D010D4E1           LDRSB    R1,[R4, #+0]
   \   0000001C   0060A0E3           MOV      R6,#+0
   \   00000020   0130A0E3           MOV      R3,#+1
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   01C0A013           MOVNE    R12,#+1
   \   0000002C   00C0A003           MOVEQ    R12,#+0
   \   00000030   021040E0           SUB      R1,R0,R2
   \   00000034   0C5041E0           SUB      R5,R1,R12
   \   00000038   0518A0E1           LSL      R1,R5,#+16
   \   0000003C   2118A0E1           LSR      R1,R1,#+16
   \   00000040   070411E1           TST      R1,R7, LSL #+8
   \   00000044   0170A013           MOVNE    R7,#+1
   \   00000048   0070A003           MOVEQ    R7,#+0
   \   0000004C   0070C8E5           STRB     R7,[R8, #+0]
   1186          		set3( (ans & (F_3<<8)) != 0 );
   \   00000050   ........           LDR      R7,??DataTable431  ;; F_3
   \   00000054   ........           LDR      R8,??DataTable432  ;; f3
   \   00000058   007097E5           LDR      R7,[R7, #+0]
   \   0000005C   070411E1           TST      R1,R7, LSL #+8
   \   00000060   0170A013           MOVNE    R7,#+1
   \   00000064   0070A003           MOVEQ    R7,#+0
   \   00000068   0070C8E5           STRB     R7,[R8, #+0]
   1187          		set5( (ans & (F_5<<8)) != 0 );
   \   0000006C   ........           LDR      R7,??DataTable433  ;; F_5
   \   00000070   ........           LDR      R8,??DataTable434  ;; f5
   \   00000074   007097E5           LDR      R7,[R7, #+0]
   \   00000078   070411E1           TST      R1,R7, LSL #+8
   \   0000007C   0170A013           MOVNE    R7,#+1
   \   00000080   0070A003           MOVEQ    R7,#+0
   1188          		setZ( (ans) == 0 );
   \   00000084   000051E3           CMP      R1,#+0
   \   00000088   0160A003           MOVEQ    R6,#+1
   1189          		setC( (lans & 0x10000)!=0 );
   \   0000008C   400B15E3           TST      R5,#0x10000
   \   00000090   0150A013           MOVNE    R5,#+1
   \   00000094   0050A003           MOVEQ    R5,#+0
   \   00000098   0050C4E5           STRB     R5,[R4, #+0]
   1190          		setPV( ((a ^ b) & (a ^ ans) & 0x8000)!=0 );
   \   0000009C   004022E0           EOR      R4,R2,R0
   \   000000A0   005021E0           EOR      R5,R1,R0
   \   000000A4   044005E0           AND      R4,R5,R4
   \   000000A8   ........           LDR      R5,??DataTable435  ;; fPV
   \   000000AC   800C14E3           TST      R4,#0x8000
   \   000000B0   0140A013           MOVNE    R4,#+1
   \   000000B4   0040A003           MOVEQ    R4,#+0
   \   000000B8   0040C5E5           STRB     R4,[R5, #+0]
   1191          		setH( (((a & 0x0fff) - (b & 0x0fff) - c) & 0x1000)!=0 );
   \   000000BC   FF40A0E3           MOV      R4,#+255
   \   000000C0   F04E84E3           ORR      R4,R4,#0xF00
   \   000000C4   000004E0           AND      R0,R4,R0
   \   000000C8   022004E0           AND      R2,R4,R2
   \   000000CC   020040E0           SUB      R0,R0,R2
   \   000000D0   ........           LDR      R2,??DataTable436  ;; fH
   \   000000D4   0070C8E5           STRB     R7,[R8, #+0]
   \   000000D8   ........           LDR      R7,??DataTable437  ;; fZ
   \   000000DC   0C0040E0           SUB      R0,R0,R12
   \   000000E0   400D10E3           TST      R0,#0x1000
   \   000000E4   0100A013           MOVNE    R0,#+1
   \   000000E8   0000A003           MOVEQ    R0,#+0
   \   000000EC   0000C2E5           STRB     R0,[R2, #+0]
   1192          		setN( true );
   \   000000F0   ........           LDR      R0,??DataTable438  ;; fN
   \   000000F4   0060C7E5           STRB     R6,[R7, #+0]
   \   000000F8   0030C0E5           STRB     R3,[R0, #+0]
   1193          
   1194          		return(ans);
   \   000000FC   F001BDE8           POP      {R4-R8}
   \   00000100   0100A0E1           MOV      R0,R1
   \   00000104   1EFF2FE1           BX       LR               ;; return
   1195          	}
   1196          
   1197          	/** EXX */

   \                                 In segment CODE, align 4, keep-with-next
   1198          	public final void exx() {
   1199          		int t;
   1200          
   1201          		t = HL();
   \                     exx:
   \   00000000   ........           LDR      R0,??DataTable439  ;; _HL
   1202          		xHL( _HL_ );
   \   00000004   60209FE5           LDR      R2,??exx_0       ;; _HL_
   \   00000008   10002DE9           PUSH     {R4}
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   003092E5           LDR      R3,[R2, #+0]
   1203          		_HL_ = t;
   \   00000014   001082E5           STR      R1,[R2, #+0]
   1204          
   1205          		t = DE();
   1206          		xDE( _DE_ );
   \   00000018   50209FE5           LDR      R2,??exx_0+0x4   ;; _DE_
   \   0000001C   003080E5           STR      R3,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable440  ;; _DE
   \   00000024   003092E5           LDR      R3,[R2, #+0]
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   003080E5           STR      R3,[R0, #+0]
   1207          		_DE_ = t;
   1208          
   1209          		t = BC();
   \   00000030   ........           LDR      R0,??DataTable441  ;; _C
   \   00000034   001082E5           STR      R1,[R2, #+0]
   \   00000038   ........           LDR      R1,??DataTable442  ;; _B
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   022483E1           ORR      R2,R3,R2, LSL #+8
   1210          		xBC( _BC_ );
   \   00000048   24309FE5           LDR      R3,??exx_0+0x8   ;; _BC_
   \   0000004C   00C093E5           LDR      R12,[R3, #+0]
   1211          		_BC_ = t;    
   \   00000050   002083E5           STR      R2,[R3, #+0]
   \   00000054   4C44A0E1           ASR      R4,R12,#+8
   \   00000058   004081E5           STR      R4,[R1, #+0]
   \   0000005C   FF100CE2           AND      R1,R12,#0xFF
   \   00000060   001080E5           STR      R1,[R0, #+0]
   1212          	}
   \   00000064   1000BDE8           POP      {R4}
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??exx_0:
   \   0000006C   ........           DC32     _HL_
   \   00000070   ........           DC32     _DE_
   \   00000074   ........           DC32     _BC_
   1213          
   1214          	/** EX AF,AF' */

   \                                 In segment CODE, align 4, keep-with-next
   1215          	public final void ex_af_af() {
   \                     ex_af_af:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1216          		int   t;
   1217          		t = AF(); xAF( _AF_ ); _AF_ = t;
   \   00000004   ........           LDR      R4,??DataTable443  ;; _A
   \   00000008   24609FE5           LDR      R6,??ex_af_af_0  ;; _AF_
   \   0000000C   005094E5           LDR      R5,[R4, #+0]
   \   00000010   ........           BL       F
   \   00000014   055480E1           ORR      R5,R0,R5, LSL #+8
   \   00000018   000096E5           LDR      R0,[R6, #+0]
   \   0000001C   4014A0E1           ASR      R1,R0,#+8
   \   00000020   001084E5           STR      R1,[R4, #+0]
   \   00000024   FF0000E2           AND      R0,R0,#0xFF
   \   00000028   ........           BL       xF
   \   0000002C   005086E5           STR      R5,[R6, #+0]
   1218          	}
   \   00000030   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??ex_af_af_0:
   \   00000034   ........           DC32     _AF_
   1219          
   1220          	/** fast increment : doesn't alter flags */

   \                                 In segment CODE, align 4, keep-with-next
   1221          	private static final int inc16( int a ) { return (a + 1) & 0xffff; }
   \                     inc16:
   \   00000000   010080E2           ADD      R0,R0,#+1
   \   00000004   0008A0E1           LSL      R0,R0,#+16
   \   00000008   2008A0E1           LSR      R0,R0,#+16
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   1222          	private static final int qinc8( int a ) { return (a + 1) & 0xff; }
   \                     qinc8:
   \   00000000   010080E2           ADD      R0,R0,#+1
   \   00000004   FF0000E2           AND      R0,R0,#0xFF
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1223          
   1224          	/** fast decrement: doesn't alter flags */

   \                                 In segment CODE, align 4, keep-with-next
   1225          	private static final int dec16( int a ) { return (a - 1) & 0xffff; }
   \                     dec16:
   \   00000000   010040E2           SUB      R0,R0,#+1
   \   00000004   0008A0E1           LSL      R0,R0,#+16
   \   00000008   2008A0E1           LSR      R0,R0,#+16
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   1226          	private static final int qdec8( int a ) { return (a - 1) & 0xff; }
   \                     qdec8:
   \   00000000   010040E2           SUB      R0,R0,#+1
   \   00000004   FF0000E2           AND      R0,R0,#0xFF
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1227          
   1228          	/** Bit toggling */

   \                                 In segment CODE, align 4, keep-with-next
   1229          	private static final int res( int bit, int val ) { return val & ~bit; }
   \                     res:
   \   00000000   0000C1E1           BIC      R0,R1,R0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   1230          	private static final int set( int bit, int val ) { return val |  bit; }
   \                     set:
   \   00000000   010080E1           ORR      R0,R0,R1
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1231          
   1232          

   \                                 In segment DATA_Z, align 4, align-sorted
   1233          int       local_tstates;
   \                     local_tstates:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   1234          int b, hl, haltsToInterrupt;
   \                     `b`:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     hl:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     haltsToInterrupt:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   1235          int t, sp;
   \                     t:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     `sp`:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 1, align-sorted
   1236          byte d;
   \                     d:
   \   00000000                      DS8 1
   1237          
   1238          
   1239          /** Z80 fetch/execute loop */
   1240          #pragma optimize=no_code_motion

   \                                 In segment CODE, align 4, keep-with-next
   1241            public final void execute() {
   1242          		local_tstates = -tstatesPerInterrupt;
   \                     execute:
   \   00000000   881F9FE5           LDR      R1,??execute_1   ;; tstatesPerInterrupt
   \   00000004   880F9FE5           LDR      R0,??execute_1+0x4  ;; local_tstates
   \   00000008   70402DE9           PUSH     {R4-R6,LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001061E2           RSB      R1,R1,#+0
   \                     ??execute_2:
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   030000EA           B        ??execute_3
   1243                          //int tmp;
   1244          		//while ( !mode ) {
   1245          		//if (  local_tstates>=0) {
   1246          		//	local_tstates -= (tstatesPerInterrupt - interrupt());
   1247          		//}
   1248                          do{
   1249                          while(local_tstates < 0){
   1250                          ++_R;
   1251                          //tmp=mem[_PC];
   1252                          //_PC=(_PC+1)&0xffff;
   1253          		//switch ( tmp ) {
   1254                          
   1255                          switch(mem[_PC++]){//(_PC=(_PC+1)&0xffff)-1]){
   1256          
   1257          		case 0:    /* NOP */
   1258          		{
   1259          			local_tstates += ( 4 );
   \                     ??execute_4:
   \   0000001C   704F9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \                     ??execute_5:
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   040080E2           ADD      R0,R0,#+4
   \                     ??execute_6:
   \   00000028   000084E5           STR      R0,[R4, #+0]
   1260          			break;
   1261          		}
   \                     ??execute_3:
   \   0000002C   600F9FE5           LDR      R0,??execute_1+0x4  ;; local_tstates
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0B08005A           BPL      ??execute_7
   \   0000003C   540F9FE5           LDR      R0,??execute_1+0x8  ;; _R
   \   00000040   544F9FE5           LDR      R4,??execute_1+0xC  ;; _PC
   \   00000044   001090E5           LDR      R1,[R0, #+0]
   \   00000048   011081E2           ADD      R1,R1,#+1
   \   0000004C   001080E5           STR      R1,[R0, #+0]
   \   00000050   000094E5           LDR      R0,[R4, #+0]
   \   00000054   011080E2           ADD      R1,R0,#+1
   \   00000058   001084E5           STR      R1,[R4, #+0]
   \   0000005C   3C1F9FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000060   001091E5           LDR      R1,[R1, #+0]
   \   00000064   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000068   FF0050E3           CMP      R0,#+255
   \   0000006C   EEFFFF8A           BHI      ??execute_3
   \   00000070   021F8FE2           ADR      R1,??execute_0
   \   00000074   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000078   F01091E1           LDRSH    R1,[R1, R0]
   \   0000007C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??execute_0:
   \   00000080   E6FFDE001601       DC16     +65510,+222,+278,+366
   \              6E01        
   \   00000088   B901F9013A02       DC16     +441,+505,+570,+665
   \              9902        
   \   00000090   7F00E9002201       DC16     +127,+233,+290,+382
   \              7E01        
   \   00000098   BE01FF014402       DC16     +446,+511,+580,+668
   \              9C02        
   \   000000A0   8100F6003001       DC16     +129,+246,+304,+389
   \              8501        
   \   000000A8   C40105024E02       DC16     +452,+517,+590,+671
   \              9F02        
   \   000000B0   A300FA003901       DC16     +163,+250,+313,+399
   \              8F01        
   \   000000B8   CD010E025B02       DC16     +461,+526,+603,+674
   \              A202        
   \   000000C0   B300FE004101       DC16     +179,+254,+321,+407
   \              9701        
   \   000000C8   D60117026A02       DC16     +470,+535,+618,+677
   \              A502        
   \   000000D0   C00002015001       DC16     +192,+258,+336,+415
   \              9F01        
   \   000000D8   DF0120027702       DC16     +479,+544,+631,+680
   \              A802        
   \   000000E0   C5000E015C01       DC16     +197,+270,+348,+423
   \              A701        
   \   000000E8   E80129028402       DC16     +488,+553,+644,+683
   \              AB02        
   \   000000F0   D90012016401       DC16     +217,+274,+356,+433
   \              B101        
   \   000000F8   F30134028F02       DC16     +499,+564,+655,+686
   \              AE02        
   \   00000100   E6FFB102B702       DC16     +65510,+689,+695,+702
   \              BE02        
   \   00000108   C502CC02D302       DC16     +709,+716,+723,+732
   \              DC02        
   \   00000110   E202E6FFE802       DC16     +738,+65510,+744,+751
   \              EF02        
   \   00000118   F602FD020403       DC16     +758,+765,+772,+781
   \              0D03        
   \   00000120   13031C03E6FF       DC16     +787,+796,+65510,+805
   \              2503        
   \   00000128   2C0336034003       DC16     +812,+822,+832,+844
   \              4C03        
   \   00000130   55035E036703       DC16     +853,+862,+871,+65510
   \              E6FF        
   \   00000138   6E0377038103       DC16     +878,+887,+897,+909
   \              8D03        
   \   00000140   96039F03A803       DC16     +918,+927,+936,+946
   \              B203        
   \   00000148   E6FFBC03D303       DC16     +65510,+956,+979,+989
   \              DD03        
   \   00000150   E603EF03F803       DC16     +998,+1007,+1016,+1025
   \              0104        
   \   00000158   0B04E6FF1204       DC16     +1035,+65510,+1042,+1052
   \              1C04        
   \   00000160   25042E043704       DC16     +1061,+1070,+1079,+1089
   \              4104        
   \   00000168   4A0452045904       DC16     +1098,+1106,+1113,+1130
   \              6A04        
   \   00000170   730479047F04       DC16     +1139,+1145,+1151,+1158
   \              8604        
   \   00000178   8D0494049B04       DC16     +1165,+1172,+1179,+65510
   \              E6FF        
   \   00000180   A404A904AE04       DC16     +1188,+1193,+1198,+1204
   \              B404        
   \   00000188   BA04C004C604       DC16     +1210,+1216,+1222,+1230
   \              CE04        
   \   00000190   D304D804DD04       DC16     +1235,+1240,+1245,+1251
   \              E304        
   \   00000198   E904EF04F504       DC16     +1257,+1263,+1269,+1277
   \              FD04        
   \   000001A0   020507050C05       DC16     +1282,+1287,+1292,+1298
   \              1205        
   \   000001A8   18051E052405       DC16     +1304,+1310,+1316,+1324
   \              2C05        
   \   000001B0   310536053B05       DC16     +1329,+1334,+1339,+1345
   \              4105        
   \   000001B8   47054D055305       DC16     +1351,+1357,+1363,+1371
   \              5B05        
   \   000001C0   600565056A05       DC16     +1376,+1381,+1386,+1392
   \              7005        
   \   000001C8   76057C058205       DC16     +1398,+1404,+1410,+1418
   \              8A05        
   \   000001D0   8F0594059905       DC16     +1423,+1428,+1433,+1439
   \              9F05        
   \   000001D8   A505AB05B105       DC16     +1445,+1451,+1457,+1465
   \              B905        
   \   000001E0   BE05C305C805       DC16     +1470,+1475,+1480,+1486
   \              CE05        
   \   000001E8   D405DA05E005       DC16     +1492,+1498,+1504,+1512
   \              E805        
   \   000001F0   ED05F205F705       DC16     +1517,+1522,+1527,+1533
   \              FD05        
   \   000001F8   030609060F06       DC16     +1539,+1545,+1551,+1559
   \              1706        
   \   00000200   1C067006A106       DC16     +1564,+1648,+1697,+1735
   \              C706        
   \   00000208   21074D077907       DC16     +1825,+1869,+1913,+1994
   \              CA07        
   \   00000210   29067906B006       DC16     +1577,+1657,+1712,+1746
   \              D206        
   \   00000218   300725078207       DC16     +1840,+1829,+1922,+2000
   \              D007        
   \   00000220   32068006B506       DC16     +1586,+1664,+1717,+1751
   \              D706        
   \   00000228   3B0755078B07       DC16     +1851,+1877,+1931,+2006
   \              D607        
   \   00000230   3F068506BA06       DC16     +1599,+1669,+1722,+1763
   \              E306        
   \   00000238   40075A079407       DC16     +1856,+1882,+1940,+2012
   \              DC07        
   \   00000240   48068806BC06       DC16     +1608,+1672,+1724,+1774
   \              EE06        
   \   00000248   450766079D07       DC16     +1861,+1894,+1949,+2020
   \              E407        
   \   00000250   51068D06BE06       DC16     +1617,+1677,+1726,+1801
   \              0907        
   \   00000258   47076B07A607       DC16     +1863,+1899,+1958,+2026
   \              EA07        
   \   00000260   5A069306C006       DC16     +1626,+1683,+1728,+1811
   \              1307        
   \   00000268   49076F07B607       DC16     +1865,+1903,+1974,+2032
   \              F007        
   \   00000270   67069B06C506       DC16     +1639,+1691,+1733,+1818
   \              1A07        
   \   00000278   4B077607BF07       DC16     +1867,+1910,+1983,+2038
   \              F607        
   1262          		case 8:    /* EX AF,AF' */
   1263          		{
   1264          			ex_af_af();
   \                     ??execute_8:
   \   00000280   ........           BL       ex_af_af
   1265          			local_tstates += ( 4 );
   \   00000284   64FFFFEA           B        ??execute_4
   1266          			break;
   1267          		}
   1268          		case 16:    /* DJNZ dis */
   1269          		{
   1270          			// b;
   1271          
   1272          			xB( b = qdec8( B() ) );
   \                     ??execute_9:
   \   00000288   144D9FE5           LDR      R4,??execute_1+0x14  ;; _B
   \   0000028C   141D9FE5           LDR      R1,??execute_1+0x18  ;; `b`
   \   00000290   000094E5           LDR      R0,[R4, #+0]
   \   00000294   010040E2           SUB      R0,R0,#+1
   \   00000298   FF0010E2           ANDS     R0,R0,#0xFF
   \   0000029C   000081E5           STR      R0,[R1, #+0]
   \   000002A0   000084E5           STR      R0,[R4, #+0]
   1273          			if (b != 0) {
   \   000002A4   F04C9FE5           LDR      R4,??execute_1+0xC  ;; _PC
   \   000002A8   0F00000A           BEQ      ??execute_10
   1274          				d = (byte) nxtpcb();
   \   000002AC   EC3C9FE5           LDR      R3,??execute_1+0x10  ;; mem
   \   000002B0   002094E5           LDR      R2,[R4, #+0]
   \   000002B4   003093E5           LDR      R3,[R3, #+0]
   \   000002B8   EC1C9FE5           LDR      R1,??execute_1+0x1C  ;; d
   \   000002BC   010082E2           ADD      R0,R2,#+1
   \   000002C0   000084E5           STR      R0,[R4, #+0]
   \   000002C4   D32092E1           LDRSB    R2,[R2, +R3]
   \   000002C8   0020C1E5           STRB     R2,[R1, #+0]
   1275          				xPC( (PC()+d)&0xffff );
   \   000002CC   000082E0           ADD      R0,R2,R0
   \   000002D0   0008A0E1           LSL      R0,R0,#+16
   \   000002D4   2008A0E1           LSR      R0,R0,#+16
   \   000002D8   000084E5           STR      R0,[R4, #+0]
   1276          				local_tstates += ( 13 );
   \   000002DC   B04C9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \                     ??execute_11:
   \   000002E0   000094E5           LDR      R0,[R4, #+0]
   \   000002E4   0D0080E2           ADD      R0,R0,#+13
   \   000002E8   4EFFFFEA           B        ??execute_6
   1277          			}
   1278          			else {
   1279          				xPC( inc16( PC() ) );
   \                     ??execute_10:
   \   000002EC   000094E5           LDR      R0,[R4, #+0]
   \   000002F0   010080E2           ADD      R0,R0,#+1
   \   000002F4   0008A0E1           LSL      R0,R0,#+16
   \   000002F8   2008A0E1           LSR      R0,R0,#+16
   \   000002FC   000084E5           STR      R0,[R4, #+0]
   1280          				local_tstates += ( 8 );
   \   00000300   8C4C9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000304   000094E5           LDR      R0,[R4, #+0]
   \   00000308   080080E2           ADD      R0,R0,#+8
   \   0000030C   45FFFFEA           B        ??execute_6
   1281          			}
   1282          			break;
   1283          		}
   1284          		case 24: /* JR dis */
   1285          		{
   1286          			d = (byte)nxtpcb();
   \                     ??execute_12:
   \   00000310   883C9FE5           LDR      R3,??execute_1+0x10  ;; mem
   \   00000314   002094E5           LDR      R2,[R4, #+0]
   \   00000318   003093E5           LDR      R3,[R3, #+0]
   \   0000031C   881C9FE5           LDR      R1,??execute_1+0x1C  ;; d
   \   00000320   010082E2           ADD      R0,R2,#+1
   \   00000324   000084E5           STR      R0,[R4, #+0]
   \   00000328   D32092E1           LDRSB    R2,[R2, +R3]
   \   0000032C   0020C1E5           STRB     R2,[R1, #+0]
   1287          			xPC( (PC()+d)&0xffff );
   \   00000330   000082E0           ADD      R0,R2,R0
   \   00000334   0008A0E1           LSL      R0,R0,#+16
   \   00000338   2008A0E1           LSR      R0,R0,#+16
   \   0000033C   000084E5           STR      R0,[R4, #+0]
   1288          			local_tstates += ( 12 );
   \   00000340   4C4C9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000344   000094E5           LDR      R0,[R4, #+0]
   \   00000348   0C0080E2           ADD      R0,R0,#+12
   \   0000034C   35FFFFEA           B        ??execute_6
   1289          			break;
   1290          		}
   1291          		/* JR cc,dis */
   1292          		case 32:    /* JR NZ,dis */
   1293          		{
   1294          			if (!Zset()) {
   \                     ??execute_13:
   \   00000350   580C9FE5           LDR      R0,??execute_1+0x20  ;; fZ
   \   00000354   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000358   000050E3           CMP      R0,#+0
   \   0000035C   EBFFFF0A           BEQ      ??execute_12
   1295          				d = (byte)nxtpcb();
   1296          				xPC( (PC()+d)&0xffff );
   1297          				local_tstates += ( 12 );
   1298          			}
   1299          			else {
   1300          				xPC( inc16( PC() ) );
   \                     ??execute_14:
   \   00000360   000094E5           LDR      R0,[R4, #+0]
   \   00000364   010080E2           ADD      R0,R0,#+1
   \   00000368   0008A0E1           LSL      R0,R0,#+16
   \   0000036C   2008A0E1           LSR      R0,R0,#+16
   \   00000370   000084E5           STR      R0,[R4, #+0]
   1301          				local_tstates += ( 7 );
   \   00000374   184C9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \                     ??execute_15:
   \   00000378   000094E5           LDR      R0,[R4, #+0]
   \   0000037C   070080E2           ADD      R0,R0,#+7
   \   00000380   28FFFFEA           B        ??execute_6
   1302          			}
   1303          			break;
   1304          		}
   1305          		case 40:    /* JR Z,dis */
   1306          		{
   1307          			if ( Zset()) {
   \                     ??execute_16:
   \   00000384   240C9FE5           LDR      R0,??execute_1+0x20  ;; fZ
   \   00000388   D000D0E1           LDRSB    R0,[R0, #+0]
   \   0000038C   000050E3           CMP      R0,#+0
   \   00000390   F2FFFF0A           BEQ      ??execute_14
   1308          				d = (byte)nxtpcb();
   \   00000394   DDFFFFEA           B        ??execute_12
   1309          				xPC( (PC()+d)&0xffff );
   1310          				local_tstates += ( 12 );
   1311          			}
   1312          			else {
   1313          				xPC( inc16( PC() ) );
   1314          				local_tstates += ( 7 );
   1315          			}
   1316          			break;
   1317          		}
   1318          		case 48:    /* JR NC,dis */
   1319          		{
   1320          			if (!Cset()) {
   \                     ??execute_17:
   \   00000398   140C9FE5           LDR      R0,??execute_1+0x24  ;; fC
   \   0000039C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000003A0   000050E3           CMP      R0,#+0
   \   000003A4   EDFFFF1A           BNE      ??execute_14
   1321          				d = (byte)nxtpcb();
   \   000003A8   F03B9FE5           LDR      R3,??execute_1+0x10  ;; mem
   \   000003AC   002094E5           LDR      R2,[R4, #+0]
   \   000003B0   003093E5           LDR      R3,[R3, #+0]
   \   000003B4   F01B9FE5           LDR      R1,??execute_1+0x1C  ;; d
   \   000003B8   010082E2           ADD      R0,R2,#+1
   \   000003BC   000084E5           STR      R0,[R4, #+0]
   \   000003C0   D32092E1           LDRSB    R2,[R2, +R3]
   \   000003C4   0020C1E5           STRB     R2,[R1, #+0]
   1322          				xPC( (PC()+d)&0xffff );
   \   000003C8   000082E0           ADD      R0,R2,R0
   \   000003CC   0008A0E1           LSL      R0,R0,#+16
   \   000003D0   2008A0E1           LSR      R0,R0,#+16
   \   000003D4   000084E5           STR      R0,[R4, #+0]
   1323          				local_tstates += ( 12 );
   \   000003D8   B44B9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000003DC   000094E5           LDR      R0,[R4, #+0]
   \   000003E0   0C0080E2           ADD      R0,R0,#+12
   \   000003E4   0FFFFFEA           B        ??execute_6
   1324          			}
   1325          			else {
   1326          				xPC( inc16( PC() ) );
   1327          				local_tstates += ( 7 );
   1328          			}
   1329          			break;
   1330          		}
   1331          		case 56:    /* JR C,dis */
   1332          		{
   1333          			if ( Cset()) {
   \                     ??execute_18:
   \   000003E8   C40B9FE5           LDR      R0,??execute_1+0x24  ;; fC
   \   000003EC   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000003F0   000050E3           CMP      R0,#+0
   \   000003F4   D9FFFF0A           BEQ      ??execute_14
   1334          				 d = (byte)nxtpcb();
   \   000003F8   C4FFFFEA           B        ??execute_12
   1335          				xPC( (PC()+d)&0xffff );
   1336          				local_tstates += ( 12 );
   1337          			}
   1338          			else {
   1339          				xPC( inc16( PC() ) );
   1340          				local_tstates += ( 7 );
   1341          			}
   1342          			break;
   1343          		}
   1344          
   1345          		/* LD rr,nn / ADD HL,rr */
   1346          		case 1:    /* LD BC(),nn */
   1347          		{
   1348          			xBC( nxtpcw() );
   1349          			local_tstates += ( 10 );
   \                     ??execute_19:
   \   000003FC   904B9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000400   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000404   981B9FE5           LDR      R1,??execute_1+0x14  ;; _B
   \   00000408   4024A0E1           ASR      R2,R0,#+8
   \   0000040C   002081E5           STR      R2,[R1, #+0]
   \   00000410   A01B9FE5           LDR      R1,??execute_1+0x28  ;; _C
   \   00000414   FF0000E2           AND      R0,R0,#0xFF
   \                     ??execute_20:
   \   00000418   000081E5           STR      R0,[R1, #+0]
   \                     ??execute_21:
   \   0000041C   000094E5           LDR      R0,[R4, #+0]
   \   00000420   0A0080E2           ADD      R0,R0,#+10
   \   00000424   FFFEFFEA           B        ??execute_6
   1350          			break;
   1351          		}
   1352          		case 9:    /* ADD HL,BC */
   1353          		{
   1354          			xHL( add16( HL(), BC() ) );
   \                     ??execute_22:
   \   00000428   740B9FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   0000042C   841B9FE5           LDR      R1,??execute_1+0x28  ;; _C
   \   00000430   844B9FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000434   000090E5           LDR      R0,[R0, #+0]
   \   00000438   001091E5           LDR      R1,[R1, #+0]
   \   0000043C   001481E1           ORR      R1,R1,R0, LSL #+8
   \                     ??execute_23:
   \   00000440   000094E5           LDR      R0,[R4, #+0]
   \   00000444   ........           BL       add16
   \   00000448   000084E5           STR      R0,[R4, #+0]
   1355          			local_tstates += ( 11 );
   \                     ??execute_24:
   \   0000044C   404B9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \                     ??execute_25:
   \   00000450   000094E5           LDR      R0,[R4, #+0]
   \   00000454   0B0080E2           ADD      R0,R0,#+11
   \   00000458   F2FEFFEA           B        ??execute_6
   1356          			break;
   1357          		}
   1358          		case 17:    /* LD DE,nn */
   1359          		{
   1360          			xDE( nxtpcw() );
   1361          			local_tstates += ( 10 );
   \                     ??execute_26:
   \   0000045C   304B9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000460   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000464   541B9FE5           LDR      R1,??execute_1+0x30  ;; _DE
   \   00000468   EAFFFFEA           B        ??execute_20
   1362          			break;
   1363          		}
   1364          		case 25:    /* ADD HL,DE */
   1365          		{
   1366          			xHL( add16( HL(), DE() ) );
   \                     ??execute_27:
   \   0000046C   484B9FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000470   480B9FE5           LDR      R0,??execute_1+0x30  ;; _DE
   \   00000474   001090E5           LDR      R1,[R0, #+0]
   \   00000478   F0FFFFEA           B        ??execute_23
   1367          			local_tstates += ( 11 );
   1368          			break;
   1369          		}
   1370          		case 33:    /* LD HL,nn */
   1371          		{
   1372          			xHL( nxtpcw() );
   1373          			local_tstates += ( 10 );
   \                     ??execute_28:
   \   0000047C   104B9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000480   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000484   301B9FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000488   E2FFFFEA           B        ??execute_20
   1374          			break;
   1375          		}
   1376          		case 41:    /* ADD HL,HL */
   1377          		{
   1378          			hl = HL();
   \                     ??execute_29:
   \   0000048C   284B9FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000490   2C0B9FE5           LDR      R0,??execute_1+0x34  ;; hl
   \   00000494   005094E5           LDR      R5,[R4, #+0]
   \   00000498   005080E5           STR      R5,[R0, #+0]
   1379          			xHL( add16( hl, hl ) );
   \   0000049C   0510A0E1           MOV      R1,R5
   \   000004A0   0500A0E1           MOV      R0,R5
   \   000004A4   ........           BL       add16
   \                     ??execute_30:
   \   000004A8   000084E5           STR      R0,[R4, #+0]
   1380          			local_tstates += ( 11 );
   \   000004AC   E04A9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \                     ??execute_31:
   \   000004B0   000094E5           LDR      R0,[R4, #+0]
   \   000004B4   0B0080E2           ADD      R0,R0,#+11
   \   000004B8   DAFEFFEA           B        ??execute_6
   1381          			break;
   1382          		}
   1383          		case 49:    /* LD SP,nn */
   1384          		{
   1385          			xSP( nxtpcw() );
   1386          			local_tstates += ( 10 );
   \                     ??execute_32:
   \   000004BC   D04A9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000004C0   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   000004C4   FC1A9FE5           LDR      R1,??execute_1+0x38  ;; _SP
   \   000004C8   D2FFFFEA           B        ??execute_20
   1387          			break;
   1388          		}
   1389          		case 57:    /* ADD HL,SP */
   1390          		{
   1391          			xHL( add16( HL(), SP() ) );
   \                     ??execute_33:
   \   000004CC   E84A9FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   000004D0   F00A9FE5           LDR      R0,??execute_1+0x38  ;; _SP
   \   000004D4   001090E5           LDR      R1,[R0, #+0]
   \   000004D8   D8FFFFEA           B        ??execute_23
   1392          			local_tstates += ( 11 );
   1393          			break;
   1394          		}
   1395          
   1396          		/* LD (**),A/A,(**) */
   1397          		case 2:    /* LD (BC),A */
   1398          		{ pokeb( BC(), A() ); local_tstates += ( 7 ); break; }
   \                     ??execute_34:
   \   000004DC   C00A9FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   000004E0   D01A9FE5           LDR      R1,??execute_1+0x28  ;; _C
   \   000004E4   000090E5           LDR      R0,[R0, #+0]
   \   000004E8   001091E5           LDR      R1,[R1, #+0]
   \   000004EC   D82A9FE5           LDR      R2,??execute_1+0x3C  ;; _A
   \   000004F0   9C4A9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000004F4   002092E5           LDR      R2,[R2, #+0]
   \   000004F8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000004FC   9C1A9FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000500   001091E5           LDR      R1,[R1, #+0]
   \   00000504   0120C0E7           STRB     R2,[R0, +R1]
   \   00000508   9AFFFFEA           B        ??execute_15
   1399          		case 10:    /* LD A,(BC) */
   1400          		{xA( peekb( BC() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_35:
   \   0000050C   901A9FE5           LDR      R1,??execute_1+0x14  ;; _B
   \   00000510   A02A9FE5           LDR      R2,??execute_1+0x28  ;; _C
   \   00000514   001091E5           LDR      R1,[R1, #+0]
   \   00000518   002092E5           LDR      R2,[R2, #+0]
   \   0000051C   A80A9FE5           LDR      R0,??execute_1+0x3C  ;; _A
   \   00000520   6C4A9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000524   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000528   702A9FE5           LDR      R2,??execute_1+0x10  ;; mem
   \   0000052C   002092E5           LDR      R2,[R2, #+0]
   \   00000530   0210D1E7           LDRB     R1,[R1, +R2]
   \                     ??execute_36:
   \   00000534   001080E5           STR      R1,[R0, #+0]
   \                     ??execute_37:
   \   00000538   000094E5           LDR      R0,[R4, #+0]
   \   0000053C   070080E2           ADD      R0,R0,#+7
   \   00000540   B8FEFFEA           B        ??execute_6
   1401          		case 18:    /* LD (DE),A */
   1402          		{ pokeb( DE(), A() ); local_tstates += ( 7 ); break; }
   \                     ??execute_38:
   \   00000544   740A9FE5           LDR      R0,??execute_1+0x30  ;; _DE
   \   00000548   501A9FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   0000054C   782A9FE5           LDR      R2,??execute_1+0x3C  ;; _A
   \   00000550   000090E5           LDR      R0,[R0, #+0]
   \   00000554   001091E5           LDR      R1,[R1, #+0]
   \   00000558   002092E5           LDR      R2,[R2, #+0]
   \   0000055C   304A9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000560   0120C0E7           STRB     R2,[R0, +R1]
   \   00000564   83FFFFEA           B        ??execute_15
   1403          		case 26:    /* LD A,(DE) */
   1404          		{ xA( peekb( DE() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_39:
   \   00000568   501A9FE5           LDR      R1,??execute_1+0x30  ;; _DE
   \   0000056C   2C2A9FE5           LDR      R2,??execute_1+0x10  ;; mem
   \   00000570   001091E5           LDR      R1,[R1, #+0]
   \   00000574   002092E5           LDR      R2,[R2, #+0]
   \   00000578   4C0A9FE5           LDR      R0,??execute_1+0x3C  ;; _A
   \   0000057C   0210D1E7           LDRB     R1,[R1, +R2]
   \   00000580   0C4A9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000584   EAFFFFEA           B        ??execute_36
   1405          		case 34:    /* LD (nn),HL */
   1406          		{ pokew( nxtpcw(), HL() ); local_tstates += ( 16 ); break; }
   \                     ??execute_40:
   \   00000588   044A9FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   0000058C   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000590   241A9FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000594   002091E5           LDR      R2,[R1, #+0]
   \   00000598   001A9FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   0000059C   003091E5           LDR      R3,[R1, #+0]
   \   000005A0   0320C0E7           STRB     R2,[R0, +R3]
   \   000005A4   001091E5           LDR      R1,[R1, #+0]
   \   000005A8   010080E2           ADD      R0,R0,#+1
   \   000005AC   0008A0E1           LSL      R0,R0,#+16
   \   000005B0   4224A0E1           ASR      R2,R2,#+8
   \   000005B4   2028C1E7           STRB     R2,[R1, +R0, LSR #+16]
   \                     ??execute_41:
   \   000005B8   000094E5           LDR      R0,[R4, #+0]
   \   000005BC   100080E2           ADD      R0,R0,#+16
   \   000005C0   98FEFFEA           B        ??execute_6
   1407          		case 42:    /* LD HL,(nn) */
   1408          		{ xHL( peekw( nxtpcw() ) ); local_tstates += ( 16 ); break; }
   \                     ??execute_42:
   \   000005C4   C8499FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000005C8   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   000005CC   CC199FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   000005D0   002091E5           LDR      R2,[R1, #+0]
   \   000005D4   E0199FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   000005D8   0230D0E7           LDRB     R3,[R0, +R2]
   \   000005DC   010080E2           ADD      R0,R0,#+1
   \   000005E0   0008A0E1           LSL      R0,R0,#+16
   \   000005E4   2008D2E7           LDRB     R0,[R2, +R0, LSR #+16]
   \   000005E8   000483E1           ORR      R0,R3,R0, LSL #+8
   \   000005EC   000081E5           STR      R0,[R1, #+0]
   \   000005F0   F0FFFFEA           B        ??execute_41
   1409          		case 50:    /* LD (nn),A */
   1410          		{ pokeb( nxtpcw(), A() ); local_tstates += ( 13 ); break; }
   \                     ??execute_43:
   \   000005F4   98499FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000005F8   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   000005FC   9C199FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000600   C4299FE5           LDR      R2,??execute_1+0x3C  ;; _A
   \   00000604   001091E5           LDR      R1,[R1, #+0]
   \   00000608   002092E5           LDR      R2,[R2, #+0]
   \   0000060C   0120C0E7           STRB     R2,[R0, +R1]
   \   00000610   32FFFFEA           B        ??execute_11
   1411          		case 58:    /* LD A,(nn) */
   1412          		{ xA( peekb( nxtpcw() ) ); local_tstates += ( 13 ); break; }
   \                     ??execute_44:
   \   00000614   78499FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000618   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   0000061C   7C299FE5           LDR      R2,??execute_1+0x10  ;; mem
   \   00000620   A4199FE5           LDR      R1,??execute_1+0x3C  ;; _A
   \   00000624   002092E5           LDR      R2,[R2, #+0]
   \   00000628   0200D0E7           LDRB     R0,[R0, +R2]
   \   0000062C   000081E5           STR      R0,[R1, #+0]
   \   00000630   000094E5           LDR      R0,[R4, #+0]
   \   00000634   0D0080E2           ADD      R0,R0,#+13
   \   00000638   7AFEFFEA           B        ??execute_6
   1413          
   1414          		/* INC/DEC * */
   1415          		case 3:    /* INC BC */
   1416          		{ xBC( inc16( BC() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_45:
   \   0000063C   74599FE5           LDR      R5,??execute_1+0x28  ;; _C
   \   00000640   5C499FE5           LDR      R4,??execute_1+0x14  ;; _B
   \   00000644   001095E5           LDR      R1,[R5, #+0]
   \   00000648   000094E5           LDR      R0,[R4, #+0]
   \   0000064C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000650   010080E2           ADD      R0,R0,#+1
   \                     ??execute_46:
   \   00000654   0008A0E1           LSL      R0,R0,#+16
   \   00000658   2008A0E1           LSR      R0,R0,#+16
   \   0000065C   4014A0E1           ASR      R1,R0,#+8
   \   00000660   001084E5           STR      R1,[R4, #+0]
   \   00000664   28499FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000668   FF0000E2           AND      R0,R0,#0xFF
   \   0000066C   000085E5           STR      R0,[R5, #+0]
   \                     ??execute_47:
   \   00000670   000094E5           LDR      R0,[R4, #+0]
   \   00000674   060080E2           ADD      R0,R0,#+6
   \   00000678   6AFEFFEA           B        ??execute_6
   1417          		case 11:    /* DEC BC */
   1418          		{ xBC( dec16( BC() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_48:
   \   0000067C   34599FE5           LDR      R5,??execute_1+0x28  ;; _C
   \   00000680   1C499FE5           LDR      R4,??execute_1+0x14  ;; _B
   \   00000684   001095E5           LDR      R1,[R5, #+0]
   \   00000688   000094E5           LDR      R0,[R4, #+0]
   \   0000068C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000690   010040E2           SUB      R0,R0,#+1
   \   00000694   EEFFFFEA           B        ??execute_46
   1419          		case 19:    /* INC DE */
   1420          		{ xDE( inc16( DE() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_49:
   \   00000698   20699FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   0000069C   F0489FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000006A0   000096E5           LDR      R0,[R6, #+0]
   \   000006A4   010080E2           ADD      R0,R0,#+1
   \   000006A8   0008A0E1           LSL      R0,R0,#+16
   \   000006AC   2008A0E1           LSR      R0,R0,#+16
   \   000006B0   000086E5           STR      R0,[R6, #+0]
   \                     ??execute_50:
   \   000006B4   000094E5           LDR      R0,[R4, #+0]
   \   000006B8   060080E2           ADD      R0,R0,#+6
   \   000006BC   59FEFFEA           B        ??execute_6
   1421          		case 27:    /* DEC DE */
   1422          		{ xDE( dec16( DE() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_51:
   \   000006C0   F8689FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   000006C4   C8489FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000006C8   000096E5           LDR      R0,[R6, #+0]
   \   000006CC   010040E2           SUB      R0,R0,#+1
   \   000006D0   0008A0E1           LSL      R0,R0,#+16
   \   000006D4   2008A0E1           LSR      R0,R0,#+16
   \   000006D8   000086E5           STR      R0,[R6, #+0]
   \   000006DC   E3FFFFEA           B        ??execute_47
   1423          		case 35:    /* INC HL */
   1424          		{ xHL( inc16( HL() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_52:
   \   000006E0   D4489FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   000006E4   000094E5           LDR      R0,[R4, #+0]
   \   000006E8   010080E2           ADD      R0,R0,#+1
   \   000006EC   0008A0E1           LSL      R0,R0,#+16
   \   000006F0   2008A0E1           LSR      R0,R0,#+16
   \   000006F4   000084E5           STR      R0,[R4, #+0]
   \   000006F8   94489FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000006FC   ECFFFFEA           B        ??execute_50
   1425          		case 43:    /* DEC HL */
   1426          		{ xHL( dec16( HL() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_53:
   \   00000700   B4489FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000704   000094E5           LDR      R0,[R4, #+0]
   \   00000708   010040E2           SUB      R0,R0,#+1
   \   0000070C   0008A0E1           LSL      R0,R0,#+16
   \   00000710   2008A0E1           LSR      R0,R0,#+16
   \   00000714   000084E5           STR      R0,[R4, #+0]
   \   00000718   74489FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   0000071C   D3FFFFEA           B        ??execute_47
   1427          		case 51:    /* INC SP */
   1428          		{ xSP( inc16( SP() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_54:
   \   00000720   A0089FE5           LDR      R0,??execute_1+0x38  ;; _SP
   \   00000724   68489FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000728   001090E5           LDR      R1,[R0, #+0]
   \   0000072C   011081E2           ADD      R1,R1,#+1
   \   00000730   0118A0E1           LSL      R1,R1,#+16
   \   00000734   2118A0E1           LSR      R1,R1,#+16
   \   00000738   001080E5           STR      R1,[R0, #+0]
   \   0000073C   000094E5           LDR      R0,[R4, #+0]
   \   00000740   060080E2           ADD      R0,R0,#+6
   \   00000744   37FEFFEA           B        ??execute_6
   1429          		case 59:    /* DEC SP */
   1430          		{ xSP( dec16( SP() ) ); local_tstates += ( 6 ); break; }
   \                     ??execute_55:
   \   00000748   78089FE5           LDR      R0,??execute_1+0x38  ;; _SP
   \   0000074C   40489FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000750   001090E5           LDR      R1,[R0, #+0]
   \   00000754   011041E2           SUB      R1,R1,#+1
   \   00000758   0118A0E1           LSL      R1,R1,#+16
   \   0000075C   2118A0E1           LSR      R1,R1,#+16
   \   00000760   001080E5           STR      R1,[R0, #+0]
   \   00000764   C1FFFFEA           B        ??execute_47
   1431          
   1432          		/* INC * */
   1433          		case 4:    /* INC B */
   1434          		{ xB( inc8( B() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_56:
   \   00000768   34489FE5           LDR      R4,??execute_1+0x14  ;; _B
   \   0000076C   000094E5           LDR      R0,[R4, #+0]
   \   00000770   ........           BL       inc8
   \   00000774   000084E5           STR      R0,[R4, #+0]
   \   00000778   27FEFFEA           B        ??execute_4
   1435          		case 12:    /* INC C */
   1436          		{ xC( inc8( C() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_57:
   \   0000077C   34589FE5           LDR      R5,??execute_1+0x28  ;; _C
   \   00000780   0C489FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000784   000095E5           LDR      R0,[R5, #+0]
   \   00000788   ........           BL       inc8
   \   0000078C   000085E5           STR      R0,[R5, #+0]
   \   00000790   22FEFFEA           B        ??execute_5
   1437          		case 20:    /* INC D */
   1438          		{ xD( inc8( D() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_58:
   \   00000794   24689FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000798   004096E5           LDR      R4,[R6, #+0]
   \   0000079C   4404A0E1           ASR      R0,R4,#+8
   \   000007A0   ........           BL       inc8
   \   000007A4   FF1004E2           AND      R1,R4,#0xFF
   \   000007A8   E4479FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000007AC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000007B0   000086E5           STR      R0,[R6, #+0]
   \   000007B4   19FEFFEA           B        ??execute_5
   1439          		case 28:    /* INC E */
   1440          		{ xE( inc8( E() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_59:
   \   000007B8   00689FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   000007BC   004096E5           LDR      R4,[R6, #+0]
   \   000007C0   FF0004E2           AND      R0,R4,#0xFF
   \   000007C4   ........           BL       inc8
   \   000007C8   FF1C04E2           AND      R1,R4,#0xFF00
   \   000007CC   C0479FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000007D0   010080E1           ORR      R0,R0,R1
   \   000007D4   000086E5           STR      R0,[R6, #+0]
   \   000007D8   10FEFFEA           B        ??execute_5
   1441          		case 36:    /* INC H */
   1442          		{ xH( inc8( H() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_60:
   \   000007DC   D8479FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   000007E0   005094E5           LDR      R5,[R4, #+0]
   \   000007E4   4504A0E1           ASR      R0,R5,#+8
   \   000007E8   ........           BL       inc8
   \   000007EC   FF1005E2           AND      R1,R5,#0xFF
   \   000007F0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000007F4   000084E5           STR      R0,[R4, #+0]
   \   000007F8   94479FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000007FC   07FEFFEA           B        ??execute_5
   1443          		case 44:    /* INC L */
   1444          		{ xL( inc8( L() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_61:
   \   00000800   B4479FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000804   005094E5           LDR      R5,[R4, #+0]
   \   00000808   FF0005E2           AND      R0,R5,#0xFF
   \   0000080C   ........           BL       inc8
   \   00000810   FF1C05E2           AND      R1,R5,#0xFF00
   \   00000814   010080E1           ORR      R0,R0,R1
   \   00000818   000084E5           STR      R0,[R4, #+0]
   \   0000081C   70479FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000820   FEFDFFEA           B        ??execute_5
   1445          		case 52:    /* INC (HL) */
   1446          		{
   1447          			 hl = HL();
   \                     ??execute_62:
   \   00000824   90479FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   1448          			pokeb( hl, inc8( peekb( hl ) ) );
   \   00000828   70179FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   0000082C   005094E5           LDR      R5,[R4, #+0]
   \   00000830   8C079FE5           LDR      R0,??execute_1+0x34  ;; hl
   \   00000834   002091E5           LDR      R2,[R1, #+0]
   \   00000838   005080E5           STR      R5,[R0, #+0]
   \   0000083C   024085E0           ADD      R4,R5,R2
   \   00000840   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000844   ........           BL       inc8
   \   00000848   0000C4E5           STRB     R0,[R4, #+0]
   1449          			local_tstates += ( 11 );
   \   0000084C   FEFEFFEA           B        ??execute_24
   1450          			break;
   1451          		}
   1452          		case 60:    /* INC A() */
   1453          		{ xA( inc8( A() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_63:
   \   00000850   74479FE5           LDR      R4,??execute_1+0x3C  ;; _A
   \   00000854   000094E5           LDR      R0,[R4, #+0]
   \   00000858   ........           BL       inc8
   \   0000085C   000084E5           STR      R0,[R4, #+0]
   \   00000860   2C479FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000864   EDFDFFEA           B        ??execute_5
   1454          
   1455          		/* DEC * */
   1456          		case 5:    /* DEC B */
   1457          		{ xB( dec8( B() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_64:
   \   00000868   34479FE5           LDR      R4,??execute_1+0x14  ;; _B
   \   0000086C   000094E5           LDR      R0,[R4, #+0]
   \   00000870   ........           BL       dec8
   \   00000874   000084E5           STR      R0,[R4, #+0]
   \   00000878   14479FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   0000087C   E7FDFFEA           B        ??execute_5
   1458          		case 13:    /* DEC C */
   1459          		{ xC( dec8( C() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_65:
   \   00000880   30579FE5           LDR      R5,??execute_1+0x28  ;; _C
   \   00000884   08479FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000888   000095E5           LDR      R0,[R5, #+0]
   \   0000088C   ........           BL       dec8
   \   00000890   000085E5           STR      R0,[R5, #+0]
   \   00000894   E1FDFFEA           B        ??execute_5
   1460          		case 21:    /* DEC D */
   1461          		{ xD( dec8( D() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_66:
   \   00000898   20679FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   0000089C   004096E5           LDR      R4,[R6, #+0]
   \   000008A0   4404A0E1           ASR      R0,R4,#+8
   \   000008A4   ........           BL       dec8
   \   000008A8   FF1004E2           AND      R1,R4,#0xFF
   \   000008AC   E0469FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000008B0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000008B4   000086E5           STR      R0,[R6, #+0]
   \   000008B8   D8FDFFEA           B        ??execute_5
   1462          		case 29:    /* DEC E */
   1463          		{ xE( dec8( E() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_67:
   \   000008BC   FC669FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   000008C0   004096E5           LDR      R4,[R6, #+0]
   \   000008C4   FF0004E2           AND      R0,R4,#0xFF
   \   000008C8   ........           BL       dec8
   \   000008CC   FF1C04E2           AND      R1,R4,#0xFF00
   \   000008D0   BC469FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000008D4   010080E1           ORR      R0,R0,R1
   \   000008D8   000086E5           STR      R0,[R6, #+0]
   \   000008DC   CFFDFFEA           B        ??execute_5
   1464          		case 37:    /* DEC H */
   1465          		{ xH( dec8( H() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_68:
   \   000008E0   D4469FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   000008E4   005094E5           LDR      R5,[R4, #+0]
   \   000008E8   4504A0E1           ASR      R0,R5,#+8
   \   000008EC   ........           BL       dec8
   \   000008F0   FF1005E2           AND      R1,R5,#0xFF
   \   000008F4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000008F8   000084E5           STR      R0,[R4, #+0]
   \   000008FC   90469FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000900   C6FDFFEA           B        ??execute_5
   1466          		case 45:    /* DEC L */
   1467          		{ xL( dec8( L() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_69:
   \   00000904   B0469FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000908   005094E5           LDR      R5,[R4, #+0]
   \   0000090C   FF0005E2           AND      R0,R5,#0xFF
   \   00000910   ........           BL       dec8
   \   00000914   FF1C05E2           AND      R1,R5,#0xFF00
   \   00000918   010080E1           ORR      R0,R0,R1
   \   0000091C   000084E5           STR      R0,[R4, #+0]
   \   00000920   6C469FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000924   BDFDFFEA           B        ??execute_5
   1468          		case 53:    /* DEC (HL) */
   1469          		{
   1470          			 hl = HL();
   \                     ??execute_70:
   \   00000928   8C469FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   1471          			pokeb( hl, dec8( peekb( hl ) ) );
   \   0000092C   6C169FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000930   005094E5           LDR      R5,[R4, #+0]
   \   00000934   88069FE5           LDR      R0,??execute_1+0x34  ;; hl
   \   00000938   002091E5           LDR      R2,[R1, #+0]
   \   0000093C   005080E5           STR      R5,[R0, #+0]
   \   00000940   024085E0           ADD      R4,R5,R2
   \   00000944   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000948   ........           BL       dec8
   \   0000094C   0000C4E5           STRB     R0,[R4, #+0]
   1472          			local_tstates += ( 11 );
   \   00000950   BDFEFFEA           B        ??execute_24
   1473          			break;
   1474          		}
   1475          		case 61:    /* DEC A() */
   1476          		{ xA( dec8( A() ) ); local_tstates += ( 4 ); break; }
   \                     ??execute_71:
   \   00000954   70469FE5           LDR      R4,??execute_1+0x3C  ;; _A
   \   00000958   000094E5           LDR      R0,[R4, #+0]
   \   0000095C   ........           BL       dec8
   \   00000960   000084E5           STR      R0,[R4, #+0]
   \   00000964   28469FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000968   ACFDFFEA           B        ??execute_5
   1477          
   1478          		/* LD *,N */
   1479          		case 6:    /* LD B,n */
   1480          		{ xB( nxtpcb() ); local_tstates += ( 7 ); break; }
   \                     ??execute_72:
   \   0000096C   000094E5           LDR      R0,[R4, #+0]
   \   00000970   011080E2           ADD      R1,R0,#+1
   \   00000974   001084E5           STR      R1,[R4, #+0]
   \   00000978   20169FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   0000097C   10469FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000980   001091E5           LDR      R1,[R1, #+0]
   \   00000984   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000988   14169FE5           LDR      R1,??execute_1+0x14  ;; _B
   \   0000098C   000081E5           STR      R0,[R1, #+0]
   \   00000990   78FEFFEA           B        ??execute_15
   1481          		case 14:    /* LD C,n */
   1482          		{ xC( nxtpcb() ); local_tstates += ( 7 ); break; }
   \                     ??execute_73:
   \   00000994   000094E5           LDR      R0,[R4, #+0]
   \   00000998   011080E2           ADD      R1,R0,#+1
   \   0000099C   001084E5           STR      R1,[R4, #+0]
   \   000009A0   F8159FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   000009A4   E8459FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000009A8   001091E5           LDR      R1,[R1, #+0]
   \   000009AC   0100D0E7           LDRB     R0,[R0, +R1]
   \   000009B0   00169FE5           LDR      R1,??execute_1+0x28  ;; _C
   \   000009B4   000081E5           STR      R0,[R1, #+0]
   \   000009B8   DEFEFFEA           B        ??execute_37
   1483          		case 22:    /* LD D,n */
   1484          		{ xD( nxtpcb() ); local_tstates += ( 7 ); break; }
   \                     ??execute_74:
   \   000009BC   000094E5           LDR      R0,[R4, #+0]
   \   000009C0   F8659FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   000009C4   011080E2           ADD      R1,R0,#+1
   \   000009C8   001084E5           STR      R1,[R4, #+0]
   \   000009CC   CC159FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   000009D0   BC459FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   000009D4   001091E5           LDR      R1,[R1, #+0]
   \   000009D8   0100D0E7           LDRB     R0,[R0, +R1]
   \   000009DC   001096E5           LDR      R1,[R6, #+0]
   \   000009E0   FF1001E2           AND      R1,R1,#0xFF
   \   000009E4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000009E8   000086E5           STR      R0,[R6, #+0]
   \   000009EC   61FEFFEA           B        ??execute_15
   1485          		case 30:    /* LD E,n */
   1486          		{ xE( nxtpcb() ); local_tstates += ( 7 ); break; }
   \                     ??execute_75:
   \   000009F0   000094E5           LDR      R0,[R4, #+0]
   \   000009F4   C4659FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   000009F8   011080E2           ADD      R1,R0,#+1
   \   000009FC   001084E5           STR      R1,[R4, #+0]
   \   00000A00   98159FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000A04   88459FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000A08   001091E5           LDR      R1,[R1, #+0]
   \   00000A0C   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000A10   001096E5           LDR      R1,[R6, #+0]
   \   00000A14   FF1C01E2           AND      R1,R1,#0xFF00
   \   00000A18   010080E1           ORR      R0,R0,R1
   \   00000A1C   000086E5           STR      R0,[R6, #+0]
   \                     ??execute_76:
   \   00000A20   000094E5           LDR      R0,[R4, #+0]
   \   00000A24   070080E2           ADD      R0,R0,#+7
   \   00000A28   7EFDFFEA           B        ??execute_6
   1487          		case 38:    /* LD H,n */
   1488          		{ xH( nxtpcb() ); local_tstates += ( 7 ); break; }
   \                     ??execute_77:
   \   00000A2C   000094E5           LDR      R0,[R4, #+0]
   \   00000A30   011080E2           ADD      R1,R0,#+1
   \   00000A34   001084E5           STR      R1,[R4, #+0]
   \   00000A38   60159FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000A3C   78459FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000A40   001091E5           LDR      R1,[R1, #+0]
   \   00000A44   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000A48   001094E5           LDR      R1,[R4, #+0]
   \   00000A4C   FF1001E2           AND      R1,R1,#0xFF
   \   00000A50   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000A54   000084E5           STR      R0,[R4, #+0]
   \   00000A58   34459FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000A5C   45FEFFEA           B        ??execute_15
   1489          		case 46:    /* LD L,n */
   1490          		{ xL( nxtpcb() ); local_tstates += ( 7 ); break; }
   \                     ??execute_78:
   \   00000A60   000094E5           LDR      R0,[R4, #+0]
   \   00000A64   011080E2           ADD      R1,R0,#+1
   \   00000A68   001084E5           STR      R1,[R4, #+0]
   \   00000A6C   2C159FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000A70   44459FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000A74   001091E5           LDR      R1,[R1, #+0]
   \   00000A78   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000A7C   001094E5           LDR      R1,[R4, #+0]
   \   00000A80   FF1C01E2           AND      R1,R1,#0xFF00
   \   00000A84   010080E1           ORR      R0,R0,R1
   \   00000A88   000084E5           STR      R0,[R4, #+0]
   \   00000A8C   00459FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000A90   A8FEFFEA           B        ??execute_37
   1491          		case 54:    /* LD (HL),n */
   1492          		{
   1493          			pokeb( HL(), nxtpcb() );
   \                     ??execute_79:
   \   00000A94   000094E5           LDR      R0,[R4, #+0]
   \   00000A98   011080E2           ADD      R1,R0,#+1
   \   00000A9C   001084E5           STR      R1,[R4, #+0]
   \   00000AA0   F8149FE5           LDR      R1,??execute_1+0x10  ;; mem
   1494          			local_tstates += ( 10 );
   \   00000AA4   E8449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000AA8   002091E5           LDR      R2,[R1, #+0]
   \   00000AAC   08159FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000AB0   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000AB4   001091E5           LDR      R1,[R1, #+0]
   \   00000AB8   0200C1E7           STRB     R0,[R1, +R2]
   \   00000ABC   56FEFFEA           B        ??execute_21
   1495          			break;
   1496          		}
   1497          		case 62:    /* LD A,n */
   1498          		{ xA( nxtpcb() ); local_tstates += ( 7 ); break; }
   \                     ??execute_80:
   \   00000AC0   000094E5           LDR      R0,[R4, #+0]
   \   00000AC4   011080E2           ADD      R1,R0,#+1
   \   00000AC8   001084E5           STR      R1,[R4, #+0]
   \   00000ACC   CC149FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000AD0   BC449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000AD4   001091E5           LDR      R1,[R1, #+0]
   \   00000AD8   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000ADC   E8149FE5           LDR      R1,??execute_1+0x3C  ;; _A
   \   00000AE0   000081E5           STR      R0,[R1, #+0]
   \   00000AE4   23FEFFEA           B        ??execute_15
   1499          
   1500          		/* R**A */
   1501          		case 7: /* RLCA */
   1502          		{ rlc_a(); local_tstates += ( 4 ); break; }
   \                     ??execute_81:
   \   00000AE8   A4449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000AEC   ........           BL       rlc_a
   \   00000AF0   4AFDFFEA           B        ??execute_5
   1503          		case 15: /* RRCA */
   1504          		{ rrc_a(); local_tstates += ( 4 ); break; }
   \                     ??execute_82:
   \   00000AF4   98449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000AF8   ........           BL       rrc_a
   \   00000AFC   47FDFFEA           B        ??execute_5
   1505          		case 23: /* RLA */
   1506          		{ rl_a(); local_tstates += ( 4 ); break; }
   \                     ??execute_83:
   \   00000B00   8C449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B04   ........           BL       rl_a
   \   00000B08   44FDFFEA           B        ??execute_5
   1507          		case 31: /* RRA */
   1508          		{ rr_a(); local_tstates += ( 4 ); break; }
   \                     ??execute_84:
   \   00000B0C   80449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B10   ........           BL       rr_a
   \   00000B14   41FDFFEA           B        ??execute_5
   1509          		case 39: /* DAA */
   1510          		{ daa_a(); local_tstates += ( 4 ); break; }
   \                     ??execute_85:
   \   00000B18   74449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B1C   ........           BL       daa_a
   \   00000B20   3EFDFFEA           B        ??execute_5
   1511          		case 47: /* CPL */
   1512          		{ cpl_a(); local_tstates += ( 4 ); break; }
   \                     ??execute_86:
   \   00000B24   68449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B28   ........           BL       cpl_a
   \   00000B2C   3BFDFFEA           B        ??execute_5
   1513          		case 55: /* SCF */
   1514          		{ scf(); local_tstates += ( 4 ); break; }
   \                     ??execute_87:
   \   00000B30   5C449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B34   ........           BL       scf
   \   00000B38   38FDFFEA           B        ??execute_5
   1515          		case 63: /* CCF */
   1516          		{ ccf(); local_tstates += ( 4 ); break; }
   \                     ??execute_88:
   \   00000B3C   50449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B40   ........           BL       ccf
   \   00000B44   35FDFFEA           B        ??execute_5
   1517          
   1518          		/* LD B,* */
   1519          		case 64:    /* LD B,B */
   1520          		{ local_tstates += ( 4 ); break; }
   1521          		case 65:    /* LD B,C */
   1522          		{ xB( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_89:
   \   00000B48   68149FE5           LDR      R1,??execute_1+0x28  ;; _C
   \   00000B4C   50049FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000B50   001091E5           LDR      R1,[R1, #+0]
   \   00000B54   38449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B58   001080E5           STR      R1,[R0, #+0]
   \   00000B5C   2FFDFFEA           B        ??execute_5
   1523          		case 66:    /* LD B,D */
   1524          		{ xB( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_90:
   \   00000B60   58149FE5           LDR      R1,??execute_1+0x30  ;; _DE
   \   00000B64   38049FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000B68   001091E5           LDR      R1,[R1, #+0]
   \   00000B6C   20449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B70   4114A0E1           ASR      R1,R1,#+8
   \   00000B74   001080E5           STR      R1,[R0, #+0]
   \   00000B78   28FDFFEA           B        ??execute_5
   1525          		case 67:    /* LD B,E */
   1526          		{ xB( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_91:
   \   00000B7C   3C149FE5           LDR      R1,??execute_1+0x30  ;; _DE
   \   00000B80   1C049FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000B84   001091E5           LDR      R1,[R1, #+0]
   \   00000B88   04449FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000B8C   FF1001E2           AND      R1,R1,#0xFF
   \   00000B90   001080E5           STR      R1,[R0, #+0]
   \   00000B94   21FDFFEA           B        ??execute_5
   1527          		case 68:    /* LD B,H */
   1528          		{ xB( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_92:
   \   00000B98   1C149FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000B9C   00049FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000BA0   001091E5           LDR      R1,[R1, #+0]
   \   00000BA4   E8439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000BA8   4114A0E1           ASR      R1,R1,#+8
   \   00000BAC   001080E5           STR      R1,[R0, #+0]
   \   00000BB0   1AFDFFEA           B        ??execute_5
   1529          		case 69:    /* LD B,L */
   1530          		{ xB( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_93:
   \   00000BB4   00149FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000BB8   E4039FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000BBC   001091E5           LDR      R1,[R1, #+0]
   \   00000BC0   CC439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000BC4   FF1001E2           AND      R1,R1,#0xFF
   \   00000BC8   001080E5           STR      R1,[R0, #+0]
   \   00000BCC   13FDFFEA           B        ??execute_5
   1531          		case 70:    /* LD B,(HL) */
   1532          		{ xB( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_94:
   \   00000BD0   E4139FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000BD4   C4239FE5           LDR      R2,??execute_1+0x10  ;; mem
   \   00000BD8   001091E5           LDR      R1,[R1, #+0]
   \   00000BDC   002092E5           LDR      R2,[R2, #+0]
   \   00000BE0   BC039FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000BE4   0210D1E7           LDRB     R1,[R1, +R2]
   \   00000BE8   A4439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000BEC   001080E5           STR      R1,[R0, #+0]
   \   00000BF0   E0FDFFEA           B        ??execute_15
   1533          		case 71:    /* LD B,A */
   1534          		{ xB( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_95:
   \   00000BF4   D0139FE5           LDR      R1,??execute_1+0x3C  ;; _A
   \   00000BF8   A4039FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000BFC   001091E5           LDR      R1,[R1, #+0]
   \   00000C00   8C439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000C04   001080E5           STR      R1,[R0, #+0]
   \   00000C08   04FDFFEA           B        ??execute_5
   1535          
   1536          		/* LD C,* */
   1537          		case 72:    /* LD C,B */
   1538          		{ xC( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_96:
   \   00000C0C   90139FE5           LDR      R1,??execute_1+0x14  ;; _B
   \   00000C10   A0039FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000C14   001091E5           LDR      R1,[R1, #+0]
   \   00000C18   74439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000C1C   001080E5           STR      R1,[R0, #+0]
   \   00000C20   FEFCFFEA           B        ??execute_5
   1539          		case 73:    /* LD C,C */
   1540          		{ local_tstates += ( 4 ); break; }
   1541          		case 74:    /* LD C,D */
   1542          		{ xC( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_97:
   \   00000C24   94139FE5           LDR      R1,??execute_1+0x30  ;; _DE
   \   00000C28   88039FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000C2C   001091E5           LDR      R1,[R1, #+0]
   \   00000C30   5C439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000C34   4114A0E1           ASR      R1,R1,#+8
   \   00000C38   001080E5           STR      R1,[R0, #+0]
   \   00000C3C   F7FCFFEA           B        ??execute_5
   1543          		case 75:    /* LD C,E */
   1544          		{ xC( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_98:
   \   00000C40   78139FE5           LDR      R1,??execute_1+0x30  ;; _DE
   \   00000C44   6C039FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000C48   001091E5           LDR      R1,[R1, #+0]
   \   00000C4C   40439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000C50   FF1001E2           AND      R1,R1,#0xFF
   \   00000C54   001080E5           STR      R1,[R0, #+0]
   \   00000C58   F0FCFFEA           B        ??execute_5
   1545          		case 76:    /* LD C,H */
   1546          		{ xC( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_99:
   \   00000C5C   58139FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000C60   50039FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000C64   001091E5           LDR      R1,[R1, #+0]
   \   00000C68   24439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000C6C   4114A0E1           ASR      R1,R1,#+8
   \   00000C70   001080E5           STR      R1,[R0, #+0]
   \   00000C74   E9FCFFEA           B        ??execute_5
   1547          		case 77:    /* LD C,L */
   1548          		{ xC( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_100:
   \   00000C78   3C139FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000C7C   34039FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000C80   001091E5           LDR      R1,[R1, #+0]
   \   00000C84   08439FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000C88   FF1001E2           AND      R1,R1,#0xFF
   \   00000C8C   001080E5           STR      R1,[R0, #+0]
   \   00000C90   E2FCFFEA           B        ??execute_5
   1549          		case 78:    /* LD C,(HL) */
   1550          		{ xC( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_101:
   \   00000C94   20139FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000C98   00239FE5           LDR      R2,??execute_1+0x10  ;; mem
   \   00000C9C   001091E5           LDR      R1,[R1, #+0]
   \   00000CA0   002092E5           LDR      R2,[R2, #+0]
   \   00000CA4   0C039FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000CA8   0210D1E7           LDRB     R1,[R1, +R2]
   \   00000CAC   E0429FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000CB0   001080E5           STR      R1,[R0, #+0]
   \   00000CB4   AFFDFFEA           B        ??execute_15
   1551          		case 79:    /* LD C,A */
   1552          		{ xC( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_102:
   \   00000CB8   0C139FE5           LDR      R1,??execute_1+0x3C  ;; _A
   \   00000CBC   F4029FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000CC0   001091E5           LDR      R1,[R1, #+0]
   \   00000CC4   C8429FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000CC8   001080E5           STR      R1,[R0, #+0]
   \   00000CCC   D3FCFFEA           B        ??execute_5
   1553          
   1554          		/* LD D,* */
   1555          		case 80:    /* LD D,B */
   1556          		{ xD( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_103:
   \   00000CD0   E8629FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000CD4   C8029FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000CD8   001096E5           LDR      R1,[R6, #+0]
   \   00000CDC   000090E5           LDR      R0,[R0, #+0]
   \   00000CE0   AC429FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000CE4   FF1001E2           AND      R1,R1,#0xFF
   \   00000CE8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000CEC   000086E5           STR      R0,[R6, #+0]
   \   00000CF0   CAFCFFEA           B        ??execute_5
   1557          		case 81:    /* LD D,C */
   1558          		{ xD( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_104:
   \   00000CF4   C4629FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000CF8   B8029FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000CFC   001096E5           LDR      R1,[R6, #+0]
   \   00000D00   000090E5           LDR      R0,[R0, #+0]
   \   00000D04   88429FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000D08   FF1001E2           AND      R1,R1,#0xFF
   \   00000D0C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000D10   000086E5           STR      R0,[R6, #+0]
   \   00000D14   C1FCFFEA           B        ??execute_5
   1559          		case 82:    /* LD D,D */
   1560          		{ local_tstates += ( 4 ); break; }
   1561          		case 83:    /* LD D,E */
   1562          		{ xD( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_105:
   \   00000D18   A0629FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000D1C   004096E5           LDR      R4,[R6, #+0]
   \   00000D20   FF0004E2           AND      R0,R4,#0xFF
   \   00000D24   68429FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000D28   000480E1           ORR      R0,R0,R0, LSL #+8
   \   00000D2C   000086E5           STR      R0,[R6, #+0]
   \   00000D30   BAFCFFEA           B        ??execute_5
   1563          		case 84:    /* LD D,H */
   1564          		{ xD( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_106:
   \   00000D34   84629FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000D38   7C029FE5           LDR      R0,??execute_1+0x2C  ;; _HL
   \   00000D3C   001096E5           LDR      R1,[R6, #+0]
   \   00000D40   000090E5           LDR      R0,[R0, #+0]
   \   00000D44   48429FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000D48   4004A0E1           ASR      R0,R0,#+8
   \   00000D4C   FF1001E2           AND      R1,R1,#0xFF
   \   00000D50   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000D54   000086E5           STR      R0,[R6, #+0]
   \   00000D58   B0FCFFEA           B        ??execute_5
   1565          		case 85:    /* LD D,L */
   1566          		{ xD( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_107:
   \   00000D5C   5C629FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000D60   54029FE5           LDR      R0,??execute_1+0x2C  ;; _HL
   \   00000D64   001096E5           LDR      R1,[R6, #+0]
   \   00000D68   000090E5           LDR      R0,[R0, #+0]
   \   00000D6C   20429FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000D70   FF0000E2           AND      R0,R0,#0xFF
   \   00000D74   FF1001E2           AND      R1,R1,#0xFF
   \   00000D78   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000D7C   000086E5           STR      R0,[R6, #+0]
   \   00000D80   A6FCFFEA           B        ??execute_5
   1567          		case 86:    /* LD D,(HL) */
   1568          		{ xD( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_108:
   \   00000D84   30029FE5           LDR      R0,??execute_1+0x2C  ;; _HL
   \   00000D88   10129FE5           LDR      R1,??execute_1+0x10  ;; mem
   \   00000D8C   000090E5           LDR      R0,[R0, #+0]
   \   00000D90   001091E5           LDR      R1,[R1, #+0]
   \   00000D94   24629FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000D98   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000D9C   001096E5           LDR      R1,[R6, #+0]
   \   00000DA0   EC419FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000DA4   FF1001E2           AND      R1,R1,#0xFF
   \   00000DA8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000DAC   000086E5           STR      R0,[R6, #+0]
   \   00000DB0   70FDFFEA           B        ??execute_15
   1569          		case 87:    /* LD D,A */
   1570          		{ xD( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_109:
   \   00000DB4   04629FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000DB8   0C029FE5           LDR      R0,??execute_1+0x3C  ;; _A
   \   00000DBC   001096E5           LDR      R1,[R6, #+0]
   \   00000DC0   000090E5           LDR      R0,[R0, #+0]
   \   00000DC4   C8419FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000DC8   FF1001E2           AND      R1,R1,#0xFF
   \   00000DCC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000DD0   000086E5           STR      R0,[R6, #+0]
   \   00000DD4   91FCFFEA           B        ??execute_5
   1571          
   1572          		/* LD E,* */
   1573          		case 88:    /* LD E,B */
   1574          		{ xE( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_110:
   \   00000DD8   E0619FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000DDC   C0119FE5           LDR      R1,??execute_1+0x14  ;; _B
   \   00000DE0   000096E5           LDR      R0,[R6, #+0]
   \   00000DE4   001091E5           LDR      R1,[R1, #+0]
   \   00000DE8   A4419FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000DEC   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000DF0   000081E1           ORR      R0,R1,R0
   \   00000DF4   000086E5           STR      R0,[R6, #+0]
   \   00000DF8   88FCFFEA           B        ??execute_5
   1575          		case 89:    /* LD E,C */
   1576          		{ xE( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_111:
   \   00000DFC   BC619FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000E00   B0119FE5           LDR      R1,??execute_1+0x28  ;; _C
   \   00000E04   000096E5           LDR      R0,[R6, #+0]
   \   00000E08   001091E5           LDR      R1,[R1, #+0]
   \   00000E0C   80419FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000E10   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000E14   000081E1           ORR      R0,R1,R0
   \   00000E18   000086E5           STR      R0,[R6, #+0]
   \   00000E1C   7FFCFFEA           B        ??execute_5
   1577          		case 90:    /* LD E,D */
   1578          		{ xE( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_112:
   \   00000E20   98619FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000E24   004096E5           LDR      R4,[R6, #+0]
   \   00000E28   FF0C04E2           AND      R0,R4,#0xFF00
   \   00000E2C   440480E1           ORR      R0,R0,R4, ASR #+8
   \   00000E30   5C419FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000E34   000086E5           STR      R0,[R6, #+0]
   \   00000E38   78FCFFEA           B        ??execute_5
   1579          		case 91:    /* LD E,E */
   1580          		{ local_tstates += ( 4 ); break; }
   1581          		case 92:    /* LD E,H */
   1582          		{ xE( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_113:
   \   00000E3C   7C619FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000E40   74119FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000E44   000096E5           LDR      R0,[R6, #+0]
   \   00000E48   001091E5           LDR      R1,[R1, #+0]
   \   00000E4C   40419FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000E50   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000E54   410480E1           ORR      R0,R0,R1, ASR #+8
   \   00000E58   000086E5           STR      R0,[R6, #+0]
   \   00000E5C   6FFCFFEA           B        ??execute_5
   1583          		case 93:    /* LD E,L */
   1584          		{ xE( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_114:
   \   00000E60   58619FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000E64   50119FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000E68   000096E5           LDR      R0,[R6, #+0]
   \   00000E6C   001091E5           LDR      R1,[R1, #+0]
   \   00000E70   1C419FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000E74   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000E78   FF1001E2           AND      R1,R1,#0xFF
   \   00000E7C   000081E1           ORR      R0,R1,R0
   \   00000E80   000086E5           STR      R0,[R6, #+0]
   \   00000E84   65FCFFEA           B        ??execute_5
   1585          		case 94:    /* LD E,(HL) */
   1586          		{ xE( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_115:
   \   00000E88   2C119FE5           LDR      R1,??execute_1+0x2C  ;; _HL
   \   00000E8C   0C219FE5           LDR      R2,??execute_1+0x10  ;; mem
   \   00000E90   001091E5           LDR      R1,[R1, #+0]
   \   00000E94   002092E5           LDR      R2,[R2, #+0]
   \   00000E98   20619FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000E9C   0210D1E7           LDRB     R1,[R1, +R2]
   \   00000EA0   000096E5           LDR      R0,[R6, #+0]
   \   00000EA4   E8409FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000EA8   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000EAC   000081E1           ORR      R0,R1,R0
   \   00000EB0   000086E5           STR      R0,[R6, #+0]
   \   00000EB4   2FFDFFEA           B        ??execute_15
   1587          		case 95:    /* LD E,A */
   1588          		{ xE( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_116:
   \   00000EB8   00619FE5           LDR      R6,??execute_1+0x30  ;; _DE
   \   00000EBC   08119FE5           LDR      R1,??execute_1+0x3C  ;; _A
   \   00000EC0   000096E5           LDR      R0,[R6, #+0]
   \   00000EC4   001091E5           LDR      R1,[R1, #+0]
   \   00000EC8   C4409FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000ECC   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000ED0   000081E1           ORR      R0,R1,R0
   \   00000ED4   000086E5           STR      R0,[R6, #+0]
   \   00000ED8   50FCFFEA           B        ??execute_5
   1589          
   1590          		/* LD H,* */
   1591          		case 96:    /* LD H,B */
   1592          		{ xH( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_117:
   \   00000EDC   D8409FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000EE0   BC009FE5           LDR      R0,??execute_1+0x14  ;; _B
   \   00000EE4   001094E5           LDR      R1,[R4, #+0]
   \   00000EE8   000090E5           LDR      R0,[R0, #+0]
   \   00000EEC   FF1001E2           AND      R1,R1,#0xFF
   \   00000EF0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000EF4   000084E5           STR      R0,[R4, #+0]
   \   00000EF8   94409FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000EFC   47FCFFEA           B        ??execute_5
   1593          		case 97:    /* LD H,C */
   1594          		{ xH( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_118:
   \   00000F00   B4409FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000F04   AC009FE5           LDR      R0,??execute_1+0x28  ;; _C
   \   00000F08   001094E5           LDR      R1,[R4, #+0]
   \   00000F0C   000090E5           LDR      R0,[R0, #+0]
   \   00000F10   FF1001E2           AND      R1,R1,#0xFF
   \   00000F14   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000F18   000084E5           STR      R0,[R4, #+0]
   \   00000F1C   70409FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000F20   3EFCFFEA           B        ??execute_5
   1595          		case 98:    /* LD H,D */
   1596          		{ xH( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_119:
   \   00000F24   90409FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000F28   90009FE5           LDR      R0,??execute_1+0x30  ;; _DE
   \   00000F2C   001094E5           LDR      R1,[R4, #+0]
   \   00000F30   000090E5           LDR      R0,[R0, #+0]
   \   00000F34   FF1001E2           AND      R1,R1,#0xFF
   \   00000F38   4004A0E1           ASR      R0,R0,#+8
   \   00000F3C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000F40   000084E5           STR      R0,[R4, #+0]
   \   00000F44   48409FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000F48   34FCFFEA           B        ??execute_5
   1597          		case 99:    /* LD H,E */
   1598          		{ xH( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_120:
   \   00000F4C   68409FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000F50   68009FE5           LDR      R0,??execute_1+0x30  ;; _DE
   \   00000F54   001094E5           LDR      R1,[R4, #+0]
   \   00000F58   000090E5           LDR      R0,[R0, #+0]
   \   00000F5C   FF1001E2           AND      R1,R1,#0xFF
   \   00000F60   FF0000E2           AND      R0,R0,#0xFF
   \   00000F64   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000F68   000084E5           STR      R0,[R4, #+0]
   \   00000F6C   20409FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000F70   2AFCFFEA           B        ??execute_5
   1599          		case 100: /* LD H,H */
   1600          		{ local_tstates += ( 4 ); break; }
   1601          		case 101:    /* LD H,L */
   1602          		{ xH( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_121:
   \   00000F74   40409FE5           LDR      R4,??execute_1+0x2C  ;; _HL
   \   00000F78   005094E5           LDR      R5,[R4, #+0]
   \   00000F7C   FF0005E2           AND      R0,R5,#0xFF
   \   00000F80   000480E1           ORR      R0,R0,R0, LSL #+8
   \   00000F84   000084E5           STR      R0,[R4, #+0]
   \   00000F88   04409FE5           LDR      R4,??execute_1+0x4  ;; local_tstates
   \   00000F8C   23FCFFEA           B        ??execute_5
   \                     ??execute_1:
   \   00000F90   ........           DC32     tstatesPerInterrupt
   \   00000F94   ........           DC32     local_tstates
   \   00000F98   ........           DC32     _R
   \   00000F9C   ........           DC32     _PC
   \   00000FA0   ........           DC32     mem
   \   00000FA4   ........           DC32     _B
   \   00000FA8   ........           DC32     `b`
   \   00000FAC   ........           DC32     d
   \   00000FB0   ........           DC32     fZ
   \   00000FB4   ........           DC32     fC
   \   00000FB8   ........           DC32     _C
   \   00000FBC   ........           DC32     _HL
   \   00000FC0   ........           DC32     _DE
   \   00000FC4   ........           DC32     hl
   \   00000FC8   ........           DC32     _SP
   \   00000FCC   ........           DC32     _A
   1603          		case 102:    /* LD H,(HL) */
   1604          		{ xH( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_122:
   \   00000FD0   684F9FE5           LDR      R4,??execute_123  ;; _HL
   \   00000FD4   680F9FE5           LDR      R0,??execute_123+0x4  ;; mem
   \   00000FD8   005094E5           LDR      R5,[R4, #+0]
   \   00000FDC   000090E5           LDR      R0,[R0, #+0]
   \   00000FE0   FF1005E2           AND      R1,R5,#0xFF
   \   00000FE4   0000D5E7           LDRB     R0,[R5, +R0]
   \   00000FE8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000FEC   000084E5           STR      R0,[R4, #+0]
   \   00000FF0   504F9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00000FF4   DFFCFFEA           B        ??execute_15
   1605          		case 103:    /* LD H,A */
   1606          		{ xH( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_124:
   \   00000FF8   404F9FE5           LDR      R4,??execute_123  ;; _HL
   \   00000FFC   480F9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   00001000   001094E5           LDR      R1,[R4, #+0]
   \   00001004   000090E5           LDR      R0,[R0, #+0]
   \   00001008   FF1001E2           AND      R1,R1,#0xFF
   \   0000100C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00001010   000084E5           STR      R0,[R4, #+0]
   \   00001014   2C4F9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001018   00FCFFEA           B        ??execute_5
   1607          
   1608          		/* LD L,* */
   1609          		case 104:    /* LD L,B */
   1610          		{ xL( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_125:
   \   0000101C   1C4F9FE5           LDR      R4,??execute_123  ;; _HL
   \   00001020   281F9FE5           LDR      R1,??execute_123+0x10  ;; _B
   \   00001024   000094E5           LDR      R0,[R4, #+0]
   \   00001028   001091E5           LDR      R1,[R1, #+0]
   \   0000102C   FF0C00E2           AND      R0,R0,#0xFF00
   \   00001030   000081E1           ORR      R0,R1,R0
   \   00001034   000084E5           STR      R0,[R4, #+0]
   \   00001038   084F9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000103C   F7FBFFEA           B        ??execute_5
   1611          		case 105:    /* LD L,C */
   1612          		{ xL( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_126:
   \   00001040   F84E9FE5           LDR      R4,??execute_123  ;; _HL
   \   00001044   081F9FE5           LDR      R1,??execute_123+0x14  ;; _C
   \   00001048   000094E5           LDR      R0,[R4, #+0]
   \   0000104C   001091E5           LDR      R1,[R1, #+0]
   \   00001050   FF0C00E2           AND      R0,R0,#0xFF00
   \   00001054   000081E1           ORR      R0,R1,R0
   \   00001058   000084E5           STR      R0,[R4, #+0]
   \   0000105C   E44E9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001060   EEFBFFEA           B        ??execute_5
   1613          		case 106:    /* LD L,D */
   1614          		{ xL( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_127:
   \   00001064   D44E9FE5           LDR      R4,??execute_123  ;; _HL
   \   00001068   E81E9FE5           LDR      R1,??execute_123+0x18  ;; _DE
   \   0000106C   000094E5           LDR      R0,[R4, #+0]
   \   00001070   001091E5           LDR      R1,[R1, #+0]
   \   00001074   FF0C00E2           AND      R0,R0,#0xFF00
   \   00001078   410480E1           ORR      R0,R0,R1, ASR #+8
   \   0000107C   000084E5           STR      R0,[R4, #+0]
   \   00001080   C04E9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001084   E5FBFFEA           B        ??execute_5
   1615          		case 107:    /* LD L,E */
   1616          		{ xL( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_128:
   \   00001088   B04E9FE5           LDR      R4,??execute_123  ;; _HL
   \   0000108C   C41E9FE5           LDR      R1,??execute_123+0x18  ;; _DE
   \   00001090   000094E5           LDR      R0,[R4, #+0]
   \   00001094   001091E5           LDR      R1,[R1, #+0]
   \   00001098   FF0C00E2           AND      R0,R0,#0xFF00
   \   0000109C   FF1001E2           AND      R1,R1,#0xFF
   \   000010A0   000081E1           ORR      R0,R1,R0
   \   000010A4   000084E5           STR      R0,[R4, #+0]
   \   000010A8   984E9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000010AC   DBFBFFEA           B        ??execute_5
   1617          		case 108:    /* LD L,H */
   1618          		{ xL( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_129:
   \   000010B0   884E9FE5           LDR      R4,??execute_123  ;; _HL
   \   000010B4   005094E5           LDR      R5,[R4, #+0]
   \   000010B8   FF0C05E2           AND      R0,R5,#0xFF00
   \   000010BC   450480E1           ORR      R0,R0,R5, ASR #+8
   \   000010C0   000084E5           STR      R0,[R4, #+0]
   \   000010C4   7C4E9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000010C8   D4FBFFEA           B        ??execute_5
   1619          		case 109:    /* LD L,L */
   1620          		{ local_tstates += ( 4 ); break; }
   1621          		case 110:    /* LD L,(HL) */
   1622          		{ xL( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_130:
   \   000010CC   6C4E9FE5           LDR      R4,??execute_123  ;; _HL
   \   000010D0   6C1E9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   000010D4   005094E5           LDR      R5,[R4, #+0]
   \   000010D8   001091E5           LDR      R1,[R1, #+0]
   \   000010DC   FF0C05E2           AND      R0,R5,#0xFF00
   \   000010E0   0110D5E7           LDRB     R1,[R5, +R1]
   \   000010E4   000081E1           ORR      R0,R1,R0
   \   000010E8   000084E5           STR      R0,[R4, #+0]
   \   000010EC   544E9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000010F0   A0FCFFEA           B        ??execute_15
   1623          		case 111:    /* LD L,A */
   1624          		{ xL( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_131:
   \   000010F4   444E9FE5           LDR      R4,??execute_123  ;; _HL
   \   000010F8   4C1E9FE5           LDR      R1,??execute_123+0xC  ;; _A
   \   000010FC   000094E5           LDR      R0,[R4, #+0]
   \   00001100   001091E5           LDR      R1,[R1, #+0]
   \   00001104   FF0C00E2           AND      R0,R0,#0xFF00
   \   00001108   000081E1           ORR      R0,R1,R0
   \   0000110C   000084E5           STR      R0,[R4, #+0]
   \   00001110   304E9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001114   C1FBFFEA           B        ??execute_5
   1625          
   1626          		/* LD (HL),* */
   1627          		case 112:    /* LD (HL),B */
   1628          		{ pokeb( HL(), B() ); local_tstates += ( 7 ); break; }
   \                     ??execute_132:
   \   00001118   200E9FE5           LDR      R0,??execute_123  ;; _HL
   \   0000111C   201E9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001120   282E9FE5           LDR      R2,??execute_123+0x10  ;; _B
   \   00001124   000090E5           LDR      R0,[R0, #+0]
   \   00001128   001091E5           LDR      R1,[R1, #+0]
   \   0000112C   002092E5           LDR      R2,[R2, #+0]
   \   00001130   104E9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001134   0120C0E7           STRB     R2,[R0, +R1]
   \   00001138   8EFCFFEA           B        ??execute_15
   1629          		case 113:    /* LD (HL),C */
   1630          		{ pokeb( HL(), C() ); local_tstates += ( 7 ); break; }
   \                     ??execute_133:
   \   0000113C   FC0D9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001140   FC1D9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001144   082E9FE5           LDR      R2,??execute_123+0x14  ;; _C
   \   00001148   000090E5           LDR      R0,[R0, #+0]
   \   0000114C   001091E5           LDR      R1,[R1, #+0]
   \   00001150   002092E5           LDR      R2,[R2, #+0]
   \   00001154   EC4D9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001158   0120C0E7           STRB     R2,[R0, +R1]
   \   0000115C   F5FCFFEA           B        ??execute_37
   1631          		case 114:    /* LD (HL),D */
   1632          		{ pokeb( HL(), D() ); local_tstates += ( 7 ); break; }
   \                     ??execute_134:
   \   00001160   D80D9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001164   D81D9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001168   E82D9FE5           LDR      R2,??execute_123+0x18  ;; _DE
   \   0000116C   000090E5           LDR      R0,[R0, #+0]
   \   00001170   001091E5           LDR      R1,[R1, #+0]
   \   00001174   002092E5           LDR      R2,[R2, #+0]
   \   00001178   C84D9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000117C   4224A0E1           ASR      R2,R2,#+8
   \   00001180   0120C0E7           STRB     R2,[R0, +R1]
   \   00001184   7BFCFFEA           B        ??execute_15
   1633          		case 115:    /* LD (HL),E */
   1634          		{ pokeb( HL(), E() ); local_tstates += ( 7 ); break; }
   \                     ??execute_135:
   \   00001188   B00D9FE5           LDR      R0,??execute_123  ;; _HL
   \   0000118C   B01D9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001190   C02D9FE5           LDR      R2,??execute_123+0x18  ;; _DE
   \   00001194   000090E5           LDR      R0,[R0, #+0]
   \   00001198   001091E5           LDR      R1,[R1, #+0]
   \   0000119C   002092E5           LDR      R2,[R2, #+0]
   \   000011A0   A04D9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000011A4   0120C0E7           STRB     R2,[R0, +R1]
   \   000011A8   1CFEFFEA           B        ??execute_76
   1635          		case 116:    /* LD (HL),H */
   1636          		{ pokeb( HL(), H() ); local_tstates += ( 7 ); break; }
   \                     ??execute_136:
   \   000011AC   8C4D9FE5           LDR      R4,??execute_123  ;; _HL
   \   000011B0   8C0D9FE5           LDR      R0,??execute_123+0x4  ;; mem
   \   000011B4   005094E5           LDR      R5,[R4, #+0]
   \   000011B8   000090E5           LDR      R0,[R0, #+0]
   \   000011BC   844D9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000011C0   4514A0E1           ASR      R1,R5,#+8
   \   000011C4   0010C5E7           STRB     R1,[R5, +R0]
   \   000011C8   6AFCFFEA           B        ??execute_15
   1637          		case 117:    /* LD (HL),L */
   1638          		{ pokeb( HL(), L() ); local_tstates += ( 7 ); break; }
   \                     ??execute_137:
   \   000011CC   6C4D9FE5           LDR      R4,??execute_123  ;; _HL
   \   000011D0   6C0D9FE5           LDR      R0,??execute_123+0x4  ;; mem
   \   000011D4   005094E5           LDR      R5,[R4, #+0]
   \   000011D8   000090E5           LDR      R0,[R0, #+0]
   \   000011DC   644D9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000011E0   0050C5E7           STRB     R5,[R5, +R0]
   \   000011E4   D3FCFFEA           B        ??execute_37
   1639          		case 118:    /* HALT */
   1640          		{ 
   1641          			  haltsToInterrupt = (((-local_tstates-1) / 4)+1);
   \                     ??execute_138:
   \   000011E8   584D9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000011EC   0010E0E3           MVN      R1,#+0
   \   000011F0   000094E5           LDR      R0,[R4, #+0]
   \   000011F4   001041E0           SUB      R1,R1,R0
   \   000011F8   C120A0E1           ASR      R2,R1,#+1
   \   000011FC   221F81E0           ADD      R1,R1,R2, LSR #+30
   \   00001200   0120A0E3           MOV      R2,#+1
   \   00001204   411182E0           ADD      R1,R2,R1, ASR #+2
   \   00001208   902E9FE5           LDR      R2,??execute_139  ;; haltsToInterrupt
   1642          			local_tstates += (haltsToInterrupt*4);
   \   0000120C   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00001210   000084E5           STR      R0,[R4, #+0]
   1643          			REFRESH( haltsToInterrupt-1 );
   \   00001214   880E9FE5           LDR      R0,??execute_139+0x4  ;; _R
   \   00001218   001082E5           STR      R1,[R2, #+0]
   \   0000121C   002090E5           LDR      R2,[R0, #+0]
   \   00001220   011041E2           SUB      R1,R1,#+1
   \   00001224   021081E0           ADD      R1,R1,R2
   \   00001228   79FBFFEA           B        ??execute_2
   1644          			break;
   1645          		}
   1646          		case 119:    /* LD (HL),A */
   1647          		{ pokeb( HL(), A() ); local_tstates += ( 7 ); break; }
   \                     ??execute_140:
   \   0000122C   0C0D9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001230   0C1D9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001234   102D9FE5           LDR      R2,??execute_123+0xC  ;; _A
   \   00001238   000090E5           LDR      R0,[R0, #+0]
   \   0000123C   001091E5           LDR      R1,[R1, #+0]
   \   00001240   002092E5           LDR      R2,[R2, #+0]
   \   00001244   FC4C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001248   0120C0E7           STRB     R2,[R0, +R1]
   \   0000124C   49FCFFEA           B        ??execute_15
   1648          
   1649          		/* LD A,* */
   1650          		case 120:    /* LD A,B */
   1651          		{ xA( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_141:
   \   00001250   F81C9FE5           LDR      R1,??execute_123+0x10  ;; _B
   \   00001254   F00C9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   00001258   001091E5           LDR      R1,[R1, #+0]
   \   0000125C   E44C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001260   001080E5           STR      R1,[R0, #+0]
   \   00001264   6DFBFFEA           B        ??execute_5
   1652          		case 121:    /* LD A,C */
   1653          		{ xA( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_142:
   \   00001268   E41C9FE5           LDR      R1,??execute_123+0x14  ;; _C
   \   0000126C   D80C9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   00001270   001091E5           LDR      R1,[R1, #+0]
   \   00001274   CC4C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001278   001080E5           STR      R1,[R0, #+0]
   \   0000127C   67FBFFEA           B        ??execute_5
   1654          		case 122:    /* LD A,D */
   1655          		{ xA( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_143:
   \   00001280   D01C9FE5           LDR      R1,??execute_123+0x18  ;; _DE
   \   00001284   C00C9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   00001288   001091E5           LDR      R1,[R1, #+0]
   \   0000128C   B44C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001290   4114A0E1           ASR      R1,R1,#+8
   \   00001294   001080E5           STR      R1,[R0, #+0]
   \   00001298   60FBFFEA           B        ??execute_5
   1656          		case 123:    /* LD A,E */
   1657          		{ xA( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_144:
   \   0000129C   B41C9FE5           LDR      R1,??execute_123+0x18  ;; _DE
   \   000012A0   A40C9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   000012A4   001091E5           LDR      R1,[R1, #+0]
   \   000012A8   984C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000012AC   FF1001E2           AND      R1,R1,#0xFF
   \   000012B0   001080E5           STR      R1,[R0, #+0]
   \   000012B4   59FBFFEA           B        ??execute_5
   1658          		case 124:    /* LD A,H */
   1659          		{ xA( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_145:
   \   000012B8   801C9FE5           LDR      R1,??execute_123  ;; _HL
   \   000012BC   880C9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   000012C0   001091E5           LDR      R1,[R1, #+0]
   \   000012C4   7C4C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000012C8   4114A0E1           ASR      R1,R1,#+8
   \   000012CC   001080E5           STR      R1,[R0, #+0]
   \   000012D0   52FBFFEA           B        ??execute_5
   1660          		case 125:    /* LD A,L */
   1661          		{ xA( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_146:
   \   000012D4   641C9FE5           LDR      R1,??execute_123  ;; _HL
   \   000012D8   6C0C9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   000012DC   001091E5           LDR      R1,[R1, #+0]
   \   000012E0   604C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000012E4   FF1001E2           AND      R1,R1,#0xFF
   \   000012E8   001080E5           STR      R1,[R0, #+0]
   \   000012EC   4BFBFFEA           B        ??execute_5
   1662          		case 126:    /* LD A,(HL) */
   1663          		{ xA( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_147:
   \   000012F0   481C9FE5           LDR      R1,??execute_123  ;; _HL
   \   000012F4   482C9FE5           LDR      R2,??execute_123+0x4  ;; mem
   \   000012F8   001091E5           LDR      R1,[R1, #+0]
   \   000012FC   002092E5           LDR      R2,[R2, #+0]
   \   00001300   440C9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   00001304   0210D1E7           LDRB     R1,[R1, +R2]
   \   00001308   384C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000130C   001080E5           STR      R1,[R0, #+0]
   \   00001310   18FCFFEA           B        ??execute_15
   1664          		case 127:    /* LD A,A */
   1665          		{ local_tstates += ( 4 ); break; }
   1666          
   1667          		/* ADD A,* */
   1668          		case 128:    /* ADD A,B */
   1669          		{ add_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_148:
   \   00001314   340C9FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   00001318   284C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000131C   000090E5           LDR      R0,[R0, #+0]
   \   00001320   ........           BL       add_a
   \   00001324   3DFBFFEA           B        ??execute_5
   1670          		case 129:    /* ADD A,C */
   1671          		{ add_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_149:
   \   00001328   240C9FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   0000132C   144C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001330   000090E5           LDR      R0,[R0, #+0]
   \   00001334   ........           BL       add_a
   \   00001338   38FBFFEA           B        ??execute_5
   1672          		case 130:    /* ADD A,D */
   1673          		{ add_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_150:
   \   0000133C   140C9FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001340   004C9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001344   000090E5           LDR      R0,[R0, #+0]
   \   00001348   4004A0E1           ASR      R0,R0,#+8
   \   0000134C   ........           BL       add_a
   \   00001350   32FBFFEA           B        ??execute_5
   1674          		case 131:    /* ADD A,E */
   1675          		{ add_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_151:
   \   00001354   FC0B9FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001358   E84B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000135C   000090E5           LDR      R0,[R0, #+0]
   \   00001360   FF0000E2           AND      R0,R0,#0xFF
   \   00001364   ........           BL       add_a
   \   00001368   2CFBFFEA           B        ??execute_5
   1676          		case 132:    /* ADD A,H */
   1677          		{ add_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_152:
   \   0000136C   CC0B9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001370   D04B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001374   000090E5           LDR      R0,[R0, #+0]
   \   00001378   4004A0E1           ASR      R0,R0,#+8
   \   0000137C   ........           BL       add_a
   \   00001380   26FBFFEA           B        ??execute_5
   1678          		case 133:    /* ADD A,L */
   1679          		{ add_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_153:
   \   00001384   B40B9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001388   B84B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000138C   000090E5           LDR      R0,[R0, #+0]
   \   00001390   FF0000E2           AND      R0,R0,#0xFF
   \   00001394   ........           BL       add_a
   \   00001398   20FBFFEA           B        ??execute_5
   1680          		case 134:    /* ADD A,(HL) */
   1681          		{ add_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_154:
   \   0000139C   9C0B9FE5           LDR      R0,??execute_123  ;; _HL
   \   000013A0   9C1B9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   000013A4   000090E5           LDR      R0,[R0, #+0]
   \   000013A8   001091E5           LDR      R1,[R1, #+0]
   \   000013AC   944B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000013B0   0100D0E7           LDRB     R0,[R0, +R1]
   \   000013B4   ........           BL       add_a
   \   000013B8   EEFBFFEA           B        ??execute_15
   1682          		case 135:    /* ADD A,A */
   1683          		{ add_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_155:
   \   000013BC   880B9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   000013C0   804B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000013C4   000090E5           LDR      R0,[R0, #+0]
   \   000013C8   ........           BL       add_a
   \   000013CC   13FBFFEA           B        ??execute_5
   1684          
   1685          		/* ADC A,* */
   1686          		case 136:    /* ADC A,B */
   1687          		{ adc_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_156:
   \   000013D0   780B9FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   000013D4   6C4B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000013D8   000090E5           LDR      R0,[R0, #+0]
   \   000013DC   ........           BL       adc_a
   \   000013E0   0EFBFFEA           B        ??execute_5
   1688          		case 137:    /* ADC A,C */
   1689          		{ adc_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_157:
   \   000013E4   680B9FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   000013E8   584B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000013EC   000090E5           LDR      R0,[R0, #+0]
   \   000013F0   ........           BL       adc_a
   \   000013F4   09FBFFEA           B        ??execute_5
   1690          		case 138:    /* ADC A,D */
   1691          		{ adc_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_158:
   \   000013F8   580B9FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   000013FC   444B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001400   000090E5           LDR      R0,[R0, #+0]
   \   00001404   4004A0E1           ASR      R0,R0,#+8
   \   00001408   ........           BL       adc_a
   \   0000140C   03FBFFEA           B        ??execute_5
   1692          		case 139:    /* ADC A,E */
   1693          		{ adc_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_159:
   \   00001410   400B9FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001414   2C4B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001418   000090E5           LDR      R0,[R0, #+0]
   \   0000141C   FF0000E2           AND      R0,R0,#0xFF
   \   00001420   ........           BL       adc_a
   \   00001424   FDFAFFEA           B        ??execute_5
   1694          		case 140:    /* ADC A,H */
   1695          		{ adc_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_160:
   \   00001428   100B9FE5           LDR      R0,??execute_123  ;; _HL
   \   0000142C   144B9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001430   000090E5           LDR      R0,[R0, #+0]
   \   00001434   4004A0E1           ASR      R0,R0,#+8
   \   00001438   ........           BL       adc_a
   \   0000143C   F7FAFFEA           B        ??execute_5
   1696          		case 141:    /* ADC A,L */
   1697          		{ adc_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_161:
   \   00001440   F80A9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001444   FC4A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001448   000090E5           LDR      R0,[R0, #+0]
   \   0000144C   FF0000E2           AND      R0,R0,#0xFF
   \   00001450   ........           BL       adc_a
   \   00001454   F1FAFFEA           B        ??execute_5
   1698          		case 142:    /* ADC A,(HL) */
   1699          		{ adc_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_162:
   \   00001458   E00A9FE5           LDR      R0,??execute_123  ;; _HL
   \   0000145C   E01A9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001460   000090E5           LDR      R0,[R0, #+0]
   \   00001464   001091E5           LDR      R1,[R1, #+0]
   \   00001468   D84A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000146C   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001470   ........           BL       adc_a
   \   00001474   BFFBFFEA           B        ??execute_15
   1700          		case 143:    /* ADC A,A */
   1701          		{ adc_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_163:
   \   00001478   CC0A9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   0000147C   C44A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001480   000090E5           LDR      R0,[R0, #+0]
   \   00001484   ........           BL       adc_a
   \   00001488   E4FAFFEA           B        ??execute_5
   1702          
   1703          		/* SUB * */
   1704          		case 144:    /* SUB B */
   1705          		{ sub_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_164:
   \   0000148C   BC0A9FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   00001490   B04A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001494   000090E5           LDR      R0,[R0, #+0]
   \   00001498   ........           BL       sub_a
   \   0000149C   DFFAFFEA           B        ??execute_5
   1706          		case 145:    /* SUB C */
   1707          		{ sub_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_165:
   \   000014A0   AC0A9FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   000014A4   9C4A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000014A8   000090E5           LDR      R0,[R0, #+0]
   \   000014AC   ........           BL       sub_a
   \   000014B0   DAFAFFEA           B        ??execute_5
   1708          		case 146:    /* SUB D */
   1709          		{ sub_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_166:
   \   000014B4   9C0A9FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   000014B8   884A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000014BC   000090E5           LDR      R0,[R0, #+0]
   \   000014C0   4004A0E1           ASR      R0,R0,#+8
   \   000014C4   ........           BL       sub_a
   \   000014C8   D4FAFFEA           B        ??execute_5
   1710          		case 147:    /* SUB E */
   1711          		{ sub_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_167:
   \   000014CC   840A9FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   000014D0   704A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000014D4   000090E5           LDR      R0,[R0, #+0]
   \   000014D8   FF0000E2           AND      R0,R0,#0xFF
   \   000014DC   ........           BL       sub_a
   \   000014E0   CEFAFFEA           B        ??execute_5
   1712          		case 148:    /* SUB H */
   1713          		{ sub_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_168:
   \   000014E4   540A9FE5           LDR      R0,??execute_123  ;; _HL
   \   000014E8   584A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000014EC   000090E5           LDR      R0,[R0, #+0]
   \   000014F0   4004A0E1           ASR      R0,R0,#+8
   \   000014F4   ........           BL       sub_a
   \   000014F8   C8FAFFEA           B        ??execute_5
   1714          		case 149:    /* SUB L */
   1715          		{ sub_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_169:
   \   000014FC   3C0A9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001500   404A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001504   000090E5           LDR      R0,[R0, #+0]
   \   00001508   FF0000E2           AND      R0,R0,#0xFF
   \   0000150C   ........           BL       sub_a
   \   00001510   C2FAFFEA           B        ??execute_5
   1716          		case 150:    /* SUB (HL) */
   1717          		{ sub_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_170:
   \   00001514   240A9FE5           LDR      R0,??execute_123  ;; _HL
   \   00001518   241A9FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   0000151C   000090E5           LDR      R0,[R0, #+0]
   \   00001520   001091E5           LDR      R1,[R1, #+0]
   \   00001524   1C4A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001528   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000152C   ........           BL       sub_a
   \   00001530   90FBFFEA           B        ??execute_15
   1718          		case 151:    /* SUB A() */
   1719          		{ sub_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_171:
   \   00001534   100A9FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   00001538   084A9FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000153C   000090E5           LDR      R0,[R0, #+0]
   \   00001540   ........           BL       sub_a
   \   00001544   B5FAFFEA           B        ??execute_5
   1720          
   1721          		/* SBC A,* */
   1722          		case 152:    /* SBC A,B */
   1723          		{ sbc_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_172:
   \   00001548   000A9FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   0000154C   F4499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001550   000090E5           LDR      R0,[R0, #+0]
   \   00001554   ........           BL       sbc_a
   \   00001558   B0FAFFEA           B        ??execute_5
   1724          		case 153:    /* SBC A,C */
   1725          		{ sbc_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_173:
   \   0000155C   F0099FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   00001560   E0499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001564   000090E5           LDR      R0,[R0, #+0]
   \   00001568   ........           BL       sbc_a
   \   0000156C   ABFAFFEA           B        ??execute_5
   1726          		case 154:    /* SBC A,D */
   1727          		{ sbc_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_174:
   \   00001570   E0099FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001574   CC499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001578   000090E5           LDR      R0,[R0, #+0]
   \   0000157C   4004A0E1           ASR      R0,R0,#+8
   \   00001580   ........           BL       sbc_a
   \   00001584   A5FAFFEA           B        ??execute_5
   1728          		case 155:    /* SBC A,E */
   1729          		{ sbc_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_175:
   \   00001588   C8099FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   0000158C   B4499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001590   000090E5           LDR      R0,[R0, #+0]
   \   00001594   FF0000E2           AND      R0,R0,#0xFF
   \   00001598   ........           BL       sbc_a
   \   0000159C   9FFAFFEA           B        ??execute_5
   1730          		case 156:    /* SBC A,H */
   1731          		{ sbc_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_176:
   \   000015A0   98099FE5           LDR      R0,??execute_123  ;; _HL
   \   000015A4   9C499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000015A8   000090E5           LDR      R0,[R0, #+0]
   \   000015AC   4004A0E1           ASR      R0,R0,#+8
   \   000015B0   ........           BL       sbc_a
   \   000015B4   99FAFFEA           B        ??execute_5
   1732          		case 157:    /* SBC A,L */
   1733          		{ sbc_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_177:
   \   000015B8   80099FE5           LDR      R0,??execute_123  ;; _HL
   \   000015BC   84499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000015C0   000090E5           LDR      R0,[R0, #+0]
   \   000015C4   FF0000E2           AND      R0,R0,#0xFF
   \   000015C8   ........           BL       sbc_a
   \   000015CC   93FAFFEA           B        ??execute_5
   1734          		case 158:    /* SBC A,(HL) */
   1735          		{ sbc_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_178:
   \   000015D0   68099FE5           LDR      R0,??execute_123  ;; _HL
   \   000015D4   68199FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   000015D8   000090E5           LDR      R0,[R0, #+0]
   \   000015DC   001091E5           LDR      R1,[R1, #+0]
   \   000015E0   60499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000015E4   0100D0E7           LDRB     R0,[R0, +R1]
   \   000015E8   ........           BL       sbc_a
   \   000015EC   61FBFFEA           B        ??execute_15
   1736          		case 159:    /* SBC A,A */
   1737          		{ sbc_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_179:
   \   000015F0   54099FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   000015F4   4C499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000015F8   000090E5           LDR      R0,[R0, #+0]
   \   000015FC   ........           BL       sbc_a
   \   00001600   86FAFFEA           B        ??execute_5
   1738          
   1739          		/* AND * */
   1740          		case 160:    /* AND B */
   1741          		{ and_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_180:
   \   00001604   44099FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   00001608   38499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000160C   000090E5           LDR      R0,[R0, #+0]
   \   00001610   ........           BL       and_a
   \   00001614   81FAFFEA           B        ??execute_5
   1742          		case 161:    /* AND C */
   1743          		{ and_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_181:
   \   00001618   34099FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   0000161C   24499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001620   000090E5           LDR      R0,[R0, #+0]
   \   00001624   ........           BL       and_a
   \   00001628   7CFAFFEA           B        ??execute_5
   1744          		case 162:    /* AND D */
   1745          		{ and_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_182:
   \   0000162C   24099FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001630   10499FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001634   000090E5           LDR      R0,[R0, #+0]
   \   00001638   4004A0E1           ASR      R0,R0,#+8
   \   0000163C   ........           BL       and_a
   \   00001640   76FAFFEA           B        ??execute_5
   1746          		case 163:    /* AND E */
   1747          		{ and_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_183:
   \   00001644   0C099FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001648   F8489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000164C   000090E5           LDR      R0,[R0, #+0]
   \   00001650   FF0000E2           AND      R0,R0,#0xFF
   \   00001654   ........           BL       and_a
   \   00001658   70FAFFEA           B        ??execute_5
   1748          		case 164:    /* AND H */
   1749          		{ and_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_184:
   \   0000165C   DC089FE5           LDR      R0,??execute_123  ;; _HL
   \   00001660   E0489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001664   000090E5           LDR      R0,[R0, #+0]
   \   00001668   4004A0E1           ASR      R0,R0,#+8
   \   0000166C   ........           BL       and_a
   \   00001670   6AFAFFEA           B        ??execute_5
   1750          		case 165:    /* AND L */
   1751          		{ and_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_185:
   \   00001674   C4089FE5           LDR      R0,??execute_123  ;; _HL
   \   00001678   C8489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000167C   000090E5           LDR      R0,[R0, #+0]
   \   00001680   FF0000E2           AND      R0,R0,#0xFF
   \   00001684   ........           BL       and_a
   \   00001688   64FAFFEA           B        ??execute_5
   1752          		case 166:    /* AND (HL) */
   1753          		{ and_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_186:
   \   0000168C   AC089FE5           LDR      R0,??execute_123  ;; _HL
   \   00001690   AC189FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001694   000090E5           LDR      R0,[R0, #+0]
   \   00001698   001091E5           LDR      R1,[R1, #+0]
   \   0000169C   A4489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000016A0   0100D0E7           LDRB     R0,[R0, +R1]
   \   000016A4   ........           BL       and_a
   \   000016A8   32FBFFEA           B        ??execute_15
   1754          		case 167:    /* AND A() */
   1755          		{ and_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_187:
   \   000016AC   98089FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   000016B0   90489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000016B4   000090E5           LDR      R0,[R0, #+0]
   \   000016B8   ........           BL       and_a
   \   000016BC   57FAFFEA           B        ??execute_5
   1756          
   1757          		/* XOR * */
   1758          		case 168:    /* XOR B */
   1759          		{ xor_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_188:
   \   000016C0   88089FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   000016C4   7C489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000016C8   000090E5           LDR      R0,[R0, #+0]
   \   000016CC   ........           BL       xor_a
   \   000016D0   52FAFFEA           B        ??execute_5
   1760          		case 169:    /* XOR C */
   1761          		{ xor_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_189:
   \   000016D4   78089FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   000016D8   68489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000016DC   000090E5           LDR      R0,[R0, #+0]
   \   000016E0   ........           BL       xor_a
   \   000016E4   4DFAFFEA           B        ??execute_5
   1762          		case 170:    /* XOR D */
   1763          		{ xor_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_190:
   \   000016E8   68089FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   000016EC   54489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000016F0   000090E5           LDR      R0,[R0, #+0]
   \   000016F4   4004A0E1           ASR      R0,R0,#+8
   \   000016F8   ........           BL       xor_a
   \   000016FC   47FAFFEA           B        ??execute_5
   1764          		case 171:    /* XOR E */
   1765          		{ xor_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_191:
   \   00001700   50089FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001704   3C489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001708   000090E5           LDR      R0,[R0, #+0]
   \   0000170C   FF0000E2           AND      R0,R0,#0xFF
   \   00001710   ........           BL       xor_a
   \   00001714   41FAFFEA           B        ??execute_5
   1766          		case 172:    /* XOR H */
   1767          		{ xor_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_192:
   \   00001718   20089FE5           LDR      R0,??execute_123  ;; _HL
   \   0000171C   24489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001720   000090E5           LDR      R0,[R0, #+0]
   \   00001724   4004A0E1           ASR      R0,R0,#+8
   \   00001728   ........           BL       xor_a
   \   0000172C   3BFAFFEA           B        ??execute_5
   1768          		case 173:    /* XOR L */
   1769          		{ xor_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_193:
   \   00001730   08089FE5           LDR      R0,??execute_123  ;; _HL
   \   00001734   0C489FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001738   000090E5           LDR      R0,[R0, #+0]
   \   0000173C   FF0000E2           AND      R0,R0,#0xFF
   \   00001740   ........           BL       xor_a
   \   00001744   35FAFFEA           B        ??execute_5
   1770          		case 174:    /* XOR (HL) */
   1771          		{ xor_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_194:
   \   00001748   F0079FE5           LDR      R0,??execute_123  ;; _HL
   \   0000174C   F0179FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001750   000090E5           LDR      R0,[R0, #+0]
   \   00001754   001091E5           LDR      R1,[R1, #+0]
   \   00001758   E8479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000175C   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001760   ........           BL       xor_a
   \   00001764   03FBFFEA           B        ??execute_15
   1772          		case 175:    /* XOR A() */
   1773          		{ xor_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_195:
   \   00001768   DC079FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   0000176C   D4479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001770   000090E5           LDR      R0,[R0, #+0]
   \   00001774   ........           BL       xor_a
   \   00001778   28FAFFEA           B        ??execute_5
   1774          
   1775          		/* OR * */
   1776          		case 176:    /* OR B */
   1777          		{ or_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_196:
   \   0000177C   CC079FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   00001780   C0479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001784   000090E5           LDR      R0,[R0, #+0]
   \   00001788   ........           BL       or_a
   \   0000178C   23FAFFEA           B        ??execute_5
   1778          		case 177:    /* OR C */
   1779          		{ or_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_197:
   \   00001790   BC079FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   00001794   AC479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001798   000090E5           LDR      R0,[R0, #+0]
   \   0000179C   ........           BL       or_a
   \   000017A0   1EFAFFEA           B        ??execute_5
   1780          		case 178:    /* OR D */
   1781          		{ or_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_198:
   \   000017A4   AC079FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   000017A8   98479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000017AC   000090E5           LDR      R0,[R0, #+0]
   \   000017B0   4004A0E1           ASR      R0,R0,#+8
   \   000017B4   ........           BL       or_a
   \   000017B8   18FAFFEA           B        ??execute_5
   1782          		case 179:    /* OR E */
   1783          		{ or_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_199:
   \   000017BC   94079FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   000017C0   80479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000017C4   000090E5           LDR      R0,[R0, #+0]
   \   000017C8   FF0000E2           AND      R0,R0,#0xFF
   \   000017CC   ........           BL       or_a
   \   000017D0   12FAFFEA           B        ??execute_5
   1784          		case 180:    /* OR H */
   1785          		{ or_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_200:
   \   000017D4   64079FE5           LDR      R0,??execute_123  ;; _HL
   \   000017D8   68479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000017DC   000090E5           LDR      R0,[R0, #+0]
   \   000017E0   4004A0E1           ASR      R0,R0,#+8
   \   000017E4   ........           BL       or_a
   \   000017E8   0CFAFFEA           B        ??execute_5
   1786          		case 181:    /* OR L */
   1787          		{ or_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_201:
   \   000017EC   4C079FE5           LDR      R0,??execute_123  ;; _HL
   \   000017F0   50479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000017F4   000090E5           LDR      R0,[R0, #+0]
   \   000017F8   FF0000E2           AND      R0,R0,#0xFF
   \   000017FC   ........           BL       or_a
   \   00001800   06FAFFEA           B        ??execute_5
   1788          		case 182:    /* OR (HL) */
   1789          		{ or_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_202:
   \   00001804   34079FE5           LDR      R0,??execute_123  ;; _HL
   \   00001808   34179FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   0000180C   000090E5           LDR      R0,[R0, #+0]
   \   00001810   001091E5           LDR      R1,[R1, #+0]
   \   00001814   2C479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001818   0100D0E7           LDRB     R0,[R0, +R1]
   \   0000181C   ........           BL       or_a
   \   00001820   D4FAFFEA           B        ??execute_15
   1790          		case 183:    /* OR A() */
   1791          		{ or_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_203:
   \   00001824   20079FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   00001828   18479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000182C   000090E5           LDR      R0,[R0, #+0]
   \   00001830   ........           BL       or_a
   \   00001834   F9F9FFEA           B        ??execute_5
   1792          
   1793          		/* CP * */
   1794          		case 184:    /* CP B */
   1795          		{ cp_a( B() ); local_tstates += ( 4 ); break; }
   \                     ??execute_204:
   \   00001838   10079FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   0000183C   04479FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001840   000090E5           LDR      R0,[R0, #+0]
   \   00001844   ........           BL       cp_a
   \   00001848   F4F9FFEA           B        ??execute_5
   1796          		case 185:    /* CP C */
   1797          		{ cp_a( C() ); local_tstates += ( 4 ); break; }
   \                     ??execute_205:
   \   0000184C   00079FE5           LDR      R0,??execute_123+0x14  ;; _C
   \   00001850   F0469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001854   000090E5           LDR      R0,[R0, #+0]
   \   00001858   ........           BL       cp_a
   \   0000185C   EFF9FFEA           B        ??execute_5
   1798          		case 186:    /* CP D */
   1799          		{ cp_a( D() ); local_tstates += ( 4 ); break; }
   \                     ??execute_206:
   \   00001860   F0069FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001864   DC469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001868   000090E5           LDR      R0,[R0, #+0]
   \   0000186C   4004A0E1           ASR      R0,R0,#+8
   \   00001870   ........           BL       cp_a
   \   00001874   E9F9FFEA           B        ??execute_5
   1800          		case 187:    /* CP E */
   1801          		{ cp_a( E() ); local_tstates += ( 4 ); break; }
   \                     ??execute_207:
   \   00001878   D8069FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   0000187C   C4469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001880   000090E5           LDR      R0,[R0, #+0]
   \   00001884   FF0000E2           AND      R0,R0,#0xFF
   \   00001888   ........           BL       cp_a
   \   0000188C   E3F9FFEA           B        ??execute_5
   1802          		case 188:    /* CP H */
   1803          		{ cp_a( H() ); local_tstates += ( 4 ); break; }
   \                     ??execute_208:
   \   00001890   A8069FE5           LDR      R0,??execute_123  ;; _HL
   \   00001894   AC469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001898   000090E5           LDR      R0,[R0, #+0]
   \   0000189C   4004A0E1           ASR      R0,R0,#+8
   \   000018A0   ........           BL       cp_a
   \   000018A4   DDF9FFEA           B        ??execute_5
   1804          		case 189:    /* CP L */
   1805          		{ cp_a( L() ); local_tstates += ( 4 ); break; }
   \                     ??execute_209:
   \   000018A8   90069FE5           LDR      R0,??execute_123  ;; _HL
   \   000018AC   94469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000018B0   000090E5           LDR      R0,[R0, #+0]
   \   000018B4   FF0000E2           AND      R0,R0,#0xFF
   \   000018B8   ........           BL       cp_a
   \   000018BC   D7F9FFEA           B        ??execute_5
   1806          		case 190:    /* CP (HL) */
   1807          		{ cp_a( peekb( HL() ) ); local_tstates += ( 7 ); break; }
   \                     ??execute_210:
   \   000018C0   78069FE5           LDR      R0,??execute_123  ;; _HL
   \   000018C4   78169FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   000018C8   000090E5           LDR      R0,[R0, #+0]
   \   000018CC   001091E5           LDR      R1,[R1, #+0]
   \   000018D0   70469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000018D4   0100D0E7           LDRB     R0,[R0, +R1]
   \   000018D8   ........           BL       cp_a
   \   000018DC   A5FAFFEA           B        ??execute_15
   1808          		case 191:    /* CP A() */
   1809          		{ cp_a( A() ); local_tstates += ( 4 ); break; }
   \                     ??execute_211:
   \   000018E0   64069FE5           LDR      R0,??execute_123+0xC  ;; _A
   \   000018E4   5C469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000018E8   000090E5           LDR      R0,[R0, #+0]
   \   000018EC   ........           BL       cp_a
   \   000018F0   CAF9FFEA           B        ??execute_5
   1810          
   1811          		/* RET cc */
   1812          		case 192:    /* RET NZ */
   1813          		{
   1814          			if(!Zset()) {
   \                     ??execute_212:
   \   000018F4   AC079FE5           LDR      R0,??execute_139+0x8  ;; fZ
   \   000018F8   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000018FC   000050E3           CMP      R0,#+0
   \   00001900   0400001A           BNE      ??execute_213
   1815          				poppc();
   1816          				local_tstates += ( 11 );
   \   00001904   3C469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001908   ........           _BLF     popw,??popw??rA
   \   0000190C   98179FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   00001910   000081E5           STR      R0,[R1, #+0]
   \   00001914   CDFAFFEA           B        ??execute_25
   1817          			}
   1818          			else {
   1819          				local_tstates += ( 5 );
   \                     ??execute_213:
   \   00001918   28469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000191C   000094E5           LDR      R0,[R4, #+0]
   \   00001920   050080E2           ADD      R0,R0,#+5
   \   00001924   BFF9FFEA           B        ??execute_6
   1820          			}
   1821          			break;
   1822          		}
   1823          		case 200:    /* RET Z */
   1824          		{
   1825          			if(Zset()) {
   \                     ??execute_214:
   \   00001928   78079FE5           LDR      R0,??execute_139+0x8  ;; fZ
   \   0000192C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001930   000050E3           CMP      R0,#+0
   \   00001934   F7FFFF0A           BEQ      ??execute_213
   1826          				poppc();
   1827          				local_tstates += ( 11 );
   \   00001938   08469FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   0000193C   ........           _BLF     popw,??popw??rA
   \   00001940   64179FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   00001944   000081E5           STR      R0,[R1, #+0]
   \   00001948   C0FAFFEA           B        ??execute_25
   1828          			}
   1829          			else {
   1830          				local_tstates += ( 5 );
   1831          			}
   1832          			break;
   1833          		}
   1834          		case 208:    /* RET NC */
   1835          		{
   1836          			if(!Cset()) {
   \                     ??execute_215:
   \   0000194C   5C079FE5           LDR      R0,??execute_139+0x10  ;; fC
   \   00001950   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001954   000050E3           CMP      R0,#+0
   \   00001958   0400001A           BNE      ??execute_216
   1837          				poppc();
   1838          				local_tstates += ( 11 );
   \   0000195C   E4459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001960   ........           _BLF     popw,??popw??rA
   \   00001964   40179FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   00001968   000081E5           STR      R0,[R1, #+0]
   \   0000196C   B7FAFFEA           B        ??execute_25
   1839          			}
   1840          			else {
   1841          				local_tstates += ( 5 );
   \                     ??execute_216:
   \   00001970   D0459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001974   000094E5           LDR      R0,[R4, #+0]
   \   00001978   050080E2           ADD      R0,R0,#+5
   \   0000197C   A9F9FFEA           B        ??execute_6
   1842          			}
   1843          			break;
   1844          		}
   1845          		case 216:    /* RET C */
   1846          		{
   1847          			if(Cset()) {
   \                     ??execute_217:
   \   00001980   28079FE5           LDR      R0,??execute_139+0x10  ;; fC
   \   00001984   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001988   000050E3           CMP      R0,#+0
   \   0000198C   E1FFFF0A           BEQ      ??execute_213
   1848          				poppc();
   1849          				local_tstates += ( 11 );
   \   00001990   B0459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001994   ........           _BLF     popw,??popw??rA
   \   00001998   0C179FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   0000199C   000081E5           STR      R0,[R1, #+0]
   \   000019A0   AAFAFFEA           B        ??execute_25
   1850          			}
   1851          			else {
   1852          				local_tstates += ( 5 );
   1853          			}
   1854          			break;
   1855          		}
   1856          		case 224:    /* RET PO */
   1857          		{
   1858          			if(!PVset()) {
   \                     ??execute_218:
   \   000019A4   08079FE5           LDR      R0,??execute_139+0x14  ;; fPV
   \   000019A8   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000019AC   000050E3           CMP      R0,#+0
   \   000019B0   EEFFFF1A           BNE      ??execute_216
   1859          				poppc();
   1860          				local_tstates += ( 11 );
   \   000019B4   8C459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000019B8   ........           _BLF     popw,??popw??rA
   \   000019BC   E8169FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   000019C0   000081E5           STR      R0,[R1, #+0]
   \   000019C4   A1FAFFEA           B        ??execute_25
   1861          			}
   1862          			else {
   1863          				local_tstates += ( 5 );
   1864          			}
   1865          			break;
   1866          		}
   1867          		case 232:    /* RET PE */
   1868          		{
   1869          			if(PVset()) {
   \                     ??execute_219:
   \   000019C8   E4069FE5           LDR      R0,??execute_139+0x14  ;; fPV
   \   000019CC   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000019D0   000050E3           CMP      R0,#+0
   \   000019D4   CFFFFF0A           BEQ      ??execute_213
   1870          				poppc();
   1871          				local_tstates += ( 11 );
   \   000019D8   68459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   000019DC   ........           _BLF     popw,??popw??rA
   \   000019E0   C4169FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   000019E4   000081E5           STR      R0,[R1, #+0]
   \   000019E8   98FAFFEA           B        ??execute_25
   1872          			}
   1873          			else {
   1874          				local_tstates += ( 5 );
   1875          			}
   1876          			break;
   1877          		}
   1878          		case 240:    /* RET P */
   1879          		{
   1880          			if(!Sset()) {
   \                     ??execute_220:
   \   000019EC   C4069FE5           LDR      R0,??execute_139+0x18  ;; fS
   \   000019F0   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000019F4   000050E3           CMP      R0,#+0
   \   000019F8   0400001A           BNE      ??execute_221
   1881          				poppc();
   1882          				local_tstates += ( 11 );
   \   000019FC   44459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001A00   ........           _BLF     popw,??popw??rA
   \   00001A04   A0169FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   00001A08   000081E5           STR      R0,[R1, #+0]
   \   00001A0C   8FFAFFEA           B        ??execute_25
   1883          			}
   1884          			else {
   1885          				local_tstates += ( 5 );
   \                     ??execute_221:
   \   00001A10   30459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001A14   000094E5           LDR      R0,[R4, #+0]
   \   00001A18   050080E2           ADD      R0,R0,#+5
   \   00001A1C   81F9FFEA           B        ??execute_6
   1886          			}
   1887          			break;
   1888          		}
   1889          		case 248:    /* RET M */
   1890          		{
   1891          			if(Sset()) {
   \                     ??execute_222:
   \   00001A20   90069FE5           LDR      R0,??execute_139+0x18  ;; fS
   \   00001A24   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001A28   000050E3           CMP      R0,#+0
   \   00001A2C   B9FFFF0A           BEQ      ??execute_213
   1892          				poppc();
   1893          				local_tstates += ( 11 );
   \   00001A30   10459FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001A34   ........           _BLF     popw,??popw??rA
   \   00001A38   6C169FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   00001A3C   000081E5           STR      R0,[R1, #+0]
   \   00001A40   82FAFFEA           B        ??execute_25
   1894          			}
   1895          			else {
   1896          				local_tstates += ( 5 );
   1897          			}
   1898          			break;
   1899          		}
   1900          
   1901          		/* POP,Various */
   1902          		case 193:    /* POP BC */
   1903          		{ xBC( popw() ); local_tstates += ( 10 ); break; }
   \                     ??execute_223:
   \   00001A44   FC449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001A48   ........           _BLF     popw,??popw??rA
   \   00001A4C   FC149FE5           LDR      R1,??execute_123+0x10  ;; _B
   \   00001A50   4024A0E1           ASR      R2,R0,#+8
   \   00001A54   002081E5           STR      R2,[R1, #+0]
   \   00001A58   F4149FE5           LDR      R1,??execute_123+0x14  ;; _C
   \   00001A5C   FF0000E2           AND      R0,R0,#0xFF
   \   00001A60   000081E5           STR      R0,[R1, #+0]
   \   00001A64   6CFAFFEA           B        ??execute_21
   1904          		case 201: /* RET */
   1905          		{ poppc(); local_tstates += ( 10 ); break; }
   \                     ??execute_224:
   \   00001A68   D8449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001A6C   ........           _BLF     popw,??popw??rA
   \   00001A70   34169FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   00001A74   000081E5           STR      R0,[R1, #+0]
   \                     ??execute_225:
   \   00001A78   000094E5           LDR      R0,[R4, #+0]
   \   00001A7C   0A0080E2           ADD      R0,R0,#+10
   \   00001A80   68F9FFEA           B        ??execute_6
   1906          		case 209:    /* POP DE */
   1907          		{ xDE( popw() ); local_tstates += ( 10 ); break; }
   \                     ??execute_226:
   \   00001A84   BC449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001A88   ........           _BLF     popw,??popw??rA
   \   00001A8C   C4149FE5           LDR      R1,??execute_123+0x18  ;; _DE
   \   00001A90   000081E5           STR      R0,[R1, #+0]
   \   00001A94   60FAFFEA           B        ??execute_21
   1908          		case 217:    /* EXX */
   1909          		{
   1910          			exx();
   1911          			local_tstates += ( 4 );
   \                     ??execute_227:
   \   00001A98   A8449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001A9C   ........           BL       exx
   \   00001AA0   5EF9FFEA           B        ??execute_5
   1912          			break;
   1913          		}
   1914          		case 225:    /* POP HL */
   1915          		{ xHL( popw() ); local_tstates += ( 10 ); break; }
   \                     ??execute_228:
   \   00001AA4   9C449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001AA8   ........           _BLF     popw,??popw??rA
   \   00001AAC   8C149FE5           LDR      R1,??execute_123  ;; _HL
   \   00001AB0   000081E5           STR      R0,[R1, #+0]
   \   00001AB4   58FAFFEA           B        ??execute_21
   1916          		case 233: /* JP (HL) */
   1917          		{ xPC( HL() ); local_tstates += ( 4 ); break; }
   \                     ??execute_229:
   \   00001AB8   80149FE5           LDR      R1,??execute_123  ;; _HL
   \   00001ABC   E8059FE5           LDR      R0,??execute_139+0xC  ;; _PC
   \   00001AC0   001091E5           LDR      R1,[R1, #+0]
   \   00001AC4   7C449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001AC8   001080E5           STR      R1,[R0, #+0]
   \   00001ACC   53F9FFEA           B        ??execute_5
   1918          		case 241:    /* POP AF */
   1919          		{ xAF( popw() ); local_tstates += ( 10 ); break; }
   \                     ??execute_230:
   \   00001AD0   70449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001AD4   ........           _BLF     popw,??popw??rA
   \   00001AD8   6C149FE5           LDR      R1,??execute_123+0xC  ;; _A
   \   00001ADC   4024A0E1           ASR      R2,R0,#+8
   \   00001AE0   002081E5           STR      R2,[R1, #+0]
   \   00001AE4   FF0000E2           AND      R0,R0,#0xFF
   \   00001AE8   ........           BL       xF
   \   00001AEC   4AFAFFEA           B        ??execute_21
   1920          		case 249:    /* LD SP,HL */
   1921          		{ xSP( HL() ); local_tstates += ( 6 ); break; }
   \                     ??execute_231:
   \   00001AF0   48149FE5           LDR      R1,??execute_123  ;; _HL
   \   00001AF4   C0059FE5           LDR      R0,??execute_139+0x1C  ;; _SP
   \   00001AF8   001091E5           LDR      R1,[R1, #+0]
   \   00001AFC   44449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001B00   001080E5           STR      R1,[R0, #+0]
   \   00001B04   D9FAFFEA           B        ??execute_47
   1922          
   1923          		/* JP cc,nn */
   1924          		case 194:    /* JP NZ,nn */
   1925          		{
   1926          			if(!Zset()) {
   \                     ??execute_232:
   \   00001B08   98059FE5           LDR      R0,??execute_139+0x8  ;; fZ
   \   00001B0C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001B10   000050E3           CMP      R0,#+0
   \   00001B14   0300001A           BNE      ??execute_233
   1927          				xPC( nxtpcw() );
   \                     ??execute_234:
   \   00001B18   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00001B1C   88159FE5           LDR      R1,??execute_139+0xC  ;; _PC
   \   00001B20   000081E5           STR      R0,[R1, #+0]
   \   00001B24   040000EA           B        ??execute_235
   1928          			}
   1929          			else {
   1930          				xPC( (PC()+2)&0xffff );
   \                     ??execute_233:
   \   00001B28   000094E5           LDR      R0,[R4, #+0]
   \   00001B2C   020080E2           ADD      R0,R0,#+2
   \   00001B30   0008A0E1           LSL      R0,R0,#+16
   \   00001B34   2008A0E1           LSR      R0,R0,#+16
   \   00001B38   000084E5           STR      R0,[R4, #+0]
   1931          			}
   1932          			local_tstates += ( 10 );
   \                     ??execute_235:
   \   00001B3C   04449FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001B40   35FAFFEA           B        ??execute_21
   1933          			break;
   1934          		}
   1935          		case 202:    /* JP Z,nn */
   1936          		{
   1937          			if( Zset()) {
   \                     ??execute_236:
   \   00001B44   5C059FE5           LDR      R0,??execute_139+0x8  ;; fZ
   \                     ??execute_237:
   \   00001B48   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001B4C   000050E3           CMP      R0,#+0
   \   00001B50   F4FFFF0A           BEQ      ??execute_233
   1938          				xPC( nxtpcw() );
   \   00001B54   EFFFFFEA           B        ??execute_234
   1939          			}
   1940          			else {
   1941          				xPC( (PC()+2)&0xffff );
   1942          			}
   1943          			local_tstates += ( 10 );
   1944          			break;
   1945          		}
   1946          		case 210:    /* JP NC,nn */
   1947          		{
   1948          			if(!Cset()) {
   \                     ??execute_238:
   \   00001B58   50059FE5           LDR      R0,??execute_139+0x10  ;; fC
   \                     ??execute_239:
   \   00001B5C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001B60   000050E3           CMP      R0,#+0
   \   00001B64   EFFFFF1A           BNE      ??execute_233
   1949          				xPC( nxtpcw() );
   \   00001B68   EAFFFFEA           B        ??execute_234
   1950          			}
   1951          			else {
   1952          				xPC( (PC()+2)&0xffff );
   1953          			}
   1954          			local_tstates += ( 10 );
   1955          			break;
   1956          		}
   1957          		case 218:    /* JP C,nn */
   1958          		{
   1959          			if( Cset()) {
   \                     ??execute_240:
   \   00001B6C   3C059FE5           LDR      R0,??execute_139+0x10  ;; fC
   \   00001B70   F4FFFFEA           B        ??execute_237
   1960          				xPC( nxtpcw() );
   1961          			}
   1962          			else {
   1963          				xPC( (PC()+2)&0xffff );
   1964          			}
   1965          			local_tstates += ( 10 );
   1966          			break;
   1967          		}
   1968          		case 226:    /* JP PO,nn */
   1969          		{
   1970          			if(!PVset()) {
   \                     ??execute_241:
   \   00001B74   38059FE5           LDR      R0,??execute_139+0x14  ;; fPV
   \   00001B78   F7FFFFEA           B        ??execute_239
   1971          				xPC( nxtpcw() );
   1972          			}
   1973          			else {
   1974          				xPC( (PC()+2)&0xffff );
   1975          			}
   1976          			local_tstates += ( 10 );
   1977          			break;
   1978          		}
   1979          		case 234:    /* JP PE,nn */
   1980          		{
   1981          			if( PVset()) {
   \                     ??execute_242:
   \   00001B7C   30059FE5           LDR      R0,??execute_139+0x14  ;; fPV
   \   00001B80   F0FFFFEA           B        ??execute_237
   1982          				xPC( nxtpcw() );
   1983          			}
   1984          			else {
   1985          				xPC( (PC()+2)&0xffff );
   1986          			}
   1987          			local_tstates += ( 10 );
   1988          			break;
   1989          		}
   1990          		case 242:    /* JP P,nn */
   1991          		{
   1992          			if(!Sset()) {
   \                     ??execute_243:
   \   00001B84   2C059FE5           LDR      R0,??execute_139+0x18  ;; fS
   \   00001B88   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001B8C   000050E3           CMP      R0,#+0
   \   00001B90   E4FFFF1A           BNE      ??execute_233
   1993          				xPC( nxtpcw() );
   \   00001B94   DFFFFFEA           B        ??execute_234
   1994          			}
   1995          			else {
   1996          				xPC( (PC()+2)&0xffff );
   1997          			}
   1998          			local_tstates += ( 10 );
   1999          			break;
   2000          		}
   2001          		case 250:    /* JP M,nn */
   2002          		{
   2003          			if( Sset()) {
   \                     ??execute_244:
   \   00001B98   18059FE5           LDR      R0,??execute_139+0x18  ;; fS
   \   00001B9C   E9FFFFEA           B        ??execute_237
   2004          				xPC( nxtpcw() );
   2005          			}
   2006          			else {
   2007          				xPC( (PC()+2)&0xffff );
   2008          			}
   2009          			local_tstates += ( 10 );
   2010          			break;
   2011          		}
   2012          
   2013          
   2014          		/* Various */
   2015          		case 195:    /* JP nn */
   2016          		{ xPC( peekw( PC() ) ); local_tstates += ( 10 ); break; }
   \                     ??execute_245:
   \   00001BA0   9C139FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001BA4   000094E5           LDR      R0,[R4, #+0]
   \   00001BA8   002091E5           LDR      R2,[R1, #+0]
   \   00001BAC   0210D0E7           LDRB     R1,[R0, +R2]
   \   00001BB0   010080E2           ADD      R0,R0,#+1
   \   00001BB4   0008A0E1           LSL      R0,R0,#+16
   \   00001BB8   2008D2E7           LDRB     R0,[R2, +R0, LSR #+16]
   \   00001BBC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00001BC0   000084E5           STR      R0,[R4, #+0]
   \   00001BC4   7C439FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001BC8   AAFFFFEA           B        ??execute_225
   2017          		case 203:    /* prefix CB */
   2018          		{ local_tstates += execute_cb(); break; }
   \                     ??execute_246:
   \   00001BCC   74439FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001BD0   ........           BL       execute_cb
   \                     ??execute_247:
   \   00001BD4   001094E5           LDR      R1,[R4, #+0]
   \   00001BD8   010080E0           ADD      R0,R0,R1
   \   00001BDC   11F9FFEA           B        ??execute_6
   2019          		case 211:    /* OUT (n),A */
   2020          		{
   2021          			outb( nxtpcb(), A(), local_tstates );
   \                     ??execute_248:
   \   00001BE0   5C339FE5           LDR      R3,??execute_123+0x4  ;; mem
   \   00001BE4   000094E5           LDR      R0,[R4, #+0]
   \   00001BE8   003093E5           LDR      R3,[R3, #+0]
   \   00001BEC   011080E2           ADD      R1,R0,#+1
   \   00001BF0   001084E5           STR      R1,[R4, #+0]
   \   00001BF4   4C439FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001BF8   4C139FE5           LDR      R1,??execute_123+0xC  ;; _A
   \   00001BFC   0300D0E7           LDRB     R0,[R0, +R3]
   \   00001C00   002094E5           LDR      R2,[R4, #+0]
   \   00001C04   001091E5           LDR      R1,[R1, #+0]
   \   00001C08   ........           BL       outb
   2022          			local_tstates += ( 11 );
   \   00001C0C   0FFAFFEA           B        ??execute_25
   2023          			break;
   2024          		}
   2025          		case 219:    /* IN A,(n) */
   2026          		{
   2027          			xA( inb((A() << 8) | nxtpcb()) );
   \                     ??execute_249:
   \   00001C10   2C239FE5           LDR      R2,??execute_123+0x4  ;; mem
   \   00001C14   000094E5           LDR      R0,[R4, #+0]
   \   00001C18   002092E5           LDR      R2,[R2, #+0]
   \   00001C1C   011080E2           ADD      R1,R0,#+1
   \   00001C20   001084E5           STR      R1,[R4, #+0]
   \   00001C24   20439FE5           LDR      R4,??execute_123+0xC  ;; _A
   \   00001C28   0200D0E7           LDRB     R0,[R0, +R2]
   \   00001C2C   001094E5           LDR      R1,[R4, #+0]
   \   00001C30   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00001C34   ........           BL       inb
   \   00001C38   1AFAFFEA           B        ??execute_30
   2028          			local_tstates += ( 11 );
   2029          			break;
   2030          		}
   2031          		case 227:    /* EX (SP),HL */
   2032          		{
   2033          			t = HL();
   2034          			sp = SP();
   \                     ??execute_250:
   \   00001C3C   78049FE5           LDR      R0,??execute_139+0x1C  ;; _SP
   \   00001C40   78149FE5           LDR      R1,??execute_139+0x20  ;; `sp`
   \   00001C44   000090E5           LDR      R0,[R0, #+0]
   \   00001C48   F0429FE5           LDR      R4,??execute_123  ;; _HL
   \   00001C4C   70649FE5           LDR      R6,??execute_139+0x24  ;; t
   \   00001C50   005094E5           LDR      R5,[R4, #+0]
   \   00001C54   000081E5           STR      R0,[R1, #+0]
   \   00001C58   011080E2           ADD      R1,R0,#+1
   \   00001C5C   0118A0E1           LSL      R1,R1,#+16
   \   00001C60   2138A0E1           LSR      R3,R1,#+16
   \   00001C64   D8129FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001C68   005086E5           STR      R5,[R6, #+0]
   \   00001C6C   002091E5           LDR      R2,[R1, #+0]
   \   00001C70   026080E0           ADD      R6,R0,R2
   \   00001C74   00C0D6E5           LDRB     R12,[R6, #+0]
   \   00001C78   0220D3E7           LDRB     R2,[R3, +R2]
   \   00001C7C   02248CE1           ORR      R2,R12,R2, LSL #+8
   \   00001C80   002084E5           STR      R2,[R4, #+0]
   2035          			xHL( peekw( sp ) );
   2036          			pokew( sp, t );
   2037          			local_tstates += ( 19 );
   \   00001C84   BC429FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001C88   0050C6E5           STRB     R5,[R6, #+0]
   \   00001C8C   001091E5           LDR      R1,[R1, #+0]
   \   00001C90   4524A0E1           ASR      R2,R5,#+8
   \   00001C94   0120C3E7           STRB     R2,[R3, +R1]
   \   00001C98   001094E5           LDR      R1,[R4, #+0]
   \   00001C9C   131081E2           ADD      R1,R1,#+19
   \   00001CA0   001084E5           STR      R1,[R4, #+0]
   2038          			break;
   \   00001CA4   E0F8FFEA           B        ??execute_3
   2039          		}
   2040          		case 235:    /* EX DE,HL */
   2041          		{
   2042          			t = HL();
   \                     ??execute_251:
   \   00001CA8   90429FE5           LDR      R4,??execute_123  ;; _HL
   \   00001CAC   10649FE5           LDR      R6,??execute_139+0x24  ;; t
   \   00001CB0   005094E5           LDR      R5,[R4, #+0]
   \   00001CB4   005086E5           STR      R5,[R6, #+0]
   2043          			xHL( DE() );
   \   00001CB8   98629FE5           LDR      R6,??execute_123+0x18  ;; _DE
   \   00001CBC   000096E5           LDR      R0,[R6, #+0]
   2044          			xDE( t );
   \   00001CC0   005086E5           STR      R5,[R6, #+0]
   \   00001CC4   000084E5           STR      R0,[R4, #+0]
   2045          			local_tstates += ( 4 );
   \   00001CC8   78429FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001CCC   D3F8FFEA           B        ??execute_5
   2046          			break;
   2047          		}
   2048          		case 243:    /* DI */
   2049          		{
   2050          			xIFF1( false );
   \                     ??execute_252:
   \   00001CD0   F0139FE5           LDR      R1,??execute_139+0x28  ;; _IFF1
   2051          			xIFF2( false );
   2052          			local_tstates += ( 4 );
   \   00001CD4   6C429FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001CD8   0000A0E3           MOV      R0,#+0
   \   00001CDC   0000C1E5           STRB     R0,[R1, #+0]
   \   00001CE0   E4139FE5           LDR      R1,??execute_139+0x2C  ;; _IFF2
   \   00001CE4   0000C1E5           STRB     R0,[R1, #+0]
   \   00001CE8   CCF8FFEA           B        ??execute_5
   2053          			break;
   2054          		}
   2055          		case 251:    /* EI */
   2056          		{
   2057          			xIFF1( true );
   \                     ??execute_253:
   \   00001CEC   D4139FE5           LDR      R1,??execute_139+0x28  ;; _IFF1
   2058          			xIFF2( true );
   2059          			local_tstates += ( 4 ); 
   \   00001CF0   50429FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001CF4   0100A0E3           MOV      R0,#+1
   \   00001CF8   0000C1E5           STRB     R0,[R1, #+0]
   \   00001CFC   C8139FE5           LDR      R1,??execute_139+0x2C  ;; _IFF2
   \   00001D00   0000C1E5           STRB     R0,[R1, #+0]
   \   00001D04   C5F8FFEA           B        ??execute_5
   2060          			break;
   2061          		}
   2062          
   2063          		/* CALL cc,nn */
   2064          		case 196: /* CALL NZ,nn */
   2065          		{
   2066          			if( !Zset() ) {
   \                     ??execute_254:
   \   00001D08   98039FE5           LDR      R0,??execute_139+0x8  ;; fZ
   \   00001D0C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001D10   000050E3           CMP      R0,#+0
   \   00001D14   0E00001A           BNE      ??execute_255
   2067          				 t = nxtpcw();
   \                     ??execute_256:
   \   00001D18   A4639FE5           LDR      R6,??execute_139+0x24  ;; t
   \   00001D1C   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00001D20   000086E5           STR      R0,[R6, #+0]
   2068          				pushpc();
   \   00001D24   000094E5           LDR      R0,[R4, #+0]
   \   00001D28   ........           _BLF     pushw,??pushw??rA
   2069          				xPC( t );
   \   00001D2C   000096E5           LDR      R0,[R6, #+0]
   \   00001D30   000084E5           STR      R0,[R4, #+0]
   2070          				local_tstates += ( 17 );
   \   00001D34   0C429FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001D38   000094E5           LDR      R0,[R4, #+0]
   \   00001D3C   110080E2           ADD      R0,R0,#+17
   \   00001D40   B8F8FFEA           B        ??execute_6
   2071          			}
   2072          			else {
   2073          				xPC( (PC() + 2)&0xffff );
   2074          				local_tstates += ( 10 );
   2075          			}
   2076          			break;
   2077          		}
   2078          		case 204: /* CALL Z,nn */
   2079          		{
   2080          			if( Zset() ) {
   \                     ??execute_257:
   \   00001D44   5C039FE5           LDR      R0,??execute_139+0x8  ;; fZ
   \   00001D48   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001D4C   000050E3           CMP      R0,#+0
   \   00001D50   F0FFFF1A           BNE      ??execute_256
   2081          				 t = nxtpcw();
   2082          				pushpc();
   2083          				xPC( t );
   2084          				local_tstates += ( 17 );
   2085          			}
   2086          			else {
   2087          				xPC( (PC() + 2)&0xffff );
   2088          				local_tstates += ( 10 );
   2089          			}
   2090          			break;
   2091          		}
   \                     ??execute_255:
   \   00001D54   000094E5           LDR      R0,[R4, #+0]
   \   00001D58   020080E2           ADD      R0,R0,#+2
   \   00001D5C   0008A0E1           LSL      R0,R0,#+16
   \   00001D60   2008A0E1           LSR      R0,R0,#+16
   \   00001D64   000084E5           STR      R0,[R4, #+0]
   \   00001D68   D8419FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001D6C   AAF9FFEA           B        ??execute_21
   2092          		case 212: /* CALL NC,nn */
   2093          		{
   2094          			if( !Cset() ) {
   \                     ??execute_258:
   \   00001D70   38039FE5           LDR      R0,??execute_139+0x10  ;; fC
   \                     ??execute_259:
   \   00001D74   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001D78   000050E3           CMP      R0,#+0
   \   00001D7C   F4FFFF1A           BNE      ??execute_255
   \   00001D80   E4FFFFEA           B        ??execute_256
   2095          				 t = nxtpcw();
   2096          				pushpc();
   2097          				xPC( t );
   2098          				local_tstates += ( 17 );
   2099          			}
   2100          			else {
   2101          				xPC( (PC() + 2)&0xffff );
   2102          				local_tstates += ( 10 );
   2103          			}
   2104          			break;
   2105          		}
   2106          		case 220: /* CALL C,nn */
   2107          		{
   2108          			if( Cset() ) {
   \                     ??execute_260:
   \   00001D84   24039FE5           LDR      R0,??execute_139+0x10  ;; fC
   \                     ??execute_261:
   \   00001D88   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00001D8C   000050E3           CMP      R0,#+0
   \   00001D90   E0FFFF1A           BNE      ??execute_256
   \   00001D94   EEFFFFEA           B        ??execute_255
   2109          				 t = nxtpcw();
   2110          				pushpc();
   2111          				xPC( t );
   2112          				local_tstates += ( 17 );
   2113          			}
   2114          			else {
   2115          				xPC( (PC() + 2)&0xffff );
   2116          				local_tstates += ( 10 );
   2117          			}
   2118          			break;
   2119          		}
   2120          		case 228: /* CALL PO,nn */
   2121          		{
   2122          			if( !PVset() ) {
   \                     ??execute_262:
   \   00001D98   14039FE5           LDR      R0,??execute_139+0x14  ;; fPV
   \   00001D9C   F4FFFFEA           B        ??execute_259
   2123          				 t = nxtpcw();
   2124          				pushpc();
   2125          				xPC( t );
   2126          				local_tstates += ( 17 );
   2127          			}
   2128          			else {
   2129          				xPC( (PC() + 2)&0xffff );
   2130          				local_tstates += ( 10 );
   2131          			}
   2132          			break;
   2133          		}
   2134          		case 236: /* CALL PE,nn */
   2135          		{
   2136          			if( PVset() ) {
   \                     ??execute_263:
   \   00001DA0   0C039FE5           LDR      R0,??execute_139+0x14  ;; fPV
   \   00001DA4   F7FFFFEA           B        ??execute_261
   2137          				 t = nxtpcw();
   2138          				pushpc();
   2139          				xPC( t );
   2140          				local_tstates += ( 17 );
   2141          			}
   2142          			else {
   2143          				xPC( (PC() + 2)&0xffff );
   2144          				local_tstates += ( 10 );
   2145          			}
   2146          			break;
   2147          		}
   2148          		case 244: /* CALL P,nn */
   2149          		{
   2150          			if( !Sset() ) {
   \                     ??execute_264:
   \   00001DA8   08039FE5           LDR      R0,??execute_139+0x18  ;; fS
   \   00001DAC   F0FFFFEA           B        ??execute_259
   2151          				 t = nxtpcw();
   2152          				pushpc();
   2153          				xPC( t );
   2154          				local_tstates += ( 17 );
   2155          			}
   2156          			else {
   2157          				xPC( (PC() + 2)&0xffff );
   2158          				local_tstates += ( 10 );
   2159          			}
   2160          			break;
   2161          		}
   2162          		case 252: /* CALL M,nn */
   2163          		{
   2164          			if( Sset() ) {
   \                     ??execute_265:
   \   00001DB0   00039FE5           LDR      R0,??execute_139+0x18  ;; fS
   \   00001DB4   F3FFFFEA           B        ??execute_261
   2165          				 t = nxtpcw();
   2166          				pushpc();
   2167          				xPC( t );
   2168          				local_tstates += ( 17 );
   2169          			}
   2170          			else {
   2171          				xPC( (PC() + 2)&0xffff );
   2172          				local_tstates += ( 10 );
   2173          			}
   2174          			break;
   2175          		}
   2176          
   2177          		/* PUSH y otros de ese tipo */
   2178          		case 197:    /* PUSH BC */
   2179          		{ pushw( BC() ); local_tstates += ( 11 ); break; }
   \                     ??execute_266:
   \   00001DB8   90019FE5           LDR      R0,??execute_123+0x10  ;; _B
   \   00001DBC   90119FE5           LDR      R1,??execute_123+0x14  ;; _C
   \   00001DC0   000090E5           LDR      R0,[R0, #+0]
   \   00001DC4   001091E5           LDR      R1,[R1, #+0]
   \   00001DC8   78419FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001DCC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00001DD0   ........           _BLF     pushw,??pushw??rA
   \   00001DD4   9DF9FFEA           B        ??execute_25
   2180          		case 205:    /* CALL nn */
   2181          		{
   2182          			 t = nxtpcw();
   2183          			pushpc();
   2184          			xPC( t );
   2185          			local_tstates += ( 17 );
   2186          			break;
   2187          		}
   2188          		case 213:    /* PUSH DE */
   2189          		{ pushw( DE() ); local_tstates += ( 11 ); break; }
   \                     ??execute_267:
   \   00001DD8   78019FE5           LDR      R0,??execute_123+0x18  ;; _DE
   \   00001DDC   64419FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001DE0   000090E5           LDR      R0,[R0, #+0]
   \   00001DE4   ........           _BLF     pushw,??pushw??rA
   \   00001DE8   B0F9FFEA           B        ??execute_31
   2190          		case 221:    /* prefix IX */
   2191          		{
   2192          			xID( IX() );
   \                     ??execute_268:
   \   00001DEC   DC629FE5           LDR      R6,??execute_139+0x30  ;; _IX
   \   00001DF0   DC529FE5           LDR      R5,??execute_139+0x34  ;; _ID
   \                     ??execute_269:
   \   00001DF4   000096E5           LDR      R0,[R6, #+0]
   2193          			local_tstates += execute_id();
   \   00001DF8   48419FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001DFC   000085E5           STR      R0,[R5, #+0]
   \   00001E00   ........           BL       execute_id
   \   00001E04   001094E5           LDR      R1,[R4, #+0]
   \   00001E08   010080E0           ADD      R0,R0,R1
   \   00001E0C   000084E5           STR      R0,[R4, #+0]
   2194          			xIX( ID() );
   \   00001E10   000095E5           LDR      R0,[R5, #+0]
   \   00001E14   000086E5           STR      R0,[R6, #+0]
   2195          			break;
   \   00001E18   83F8FFEA           B        ??execute_3
   2196          		}
   2197          		case 229:    /* PUSH HL */
   2198          		{ pushw( HL() ); local_tstates += ( 11 ); break; }
   \                     ??execute_270:
   \   00001E1C   1C019FE5           LDR      R0,??execute_123  ;; _HL
   \   00001E20   20419FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001E24   000090E5           LDR      R0,[R0, #+0]
   \   00001E28   ........           _BLF     pushw,??pushw??rA
   \   00001E2C   87F9FFEA           B        ??execute_25
   2199          		case 237:    /* prefix ED */
   2200          		{ local_tstates += execute_ed( local_tstates ); break; }
   \                     ??execute_271:
   \   00001E30   10419FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001E34   000094E5           LDR      R0,[R4, #+0]
   \   00001E38   ........           BL       execute_ed
   \   00001E3C   64FFFFEA           B        ??execute_247
   2201          		case 245:    /* PUSH AF */
   2202          		{ pushw( AF() ); local_tstates += ( 11 ); break; }
   \                     ??execute_272:
   \   00001E40   00419FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001E44   ........           BL       F
   \   00001E48   FC109FE5           LDR      R1,??execute_123+0xC  ;; _A
   \   00001E4C   001091E5           LDR      R1,[R1, #+0]
   \   00001E50   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00001E54   ........           _BLF     pushw,??pushw??rA
   \   00001E58   7CF9FFEA           B        ??execute_25
   2203          		case 253:    /* prefix IY */
   2204          		{
   2205          			xID( IY() );
   \                     ??execute_273:
   \   00001E5C   70529FE5           LDR      R5,??execute_139+0x34  ;; _ID
   \   00001E60   70629FE5           LDR      R6,??execute_139+0x38  ;; _IY
   \   00001E64   E2FFFFEA           B        ??execute_269
   2206          			local_tstates += execute_id();
   2207          			xIY( ID() );
   2208          			break;
   2209          		}
   2210          
   2211          		/* op A,N */
   2212          		case 198: /* ADD A,N */
   2213          		{ add_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_274:
   \   00001E68   000094E5           LDR      R0,[R4, #+0]
   \   00001E6C   011080E2           ADD      R1,R0,#+1
   \   00001E70   001084E5           STR      R1,[R4, #+0]
   \   00001E74   C8109FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001E78   C8409FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001E7C   001091E5           LDR      R1,[R1, #+0]
   \   00001E80   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001E84   ........           BL       add_a
   \   00001E88   3AF9FFEA           B        ??execute_15
   2214          		case 206: /* ADC A,N */
   2215          		{ adc_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_275:
   \   00001E8C   000094E5           LDR      R0,[R4, #+0]
   \   00001E90   011080E2           ADD      R1,R0,#+1
   \   00001E94   001084E5           STR      R1,[R4, #+0]
   \   00001E98   A4109FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001E9C   A4409FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001EA0   001091E5           LDR      R1,[R1, #+0]
   \   00001EA4   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001EA8   ........           BL       adc_a
   \   00001EAC   A1F9FFEA           B        ??execute_37
   2216          		case 214: /* SUB N */
   2217          		{ sub_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_276:
   \   00001EB0   000094E5           LDR      R0,[R4, #+0]
   \   00001EB4   011080E2           ADD      R1,R0,#+1
   \   00001EB8   001084E5           STR      R1,[R4, #+0]
   \   00001EBC   80109FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001EC0   80409FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001EC4   001091E5           LDR      R1,[R1, #+0]
   \   00001EC8   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001ECC   ........           BL       sub_a
   \   00001ED0   28F9FFEA           B        ??execute_15
   2218          		case 222: /* SBC A,N */
   2219          		{ sbc_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_277:
   \   00001ED4   000094E5           LDR      R0,[R4, #+0]
   \   00001ED8   011080E2           ADD      R1,R0,#+1
   \   00001EDC   001084E5           STR      R1,[R4, #+0]
   \   00001EE0   5C109FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001EE4   5C409FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001EE8   001091E5           LDR      R1,[R1, #+0]
   \   00001EEC   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001EF0   ........           BL       sbc_a
   \   00001EF4   C9FAFFEA           B        ??execute_76
   2220          		case 230: /* AND N */
   2221          		{ and_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_278:
   \   00001EF8   000094E5           LDR      R0,[R4, #+0]
   \   00001EFC   011080E2           ADD      R1,R0,#+1
   \   00001F00   001084E5           STR      R1,[R4, #+0]
   \   00001F04   38109FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001F08   38409FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001F0C   001091E5           LDR      R1,[R1, #+0]
   \   00001F10   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001F14   ........           BL       and_a
   \   00001F18   16F9FFEA           B        ??execute_15
   2222          		case 238: /* XOR N */
   2223          		{ xor_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_279:
   \   00001F1C   000094E5           LDR      R0,[R4, #+0]
   \   00001F20   011080E2           ADD      R1,R0,#+1
   \   00001F24   001084E5           STR      R1,[R4, #+0]
   \   00001F28   14109FE5           LDR      R1,??execute_123+0x4  ;; mem
   \   00001F2C   14409FE5           LDR      R4,??execute_123+0x8  ;; local_tstates
   \   00001F30   001091E5           LDR      R1,[R1, #+0]
   \   00001F34   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001F38   ........           BL       xor_a
   \   00001F3C   7DF9FFEA           B        ??execute_37
   \                     ??execute_123:
   \   00001F40   ........           DC32     _HL
   \   00001F44   ........           DC32     mem
   \   00001F48   ........           DC32     local_tstates
   \   00001F4C   ........           DC32     _A
   \   00001F50   ........           DC32     _B
   \   00001F54   ........           DC32     _C
   \   00001F58   ........           DC32     _DE
   2224          		case 246: /* OR N */
   2225          		{ or_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_280:
   \   00001F5C   000094E5           LDR      R0,[R4, #+0]
   \   00001F60   011080E2           ADD      R1,R0,#+1
   \   00001F64   001084E5           STR      R1,[R4, #+0]
   \   00001F68   6C119FE5           LDR      R1,??execute_139+0x3C  ;; mem
   \   00001F6C   6C419FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00001F70   001091E5           LDR      R1,[R1, #+0]
   \   00001F74   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001F78   ........           BL       or_a
   \   00001F7C   FDF8FFEA           B        ??execute_15
   2226          		case 254: /* CP N */
   2227          		{ cp_a(nxtpcb()); local_tstates += ( 7 ); break; }
   \                     ??execute_281:
   \   00001F80   000094E5           LDR      R0,[R4, #+0]
   \   00001F84   011080E2           ADD      R1,R0,#+1
   \   00001F88   001084E5           STR      R1,[R4, #+0]
   \   00001F8C   48119FE5           LDR      R1,??execute_139+0x3C  ;; mem
   \   00001F90   48419FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00001F94   001091E5           LDR      R1,[R1, #+0]
   \   00001F98   0100D0E7           LDRB     R0,[R0, +R1]
   \   00001F9C   ........           BL       cp_a
   \   00001FA0   000094E5           LDR      R0,[R4, #+0]
   \   00001FA4   070080E2           ADD      R0,R0,#+7
   \   00001FA8   1EF8FFEA           B        ??execute_6
   2228          
   2229          		/* RST n */
   2230          		case 199:    /* RST 0 */
   2231          		{ pushpc(); xPC( 0 ); local_tstates += ( 11 ); break; }
   \                     ??execute_282:
   \   00001FAC   000094E5           LDR      R0,[R4, #+0]
   \   00001FB0   ........           _BLF     pushw,??pushw??rA
   \   00001FB4   0000A0E3           MOV      R0,#+0
   \   00001FB8   000084E5           STR      R0,[R4, #+0]
   \   00001FBC   1C419FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00001FC0   22F9FFEA           B        ??execute_25
   2232          		case 207:    /* RST 8 */
   2233          		{ pushpc(); xPC( 8 ); local_tstates += ( 11 ); break; }
   \                     ??execute_283:
   \   00001FC4   000094E5           LDR      R0,[R4, #+0]
   \   00001FC8   ........           _BLF     pushw,??pushw??rA
   \   00001FCC   0800A0E3           MOV      R0,#+8
   \   00001FD0   000084E5           STR      R0,[R4, #+0]
   \   00001FD4   04419FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00001FD8   34F9FFEA           B        ??execute_31
   2234          		case 215:    /* RST 16 */
   2235          		{ pushpc(); xPC( 16 ); local_tstates += ( 11 ); break; }
   \                     ??execute_284:
   \   00001FDC   000094E5           LDR      R0,[R4, #+0]
   \   00001FE0   ........           _BLF     pushw,??pushw??rA
   \   00001FE4   1000A0E3           MOV      R0,#+16
   \   00001FE8   000084E5           STR      R0,[R4, #+0]
   \   00001FEC   EC409FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00001FF0   16F9FFEA           B        ??execute_25
   2236          		case 223:    /* RST 24 */
   2237          		{ pushpc(); xPC( 24 ); local_tstates += ( 11 ); break; }
   \                     ??execute_285:
   \   00001FF4   000094E5           LDR      R0,[R4, #+0]
   \   00001FF8   ........           _BLF     pushw,??pushw??rA
   \   00001FFC   1800A0E3           MOV      R0,#+24
   \                     ??execute_286:
   \   00002000   000084E5           STR      R0,[R4, #+0]
   \   00002004   D4409FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00002008   000094E5           LDR      R0,[R4, #+0]
   \   0000200C   0B0080E2           ADD      R0,R0,#+11
   \   00002010   04F8FFEA           B        ??execute_6
   2238          		case 231:    /* RST 32 */
   2239          		{ pushpc(); xPC( 32 ); local_tstates += ( 11 ); break; }
   \                     ??execute_287:
   \   00002014   000094E5           LDR      R0,[R4, #+0]
   \   00002018   ........           _BLF     pushw,??pushw??rA
   \   0000201C   2000A0E3           MOV      R0,#+32
   \   00002020   000084E5           STR      R0,[R4, #+0]
   \   00002024   B4409FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00002028   08F9FFEA           B        ??execute_25
   2240          		case 239:    /* RST 40 */
   2241          		{ pushpc(); xPC( 40 ); local_tstates += ( 11 ); break; }
   \                     ??execute_288:
   \   0000202C   000094E5           LDR      R0,[R4, #+0]
   \   00002030   ........           _BLF     pushw,??pushw??rA
   \   00002034   2800A0E3           MOV      R0,#+40
   \   00002038   000084E5           STR      R0,[R4, #+0]
   \   0000203C   9C409FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00002040   1AF9FFEA           B        ??execute_31
   2242          		case 247:    /* RST 48 */
   2243          		{ pushpc(); xPC( 48 ); local_tstates += ( 11 ); break; }
   \                     ??execute_289:
   \   00002044   000094E5           LDR      R0,[R4, #+0]
   \   00002048   ........           _BLF     pushw,??pushw??rA
   \   0000204C   3000A0E3           MOV      R0,#+48
   \   00002050   000084E5           STR      R0,[R4, #+0]
   \   00002054   84409FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00002058   FCF8FFEA           B        ??execute_25
   2244          		case 255:    /* RST 56 */
   2245          		{ pushpc(); xPC( 56 ); local_tstates += ( 11 ); break; }
   \                     ??execute_290:
   \   0000205C   000094E5           LDR      R0,[R4, #+0]
   \   00002060   ........           _BLF     pushw,??pushw??rA
   \   00002064   3800A0E3           MOV      R0,#+56
   \   00002068   E4FFFFEA           B        ??execute_286
   2246          
   2247          		}
   2248          
   2249          		} // main while end
   2250          		local_tstates -= (tstatesPerInterrupt - interrupt());
   \                     ??execute_7:
   \   0000206C   6C409FE5           LDR      R4,??execute_139+0x40  ;; local_tstates
   \   00002070   ........           BL       interrupt
   \   00002074   68209FE5           LDR      R2,??execute_139+0x44  ;; tstatesPerInterrupt
   \   00002078   001094E5           LDR      R1,[R4, #+0]
   \   0000207C   002092E5           LDR      R2,[R2, #+0]
   \   00002080   021041E0           SUB      R1,R1,R2
   \   00002084   010080E0           ADD      R0,R0,R1
   \   00002088   000084E5           STR      R0,[R4, #+0]
   2251          
   2252                          }while(!mode);
   \   0000208C   54009FE5           LDR      R0,??execute_139+0x48  ;; mode
   \   00002090   000090E5           LDR      R0,[R0, #+0]
   \   00002094   000050E3           CMP      R0,#+0
   \   00002098   E3F7FF0A           BEQ      ??execute_3
   2253          	}
   \   0000209C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??execute_139:
   \   000020A0   ........           DC32     haltsToInterrupt
   \   000020A4   ........           DC32     _R
   \   000020A8   ........           DC32     fZ
   \   000020AC   ........           DC32     _PC
   \   000020B0   ........           DC32     fC
   \   000020B4   ........           DC32     fPV
   \   000020B8   ........           DC32     fS
   \   000020BC   ........           DC32     _SP
   \   000020C0   ........           DC32     `sp`
   \   000020C4   ........           DC32     t
   \   000020C8   ........           DC32     _IFF1
   \   000020CC   ........           DC32     _IFF2
   \   000020D0   ........           DC32     _IX
   \   000020D4   ........           DC32     _ID
   \   000020D8   ........           DC32     _IY
   \   000020DC   ........           DC32     mem
   \   000020E0   ........           DC32     local_tstates
   \   000020E4   ........           DC32     tstatesPerInterrupt
   \   000020E8   ........           DC32     mode
   2254          
   2255          #pragma optimize=no_code_motion

   \                                 In segment CODE, align 4, keep-with-next
   2256          	private final int execute_ed( int local_tstates ) {
   2257          
   2258          		REFRESH( 1 );
   \                     execute_ed:
   \   00000000   ........           LDR      R1,??DataTable562  ;; _R
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   0020A0E1           MOV      R2,R0
   \   0000000C   000091E5           LDR      R0,[R1, #+0]
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   000081E5           STR      R0,[R1, #+0]
   2259          
   2260          		switch ( nxtpcb() ) {
   \   00000018   ........           LDR      R0,??DataTable571  ;; _PC
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   013081E2           ADD      R3,R1,#+1
   \   00000024   003080E5           STR      R3,[R0, #+0]
   \   00000028   ........           LDR      R0,??DataTable604  ;; mem
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   0000D1E7           LDRB     R0,[R1, +R0]
   \   00000034   400040E2           SUB      R0,R0,#+64
   \   00000038   7B0050E3           CMP      R0,#+123
   \   0000003C   0B01008A           BHI      ??execute_ed_1
   \   00000040   021F8FE2           ADR      R1,??execute_ed_0
   \   00000044   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000048   B01091E1           LDRH     R1,[R1, R0]
   \   0000004C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??execute_ed_0:
   \   00000050   3D0066008800       DC16     +61,+102,+136,+182
   \              B600        
   \   00000058   F400F7000001       DC16     +244,+247,+256,+268
   \              0C01        
   \   00000060   40006A008F00       DC16     +64,+106,+143,+189
   \              BD00        
   \   00000068   F400FB000001       DC16     +244,+251,+256,+273
   \              1101        
   \   00000070   450070009600       DC16     +69,+112,+150,+203
   \              CB00        
   \   00000078   F400F7000301       DC16     +244,+247,+259,+282
   \              1A01        
   \   00000080   4C0072009900       DC16     +76,+114,+153,+206
   \              CE00        
   \   00000088   F400FB000901       DC16     +244,+251,+265,+285
   \              1D01        
   \   00000090   530076009C00       DC16     +83,+118,+156,+211
   \              D300        
   \   00000098   F400F7000001       DC16     +244,+247,+256,+287
   \              1F01        
   \   000000A0   5A008100A100       DC16     +90,+129,+161,+224
   \              E000        
   \   000000A8   F400FB000001       DC16     +244,+251,+256,+290
   \              2201        
   \   000000B0   61008300A600       DC16     +97,+131,+166,+236
   \              EC00        
   \   000000B8   F400F7000301       DC16     +244,+247,+259,+245
   \              F500        
   \   000000C0   63008500AE00       DC16     +99,+133,+174,+239
   \              EF00        
   \   000000C8   F400FB000901       DC16     +244,+251,+265,+245
   \              F500        
   \   000000D0   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   000000D8   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   000000E0   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   000000E8   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   000000F0   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   000000F8   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   00000100   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   00000108   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   00000110   250136014201       DC16     +293,+310,+322,+350
   \              5E01        
   \   00000118   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   00000120   74019D01BE01       DC16     +372,+413,+446,+469
   \              D501        
   \   00000128   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   00000130   F00121024E02       DC16     +496,+545,+590,+618
   \              6A02        
   \   00000138   F500F500F500       DC16     +245,+245,+245,+245
   \              F500        
   \   00000140   8502A102C302       DC16     +645,+673,+707,+734
   \              DE02        
   2261          
   2262          		case 0:  /* NOP */
   2263          		case 1:
   2264          		case 2:
   2265          		case 3:
   2266          		case 4:
   2267          		case 5:
   2268          		case 6:
   2269          		case 7:
   2270          		case 8:
   2271          		case 9:
   2272          		case 10:
   2273          		case 11:
   2274          		case 12:
   2275          		case 13:
   2276          		case 14:
   2277          		case 15:
   2278          		case 16:
   2279          		case 17:
   2280          		case 18:
   2281          		case 19:
   2282          		case 20:
   2283          		case 21:
   2284          		case 22:
   2285          		case 23:
   2286          		case 24:
   2287          		case 25:
   2288          		case 26:
   2289          		case 27:
   2290          		case 28:
   2291          		case 29:
   2292          		case 30:
   2293          		case 31:
   2294          		case 32:
   2295          		case 33:
   2296          		case 34:
   2297          		case 35:
   2298          		case 36:
   2299          		case 37:
   2300          		case 38:
   2301          		case 39:
   2302          		case 40:
   2303          		case 41:
   2304          		case 42:
   2305          		case 43:
   2306          		case 44:
   2307          		case 45:
   2308          		case 46:
   2309          		case 47:
   2310          		case 48:
   2311          		case 49:
   2312          		case 50:
   2313          		case 51:
   2314          		case 52:
   2315          		case 53:
   2316          		case 54:
   2317          		case 55:
   2318          		case 56:
   2319          		case 57:
   2320          		case 58:
   2321          		case 59:
   2322          		case 60:
   2323          		case 61:
   2324          		case 62:
   2325          		case 63:
   2326          
   2327          		case 127:
   2328          		case 128:
   2329          		case 129:
   2330          		case 130:
   2331          		case 131:
   2332          		case 132:
   2333          		case 133:
   2334          		case 134:
   2335          		case 135:
   2336          		case 136:
   2337          		case 137:
   2338          		case 138:
   2339          		case 139:
   2340          		case 140:
   2341          		case 141:
   2342          		case 142:
   2343          		case 143:
   2344          		case 144:
   2345          		case 145:
   2346          		case 146:
   2347          		case 147:
   2348          		case 148:
   2349          		case 149:
   2350          		case 150:
   2351          		case 151:
   2352          		case 152:
   2353          		case 153:
   2354          		case 154:
   2355          		case 155:
   2356          		case 156:
   2357          		case 157:
   2358          		case 158:
   2359          		case 159:
   2360          
   2361          		case 164:
   2362          		case 165:
   2363          		case 166:
   2364          		case 167:
   2365          
   2366          		case 172:
   2367          		case 173:
   2368          		case 174:
   2369          		case 175:
   2370          
   2371          		case 180:
   2372          		case 181:
   2373          		case 182:
   2374          		case 183:
   2375          		{
   2376          			return ( 8 );
   2377          		}
   2378          
   2379          		/* IN r,(c) */
   2380          		case 64:  /* IN B,(c) */
   2381          		{ xB( in_bc() ); return ( 12 ); }
   \                     ??execute_ed_2:
   \   00000148   ........           BL       in_bc
   \   0000014C   ........           LDR      R1,??DataTable602  ;; _B
   \   00000150   010000EA           B        ??execute_ed_3
   2382          		case 72:  /* IN C,(c) */
   2383          		{ xC( in_bc() ); return ( 12 ); }
   \                     ??execute_ed_4:
   \   00000154   ........           BL       in_bc
   \   00000158   ........           LDR      R1,??DataTable605  ;; _C
   \                     ??execute_ed_3:
   \   0000015C   000081E5           STR      R0,[R1, #+0]
   \                     ??execute_ed_5:
   \   00000160   0C00A0E3           MOV      R0,#+12
   \   00000164   7080BDE8           POP      {R4-R6,PC}
   2384          		case 80:  /* IN D,(c) */
   2385          		{ xD( in_bc() ); return ( 12 ); }
   \                     ??execute_ed_6:
   \   00000168   ........           LDR      R5,??DataTable588  ;; _DE
   \   0000016C   ........           BL       in_bc
   \   00000170   001095E5           LDR      R1,[R5, #+0]
   \   00000174   FF1001E2           AND      R1,R1,#0xFF
   \   00000178   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000017C   000085E5           STR      R0,[R5, #+0]
   \   00000180   F6FFFFEA           B        ??execute_ed_5
   2386          		case 88:  /* IN E,(c) */
   2387          		{ xE( in_bc() ); return ( 12 ); }
   \                     ??execute_ed_7:
   \   00000184   ........           LDR      R5,??DataTable588  ;; _DE
   \   00000188   ........           BL       in_bc
   \   0000018C   001095E5           LDR      R1,[R5, #+0]
   \   00000190   FF1C01E2           AND      R1,R1,#0xFF00
   \   00000194   010080E1           ORR      R0,R0,R1
   \   00000198   000085E5           STR      R0,[R5, #+0]
   \   0000019C   EFFFFFEA           B        ??execute_ed_5
   2388          		case 96:  /* IN H,(c) */
   2389          		{ xH( in_bc() ); return ( 12 ); }
   \                     ??execute_ed_8:
   \   000001A0   ........           LDR      R4,??DataTable603  ;; _HL
   \   000001A4   ........           BL       in_bc
   \   000001A8   001094E5           LDR      R1,[R4, #+0]
   \   000001AC   FF1001E2           AND      R1,R1,#0xFF
   \   000001B0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000001B4   000084E5           STR      R0,[R4, #+0]
   \   000001B8   E8FFFFEA           B        ??execute_ed_5
   2390          		case 104:  /* IN L,(c) */
   2391          		{ xL( in_bc() ); return ( 12 ); }
   \                     ??execute_ed_9:
   \   000001BC   ........           LDR      R4,??DataTable603  ;; _HL
   \   000001C0   ........           BL       in_bc
   \   000001C4   001094E5           LDR      R1,[R4, #+0]
   \   000001C8   FF1C01E2           AND      R1,R1,#0xFF00
   \   000001CC   010080E1           ORR      R0,R0,R1
   \   000001D0   000084E5           STR      R0,[R4, #+0]
   \   000001D4   E1FFFFEA           B        ??execute_ed_5
   2392          		case 112:  /* IN (c) */
   2393          		{ in_bc(); return ( 12 ); }
   \                     ??execute_ed_10:
   \   000001D8   ........           BL       in_bc
   \   000001DC   DFFFFFEA           B        ??execute_ed_5
   2394          		case 120:  /* IN A,(c) */
   2395          		{ xA( in_bc() ); return ( 12 ); }
   \                     ??execute_ed_11:
   \   000001E0   ........           BL       in_bc
   \   000001E4   ........           LDR      R1,??DataTable506  ;; _A
   \   000001E8   DBFFFFEA           B        ??execute_ed_3
   2396          
   2397          		/* OUT (c),r */
   2398          		case 65:  /* OUT (c),B */
   2399          		{ outb( BC(), B(), local_tstates ); return ( 12 ); }
   \                     ??execute_ed_12:
   \   000001EC   ........           LDR      R5,??DataTable602  ;; _B
   \   000001F0   000095E5           LDR      R0,[R5, #+0]
   \   000001F4   0010A0E1           MOV      R1,R0
   \   000001F8   100000EA           B        ??execute_ed_13
   2400          		case 73:  /* OUT (c),C */
   2401          		{ outb( BC(), C(), local_tstates ); return ( 12 ); }
   \                     ??execute_ed_14:
   \   000001FC   ........           LDR      R0,??DataTable605  ;; _C
   \   00000200   003090E5           LDR      R3,[R0, #+0]
   \   00000204   ........           LDR      R0,??DataTable602  ;; _B
   \   00000208   0310A0E1           MOV      R1,R3
   \   0000020C   000090E5           LDR      R0,[R0, #+0]
   \   00000210   0C0000EA           B        ??execute_ed_15
   2402          		case 81:  /* OUT (c),D */
   2403          		{ outb( BC(), D(), local_tstates ); return ( 12 ); }
   \                     ??execute_ed_16:
   \   00000214   ........           LDR      R0,??DataTable588  ;; _DE
   \   00000218   040000EA           B        ??execute_ed_17
   2404          		case 89:  /* OUT (c),E */
   2405          		{ outb( BC(), E(), local_tstates ); return ( 12 ); }
   \                     ??execute_ed_18:
   \   0000021C   ........           LDR      R0,??DataTable588  ;; _DE
   \                     ??execute_ed_19:
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   FF1000E2           AND      R1,R0,#0xFF
   \   00000228   020000EA           B        ??execute_ed_20
   2406          		case 97:  /* OUT (c),H */
   2407          		{ outb( BC(), H(), local_tstates ); return ( 12 ); }
   \                     ??execute_ed_21:
   \   0000022C   ........           LDR      R0,??DataTable603  ;; _HL
   \                     ??execute_ed_17:
   \   00000230   000090E5           LDR      R0,[R0, #+0]
   \   00000234   4014A0E1           ASR      R1,R0,#+8
   \                     ??execute_ed_20:
   \   00000238   ........           LDR      R0,??DataTable602  ;; _B
   \   0000023C   000090E5           LDR      R0,[R0, #+0]
   \                     ??execute_ed_13:
   \   00000240   ........           LDR      R3,??DataTable605  ;; _C
   \   00000244   003093E5           LDR      R3,[R3, #+0]
   \                     ??execute_ed_15:
   \   00000248   000483E1           ORR      R0,R3,R0, LSL #+8
   \   0000024C   ........           BL       outb
   \   00000250   0C00A0E3           MOV      R0,#+12
   \   00000254   7080BDE8           POP      {R4-R6,PC}
   2408          		case 105:  /* OUT (c),L */
   2409          		{ outb( BC(), L(), local_tstates ); return ( 12 ); }
   \                     ??execute_ed_22:
   \   00000258   ........           LDR      R0,??DataTable603  ;; _HL
   \   0000025C   EFFFFFEA           B        ??execute_ed_19
   2410          		case 113:  /* OUT (c),0 */
   2411          		{ outb( BC(), 0, local_tstates ); return ( 12 ); }
   \                     ??execute_ed_23:
   \   00000260   0010A0E3           MOV      R1,#+0
   \   00000264   F3FFFFEA           B        ??execute_ed_20
   2412          		case 121:  /* OUT (c),A */
   2413          		{ outb( BC(), A(), local_tstates ); return ( 12 ); }
   \                     ??execute_ed_24:
   \   00000268   ........           LDR      R0,??DataTable506  ;; _A
   \   0000026C   001090E5           LDR      R1,[R0, #+0]
   \   00000270   F0FFFFEA           B        ??execute_ed_20
   2414          
   2415          		/* SBC/ADC HL,ss */
   2416          		case 66:  /* SBC HL,BC */
   2417          		{ xHL( sbc16( HL(), BC() ) ); return ( 15 ); }
   \                     ??execute_ed_25:
   \   00000274   ........           LDR      R0,??DataTable602  ;; _B
   \   00000278   ........           LDR      R1,??DataTable605  ;; _C
   \   0000027C   000090E5           LDR      R0,[R0, #+0]
   \   00000280   001091E5           LDR      R1,[R1, #+0]
   \   00000284   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000288   001481E1           ORR      R1,R1,R0, LSL #+8
   \   0000028C   190000EA           B        ??execute_ed_26
   2418          		case 74:  /* ADC HL,BC */
   2419          		{ xHL( adc16( HL(), BC() ) ); return ( 15 ); }
   \                     ??execute_ed_27:
   \   00000290   ........           LDR      R0,??DataTable602  ;; _B
   \   00000294   ........           LDR      R1,??DataTable605  ;; _C
   \   00000298   ........           LDR      R4,??DataTable603  ;; _HL
   \   0000029C   000090E5           LDR      R0,[R0, #+0]
   \   000002A0   001091E5           LDR      R1,[R1, #+0]
   \   000002A4   001481E1           ORR      R1,R1,R0, LSL #+8
   \   000002A8   1A0000EA           B        ??execute_ed_28
   2420          		case 82:  /* SBC HL,DE */
   2421          		{ xHL( sbc16( HL(), DE() ) ); return ( 15 ); }
   \                     ??execute_ed_29:
   \   000002AC   ........           LDR      R4,??DataTable603  ;; _HL
   \   000002B0   ........           LDR      R0,??DataTable588  ;; _DE
   \   000002B4   0E0000EA           B        ??execute_ed_30
   2422          		case 90:  /* ADC HL,DE */
   2423          		{ xHL( adc16( HL(), DE() ) ); return ( 15 ); }
   \                     ??execute_ed_31:
   \   000002B8   ........           LDR      R4,??DataTable603  ;; _HL
   \   000002BC   ........           LDR      R0,??DataTable588  ;; _DE
   \   000002C0   130000EA           B        ??execute_ed_32
   2424          		case 98:  /* SBC HL,HL */
   2425          		{
   2426          			int hl = HL();
   2427          			xHL( sbc16( hl, hl ) );
   \                     ??execute_ed_33:
   \   000002C4   ........           LDR      R4,??DataTable603  ;; _HL
   \   000002C8   005094E5           LDR      R5,[R4, #+0]
   \   000002CC   0510A0E1           MOV      R1,R5
   \   000002D0   0500A0E1           MOV      R0,R5
   \   000002D4   080000EA           B        ??execute_ed_34
   2428          			return ( 15 );
   2429          		}
   2430          		case 106:  /* ADC HL,HL */
   2431          		{
   2432          			int hl = HL();
   2433          			xHL( adc16( hl, hl ) );
   \                     ??execute_ed_35:
   \   000002D8   ........           LDR      R4,??DataTable603  ;; _HL
   \   000002DC   005094E5           LDR      R5,[R4, #+0]
   \   000002E0   0510A0E1           MOV      R1,R5
   \   000002E4   0500A0E1           MOV      R0,R5
   \   000002E8   0B0000EA           B        ??execute_ed_36
   2434          			return ( 15 );
   2435          		}
   2436          		case 114:  /* SBC HL,SP */
   2437          		{ xHL( sbc16( HL(), SP() ) ); return ( 15 ); }
   \                     ??execute_ed_37:
   \   000002EC   ........           LDR      R4,??DataTable603  ;; _HL
   \   000002F0   ........           LDR      R0,??DataTable494  ;; _SP
   \                     ??execute_ed_30:
   \   000002F4   001090E5           LDR      R1,[R0, #+0]
   \                     ??execute_ed_26:
   \   000002F8   000094E5           LDR      R0,[R4, #+0]
   \                     ??execute_ed_34:
   \   000002FC   ........           BL       sbc16
   \   00000300   000084E5           STR      R0,[R4, #+0]
   \   00000304   0F00A0E3           MOV      R0,#+15
   \   00000308   7080BDE8           POP      {R4-R6,PC}
   2438          		case 122:  /* ADC HL,SP */
   2439          		{ xHL( adc16( HL(), SP() ) ); return ( 15 ); }
   \                     ??execute_ed_38:
   \   0000030C   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000310   ........           LDR      R0,??DataTable494  ;; _SP
   \                     ??execute_ed_32:
   \   00000314   001090E5           LDR      R1,[R0, #+0]
   \                     ??execute_ed_28:
   \   00000318   000094E5           LDR      R0,[R4, #+0]
   \                     ??execute_ed_36:
   \   0000031C   ........           BL       adc16
   \   00000320   000084E5           STR      R0,[R4, #+0]
   \   00000324   0F00A0E3           MOV      R0,#+15
   \   00000328   7080BDE8           POP      {R4-R6,PC}
   2440          
   2441          		/* LD (nn),ss, LD ss,(nn) */
   2442          		case 67:  /* LD (nn),BC */
   2443          		{ pokew( nxtpcw(), BC() ); return ( 20 ); }
   \                     ??execute_ed_39:
   \   0000032C   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000330   ........           LDR      R1,??DataTable602  ;; _B
   \   00000334   ........           LDR      R2,??DataTable605  ;; _C
   \   00000338   001091E5           LDR      R1,[R1, #+0]
   \   0000033C   002092E5           LDR      R2,[R2, #+0]
   \   00000340   012482E1           ORR      R2,R2,R1, LSL #+8
   \   00000344   180000EA           B        ??execute_ed_40
   2444          		case 75:  /* LD BC(),(nn) */
   2445          		{ xBC( peekw( nxtpcw() ) ); return ( 20 ); }
   \                     ??execute_ed_41:
   \   00000348   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   0000034C   ........           LDR      R1,??DataTable604  ;; mem
   \   00000350   003091E5           LDR      R3,[R1, #+0]
   \   00000354   0310D0E7           LDRB     R1,[R0, +R3]
   \   00000358   010080E2           ADD      R0,R0,#+1
   \   0000035C   0008A0E1           LSL      R0,R0,#+16
   \   00000360   2008D3E7           LDRB     R0,[R3, +R0, LSR #+16]
   \   00000364   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000368   ........           LDR      R1,??DataTable602  ;; _B
   \   0000036C   4024A0E1           ASR      R2,R0,#+8
   \   00000370   002081E5           STR      R2,[R1, #+0]
   \   00000374   ........           LDR      R1,??DataTable605  ;; _C
   \   00000378   FF0000E2           AND      R0,R0,#0xFF
   \   0000037C   1D0000EA           B        ??execute_ed_42
   2446          		case 83:  /* LD (nn),DE */
   2447          		{ pokew( nxtpcw(), DE() ); return ( 20 ); }
   \                     ??execute_ed_43:
   \   00000380   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000384   ........           LDR      R1,??DataTable588  ;; _DE
   \   00000388   060000EA           B        ??execute_ed_44
   2448          		case 91:  /* LD DE,(nn) */
   2449          		{ xDE( peekw( nxtpcw() ) ); return ( 20 ); }
   \                     ??execute_ed_45:
   \   0000038C   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000390   ........           LDR      R1,??DataTable604  ;; mem
   \   00000394   003091E5           LDR      R3,[R1, #+0]
   \   00000398   ........           LDR      R1,??DataTable588  ;; _DE
   \   0000039C   100000EA           B        ??execute_ed_46
   2450          		case 99:  /* LD (nn),HL */
   2451          		{ pokew( nxtpcw(), HL() ); return ( 20 ); }
   \                     ??execute_ed_47:
   \   000003A0   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   000003A4   ........           LDR      R1,??DataTable603  ;; _HL
   \                     ??execute_ed_44:
   \   000003A8   002091E5           LDR      R2,[R1, #+0]
   \                     ??execute_ed_40:
   \   000003AC   ........           LDR      R1,??DataTable604  ;; mem
   \   000003B0   003091E5           LDR      R3,[R1, #+0]
   \   000003B4   0320C0E7           STRB     R2,[R0, +R3]
   \   000003B8   001091E5           LDR      R1,[R1, #+0]
   \   000003BC   010080E2           ADD      R0,R0,#+1
   \   000003C0   0008A0E1           LSL      R0,R0,#+16
   \   000003C4   4224A0E1           ASR      R2,R2,#+8
   \   000003C8   2028C1E7           STRB     R2,[R1, +R0, LSR #+16]
   \   000003CC   1400A0E3           MOV      R0,#+20
   \   000003D0   7080BDE8           POP      {R4-R6,PC}
   2452          		case 107:  /* LD HL,(nn) */
   2453          		{ xHL( peekw( nxtpcw() ) ); return ( 20 ); }
   \                     ??execute_ed_48:
   \   000003D4   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   000003D8   ........           LDR      R1,??DataTable604  ;; mem
   \   000003DC   003091E5           LDR      R3,[R1, #+0]
   \   000003E0   ........           LDR      R1,??DataTable603  ;; _HL
   \                     ??execute_ed_46:
   \   000003E4   0320D0E7           LDRB     R2,[R0, +R3]
   \   000003E8   010080E2           ADD      R0,R0,#+1
   \   000003EC   0008A0E1           LSL      R0,R0,#+16
   \   000003F0   2008D3E7           LDRB     R0,[R3, +R0, LSR #+16]
   \   000003F4   000482E1           ORR      R0,R2,R0, LSL #+8
   \                     ??execute_ed_42:
   \   000003F8   000081E5           STR      R0,[R1, #+0]
   \   000003FC   1400A0E3           MOV      R0,#+20
   \   00000400   7080BDE8           POP      {R4-R6,PC}
   2454          		case 115:  /* LD (nn),SP */
   2455          		{ pokew( nxtpcw(), SP() ); return ( 20 ); }
   \                     ??execute_ed_49:
   \   00000404   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000408   ........           LDR      R1,??DataTable494  ;; _SP
   \   0000040C   E5FFFFEA           B        ??execute_ed_44
   2456          		case 123:  /* LD SP,(nn) */
   2457          		{ xSP( peekw( nxtpcw() ) ); return ( 20 ); }
   \                     ??execute_ed_50:
   \   00000410   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000414   ........           LDR      R1,??DataTable604  ;; mem
   \   00000418   003091E5           LDR      R3,[R1, #+0]
   \   0000041C   ........           LDR      R1,??DataTable494  ;; _SP
   \   00000420   EFFFFFEA           B        ??execute_ed_46
   2458          
   2459          		/* NEG */
   2460          		case 68:  /* NEG */
   2461          		case 76:  /* NEG */
   2462          		case 84:  /* NEG */
   2463          		case 92:  /* NEG */
   2464          		case 100:  /* NEG */
   2465          		case 108:  /* NEG */
   2466          		case 116:  /* NEG */
   2467          		case 124:  /* NEG */
   2468          		{ neg_a(); return ( 8 ); }
   \                     ??execute_ed_51:
   \   00000424   ........           BL       neg_a
   \                     ??execute_ed_52:
   \   00000428   0800A0E3           MOV      R0,#+8
   \   0000042C   7080BDE8           POP      {R4-R6,PC}
   2469          
   2470          		/* RETn */
   2471          		case 69:  /* RETN */
   2472          		case 85:  /* RETN */
   2473          		case 101:  /* RETN */
   2474          		case 117:  /* RETN */
   2475          		{
   2476          			xIFF1( IFF2() );
   \                     ??execute_ed_53:
   \   00000430   ........           LDR      R1,??DataTable495  ;; _IFF2
   \   00000434   ........           LDR      R0,??DataTable496  ;; _IFF1
   \   00000438   D010D1E1           LDRSB    R1,[R1, #+0]
   \   0000043C   0010C0E5           STRB     R1,[R0, #+0]
   2477          			poppc();
   2478          			return ( 14 );
   2479          		}
   2480          		case 77:  /* RETI */
   2481          		case 93:  /* RETI */
   2482          		case 109:  /* RETI */
   2483          		case 125:  /* RETI */
   2484          		{
   2485          			poppc();
   \                     ??execute_ed_54:
   \   00000440   ........           _BLF     popw,??popw??rA
   \   00000444   ........           LDR      R1,??DataTable571  ;; _PC
   \   00000448   000081E5           STR      R0,[R1, #+0]
   2486          			return ( 14 );
   \   0000044C   0E00A0E3           MOV      R0,#+14
   \   00000450   7080BDE8           POP      {R4-R6,PC}
   2487          		}
   2488          
   2489          		/* IM x */
   2490          		case 70:  /* IM 0 */
   2491          		case 78:  /* IM 0 */
   2492          		case 102:  /* IM 0 */
   2493          		case 110:  /* IM 0 */
   2494          		{ xIM( IM0 ); return ( 8 ); }
   \                     ??execute_ed_55:
   \   00000454   ........           LDR      R0,??DataTable502  ;; _IM
   \   00000458   ........           LDR      R1,??DataTable499  ;; IM0
   \   0000045C   010000EA           B        ??execute_ed_56
   2495          		case 86:  /* IM 1 */
   2496          		case 118:  /* IM 1 */
   2497          		{ xIM( IM1 ); return ( 8 ); }
   \                     ??execute_ed_57:
   \   00000460   ........           LDR      R0,??DataTable502  ;; _IM
   \   00000464   ........           LDR      R1,??DataTable501  ;; IM1
   \                     ??execute_ed_56:
   \   00000468   001091E5           LDR      R1,[R1, #+0]
   \   0000046C   001080E5           STR      R1,[R0, #+0]
   \                     ??execute_ed_1:
   \   00000470   0800A0E3           MOV      R0,#+8
   \   00000474   7080BDE8           POP      {R4-R6,PC}
   2498          		case 94:  /* IM 2 */
   2499          		case 126:  /* IM 2 */
   2500          		{ xIM( IM2 ); return ( 8 ); }
   \                     ??execute_ed_58:
   \   00000478   ........           LDR      R0,??DataTable502  ;; _IM
   \   0000047C   ........           LDR      R1,??DataTable503  ;; IM2
   \   00000480   F8FFFFEA           B        ??execute_ed_56
   2501          
   2502          		/* LD A,s / LD s,A / RxD */
   2503          		case 71:  /* LD I,A */
   2504          		{ xI( A() ); return ( 9 ); }
   \                     ??execute_ed_59:
   \   00000484   ........           LDR      R1,??DataTable506  ;; _A
   \   00000488   ........           LDR      R0,??DataTable505  ;; _I
   \   0000048C   001091E5           LDR      R1,[R1, #+0]
   \   00000490   001080E5           STR      R1,[R0, #+0]
   \   00000494   090000EA           B        ??execute_ed_60
   \                     ??execute_ed_61:
   \   00000498   ........           LDR      R0,??DataTable506  ;; _A
   \   0000049C   ........           LDR      R1,??DataTable562  ;; _R
   \   000004A0   000090E5           LDR      R0,[R0, #+0]
   \   000004A4   000081E5           STR      R0,[R1, #+0]
   2505          		case 79:  /* LD R,A */
   2506          		{ xR( A() ); return ( 9 ); }
   \   000004A8   ........           LDR      R1,??DataTable508  ;; _R7
   \   000004AC   800000E2           AND      R0,R0,#0x80
   \   000004B0   000081E5           STR      R0,[R1, #+0]
   \   000004B4   0900A0E3           MOV      R0,#+9
   \   000004B8   7080BDE8           POP      {R4-R6,PC}
   2507          		case 87:  /* LD A,I */
   2508          		{ ld_a_i(); return ( 9 ); }
   \                     ??execute_ed_62:
   \   000004BC   ........           BL       ld_a_i
   \                     ??execute_ed_60:
   \   000004C0   0900A0E3           MOV      R0,#+9
   \   000004C4   7080BDE8           POP      {R4-R6,PC}
   2509          		case 95:  /* LD A,R */
   2510          		{ ld_a_r(); return ( 9 ); }
   \                     ??execute_ed_63:
   \   000004C8   ........           BL       ld_a_r
   \   000004CC   FBFFFFEA           B        ??execute_ed_60
   2511          		case 103:  /* RRD */
   2512          		{ rrd_a(); return ( 18 ); }
   \                     ??execute_ed_64:
   \   000004D0   ........           BL       rrd_a
   \   000004D4   1200A0E3           MOV      R0,#+18
   \   000004D8   7080BDE8           POP      {R4-R6,PC}
   2513          		case 111:  /* RLD */
   2514          		{ rld_a(); return ( 18 ); }
   \                     ??execute_ed_65:
   \   000004DC   ........           BL       rld_a
   \   000004E0   1200A0E3           MOV      R0,#+18
   \   000004E4   7080BDE8           POP      {R4-R6,PC}
   2515          
   2516          		/* xxI */
   2517          		case 160:  /* LDI */
   2518          		{
   2519          			pokeb( DE(), peekb( HL() ) );
   \                     ??execute_ed_66:
   \   000004E8   ........           LDR      R1,??DataTable604  ;; mem
   \   000004EC   ........           LDR      R4,??DataTable603  ;; _HL
   \   000004F0   003091E5           LDR      R3,[R1, #+0]
   \   000004F4   001094E5           LDR      R1,[R4, #+0]
   \   000004F8   ........           LDR      R5,??DataTable588  ;; _DE
   \   000004FC   0310D1E7           LDRB     R1,[R1, +R3]
   \   00000500   000095E5           LDR      R0,[R5, #+0]
   \   00000504   0310C0E7           STRB     R1,[R0, +R3]
   2520          			xDE( inc16( DE() ) );
   \   00000508   000095E5           LDR      R0,[R5, #+0]
   \   0000050C   FF10A0E3           MOV      R1,#+255
   \   00000510   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000514   010080E2           ADD      R0,R0,#+1
   \   00000518   000001E0           AND      R0,R1,R0
   \   0000051C   000085E5           STR      R0,[R5, #+0]
   2521          			xHL( inc16( HL() ) );
   \   00000520   000094E5           LDR      R0,[R4, #+0]
   \   00000524   010080E2           ADD      R0,R0,#+1
   \   00000528   4D0000EA           B        ??execute_ed_67
   2522          			xBC( dec16( BC() ) );
   2523          
   2524          			setPV( BC() != 0 );
   2525          			setH( false );
   2526          			setN( false );
   2527          
   2528          			return ( 16 );
   2529          		}
   2530          		case 161:  /* CPI */
   2531          		{
   2532          			boolean    c = Cset();
   \                     ??execute_ed_68:
   \   0000052C   ........           LDR      R0,??DataTable595  ;; fC
   2533          
   2534          			cp_a( peekb( HL() ) );
   \   00000530   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000534   D060D0E1           LDRSB    R6,[R0, #+0]
   \   00000538   ........           LDR      R0,??DataTable604  ;; mem
   \   0000053C   005094E5           LDR      R5,[R4, #+0]
   \   00000540   000090E5           LDR      R0,[R0, #+0]
   \   00000544   0000D5E7           LDRB     R0,[R5, +R0]
   \   00000548   ........           BL       cp_a
   2535          			xHL( inc16( HL() ) );
   \   0000054C   FF10A0E3           MOV      R1,#+255
   \   00000550   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000554   010085E2           ADD      R0,R5,#+1
   2536          			xBC( dec16( BC() ) );
   \   00000558   650000EA           B        ??execute_ed_69
   2537          
   2538          			setPV( BC() != 0 );
   2539          			setC( c );
   2540          
   2541          			return ( 16 );
   2542          		}
   2543          		case 162:  /* INI */
   2544          		{
   2545          			int b;
   2546          			pokeb( HL(), inb( BC() ) );
   \                     ??execute_ed_70:
   \   0000055C   ........           LDR      R5,??DataTable602  ;; _B
   \   00000560   ........           LDR      R1,??DataTable605  ;; _C
   \   00000564   000095E5           LDR      R0,[R5, #+0]
   \   00000568   001091E5           LDR      R1,[R1, #+0]
   \   0000056C   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000570   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000574   ........           BL       inb
   \   00000578   ........           LDR      R2,??DataTable604  ;; mem
   \   0000057C   001094E5           LDR      R1,[R4, #+0]
   \   00000580   002092E5           LDR      R2,[R2, #+0]
   \   00000584   0200C1E7           STRB     R0,[R1, +R2]
   2547          			xB( b = qdec8( B() ) );
   2548          			xHL( inc16( HL() ) );
   \   00000588   001094E5           LDR      R1,[R4, #+0]
   \   0000058C   000095E5           LDR      R0,[R5, #+0]
   \   00000590   011081E2           ADD      R1,R1,#+1
   \   00000594   0118A0E1           LSL      R1,R1,#+16
   \   00000598   2118A0E1           LSR      R1,R1,#+16
   \   0000059C   001084E5           STR      R1,[R4, #+0]
   2549          
   2550          			setZ( b == 0 );
   \   000005A0   ........           LDR      R1,??DataTable606  ;; fZ
   \   000005A4   010040E2           SUB      R0,R0,#+1
   \   000005A8   FF0000E2           AND      R0,R0,#0xFF
   \   000005AC   000085E5           STR      R0,[R5, #+0]
   \   000005B0   000050E3           CMP      R0,#+0
   \                     ??execute_ed_71:
   \   000005B4   0100A003           MOVEQ    R0,#+1
   \   000005B8   0000A013           MOVNE    R0,#+0
   \   000005BC   0000C1E5           STRB     R0,[R1, #+0]
   2551          			setN( true );
   \   000005C0   ........           LDR      R0,??DataTable607  ;; fN
   \   000005C4   0110A0E3           MOV      R1,#+1
   \   000005C8   3B0000EA           B        ??execute_ed_72
   2552          
   2553          			return ( 16 );
   2554          		}
   2555          		case 163:  /* OUTI */
   2556          		{
   2557          			int b;
   2558          			xB( b = qdec8( B() ) );
   \                     ??execute_ed_73:
   \   000005CC   ........           LDR      R5,??DataTable602  ;; _B
   2559          			outb( BC(), peekb( HL() ), local_tstates );
   \   000005D0   ........           LDR      R4,??DataTable603  ;; _HL
   \   000005D4   000095E5           LDR      R0,[R5, #+0]
   \   000005D8   ........           LDR      R1,??DataTable604  ;; mem
   \   000005DC   010040E2           SUB      R0,R0,#+1
   \   000005E0   001091E5           LDR      R1,[R1, #+0]
   \   000005E4   FF6000E2           AND      R6,R0,#0xFF
   \   000005E8   000094E5           LDR      R0,[R4, #+0]
   \   000005EC   006085E5           STR      R6,[R5, #+0]
   \   000005F0   0110D0E7           LDRB     R1,[R0, +R1]
   \   000005F4   ........           LDR      R0,??DataTable605  ;; _C
   \   000005F8   000090E5           LDR      R0,[R0, #+0]
   \   000005FC   060480E1           ORR      R0,R0,R6, LSL #+8
   \   00000600   ........           BL       outb
   2560          			xHL( inc16( HL() ) );
   \   00000604   000094E5           LDR      R0,[R4, #+0]
   2561          
   2562          			setZ( b == 0 );
   \   00000608   ........           LDR      R1,??DataTable606  ;; fZ
   \   0000060C   010080E2           ADD      R0,R0,#+1
   \   00000610   0008A0E1           LSL      R0,R0,#+16
   \   00000614   2008A0E1           LSR      R0,R0,#+16
   \   00000618   000084E5           STR      R0,[R4, #+0]
   \   0000061C   000056E3           CMP      R6,#+0
   \   00000620   E3FFFFEA           B        ??execute_ed_71
   2563          			setN( true );
   2564          
   2565          			return ( 16 );
   2566          		}
   2567          
   2568          		/* xxD */
   2569          		case 168:  /* LDD */
   2570          		{
   2571          			pokeb( DE(), peekb( HL() ) );
   \                     ??execute_ed_74:
   \   00000624   ........           LDR      R1,??DataTable604  ;; mem
   \   00000628   ........           LDR      R4,??DataTable603  ;; _HL
   \   0000062C   003091E5           LDR      R3,[R1, #+0]
   \   00000630   001094E5           LDR      R1,[R4, #+0]
   \   00000634   ........           LDR      R5,??DataTable588  ;; _DE
   \   00000638   0310D1E7           LDRB     R1,[R1, +R3]
   \   0000063C   000095E5           LDR      R0,[R5, #+0]
   \   00000640   0310C0E7           STRB     R1,[R0, +R3]
   2572          			xDE( dec16( DE() ) );
   \   00000644   000095E5           LDR      R0,[R5, #+0]
   \   00000648   FF10A0E3           MOV      R1,#+255
   \   0000064C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000650   010040E2           SUB      R0,R0,#+1
   \   00000654   000001E0           AND      R0,R1,R0
   \   00000658   000085E5           STR      R0,[R5, #+0]
   2573          			xHL( dec16( HL() ) );
   \   0000065C   000094E5           LDR      R0,[R4, #+0]
   \   00000660   010040E2           SUB      R0,R0,#+1
   2574          			xBC( dec16( BC() ) );
   \                     ??execute_ed_67:
   \   00000664   ........           LDR      R5,??DataTable602  ;; _B
   \   00000668   000001E0           AND      R0,R1,R0
   \   0000066C   002095E5           LDR      R2,[R5, #+0]
   \   00000670   000084E5           STR      R0,[R4, #+0]
   \   00000674   ........           LDR      R0,??DataTable605  ;; _C
   \   00000678   003090E5           LDR      R3,[R0, #+0]
   \   0000067C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000680   012042E2           SUB      R2,R2,#+1
   \   00000684   021001E0           AND      R1,R1,R2
   \   00000688   4124A0E1           ASR      R2,R1,#+8
   \   0000068C   FF1001E2           AND      R1,R1,#0xFF
   \   00000690   001080E5           STR      R1,[R0, #+0]
   2575          
   2576          			setPV( BC() != 0 );
   \   00000694   000090E5           LDR      R0,[R0, #+0]
   \   00000698   ........           LDR      R1,??DataTable594  ;; fPV
   \   0000069C   020490E1           ORRS     R0,R0,R2, LSL #+8
   \   000006A0   0100A013           MOVNE    R0,#+1
   \   000006A4   0000C1E5           STRB     R0,[R1, #+0]
   2577          			setH( false );
   \   000006A8   ........           LDR      R0,??DataTable559  ;; fH
   \   000006AC   002085E5           STR      R2,[R5, #+0]
   \   000006B0   0010A0E3           MOV      R1,#+0
   \   000006B4   0010C0E5           STRB     R1,[R0, #+0]
   2578          			setN( false );
   \   000006B8   ........           LDR      R0,??DataTable607  ;; fN
   \                     ??execute_ed_72:
   \   000006BC   0010C0E5           STRB     R1,[R0, #+0]
   2579          
   2580          			return ( 16 );
   \                     ??execute_ed_75:
   \   000006C0   1000A0E3           MOV      R0,#+16
   \   000006C4   7080BDE8           POP      {R4-R6,PC}
   2581          		}
   2582          		case 169:  /* CPD */
   2583          		{
   2584          			boolean    c = Cset();
   \                     ??execute_ed_76:
   \   000006C8   ........           LDR      R0,??DataTable595  ;; fC
   2585          
   2586          			cp_a( peekb( HL() ) );
   \   000006CC   ........           LDR      R4,??DataTable603  ;; _HL
   \   000006D0   D060D0E1           LDRSB    R6,[R0, #+0]
   \   000006D4   ........           LDR      R0,??DataTable604  ;; mem
   \   000006D8   005094E5           LDR      R5,[R4, #+0]
   \   000006DC   000090E5           LDR      R0,[R0, #+0]
   \   000006E0   0000D5E7           LDRB     R0,[R5, +R0]
   \   000006E4   ........           BL       cp_a
   2587          			xHL( dec16( HL() ) );
   \   000006E8   FF10A0E3           MOV      R1,#+255
   \   000006EC   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000006F0   010045E2           SUB      R0,R5,#+1
   2588          			xBC( dec16( BC() ) );
   \                     ??execute_ed_69:
   \   000006F4   ........           LDR      R5,??DataTable602  ;; _B
   \   000006F8   000001E0           AND      R0,R1,R0
   \   000006FC   002095E5           LDR      R2,[R5, #+0]
   \   00000700   000084E5           STR      R0,[R4, #+0]
   \   00000704   ........           LDR      R0,??DataTable605  ;; _C
   \   00000708   003090E5           LDR      R3,[R0, #+0]
   \   0000070C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000710   012042E2           SUB      R2,R2,#+1
   \   00000714   022001E0           AND      R2,R1,R2
   \   00000718   4214A0E1           ASR      R1,R2,#+8
   \   0000071C   FF2002E2           AND      R2,R2,#0xFF
   \   00000720   002080E5           STR      R2,[R0, #+0]
   2589          
   2590          			setPV( BC() != 0 );
   \   00000724   000090E5           LDR      R0,[R0, #+0]
   \   00000728   001085E5           STR      R1,[R5, #+0]
   \   0000072C   010490E1           ORRS     R0,R0,R1, LSL #+8
   \   00000730   ........           LDR      R1,??DataTable594  ;; fPV
   \   00000734   0100A013           MOVNE    R0,#+1
   \   00000738   0000C1E5           STRB     R0,[R1, #+0]
   2591          			setC( c );
   \   0000073C   ........           LDR      R0,??DataTable595  ;; fC
   \   00000740   0060C0E5           STRB     R6,[R0, #+0]
   2592          
   2593          			return ( 16 );
   \                     ??execute_ed_77:
   \   00000744   1000A0E3           MOV      R0,#+16
   \   00000748   7080BDE8           POP      {R4-R6,PC}
   2594          		}
   2595          		case 170:  /* IND */
   2596          		{
   2597          			int b;
   2598          			pokeb( HL(), inb( BC() ) );
   \                     ??execute_ed_78:
   \   0000074C   ........           LDR      R5,??DataTable602  ;; _B
   \   00000750   ........           LDR      R1,??DataTable605  ;; _C
   \   00000754   000095E5           LDR      R0,[R5, #+0]
   \   00000758   001091E5           LDR      R1,[R1, #+0]
   \   0000075C   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000760   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000764   ........           BL       inb
   \   00000768   ........           LDR      R2,??DataTable604  ;; mem
   \   0000076C   001094E5           LDR      R1,[R4, #+0]
   \   00000770   002092E5           LDR      R2,[R2, #+0]
   \   00000774   0200C1E7           STRB     R0,[R1, +R2]
   2599          			xB( b = qdec8( B() ) );
   2600          			xHL( dec16( HL() ) );
   \   00000778   001094E5           LDR      R1,[R4, #+0]
   \   0000077C   000095E5           LDR      R0,[R5, #+0]
   \   00000780   011041E2           SUB      R1,R1,#+1
   \   00000784   0118A0E1           LSL      R1,R1,#+16
   \   00000788   2118A0E1           LSR      R1,R1,#+16
   \   0000078C   001084E5           STR      R1,[R4, #+0]
   2601          
   2602          			setZ( b == 0 );
   \   00000790   ........           LDR      R1,??DataTable606  ;; fZ
   \   00000794   010040E2           SUB      R0,R0,#+1
   \   00000798   FF0000E2           AND      R0,R0,#0xFF
   \   0000079C   000085E5           STR      R0,[R5, #+0]
   \   000007A0   000050E3           CMP      R0,#+0
   \   000007A4   82FFFFEA           B        ??execute_ed_71
   2603          			setN( true );
   2604          
   2605          			return ( 16 );
   2606          		}
   2607          		case 171:  /* OUTD */
   2608          		{
   2609          			int b;
   2610          			xB( b = qdec8( B() ) );
   \                     ??execute_ed_79:
   \   000007A8   ........           LDR      R5,??DataTable602  ;; _B
   2611          			outb( BC(), peekb( HL() ), local_tstates );
   \   000007AC   ........           LDR      R4,??DataTable603  ;; _HL
   \   000007B0   000095E5           LDR      R0,[R5, #+0]
   \   000007B4   ........           LDR      R1,??DataTable604  ;; mem
   \   000007B8   010040E2           SUB      R0,R0,#+1
   \   000007BC   001091E5           LDR      R1,[R1, #+0]
   \   000007C0   FF6000E2           AND      R6,R0,#0xFF
   \   000007C4   000094E5           LDR      R0,[R4, #+0]
   \   000007C8   006085E5           STR      R6,[R5, #+0]
   \   000007CC   0110D0E7           LDRB     R1,[R0, +R1]
   \   000007D0   ........           LDR      R0,??DataTable605  ;; _C
   \   000007D4   000090E5           LDR      R0,[R0, #+0]
   \   000007D8   060480E1           ORR      R0,R0,R6, LSL #+8
   \   000007DC   ........           BL       outb
   2612          			xHL( dec16( HL() ) );
   \   000007E0   000094E5           LDR      R0,[R4, #+0]
   2613          
   2614          			setZ( b == 0 );
   \   000007E4   ........           LDR      R1,??DataTable606  ;; fZ
   \   000007E8   010040E2           SUB      R0,R0,#+1
   \   000007EC   0008A0E1           LSL      R0,R0,#+16
   \   000007F0   2008A0E1           LSR      R0,R0,#+16
   \   000007F4   000084E5           STR      R0,[R4, #+0]
   \   000007F8   000056E3           CMP      R6,#+0
   \   000007FC   0100A003           MOVEQ    R0,#+1
   \   00000800   0000A013           MOVNE    R0,#+0
   \   00000804   0000C1E5           STRB     R0,[R1, #+0]
   2615          			setN( true );
   \   00000808   ........           LDR      R0,??DataTable607  ;; fN
   \   0000080C   0110A0E3           MOV      R1,#+1
   \   00000810   A9FFFFEA           B        ??execute_ed_72
   2616          
   2617          			return ( 16 );
   2618          		}
   2619          
   2620          		/* xxIR */
   2621          		case 176:  /* LDIR */
   2622          		{
   2623          #ifdef useasm
   2624                            if(temp=BC()){
   \                     ??execute_ed_80:
   \   00000814   ........           LDR      R0,??DataTable605  ;; _C
   \   00000818   ........           LDR      R5,??DataTable602  ;; _B
   \   0000081C   003090E5           LDR      R3,[R0, #+0]
   \   00000820   000095E5           LDR      R0,[R5, #+0]
   \   00000824   0C649FE5           LDR      R6,??execute_ed_81  ;; temp
   \   00000828   000493E1           ORRS     R0,R3,R0, LSL #+8
   \   0000082C   000086E5           STR      R0,[R6, #+0]
   \   00000830   2300000A           BEQ      ??execute_ed_82
   2625                              ldirr(mem+DE(),mem+HL(),temp);
   \   00000834   ........           LDR      R1,??DataTable604  ;; mem
   \   00000838   ........           LDR      R4,??DataTable603  ;; _HL
   \   0000083C   003091E5           LDR      R3,[R1, #+0]
   \   00000840   ........           LDR      R5,??DataTable588  ;; _DE
   \   00000844   000094E5           LDR      R0,[R4, #+0]
   \   00000848   002096E5           LDR      R2,[R6, #+0]
   \   0000084C   031080E0           ADD      R1,R0,R3
   \   00000850   000095E5           LDR      R0,[R5, #+0]
   \   00000854   030080E0           ADD      R0,R0,R3
   \   00000858   ........           _BLF     ldirr,??ldirr??rA
   2626          			xDE( (DE()+temp)&0xffff );
   \   0000085C   000096E5           LDR      R0,[R6, #+0]
   \   00000860   002095E5           LDR      R2,[R5, #+0]
   \   00000864   FF10A0E3           MOV      R1,#+255
   \   00000868   FF1C81E3           ORR      R1,R1,#0xFF00
   \   0000086C   022080E0           ADD      R2,R0,R2
   \   00000870   022001E0           AND      R2,R1,R2
   \   00000874   002085E5           STR      R2,[R5, #+0]
   2627          			xHL( (_HL+temp)&0xffff );
   \   00000878   002094E5           LDR      R2,[R4, #+0]
   \   0000087C   022080E0           ADD      R2,R0,R2
   \                     ??execute_ed_83:
   \   00000880   021001E0           AND      R1,R1,R2
   2628          			xBC( 0 );
   \   00000884   ........           LDR      R2,??DataTable602  ;; _B
   \   00000888   001084E5           STR      R1,[R4, #+0]
   \   0000088C   0010A0E3           MOV      R1,#+0
   \   00000890   001082E5           STR      R1,[R2, #+0]
   \   00000894   ........           LDR      R2,??DataTable605  ;; _C
   \   00000898   001082E5           STR      R1,[R2, #+0]
   2629          			setH( false );
   \   0000089C   ........           LDR      R2,??DataTable559  ;; fH
   \   000008A0   0010C2E5           STRB     R1,[R2, #+0]
   2630          			setN( false );
   \   000008A4   ........           LDR      R2,??DataTable607  ;; fN
   \   000008A8   0010C2E5           STRB     R1,[R2, #+0]
   2631          			setPV( false );
   \   000008AC   ........           LDR      R2,??DataTable594  ;; fPV
   \   000008B0   0010C2E5           STRB     R1,[R2, #+0]
   2632                              REFRESH(temp<<1);
   \   000008B4   ........           LDR      R1,??DataTable562  ;; _R
   \   000008B8   002091E5           LDR      R2,[R1, #+0]
   \   000008BC   800082E0           ADD      R0,R2,R0, LSL #+1
   \   000008C0   000081E5           STR      R0,[R1, #+0]
   2633                            }
   2634                            return 21*temp;
   \                     ??execute_ed_82:
   \   000008C4   6C039FE5           LDR      R0,??execute_ed_81  ;; temp
   \   000008C8   1510A0E3           MOV      R1,#+21
   \   000008CC   000090E5           LDR      R0,[R0, #+0]
   \   000008D0   910000E0           MUL      R0,R1,R0
   \   000008D4   7080BDE8           POP      {R4-R6,PC}
   2635          #else
   2636                            int _local_tstates = 0;
   2637          			int count, dest, from;
   2638          
   2639          			count = BC();
   2640          			dest = DE();
   2641          			from = HL();
   2642          			REFRESH( -2 );
   2643          			do {
   2644          				pokeb(dest, peekb(from) );
   2645          				from  = inc16( from );
   2646          				dest  = inc16( dest );
   2647          				count = dec16( count );
   2648          
   2649          				_local_tstates += ( 21 );
   2650          				REFRESH( 2 );
   2651          				if ( interruptTriggered( _local_tstates ) ) {
   2652          					break;
   2653          				}
   2654          			} while (count != 0);
   2655          			if (count != 0) {
   2656          				xPC( (PC()-2)&0xffff );
   2657          				setH( false );
   2658          				setN( false );
   2659          				setPV( true );
   2660          			}
   2661          			else {
   2662          				_local_tstates += ( -5 );
   2663          				setH( false );
   2664          				setN( false );
   2665          				setPV( false );
   2666          			}
   2667          			xDE( dest );
   2668          			xHL( from );
   2669          			xBC( count );
   2670          
   2671          			return ( _local_tstates );
   2672          #endif
   2673          		}
   2674          		case 177:  /* CPIR */
   2675          		{
   2676          			boolean    c = Cset();
   \                     ??execute_ed_84:
   \   000008D8   ........           LDR      R0,??DataTable595  ;; fC
   2677          
   2678          			cp_a( peekb( HL() ) );
   \   000008DC   ........           LDR      R4,??DataTable603  ;; _HL
   \   000008E0   D060D0E1           LDRSB    R6,[R0, #+0]
   \   000008E4   ........           LDR      R0,??DataTable604  ;; mem
   \   000008E8   005094E5           LDR      R5,[R4, #+0]
   \   000008EC   000090E5           LDR      R0,[R0, #+0]
   \   000008F0   0000D5E7           LDRB     R0,[R5, +R0]
   \   000008F4   ........           BL       cp_a
   2679          			xHL( inc16( HL() ) );
   \   000008F8   FF10A0E3           MOV      R1,#+255
   \   000008FC   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000900   010085E2           ADD      R0,R5,#+1
   2680          			xBC( dec16( BC() ) );
   \   00000904   ........           LDR      R5,??DataTable602  ;; _B
   \   00000908   000001E0           AND      R0,R1,R0
   \   0000090C   002095E5           LDR      R2,[R5, #+0]
   \   00000910   000084E5           STR      R0,[R4, #+0]
   \   00000914   ........           LDR      R0,??DataTable605  ;; _C
   \   00000918   003090E5           LDR      R3,[R0, #+0]
   \   0000091C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000920   012042E2           SUB      R2,R2,#+1
   \   00000924   022001E0           AND      R2,R1,R2
   \   00000928   4214A0E1           ASR      R1,R2,#+8
   \   0000092C   FF2002E2           AND      R2,R2,#0xFF
   \   00000930   002080E5           STR      R2,[R0, #+0]
   2681          
   2682          			boolean    pv = (BC() != 0);
   \   00000934   000090E5           LDR      R0,[R0, #+0]
   \   00000938   001085E5           STR      R1,[R5, #+0]
   \   0000093C   010490E1           ORRS     R0,R0,R1, LSL #+8
   2683          
   2684          			setPV( pv );
   \   00000940   ........           LDR      R1,??DataTable594  ;; fPV
   \   00000944   0100A013           MOVNE    R0,#+1
   \   00000948   0000C1E5           STRB     R0,[R1, #+0]
   2685          			setC( c );
   \   0000094C   ........           LDR      R1,??DataTable595  ;; fC
   2686          			if ( pv && !Zset() ) {
   \   00000950   000050E3           CMP      R0,#+0
   \   00000954   0060C1E5           STRB     R6,[R1, #+0]
   \   00000958   58FFFF0A           BEQ      ??execute_ed_75
   \                     ??execute_ed_85:
   \   0000095C   ........           LDR      R0,??DataTable606  ;; fZ
   \   00000960   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000964   000050E3           CMP      R0,#+0
   \   00000968   54FFFF1A           BNE      ??execute_ed_75
   2687          				xPC( (PC()-2)&0xffff );
   \                     ??execute_ed_86:
   \   0000096C   ........           LDR      R0,??DataTable571  ;; _PC
   \   00000970   001090E5           LDR      R1,[R0, #+0]
   \   00000974   021041E2           SUB      R1,R1,#+2
   \   00000978   0118A0E1           LSL      R1,R1,#+16
   \   0000097C   2118A0E1           LSR      R1,R1,#+16
   \   00000980   001080E5           STR      R1,[R0, #+0]
   2688          				return ( 21 );
   \   00000984   1500A0E3           MOV      R0,#+21
   \   00000988   7080BDE8           POP      {R4-R6,PC}
   2689          			}
   2690          			return ( 16 );
   2691          		}
   2692          		case 178:  /* INIR */
   2693          		{
   2694          			int b;
   2695          			pokeb( HL(), inb( BC() ) );
   \                     ??execute_ed_87:
   \   0000098C   ........           LDR      R5,??DataTable602  ;; _B
   \   00000990   ........           LDR      R1,??DataTable605  ;; _C
   \   00000994   000095E5           LDR      R0,[R5, #+0]
   \   00000998   001091E5           LDR      R1,[R1, #+0]
   \   0000099C   ........           LDR      R4,??DataTable603  ;; _HL
   \   000009A0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000009A4   ........           BL       inb
   \   000009A8   ........           LDR      R2,??DataTable604  ;; mem
   \   000009AC   001094E5           LDR      R1,[R4, #+0]
   \   000009B0   002092E5           LDR      R2,[R2, #+0]
   \   000009B4   0200C1E7           STRB     R0,[R1, +R2]
   2696          			xB( b = qdec8( B() ) );
   2697          			xHL( inc16( HL() ) );
   \   000009B8   001094E5           LDR      R1,[R4, #+0]
   2698          
   2699          			setZ( true );
   \   000009BC   ........           LDR      R2,??DataTable606  ;; fZ
   \   000009C0   000095E5           LDR      R0,[R5, #+0]
   \   000009C4   011081E2           ADD      R1,R1,#+1
   \   000009C8   0118A0E1           LSL      R1,R1,#+16
   \   000009CC   2118A0E1           LSR      R1,R1,#+16
   \   000009D0   001084E5           STR      R1,[R4, #+0]
   \   000009D4   0110A0E3           MOV      R1,#+1
   \   000009D8   0010C2E5           STRB     R1,[R2, #+0]
   2700          			setN( true );
   \   000009DC   ........           LDR      R2,??DataTable607  ;; fN
   \   000009E0   010040E2           SUB      R0,R0,#+1
   \   000009E4   FF0000E2           AND      R0,R0,#0xFF
   \   000009E8   000085E5           STR      R0,[R5, #+0]
   \   000009EC   0010C2E5           STRB     R1,[R2, #+0]
   2701          			if (b != 0) {
   \   000009F0   000050E3           CMP      R0,#+0
   \   000009F4   DCFFFF1A           BNE      ??execute_ed_86
   2702          				xPC( (PC()-2)&0xffff );
   2703          				return ( 21 );
   2704          			}
   2705          			return ( 16 );
   2706          		}
   \   000009F8   51FFFFEA           B        ??execute_ed_77
   2707          		case 179:  /* OTIR */
   2708          		{
   2709          			int b;
   2710          			xB( b = qdec8( B() ) );
   \                     ??execute_ed_88:
   \   000009FC   ........           LDR      R5,??DataTable602  ;; _B
   2711          			outb( BC(), peekb( HL() ), local_tstates );
   \   00000A00   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000A04   000095E5           LDR      R0,[R5, #+0]
   \   00000A08   ........           LDR      R1,??DataTable604  ;; mem
   \   00000A0C   010040E2           SUB      R0,R0,#+1
   \   00000A10   001091E5           LDR      R1,[R1, #+0]
   \   00000A14   FF6000E2           AND      R6,R0,#0xFF
   \   00000A18   000094E5           LDR      R0,[R4, #+0]
   \   00000A1C   006085E5           STR      R6,[R5, #+0]
   \   00000A20   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000A24   ........           LDR      R0,??DataTable605  ;; _C
   \   00000A28   000090E5           LDR      R0,[R0, #+0]
   \   00000A2C   060480E1           ORR      R0,R0,R6, LSL #+8
   \   00000A30   ........           BL       outb
   2712          			xHL( inc16( HL() ) );
   \   00000A34   000094E5           LDR      R0,[R4, #+0]
   2713          
   2714          			setZ( true );
   \   00000A38   0110A0E3           MOV      R1,#+1
   \   00000A3C   010080E2           ADD      R0,R0,#+1
   \   00000A40   0008A0E1           LSL      R0,R0,#+16
   \   00000A44   2008A0E1           LSR      R0,R0,#+16
   \   00000A48   000084E5           STR      R0,[R4, #+0]
   \   00000A4C   ........           LDR      R0,??DataTable606  ;; fZ
   2715          			setN( true );
   2716          			if (b != 0) {
   \   00000A50   000056E3           CMP      R6,#+0
   \   00000A54   0010C0E5           STRB     R1,[R0, #+0]
   \   00000A58   ........           LDR      R0,??DataTable607  ;; fN
   \   00000A5C   0010C0E5           STRB     R1,[R0, #+0]
   \                     ??execute_ed_89:
   \   00000A60   C1FFFF1A           BNE      ??execute_ed_86
   \   00000A64   36FFFFEA           B        ??execute_ed_77
   2717          				xPC( (PC()-2)&0xffff );
   2718          				return ( 21 );
   2719          			}
   2720          			return ( 16 );
   2721          		}
   2722          
   2723          		/* xxDR */
   2724          		case 184:  /* LDDR */
   2725          		{
   2726          #ifdef useasm
   2727                            if(temp=BC()){
   \                     ??execute_ed_90:
   \   00000A68   ........           LDR      R0,??DataTable605  ;; _C
   \   00000A6C   ........           LDR      R5,??DataTable602  ;; _B
   \   00000A70   003090E5           LDR      R3,[R0, #+0]
   \   00000A74   000095E5           LDR      R0,[R5, #+0]
   \   00000A78   B8619FE5           LDR      R6,??execute_ed_81  ;; temp
   \   00000A7C   000493E1           ORRS     R0,R3,R0, LSL #+8
   \   00000A80   000086E5           STR      R0,[R6, #+0]
   \   00000A84   8EFFFF0A           BEQ      ??execute_ed_82
   2728                              lddrr(mem+DE(),mem+HL(),temp);
   \   00000A88   ........           LDR      R1,??DataTable604  ;; mem
   \   00000A8C   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000A90   003091E5           LDR      R3,[R1, #+0]
   \   00000A94   ........           LDR      R5,??DataTable588  ;; _DE
   \   00000A98   000094E5           LDR      R0,[R4, #+0]
   \   00000A9C   002096E5           LDR      R2,[R6, #+0]
   \   00000AA0   031080E0           ADD      R1,R0,R3
   \   00000AA4   000095E5           LDR      R0,[R5, #+0]
   \   00000AA8   030080E0           ADD      R0,R0,R3
   \   00000AAC   ........           _BLF     lddrr,??lddrr??rA
   2729          			xDE( (DE()-temp)&0xffff );
   \   00000AB0   000096E5           LDR      R0,[R6, #+0]
   \   00000AB4   002095E5           LDR      R2,[R5, #+0]
   \   00000AB8   FF10A0E3           MOV      R1,#+255
   \   00000ABC   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000AC0   002042E0           SUB      R2,R2,R0
   \   00000AC4   022001E0           AND      R2,R1,R2
   \   00000AC8   002085E5           STR      R2,[R5, #+0]
   2730          			xHL( (_HL-temp)&0xffff );
   \   00000ACC   002094E5           LDR      R2,[R4, #+0]
   \   00000AD0   002042E0           SUB      R2,R2,R0
   \   00000AD4   69FFFFEA           B        ??execute_ed_83
   2731          			xBC( 0 );
   2732          			setH( false );
   2733          			setN( false );
   2734          			setPV( false );
   2735                              REFRESH(temp<<1);
   2736                            }
   2737                            return 21*temp;
   2738          #else
   2739          			int _local_tstates = 0;
   2740          			int count, dest, from;
   2741          
   2742          			count = BC();
   2743          			dest = DE();
   2744          			from = HL();
   2745          			REFRESH ( -2 );
   2746          			do {
   2747          				pokeb(dest, peekb(from));
   2748          				from  = dec16( from );
   2749          				dest  = dec16( dest );
   2750          				count = dec16( count );
   2751          
   2752          				_local_tstates += ( 21 );
   2753          				REFRESH( 2 );
   2754          				if ( interruptTriggered( _local_tstates ) ) {
   2755          					break;
   2756          				}
   2757          			} while (count != 0);
   2758          			if (count != 0) {
   2759          				xPC( (PC()-2)&0xffff );
   2760          				setH( false );
   2761          				setN( false );
   2762          				setPV( true );
   2763          			}
   2764          			else {
   2765          				_local_tstates += ( -5 );
   2766          				setH( false );
   2767          				setN( false );
   2768          				setPV( false );
   2769          			}
   2770          			xDE( dest );
   2771          			xHL( from );
   2772          			xBC( count );
   2773          
   2774          			return ( _local_tstates );
   2775          #endif
   2776          		}
   2777          		case 185:  /* CPDR */
   2778          		{
   2779          			boolean    c = Cset();
   \                     ??execute_ed_91:
   \   00000AD8   ........           LDR      R0,??DataTable595  ;; fC
   2780          
   2781          			cp_a( peekb( HL() ) );
   \   00000ADC   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000AE0   D060D0E1           LDRSB    R6,[R0, #+0]
   \   00000AE4   ........           LDR      R0,??DataTable604  ;; mem
   \   00000AE8   005094E5           LDR      R5,[R4, #+0]
   \   00000AEC   000090E5           LDR      R0,[R0, #+0]
   \   00000AF0   0000D5E7           LDRB     R0,[R5, +R0]
   \   00000AF4   ........           BL       cp_a
   2782          			xHL( dec16( HL() ) );
   \   00000AF8   FF10A0E3           MOV      R1,#+255
   \   00000AFC   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000B00   010045E2           SUB      R0,R5,#+1
   2783          			xBC( dec16( BC() ) );
   \   00000B04   ........           LDR      R5,??DataTable602  ;; _B
   \   00000B08   000001E0           AND      R0,R1,R0
   \   00000B0C   002095E5           LDR      R2,[R5, #+0]
   \   00000B10   000084E5           STR      R0,[R4, #+0]
   \   00000B14   ........           LDR      R0,??DataTable605  ;; _C
   \   00000B18   003090E5           LDR      R3,[R0, #+0]
   \   00000B1C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000B20   012042E2           SUB      R2,R2,#+1
   \   00000B24   022001E0           AND      R2,R1,R2
   \   00000B28   4214A0E1           ASR      R1,R2,#+8
   \   00000B2C   FF2002E2           AND      R2,R2,#0xFF
   \   00000B30   002080E5           STR      R2,[R0, #+0]
   2784          
   2785          			boolean    pv = (BC() != 0);
   \   00000B34   000090E5           LDR      R0,[R0, #+0]
   \   00000B38   001085E5           STR      R1,[R5, #+0]
   \   00000B3C   010490E1           ORRS     R0,R0,R1, LSL #+8
   2786          
   2787          			setPV( pv );
   \   00000B40   ........           LDR      R1,??DataTable594  ;; fPV
   \   00000B44   0100A013           MOVNE    R0,#+1
   \   00000B48   0000C1E5           STRB     R0,[R1, #+0]
   2788          			setC( c );
   \   00000B4C   ........           LDR      R1,??DataTable595  ;; fC
   2789          			if ( pv && !Zset() ) {
   \   00000B50   000050E3           CMP      R0,#+0
   \   00000B54   0060C1E5           STRB     R6,[R1, #+0]
   \   00000B58   7FFFFF1A           BNE      ??execute_ed_85
   \   00000B5C   F8FEFFEA           B        ??execute_ed_77
   2790          				xPC( (PC()-2)&0xffff );
   2791          				return ( 21 );
   2792          			}
   2793          			return ( 16 );
   2794          		}
   2795          		case 186:  /* INDR */
   2796          		{
   2797          			int b;
   2798          			pokeb( HL(), inb( BC() ) );
   \                     ??execute_ed_92:
   \   00000B60   ........           LDR      R5,??DataTable602  ;; _B
   \   00000B64   ........           LDR      R1,??DataTable605  ;; _C
   \   00000B68   000095E5           LDR      R0,[R5, #+0]
   \   00000B6C   001091E5           LDR      R1,[R1, #+0]
   \   00000B70   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000B74   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000B78   ........           BL       inb
   \   00000B7C   ........           LDR      R2,??DataTable604  ;; mem
   \   00000B80   001094E5           LDR      R1,[R4, #+0]
   \   00000B84   002092E5           LDR      R2,[R2, #+0]
   \   00000B88   0200C1E7           STRB     R0,[R1, +R2]
   2799          			xB( b = qdec8( B() ) );
   2800          			xHL( dec16( HL() ) );
   \   00000B8C   001094E5           LDR      R1,[R4, #+0]
   2801          
   2802          			setZ( true );
   \   00000B90   ........           LDR      R2,??DataTable606  ;; fZ
   \   00000B94   000095E5           LDR      R0,[R5, #+0]
   \   00000B98   011041E2           SUB      R1,R1,#+1
   \   00000B9C   0118A0E1           LSL      R1,R1,#+16
   \   00000BA0   2118A0E1           LSR      R1,R1,#+16
   \   00000BA4   001084E5           STR      R1,[R4, #+0]
   \   00000BA8   0110A0E3           MOV      R1,#+1
   \   00000BAC   0010C2E5           STRB     R1,[R2, #+0]
   2803          			setN( true );
   \   00000BB0   ........           LDR      R2,??DataTable607  ;; fN
   \   00000BB4   010040E2           SUB      R0,R0,#+1
   \   00000BB8   FF0000E2           AND      R0,R0,#0xFF
   \   00000BBC   000085E5           STR      R0,[R5, #+0]
   \   00000BC0   0010C2E5           STRB     R1,[R2, #+0]
   2804          			if (b != 0) {
   \   00000BC4   000050E3           CMP      R0,#+0
   \   00000BC8   A4FFFFEA           B        ??execute_ed_89
   2805          				xPC( (PC()-2)&0xffff );
   2806          				return ( 21 );
   2807          			}
   2808          			return ( 16 );
   2809          		}
   2810          		case 187:  /* OTDR */
   2811          		{
   2812          			int b;
   2813          			xB( b = qdec8( B() ) );
   \                     ??execute_ed_93:
   \   00000BCC   ........           LDR      R5,??DataTable602  ;; _B
   2814          			outb( BC(), peekb( HL() ), local_tstates );
   \   00000BD0   ........           LDR      R4,??DataTable603  ;; _HL
   \   00000BD4   000095E5           LDR      R0,[R5, #+0]
   \   00000BD8   ........           LDR      R1,??DataTable604  ;; mem
   \   00000BDC   010040E2           SUB      R0,R0,#+1
   \   00000BE0   001091E5           LDR      R1,[R1, #+0]
   \   00000BE4   FF6000E2           AND      R6,R0,#0xFF
   \   00000BE8   000094E5           LDR      R0,[R4, #+0]
   \   00000BEC   006085E5           STR      R6,[R5, #+0]
   \   00000BF0   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000BF4   ........           LDR      R0,??DataTable605  ;; _C
   \   00000BF8   000090E5           LDR      R0,[R0, #+0]
   \   00000BFC   060480E1           ORR      R0,R0,R6, LSL #+8
   \   00000C00   ........           BL       outb
   2815          			xHL( dec16( HL() ) );
   \   00000C04   000094E5           LDR      R0,[R4, #+0]
   2816          
   2817          			setZ( true );
   \   00000C08   0110A0E3           MOV      R1,#+1
   \   00000C0C   010040E2           SUB      R0,R0,#+1
   \   00000C10   0008A0E1           LSL      R0,R0,#+16
   \   00000C14   2008A0E1           LSR      R0,R0,#+16
   \   00000C18   000084E5           STR      R0,[R4, #+0]
   \   00000C1C   ........           LDR      R0,??DataTable606  ;; fZ
   2818          			setN( true );
   2819          			if (b != 0) {
   \   00000C20   000056E3           CMP      R6,#+0
   \   00000C24   0010C0E5           STRB     R1,[R0, #+0]
   \   00000C28   ........           LDR      R0,??DataTable607  ;; fN
   \   00000C2C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000C30   4DFFFF1A           BNE      ??execute_ed_86
   \   00000C34   C2FEFFEA           B        ??execute_ed_77
   \                     ??execute_ed_81:
   \   00000C38   ........           DC32     temp
   2820          				xPC( (PC()-2)&0xffff );
   2821          				return ( 21 );
   2822          			}
   2823          			return ( 16 );
   2824          		}
   2825          
   2826          		} // swith end
   2827          
   2828          		// NOP
   2829          		return ( 8 );
   2830          	}
   2831          #pragma optimize=no_code_motion

   \                                 In segment CODE, align 4, keep-with-next
   2832          	private final int execute_cb() {
   2833          		REFRESH( 1 );
   \                     execute_cb:
   \   00000000   780F9FE5           LDR      R0,??execute_cb_1  ;; _R
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2834          
   2835          		switch ( nxtpcb() ) {
   \   00000014   680F9FE5           LDR      R0,??execute_cb_1+0x4  ;; _PC
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   012081E2           ADD      R2,R1,#+1
   \   00000020   002080E5           STR      R2,[R0, #+0]
   \   00000024   5C0F9FE5           LDR      R0,??execute_cb_1+0x8  ;; mem
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   0000D1E7           LDRB     R0,[R1, +R0]
   \   00000030   FF0050E3           CMP      R0,#+255
   \   00000034   AF05008A           BHI      ??execute_cb_2
   \   00000038   021F8FE2           ADR      R1,??execute_cb_0
   \   0000003C   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000040   B01091E1           LDRH     R1,[R1, R0]
   \   00000044   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??execute_cb_0:
   \   00000048   7F0083008700       DC16     +127,+131,+135,+137
   \              8900        
   \   00000050   8B0094009D00       DC16     +139,+148,+157,+165
   \              A500        
   \   00000058   A900AD00B100       DC16     +169,+173,+177,+182
   \              B600        
   \   00000060   BB00BD00C200       DC16     +187,+189,+194,+204
   \              CC00        
   \   00000068   D000D400D800       DC16     +208,+212,+216,+221
   \              DD00        
   \   00000070   E200E400E900       DC16     +226,+228,+233,+243
   \              F300        
   \   00000078   F700FB00FF00       DC16     +247,+251,+255,+260
   \              0401        
   \   00000080   09010B011001       DC16     +265,+267,+272,+280
   \              1801        
   \   00000088   1C0120012401       DC16     +284,+288,+292,+297
   \              2901        
   \   00000090   2E0130013501       DC16     +302,+304,+309,+317
   \              3D01        
   \   00000098   410145014901       DC16     +321,+325,+329,+334
   \              4E01        
   \   000000A0   530155015A01       DC16     +339,+341,+346,+354
   \              6201        
   \   000000A8   66016A016E01       DC16     +358,+362,+366,+371
   \              7301        
   \   000000B0   78017A017F01       DC16     +376,+378,+383,+391
   \              8701        
   \   000000B8   8B018F019301       DC16     +395,+399,+403,+408
   \              9801        
   \   000000C0   9D019F01A401       DC16     +413,+415,+420,+428
   \              AC01        
   \   000000C8   B001B501BA01       DC16     +432,+437,+442,+448
   \              C001        
   \   000000D0   C601CC01D201       DC16     +454,+460,+466,+473
   \              D901        
   \   000000D8   DE01E301E801       DC16     +478,+483,+488,+494
   \              EE01        
   \   000000E0   F401FA010002       DC16     +500,+506,+512,+521
   \              0902        
   \   000000E8   0E0213021802       DC16     +526,+531,+536,+542
   \              1E02        
   \   000000F0   24022A023002       DC16     +548,+554,+560,+569
   \              3902        
   \   000000F8   3E0243024802       DC16     +574,+579,+584,+590
   \              4E02        
   \   00000100   54025A026002       DC16     +596,+602,+608,+615
   \              6702        
   \   00000108   6C0271027602       DC16     +620,+625,+630,+636
   \              7C02        
   \   00000110   820288028E02       DC16     +642,+648,+654,+661
   \              9502        
   \   00000118   9A029F02A402       DC16     +666,+671,+676,+682
   \              AA02        
   \   00000120   B002B602BC02       DC16     +688,+694,+700,+707
   \              C302        
   \   00000128   C802CD02D202       DC16     +712,+717,+722,+728
   \              D802        
   \   00000130   DE02E402EA02       DC16     +734,+740,+746,+753
   \              F102        
   \   00000138   F602FB020003       DC16     +758,+763,+768,+774
   \              0603        
   \   00000140   0C0312031803       DC16     +780,+786,+792,+799
   \              1F03        
   \   00000148   240328032C03       DC16     +804,+808,+812,+817
   \              3103        
   \   00000150   370339033F03       DC16     +823,+825,+831,+839
   \              4703        
   \   00000158   4B034F035303       DC16     +843,+847,+851,+856
   \              5803        
   \   00000160   5E0360036603       DC16     +862,+864,+870,+878
   \              6E03        
   \   00000168   720376037A03       DC16     +882,+886,+890,+895
   \              7F03        
   \   00000170   850387038D03       DC16     +901,+903,+909,+917
   \              9503        
   \   00000178   99039D03A103       DC16     +921,+925,+929,+934
   \              A603        
   \   00000180   AC03AE03B403       DC16     +940,+942,+948,+956
   \              BC03        
   \   00000188   C003C403C803       DC16     +960,+964,+968,+981
   \              D503        
   \   00000190   DB03DD03E303       DC16     +987,+989,+995,+1003
   \              EB03        
   \   00000198   EF03F303F703       DC16     +1007,+1011,+1015,+1020
   \              FC03        
   \   000001A0   020404040A04       DC16     +1026,+1028,+1034,+1042
   \              1204        
   \   000001A8   16041A041E04       DC16     +1046,+1050,+1054,+1059
   \              2304        
   \   000001B0   29042B043104       DC16     +1065,+1067,+1073,+1081
   \              3904        
   \   000001B8   3D0441044504       DC16     +1085,+1089,+1093,+1098
   \              4A04        
   \   000001C0   500452045804       DC16     +1104,+1106,+1112,+1120
   \              6004        
   \   000001C8   640468046C04       DC16     +1124,+1128,+1132,+1137
   \              7104        
   \   000001D0   78047A048104       DC16     +1144,+1146,+1153,+1161
   \              8904        
   \   000001D8   8D0491049504       DC16     +1165,+1169,+1173,+1178
   \              9A04        
   \   000001E0   A104A404AB04       DC16     +1185,+1188,+1195,+1203
   \              B304        
   \   000001E8   B704BB04BF04       DC16     +1207,+1211,+1215,+1218
   \              C204        
   \   000001F0   C904CC04D304       DC16     +1225,+1228,+1235,+1243
   \              DB04        
   \   000001F8   DF04E304E704       DC16     +1247,+1251,+1255,+1260
   \              EC04        
   \   00000200   F304F604FD04       DC16     +1267,+1270,+1277,+1285
   \              0505        
   \   00000208   09050D051105       DC16     +1289,+1293,+1297,+1300
   \              1405        
   \   00000210   1B051E052505       DC16     +1307,+1310,+1317,+1325
   \              2D05        
   \   00000218   310535053905       DC16     +1329,+1333,+1337,+1340
   \              3C05        
   \   00000220   430546054D05       DC16     +1347,+1350,+1357,+1365
   \              5505        
   \   00000228   59055D056105       DC16     +1369,+1373,+1377,+1380
   \              6405        
   \   00000230   6B056E057505       DC16     +1387,+1390,+1397,+1405
   \              7D05        
   \   00000238   810585058905       DC16     +1409,+1413,+1417,+1422
   \              8E05        
   \   00000240   950598059F05       DC16     +1429,+1432,+1439,+1447
   \              A705        
   2836          
   2837          		case   0:	/* RLC B */
   2838          		{ xB( rlc( B() ) ); return ( 8 ); }
   \                     ??execute_cb_3:
   \   00000248   3C4D9FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   0000024C   000094E5           LDR      R0,[R4, #+0]
   \   00000250   ........           BL       rlc
   \   00000254   160000EA           B        ??execute_cb_4
   2839          		case   1:	/* RLC C */
   2840          		{ xC( rlc( C() ) ); return ( 8 ); }
   \                     ??execute_cb_5:
   \   00000258   304D9FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   0000025C   000094E5           LDR      R0,[R4, #+0]
   \   00000260   ........           BL       rlc
   \   00000264   120000EA           B        ??execute_cb_4
   2841          		case   2:	/* RLC D */
   2842          		{ xD( rlc( D() ) ); return ( 8 ); }
   \                     ??execute_cb_6:
   \   00000268   244D9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   0000026C   020000EA           B        ??execute_cb_7
   2843          		case   3:	/* RLC E */
   2844          		{ xE( rlc( E() ) ); return ( 8 ); }
   \                     ??execute_cb_8:
   \   00000270   1C4D9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000274   090000EA           B        ??execute_cb_9
   2845          		case   4:	/* RLC H */
   2846          		{ xH( rlc( H() ) ); return ( 8 ); }
   \                     ??execute_cb_10:
   \   00000278   184D9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \                     ??execute_cb_7:
   \   0000027C   005094E5           LDR      R5,[R4, #+0]
   \   00000280   4504A0E1           ASR      R0,R5,#+8
   \   00000284   ........           BL       rlc
   \                     ??execute_cb_11:
   \   00000288   FF1005E2           AND      R1,R5,#0xFF
   \   0000028C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000290   000084E5           STR      R0,[R4, #+0]
   \   00000294   0800A0E3           MOV      R0,#+8
   \   00000298   3080BDE8           POP      {R4,R5,PC}
   2847          		case   5:	/* RLC L */
   2848          		{ xL( rlc( L() ) ); return ( 8 ); }
   \                     ??execute_cb_12:
   \   0000029C   F44C9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \                     ??execute_cb_9:
   \   000002A0   005094E5           LDR      R5,[R4, #+0]
   \   000002A4   FF0005E2           AND      R0,R5,#0xFF
   \   000002A8   ........           BL       rlc
   \                     ??execute_cb_13:
   \   000002AC   FF1C05E2           AND      R1,R5,#0xFF00
   \   000002B0   010080E1           ORR      R0,R0,R1
   \                     ??execute_cb_4:
   \   000002B4   000084E5           STR      R0,[R4, #+0]
   \                     ??execute_cb_14:
   \   000002B8   0800A0E3           MOV      R0,#+8
   \   000002BC   3080BDE8           POP      {R4,R5,PC}
   2849          		case   6:	/* RLC (HL) */
   2850          		{
   2851          			int hl = HL();
   \                     ??execute_cb_15:
   \   000002C0   D00C9FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2852          			pokeb( hl, rlc( peekb( hl ) ) );
   \   000002C4   BC1C9FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   001091E5           LDR      R1,[R1, #+0]
   \   000002D0   014080E0           ADD      R4,R0,R1
   \   000002D4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000002D8   ........           BL       rlc
   \   000002DC   4A0000EA           B        ??execute_cb_16
   2853          			return ( 15 );
   2854          		}
   2855          		case   7:	/* RLC A */
   2856          		{ xA( rlc( A() ) ); return ( 8 ); }
   \                     ??execute_cb_17:
   \   000002E0   B44C9FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   000002E4   000094E5           LDR      R0,[R4, #+0]
   \   000002E8   ........           BL       rlc
   \   000002EC   F0FFFFEA           B        ??execute_cb_4
   2857          
   2858          		case   8:	/* RRC B */
   2859          		{ xB( rrc( B() ) ); return ( 8 ); }
   \                     ??execute_cb_18:
   \   000002F0   944C9FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   000002F4   000094E5           LDR      R0,[R4, #+0]
   \   000002F8   ........           BL       rrc
   \   000002FC   ECFFFFEA           B        ??execute_cb_4
   2860          		case   9:	/* RRC C */
   2861          		{ xC( rrc( C() ) ); return ( 8 ); }
   \                     ??execute_cb_19:
   \   00000300   884C9FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   00000304   000094E5           LDR      R0,[R4, #+0]
   \   00000308   ........           BL       rrc
   \   0000030C   E8FFFFEA           B        ??execute_cb_4
   2862          		case  10:	/* RRC D */
   2863          		{ xD( rrc( D() ) ); return ( 8 ); }
   \                     ??execute_cb_20:
   \   00000310   7C4C9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_21:
   \   00000314   005094E5           LDR      R5,[R4, #+0]
   \   00000318   4504A0E1           ASR      R0,R5,#+8
   \   0000031C   ........           BL       rrc
   \   00000320   D8FFFFEA           B        ??execute_cb_11
   2864          		case  11:	/* RRC E */
   2865          		{ xE( rrc( E() ) ); return ( 8 ); }
   \                     ??execute_cb_22:
   \   00000324   684C9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000328   005094E5           LDR      R5,[R4, #+0]
   \   0000032C   FF0005E2           AND      R0,R5,#0xFF
   \   00000330   ........           BL       rrc
   \   00000334   DCFFFFEA           B        ??execute_cb_13
   2866          		case  12:	/* RRC H */
   2867          		{ xH( rrc( H() ) ); return ( 8 ); }
   \                     ??execute_cb_23:
   \   00000338   584C9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   0000033C   F4FFFFEA           B        ??execute_cb_21
   2868          		case  13:	/* RRC L */
   2869          		{ xL( rrc( L() ) ); return ( 8 ); }
   \                     ??execute_cb_24:
   \   00000340   504C9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000344   005094E5           LDR      R5,[R4, #+0]
   \   00000348   FF0005E2           AND      R0,R5,#0xFF
   \   0000034C   ........           BL       rrc
   \   00000350   D5FFFFEA           B        ??execute_cb_13
   2870          		case  14:	/* RRC (HL) */
   2871          		{
   2872          			int hl = HL();
   \                     ??execute_cb_25:
   \   00000354   3C0C9FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2873          			pokeb( hl, rrc( peekb( hl ) ) );
   \   00000358   281C9FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   0000035C   000090E5           LDR      R0,[R0, #+0]
   \   00000360   001091E5           LDR      R1,[R1, #+0]
   \   00000364   014080E0           ADD      R4,R0,R1
   \   00000368   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000036C   ........           BL       rrc
   \   00000370   0000C4E5           STRB     R0,[R4, #+0]
   2874          			return ( 15 );
   \   00000374   0F00A0E3           MOV      R0,#+15
   \   00000378   3080BDE8           POP      {R4,R5,PC}
   2875          		}
   2876          		case  15:	/* RRC A */
   2877          		{ xA( rrc( A() ) ); return ( 8 ); }
   \                     ??execute_cb_26:
   \   0000037C   184C9FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   00000380   000094E5           LDR      R0,[R4, #+0]
   \   00000384   ........           BL       rrc
   \   00000388   C9FFFFEA           B        ??execute_cb_4
   2878          
   2879          		case  16:	/* RL B */
   2880          		{ xB( rl( B() ) ); return ( 8 ); }
   \                     ??execute_cb_27:
   \   0000038C   F84B9FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   00000390   000094E5           LDR      R0,[R4, #+0]
   \   00000394   ........           BL       rl
   \   00000398   C5FFFFEA           B        ??execute_cb_4
   2881          		case  17:	/* RL C */
   2882          		{ xC( rl( C() ) ); return ( 8 ); }
   \                     ??execute_cb_28:
   \   0000039C   EC4B9FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   000003A0   000094E5           LDR      R0,[R4, #+0]
   \   000003A4   ........           BL       rl
   \   000003A8   C1FFFFEA           B        ??execute_cb_4
   2883          		case  18:	/* RL D */
   2884          		{ xD( rl( D() ) ); return ( 8 ); }
   \                     ??execute_cb_29:
   \   000003AC   E04B9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_30:
   \   000003B0   005094E5           LDR      R5,[R4, #+0]
   \   000003B4   4504A0E1           ASR      R0,R5,#+8
   \   000003B8   ........           BL       rl
   \   000003BC   B1FFFFEA           B        ??execute_cb_11
   2885          		case  19:	/* RL E */
   2886          		{ xE( rl( E() ) ); return ( 8 ); }
   \                     ??execute_cb_31:
   \   000003C0   CC4B9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   000003C4   005094E5           LDR      R5,[R4, #+0]
   \   000003C8   FF0005E2           AND      R0,R5,#0xFF
   \   000003CC   ........           BL       rl
   \   000003D0   B5FFFFEA           B        ??execute_cb_13
   2887          		case  20:	/* RL H */
   2888          		{ xH( rl( H() ) ); return ( 8 ); }
   \                     ??execute_cb_32:
   \   000003D4   BC4B9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   000003D8   F4FFFFEA           B        ??execute_cb_30
   2889          		case  21:	/* RL L */
   2890          		{ xL( rl( L() ) ); return ( 8 ); }
   \                     ??execute_cb_33:
   \   000003DC   B44B9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   000003E0   005094E5           LDR      R5,[R4, #+0]
   \   000003E4   FF0005E2           AND      R0,R5,#0xFF
   \   000003E8   ........           BL       rl
   \   000003EC   AEFFFFEA           B        ??execute_cb_13
   2891          		case  22:	/* RL (HL) */
   2892          		{
   2893          			int hl = HL();
   \                     ??execute_cb_34:
   \   000003F0   A00B9FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2894          			pokeb( hl, rl( peekb( hl ) ) );
   \   000003F4   8C1B9FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   000003F8   000090E5           LDR      R0,[R0, #+0]
   \   000003FC   001091E5           LDR      R1,[R1, #+0]
   \   00000400   014080E0           ADD      R4,R0,R1
   \   00000404   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000408   ........           BL       rl
   \                     ??execute_cb_16:
   \   0000040C   0000C4E5           STRB     R0,[R4, #+0]
   \   00000410   0F00A0E3           MOV      R0,#+15
   \   00000414   3080BDE8           POP      {R4,R5,PC}
   2895          			return ( 15 );
   2896          		}
   2897          		case  23:	/* RL A */
   2898          		{ xA( rl( A() ) ); return ( 8 ); }
   \                     ??execute_cb_35:
   \   00000418   7C4B9FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   0000041C   000094E5           LDR      R0,[R4, #+0]
   \   00000420   ........           BL       rl
   \   00000424   A2FFFFEA           B        ??execute_cb_4
   2899          
   2900          		case  24:	/* RR B */
   2901          		{ xB( rr( B() ) ); return ( 8 ); }
   \                     ??execute_cb_36:
   \   00000428   5C4B9FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   0000042C   000094E5           LDR      R0,[R4, #+0]
   \   00000430   ........           BL       rr
   \   00000434   9EFFFFEA           B        ??execute_cb_4
   2902          		case  25:	/* RR C */
   2903          		{ xC( rr( C() ) ); return ( 8 ); }
   \                     ??execute_cb_37:
   \   00000438   504B9FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   0000043C   000094E5           LDR      R0,[R4, #+0]
   \   00000440   ........           BL       rr
   \   00000444   9AFFFFEA           B        ??execute_cb_4
   2904          		case  26:	/* RR D */
   2905          		{ xD( rr( D() ) ); return ( 8 ); }
   \                     ??execute_cb_38:
   \   00000448   444B9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_39:
   \   0000044C   005094E5           LDR      R5,[R4, #+0]
   \   00000450   4504A0E1           ASR      R0,R5,#+8
   \   00000454   ........           BL       rr
   \   00000458   8AFFFFEA           B        ??execute_cb_11
   2906          		case  27:	/* RR E */
   2907          		{ xE( rr( E() ) ); return ( 8 ); }
   \                     ??execute_cb_40:
   \   0000045C   304B9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000460   005094E5           LDR      R5,[R4, #+0]
   \   00000464   FF0005E2           AND      R0,R5,#0xFF
   \   00000468   ........           BL       rr
   \   0000046C   8EFFFFEA           B        ??execute_cb_13
   2908          		case  28:	/* RR H */
   2909          		{ xH( rr( H() ) ); return ( 8 ); }
   \                     ??execute_cb_41:
   \   00000470   204B9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000474   F4FFFFEA           B        ??execute_cb_39
   2910          		case  29:	/* RR L */
   2911          		{ xL( rr( L() ) ); return ( 8 ); }
   \                     ??execute_cb_42:
   \   00000478   184B9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   0000047C   005094E5           LDR      R5,[R4, #+0]
   \   00000480   FF0005E2           AND      R0,R5,#0xFF
   \   00000484   ........           BL       rr
   \   00000488   87FFFFEA           B        ??execute_cb_13
   2912          		case  30:	/* RR (HL) */
   2913          		{
   2914          			int hl = HL();
   \                     ??execute_cb_43:
   \   0000048C   040B9FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2915          			pokeb( hl, rr( peekb( hl ) ) );
   \   00000490   F01A9FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000494   000090E5           LDR      R0,[R0, #+0]
   \   00000498   001091E5           LDR      R1,[R1, #+0]
   \   0000049C   014080E0           ADD      R4,R0,R1
   \   000004A0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000004A4   ........           BL       rr
   \   000004A8   D7FFFFEA           B        ??execute_cb_16
   2916          			return ( 15 );
   2917          		}
   2918          		case  31:	/* RR A */
   2919          		{ xA( rr( A() ) ); return ( 8 ); }
   \                     ??execute_cb_44:
   \   000004AC   E84A9FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   000004B0   000094E5           LDR      R0,[R4, #+0]
   \   000004B4   ........           BL       rr
   \   000004B8   7DFFFFEA           B        ??execute_cb_4
   2920          
   2921          		case  32:	/* SLA B */
   2922          		{ xB( sla( B() ) ); return ( 8 ); }
   \                     ??execute_cb_45:
   \   000004BC   C84A9FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   000004C0   000094E5           LDR      R0,[R4, #+0]
   \   000004C4   ........           BL       sla
   \   000004C8   79FFFFEA           B        ??execute_cb_4
   2923          		case  33:	/* SLA C */
   2924          		{ xC( sla( C() ) ); return ( 8 ); }
   \                     ??execute_cb_46:
   \   000004CC   BC4A9FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   000004D0   000094E5           LDR      R0,[R4, #+0]
   \   000004D4   ........           BL       sla
   \   000004D8   75FFFFEA           B        ??execute_cb_4
   2925          		case  34:	/* SLA D */
   2926          		{ xD( sla( D() ) ); return ( 8 ); }
   \                     ??execute_cb_47:
   \   000004DC   B04A9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_48:
   \   000004E0   005094E5           LDR      R5,[R4, #+0]
   \   000004E4   4504A0E1           ASR      R0,R5,#+8
   \   000004E8   ........           BL       sla
   \   000004EC   65FFFFEA           B        ??execute_cb_11
   2927          		case  35:	/* SLA E */
   2928          		{ xE( sla( E() ) ); return ( 8 ); }
   \                     ??execute_cb_49:
   \   000004F0   9C4A9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   000004F4   005094E5           LDR      R5,[R4, #+0]
   \   000004F8   FF0005E2           AND      R0,R5,#0xFF
   \   000004FC   ........           BL       sla
   \   00000500   69FFFFEA           B        ??execute_cb_13
   2929          		case  36:	/* SLA H */
   2930          		{ xH( sla( H() ) ); return ( 8 ); }
   \                     ??execute_cb_50:
   \   00000504   8C4A9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000508   F4FFFFEA           B        ??execute_cb_48
   2931          		case  37:	/* SLA L */
   2932          		{ xL( sla( L() ) ); return ( 8 ); }
   \                     ??execute_cb_51:
   \   0000050C   844A9FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000510   005094E5           LDR      R5,[R4, #+0]
   \   00000514   FF0005E2           AND      R0,R5,#0xFF
   \   00000518   ........           BL       sla
   \   0000051C   62FFFFEA           B        ??execute_cb_13
   2933          		case  38:	/* SLA (HL) */
   2934          		{
   2935          			int hl = HL();
   \                     ??execute_cb_52:
   \   00000520   700A9FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2936          			pokeb( hl, sla( peekb( hl ) ) );
   \   00000524   5C1A9FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000528   000090E5           LDR      R0,[R0, #+0]
   \   0000052C   001091E5           LDR      R1,[R1, #+0]
   \   00000530   014080E0           ADD      R4,R0,R1
   \   00000534   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000538   ........           BL       sla
   \   0000053C   B2FFFFEA           B        ??execute_cb_16
   2937          			return ( 15 );
   2938          		}
   2939          		case  39:	/* SLA A */
   2940          		{ xA( sla( A() ) ); return ( 8 ); }
   \                     ??execute_cb_53:
   \   00000540   544A9FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   00000544   000094E5           LDR      R0,[R4, #+0]
   \   00000548   ........           BL       sla
   \   0000054C   58FFFFEA           B        ??execute_cb_4
   2941          
   2942          		case  40:	/* SRA B */
   2943          		{ xB( sra( B() ) ); return ( 8 ); }
   \                     ??execute_cb_54:
   \   00000550   344A9FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   00000554   000094E5           LDR      R0,[R4, #+0]
   \   00000558   ........           BL       sra
   \   0000055C   54FFFFEA           B        ??execute_cb_4
   2944          		case  41:	/* SRA C */
   2945          		{ xC( sra( C() ) ); return ( 8 ); }
   \                     ??execute_cb_55:
   \   00000560   284A9FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   00000564   000094E5           LDR      R0,[R4, #+0]
   \   00000568   ........           BL       sra
   \   0000056C   50FFFFEA           B        ??execute_cb_4
   2946          		case  42:	/* SRA D */
   2947          		{ xD( sra( D() ) ); return ( 8 ); }
   \                     ??execute_cb_56:
   \   00000570   1C4A9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_57:
   \   00000574   005094E5           LDR      R5,[R4, #+0]
   \   00000578   4504A0E1           ASR      R0,R5,#+8
   \   0000057C   ........           BL       sra
   \   00000580   40FFFFEA           B        ??execute_cb_11
   2948          		case  43:	/* SRA E */
   2949          		{ xE( sra( E() ) ); return ( 8 ); }
   \                     ??execute_cb_58:
   \   00000584   084A9FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000588   005094E5           LDR      R5,[R4, #+0]
   \   0000058C   FF0005E2           AND      R0,R5,#0xFF
   \   00000590   ........           BL       sra
   \   00000594   44FFFFEA           B        ??execute_cb_13
   2950          		case  44:	/* SRA H */
   2951          		{ xH( sra( H() ) ); return ( 8 ); }
   \                     ??execute_cb_59:
   \   00000598   F8499FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   0000059C   F4FFFFEA           B        ??execute_cb_57
   2952          		case  45:	/* SRA L */
   2953          		{ xL( sra( L() ) ); return ( 8 ); }
   \                     ??execute_cb_60:
   \   000005A0   F0499FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   000005A4   005094E5           LDR      R5,[R4, #+0]
   \   000005A8   FF0005E2           AND      R0,R5,#0xFF
   \   000005AC   ........           BL       sra
   \   000005B0   3DFFFFEA           B        ??execute_cb_13
   2954          		case  46:	/* SRA (HL) */
   2955          		{
   2956          			int hl = HL();
   \                     ??execute_cb_61:
   \   000005B4   DC099FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2957          			pokeb( hl, sra( peekb( hl ) ) );
   \   000005B8   C8199FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   000005BC   000090E5           LDR      R0,[R0, #+0]
   \   000005C0   001091E5           LDR      R1,[R1, #+0]
   \   000005C4   014080E0           ADD      R4,R0,R1
   \   000005C8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000005CC   ........           BL       sra
   \   000005D0   8DFFFFEA           B        ??execute_cb_16
   2958          			return ( 15 );
   2959          		}
   2960          		case  47:	/* SRA A */
   2961          		{ xA( sra( A() ) ); return ( 8 ); }
   \                     ??execute_cb_62:
   \   000005D4   C0499FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   000005D8   000094E5           LDR      R0,[R4, #+0]
   \   000005DC   ........           BL       sra
   \   000005E0   33FFFFEA           B        ??execute_cb_4
   2962          
   2963          		case  48:	/* SLS B */
   2964          		{ xB( sls( B() ) ); return ( 8 ); }
   \                     ??execute_cb_63:
   \   000005E4   A0499FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   000005E8   000094E5           LDR      R0,[R4, #+0]
   \   000005EC   ........           BL       sls
   \   000005F0   2FFFFFEA           B        ??execute_cb_4
   2965          		case  49:	/* SLS C */
   2966          		{ xC( sls( C() ) ); return ( 8 ); }
   \                     ??execute_cb_64:
   \   000005F4   94499FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   000005F8   000094E5           LDR      R0,[R4, #+0]
   \   000005FC   ........           BL       sls
   \   00000600   2BFFFFEA           B        ??execute_cb_4
   2967          		case  50:	/* SLS D */
   2968          		{ xD( sls( D() ) ); return ( 8 ); }
   \                     ??execute_cb_65:
   \   00000604   88499FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_66:
   \   00000608   005094E5           LDR      R5,[R4, #+0]
   \   0000060C   4504A0E1           ASR      R0,R5,#+8
   \   00000610   ........           BL       sls
   \   00000614   1BFFFFEA           B        ??execute_cb_11
   2969          		case  51:	/* SLS E */
   2970          		{ xE( sls( E() ) ); return ( 8 ); }
   \                     ??execute_cb_67:
   \   00000618   74499FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   0000061C   005094E5           LDR      R5,[R4, #+0]
   \   00000620   FF0005E2           AND      R0,R5,#0xFF
   \   00000624   ........           BL       sls
   \   00000628   1FFFFFEA           B        ??execute_cb_13
   2971          		case  52:	/* SLS H */
   2972          		{ xH( sls( H() ) ); return ( 8 ); }
   \                     ??execute_cb_68:
   \   0000062C   64499FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000630   F4FFFFEA           B        ??execute_cb_66
   2973          		case  53:	/* SLS L */
   2974          		{ xL( sls( L() ) ); return ( 8 ); }
   \                     ??execute_cb_69:
   \   00000634   5C499FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000638   005094E5           LDR      R5,[R4, #+0]
   \   0000063C   FF0005E2           AND      R0,R5,#0xFF
   \   00000640   ........           BL       sls
   \   00000644   18FFFFEA           B        ??execute_cb_13
   2975          		case  54:	/* SLS (HL) */
   2976          		{
   2977          			int hl = HL();
   \                     ??execute_cb_70:
   \   00000648   48099FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2978          			pokeb( hl, sls( peekb( hl ) ) );
   \   0000064C   34199FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000650   000090E5           LDR      R0,[R0, #+0]
   \   00000654   001091E5           LDR      R1,[R1, #+0]
   \   00000658   014080E0           ADD      R4,R0,R1
   \   0000065C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000660   ........           BL       sls
   \   00000664   68FFFFEA           B        ??execute_cb_16
   2979          			return ( 15 );
   2980          		}
   2981          		case  55:	/* SLS A */
   2982          		{ xA( sls( A() ) ); return ( 8 ); }
   \                     ??execute_cb_71:
   \   00000668   2C499FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   0000066C   000094E5           LDR      R0,[R4, #+0]
   \   00000670   ........           BL       sls
   \   00000674   0EFFFFEA           B        ??execute_cb_4
   2983          
   2984          		case  56:	/* SRL B */
   2985          		{ xB( srl( B() ) ); return ( 8 ); }
   \                     ??execute_cb_72:
   \   00000678   0C499FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   0000067C   000094E5           LDR      R0,[R4, #+0]
   \   00000680   ........           BL       srl
   \   00000684   0AFFFFEA           B        ??execute_cb_4
   2986          		case  57:	/* SRL C */
   2987          		{ xC( srl( C() ) ); return ( 8 ); }
   \                     ??execute_cb_73:
   \   00000688   00499FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   0000068C   000094E5           LDR      R0,[R4, #+0]
   \   00000690   ........           BL       srl
   \   00000694   06FFFFEA           B        ??execute_cb_4
   2988          		case  58:	/* SRL D */
   2989          		{ xD( srl( D() ) ); return ( 8 ); }
   \                     ??execute_cb_74:
   \   00000698   F4489FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_75:
   \   0000069C   005094E5           LDR      R5,[R4, #+0]
   \   000006A0   4504A0E1           ASR      R0,R5,#+8
   \   000006A4   ........           BL       srl
   \   000006A8   F6FEFFEA           B        ??execute_cb_11
   2990          		case  59:	/* SRL E */
   2991          		{ xE( srl( E() ) ); return ( 8 ); }
   \                     ??execute_cb_76:
   \   000006AC   E0489FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   000006B0   005094E5           LDR      R5,[R4, #+0]
   \   000006B4   FF0005E2           AND      R0,R5,#0xFF
   \   000006B8   ........           BL       srl
   \   000006BC   FAFEFFEA           B        ??execute_cb_13
   2992          		case  60:	/* SRL H */
   2993          		{ xH( srl( H() ) ); return ( 8 ); }
   \                     ??execute_cb_77:
   \   000006C0   D0489FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   000006C4   F4FFFFEA           B        ??execute_cb_75
   2994          		case  61:	/* SRL L */
   2995          		{ xL( srl( L() ) ); return ( 8 ); }
   \                     ??execute_cb_78:
   \   000006C8   C8489FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   000006CC   005094E5           LDR      R5,[R4, #+0]
   \   000006D0   FF0005E2           AND      R0,R5,#0xFF
   \   000006D4   ........           BL       srl
   \   000006D8   F3FEFFEA           B        ??execute_cb_13
   2996          		case  62:	/* SRL (HL) */
   2997          		{
   2998          			int hl = HL();
   \                     ??execute_cb_79:
   \   000006DC   B4089FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   2999          			pokeb( hl, srl( peekb( hl ) ) );
   \   000006E0   A0189FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   000006E4   000090E5           LDR      R0,[R0, #+0]
   \   000006E8   001091E5           LDR      R1,[R1, #+0]
   \   000006EC   014080E0           ADD      R4,R0,R1
   \   000006F0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000006F4   ........           BL       srl
   \   000006F8   43FFFFEA           B        ??execute_cb_16
   3000          			return ( 15 );
   3001          		}
   3002          		case  63:	/* SRL A */
   3003          		{ xA( srl( A() ) ); return ( 8 ); }
   \                     ??execute_cb_80:
   \   000006FC   98489FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   00000700   000094E5           LDR      R0,[R4, #+0]
   \   00000704   ........           BL       srl
   \   00000708   E9FEFFEA           B        ??execute_cb_4
   3004          
   3005          		case  64:	/* BIT 0,B */
   3006          		{ bit( 0x01, B() ); return ( 8 ); }
   \                     ??execute_cb_81:
   \   0000070C   78089FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   00000710   001090E5           LDR      R1,[R0, #+0]
   \   00000714   0100A0E3           MOV      R0,#+1
   \   00000718   ........           BL       bit
   \   0000071C   E5FEFFEA           B        ??execute_cb_14
   3007          		case  65:	/* BIT 0,C */
   3008          		{ bit( 0x01, C() ); return ( 8 ); }
   \                     ??execute_cb_82:
   \   00000720   68089FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   00000724   001090E5           LDR      R1,[R0, #+0]
   \   00000728   0100A0E3           MOV      R0,#+1
   \   0000072C   ........           BL       bit
   \   00000730   E0FEFFEA           B        ??execute_cb_14
   3009          		case  66:	/* BIT 0,D */
   3010          		{ bit( 0x01, D() ); return ( 8 ); }
   \                     ??execute_cb_83:
   \   00000734   58089FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000738   000090E5           LDR      R0,[R0, #+0]
   \   0000073C   4014A0E1           ASR      R1,R0,#+8
   \   00000740   0100A0E3           MOV      R0,#+1
   \   00000744   ........           BL       bit
   \   00000748   DAFEFFEA           B        ??execute_cb_14
   3011          		case  67:	/* BIT 0,E */
   3012          		{ bit( 0x01, E() ); return ( 8 ); }
   \                     ??execute_cb_84:
   \   0000074C   40089FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000750   000090E5           LDR      R0,[R0, #+0]
   \   00000754   FF1000E2           AND      R1,R0,#0xFF
   \   00000758   0100A0E3           MOV      R0,#+1
   \   0000075C   ........           BL       bit
   \   00000760   D4FEFFEA           B        ??execute_cb_14
   3013          		case  68:	/* BIT 0,H */
   3014          		{ bit( 0x01, H() ); return ( 8 ); }
   \                     ??execute_cb_85:
   \   00000764   2C089FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000768   000090E5           LDR      R0,[R0, #+0]
   \   0000076C   4014A0E1           ASR      R1,R0,#+8
   \   00000770   0100A0E3           MOV      R0,#+1
   \   00000774   ........           BL       bit
   \   00000778   CEFEFFEA           B        ??execute_cb_14
   3015          		case  69:	/* BIT 0,L */
   3016          		{ bit( 0x01, L() ); return ( 8 ); }
   \                     ??execute_cb_86:
   \   0000077C   14089FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000780   000090E5           LDR      R0,[R0, #+0]
   \   00000784   FF1000E2           AND      R1,R0,#0xFF
   \   00000788   0100A0E3           MOV      R0,#+1
   \   0000078C   ........           BL       bit
   \   00000790   C8FEFFEA           B        ??execute_cb_14
   3017          		case  70:	/* BIT 0,(HL) */
   3018          		{ bit( 0x01, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_87:
   \   00000794   FC079FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000798   E8179FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   0000079C   000090E5           LDR      R0,[R0, #+0]
   \   000007A0   001091E5           LDR      R1,[R1, #+0]
   \   000007A4   0110D0E7           LDRB     R1,[R0, +R1]
   \   000007A8   0100A0E3           MOV      R0,#+1
   \   000007AC   5C0000EA           B        ??execute_cb_88
   3019          		case  71:	/* BIT 0,A */
   3020          		{ bit( 0x01, A() ); return ( 8 ); }
   \                     ??execute_cb_89:
   \   000007B0   E4079FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   000007B4   001090E5           LDR      R1,[R0, #+0]
   \   000007B8   0100A0E3           MOV      R0,#+1
   \   000007BC   ........           BL       bit
   \   000007C0   BCFEFFEA           B        ??execute_cb_14
   3021          
   3022          		case  72:	/* BIT 1,B */
   3023          		{ bit( 0x02, B() ); return ( 8 ); }
   \                     ??execute_cb_90:
   \   000007C4   C0079FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   000007C8   001090E5           LDR      R1,[R0, #+0]
   \   000007CC   0200A0E3           MOV      R0,#+2
   \   000007D0   ........           BL       bit
   \   000007D4   B7FEFFEA           B        ??execute_cb_14
   3024          		case  73:	/* BIT 1,C */
   3025          		{ bit( 0x02, C() ); return ( 8 ); }
   \                     ??execute_cb_91:
   \   000007D8   B0079FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   000007DC   001090E5           LDR      R1,[R0, #+0]
   \   000007E0   0200A0E3           MOV      R0,#+2
   \   000007E4   ........           BL       bit
   \   000007E8   B2FEFFEA           B        ??execute_cb_14
   3026          		case  74:	/* BIT 1,D */
   3027          		{ bit( 0x02, D() ); return ( 8 ); }
   \                     ??execute_cb_92:
   \   000007EC   A0079FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   000007F0   000090E5           LDR      R0,[R0, #+0]
   \   000007F4   4014A0E1           ASR      R1,R0,#+8
   \   000007F8   0200A0E3           MOV      R0,#+2
   \   000007FC   ........           BL       bit
   \   00000800   ACFEFFEA           B        ??execute_cb_14
   3028          		case  75:	/* BIT 1,E */
   3029          		{ bit( 0x02, E() ); return ( 8 ); }
   \                     ??execute_cb_93:
   \   00000804   88079FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000808   000090E5           LDR      R0,[R0, #+0]
   \   0000080C   FF1000E2           AND      R1,R0,#0xFF
   \   00000810   0200A0E3           MOV      R0,#+2
   \   00000814   ........           BL       bit
   \   00000818   A6FEFFEA           B        ??execute_cb_14
   3030          		case  76:	/* BIT 1,H */
   3031          		{ bit( 0x02, H() ); return ( 8 ); }
   \                     ??execute_cb_94:
   \   0000081C   74079FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000820   000090E5           LDR      R0,[R0, #+0]
   \   00000824   4014A0E1           ASR      R1,R0,#+8
   \   00000828   0200A0E3           MOV      R0,#+2
   \   0000082C   ........           BL       bit
   \   00000830   A0FEFFEA           B        ??execute_cb_14
   3032          		case  77:	/* BIT 1,L */
   3033          		{ bit( 0x02, L() ); return ( 8 ); }
   \                     ??execute_cb_95:
   \   00000834   5C079FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000838   000090E5           LDR      R0,[R0, #+0]
   \   0000083C   FF1000E2           AND      R1,R0,#0xFF
   \   00000840   0200A0E3           MOV      R0,#+2
   \   00000844   ........           BL       bit
   \   00000848   9AFEFFEA           B        ??execute_cb_14
   3034          		case  78:	/* BIT 1,(HL) */
   3035          		{ bit( 0x02, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_96:
   \   0000084C   44079FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000850   30179FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000854   000090E5           LDR      R0,[R0, #+0]
   \   00000858   001091E5           LDR      R1,[R1, #+0]
   \   0000085C   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000860   0200A0E3           MOV      R0,#+2
   \   00000864   ........           BL       bit
   \   00000868   0C00A0E3           MOV      R0,#+12
   \   0000086C   3080BDE8           POP      {R4,R5,PC}
   3036          		case  79:	/* BIT 1,A */
   3037          		{ bit( 0x02, A() ); return ( 8 ); }
   \                     ??execute_cb_97:
   \   00000870   24079FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   00000874   001090E5           LDR      R1,[R0, #+0]
   \   00000878   0200A0E3           MOV      R0,#+2
   \   0000087C   ........           BL       bit
   \   00000880   8CFEFFEA           B        ??execute_cb_14
   3038          
   3039          		case  80:	/* BIT 2,B */
   3040          		{ bit( 0x04, B() ); return ( 8 ); }
   \                     ??execute_cb_98:
   \   00000884   00079FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   00000888   001090E5           LDR      R1,[R0, #+0]
   \   0000088C   0400A0E3           MOV      R0,#+4
   \   00000890   ........           BL       bit
   \   00000894   87FEFFEA           B        ??execute_cb_14
   3041          		case  81:	/* BIT 2,C */
   3042          		{ bit( 0x04, C() ); return ( 8 ); }
   \                     ??execute_cb_99:
   \   00000898   F0069FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   0000089C   001090E5           LDR      R1,[R0, #+0]
   \   000008A0   0400A0E3           MOV      R0,#+4
   \   000008A4   ........           BL       bit
   \   000008A8   82FEFFEA           B        ??execute_cb_14
   3043          		case  82:	/* BIT 2,D */
   3044          		{ bit( 0x04, D() ); return ( 8 ); }
   \                     ??execute_cb_100:
   \   000008AC   E0069FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   000008B0   000090E5           LDR      R0,[R0, #+0]
   \   000008B4   4014A0E1           ASR      R1,R0,#+8
   \   000008B8   0400A0E3           MOV      R0,#+4
   \   000008BC   ........           BL       bit
   \   000008C0   7CFEFFEA           B        ??execute_cb_14
   3045          		case  83:	/* BIT 2,E */
   3046          		{ bit( 0x04, E() ); return ( 8 ); }
   \                     ??execute_cb_101:
   \   000008C4   C8069FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   000008C8   000090E5           LDR      R0,[R0, #+0]
   \   000008CC   FF1000E2           AND      R1,R0,#0xFF
   \   000008D0   0400A0E3           MOV      R0,#+4
   \   000008D4   ........           BL       bit
   \   000008D8   76FEFFEA           B        ??execute_cb_14
   3047          		case  84:	/* BIT 2,H */
   3048          		{ bit( 0x04, H() ); return ( 8 ); }
   \                     ??execute_cb_102:
   \   000008DC   B4069FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   000008E0   000090E5           LDR      R0,[R0, #+0]
   \   000008E4   4014A0E1           ASR      R1,R0,#+8
   \   000008E8   0400A0E3           MOV      R0,#+4
   \   000008EC   ........           BL       bit
   \   000008F0   70FEFFEA           B        ??execute_cb_14
   3049          		case  85:	/* BIT 2,L */
   3050          		{ bit( 0x04, L() ); return ( 8 ); }
   \                     ??execute_cb_103:
   \   000008F4   9C069FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   000008F8   000090E5           LDR      R0,[R0, #+0]
   \   000008FC   FF1000E2           AND      R1,R0,#0xFF
   \   00000900   0400A0E3           MOV      R0,#+4
   \   00000904   ........           BL       bit
   \   00000908   6AFEFFEA           B        ??execute_cb_14
   3051          		case  86:	/* BIT 2,(HL) */
   3052          		{ bit( 0x04, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_104:
   \   0000090C   84069FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000910   70169FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000914   000090E5           LDR      R0,[R0, #+0]
   \   00000918   001091E5           LDR      R1,[R1, #+0]
   \   0000091C   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000920   0400A0E3           MOV      R0,#+4
   \                     ??execute_cb_88:
   \   00000924   ........           BL       bit
   \   00000928   0C00A0E3           MOV      R0,#+12
   \   0000092C   3080BDE8           POP      {R4,R5,PC}
   3053          		case  87:	/* BIT 2,A */
   3054          		{ bit( 0x04, A() ); return ( 8 ); }
   \                     ??execute_cb_105:
   \   00000930   64069FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   00000934   001090E5           LDR      R1,[R0, #+0]
   \   00000938   0400A0E3           MOV      R0,#+4
   \   0000093C   ........           BL       bit
   \   00000940   5CFEFFEA           B        ??execute_cb_14
   3055          
   3056          		case  88:	/* BIT 3,B */
   3057          		{ bit( 0x08, B() ); return ( 8 ); }
   \                     ??execute_cb_106:
   \   00000944   40069FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   00000948   001090E5           LDR      R1,[R0, #+0]
   \   0000094C   0800A0E3           MOV      R0,#+8
   \   00000950   ........           BL       bit
   \   00000954   57FEFFEA           B        ??execute_cb_14
   3058          		case  89:	/* BIT 3,C */
   3059          		{ bit( 0x08, C() ); return ( 8 ); }
   \                     ??execute_cb_107:
   \   00000958   30069FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   0000095C   001090E5           LDR      R1,[R0, #+0]
   \   00000960   0800A0E3           MOV      R0,#+8
   \   00000964   ........           BL       bit
   \   00000968   52FEFFEA           B        ??execute_cb_14
   3060          		case  90:	/* BIT 3,D */
   3061          		{ bit( 0x08, D() ); return ( 8 ); }
   \                     ??execute_cb_108:
   \   0000096C   20069FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000970   000090E5           LDR      R0,[R0, #+0]
   \   00000974   4014A0E1           ASR      R1,R0,#+8
   \   00000978   0800A0E3           MOV      R0,#+8
   \   0000097C   ........           BL       bit
   \   00000980   4CFEFFEA           B        ??execute_cb_14
   3062          		case  91:	/* BIT 3,E */
   3063          		{ bit( 0x08, E() ); return ( 8 ); }
   \                     ??execute_cb_109:
   \   00000984   08069FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000988   000090E5           LDR      R0,[R0, #+0]
   \   0000098C   FF1000E2           AND      R1,R0,#0xFF
   \   00000990   0800A0E3           MOV      R0,#+8
   \   00000994   ........           BL       bit
   \   00000998   46FEFFEA           B        ??execute_cb_14
   3064          		case  92:	/* BIT 3,H */
   3065          		{ bit( 0x08, H() ); return ( 8 ); }
   \                     ??execute_cb_110:
   \   0000099C   F4059FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   000009A0   000090E5           LDR      R0,[R0, #+0]
   \   000009A4   4014A0E1           ASR      R1,R0,#+8
   \   000009A8   0800A0E3           MOV      R0,#+8
   \   000009AC   ........           BL       bit
   \   000009B0   40FEFFEA           B        ??execute_cb_14
   3066          		case  93:	/* BIT 3,L */
   3067          		{ bit( 0x08, L() ); return ( 8 ); }
   \                     ??execute_cb_111:
   \   000009B4   DC059FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   000009B8   000090E5           LDR      R0,[R0, #+0]
   \   000009BC   FF1000E2           AND      R1,R0,#0xFF
   \   000009C0   0800A0E3           MOV      R0,#+8
   \   000009C4   ........           BL       bit
   \   000009C8   3AFEFFEA           B        ??execute_cb_14
   3068          		case  94:	/* BIT 3,(HL) */
   3069          		{ bit( 0x08, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_112:
   \   000009CC   C4059FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   000009D0   B0159FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   000009D4   000090E5           LDR      R0,[R0, #+0]
   \   000009D8   001091E5           LDR      R1,[R1, #+0]
   \   000009DC   0110D0E7           LDRB     R1,[R0, +R1]
   \   000009E0   0800A0E3           MOV      R0,#+8
   \   000009E4   CEFFFFEA           B        ??execute_cb_88
   3070          		case  95:	/* BIT 3,A */
   3071          		{ bit( 0x08, A() ); return ( 8 ); }
   \                     ??execute_cb_113:
   \   000009E8   AC059FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   000009EC   001090E5           LDR      R1,[R0, #+0]
   \   000009F0   0800A0E3           MOV      R0,#+8
   \   000009F4   ........           BL       bit
   \   000009F8   2EFEFFEA           B        ??execute_cb_14
   3072          
   3073          		case  96:	/* BIT 4,B */
   3074          		{ bit( 0x10, B() ); return ( 8 ); }
   \                     ??execute_cb_114:
   \   000009FC   88059FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   00000A00   001090E5           LDR      R1,[R0, #+0]
   \   00000A04   1000A0E3           MOV      R0,#+16
   \   00000A08   ........           BL       bit
   \   00000A0C   29FEFFEA           B        ??execute_cb_14
   3075          		case  97:	/* BIT 4,C */
   3076          		{ bit( 0x10, C() ); return ( 8 ); }
   \                     ??execute_cb_115:
   \   00000A10   78059FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   00000A14   001090E5           LDR      R1,[R0, #+0]
   \   00000A18   1000A0E3           MOV      R0,#+16
   \   00000A1C   ........           BL       bit
   \   00000A20   24FEFFEA           B        ??execute_cb_14
   3077          		case  98:	/* BIT 4,D */
   3078          		{ bit( 0x10, D() ); return ( 8 ); }
   \                     ??execute_cb_116:
   \   00000A24   68059FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000A28   000090E5           LDR      R0,[R0, #+0]
   \   00000A2C   4014A0E1           ASR      R1,R0,#+8
   \   00000A30   1000A0E3           MOV      R0,#+16
   \   00000A34   ........           BL       bit
   \   00000A38   1EFEFFEA           B        ??execute_cb_14
   3079          		case  99:	/* BIT 4,E */
   3080          		{ bit( 0x10, E() ); return ( 8 ); }
   \                     ??execute_cb_117:
   \   00000A3C   50059FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000A40   000090E5           LDR      R0,[R0, #+0]
   \   00000A44   FF1000E2           AND      R1,R0,#0xFF
   \   00000A48   1000A0E3           MOV      R0,#+16
   \   00000A4C   ........           BL       bit
   \   00000A50   18FEFFEA           B        ??execute_cb_14
   3081          		case 100:	/* BIT 4,H */
   3082          		{ bit( 0x10, H() ); return ( 8 ); }
   \                     ??execute_cb_118:
   \   00000A54   3C059FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000A58   000090E5           LDR      R0,[R0, #+0]
   \   00000A5C   4014A0E1           ASR      R1,R0,#+8
   \   00000A60   1000A0E3           MOV      R0,#+16
   \   00000A64   ........           BL       bit
   \   00000A68   12FEFFEA           B        ??execute_cb_14
   3083          		case 101:	/* BIT 4,L */
   3084          		{ bit( 0x10, L() ); return ( 8 ); }
   \                     ??execute_cb_119:
   \   00000A6C   24059FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000A70   000090E5           LDR      R0,[R0, #+0]
   \   00000A74   FF1000E2           AND      R1,R0,#0xFF
   \   00000A78   1000A0E3           MOV      R0,#+16
   \   00000A7C   ........           BL       bit
   \   00000A80   0CFEFFEA           B        ??execute_cb_14
   3085          		case 102:	/* BIT 4,(HL) */
   3086          		{ bit( 0x10, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_120:
   \   00000A84   0C059FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000A88   F8149FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000A8C   000090E5           LDR      R0,[R0, #+0]
   \   00000A90   001091E5           LDR      R1,[R1, #+0]
   \   00000A94   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000A98   1000A0E3           MOV      R0,#+16
   \   00000A9C   A0FFFFEA           B        ??execute_cb_88
   3087          		case 103:	/* BIT 4,A */
   3088          		{ bit( 0x10, A() ); return ( 8 ); }
   \                     ??execute_cb_121:
   \   00000AA0   F4049FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   00000AA4   001090E5           LDR      R1,[R0, #+0]
   \   00000AA8   1000A0E3           MOV      R0,#+16
   \   00000AAC   ........           BL       bit
   \   00000AB0   00FEFFEA           B        ??execute_cb_14
   3089          
   3090          		case 104:	/* BIT 5,B */
   3091          		{ bit( 0x20, B() ); return ( 8 ); }
   \                     ??execute_cb_122:
   \   00000AB4   D0049FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   00000AB8   001090E5           LDR      R1,[R0, #+0]
   \   00000ABC   2000A0E3           MOV      R0,#+32
   \   00000AC0   ........           BL       bit
   \   00000AC4   FBFDFFEA           B        ??execute_cb_14
   3092          		case 105:	/* BIT 5,C */
   3093          		{ bit( 0x20, C() ); return ( 8 ); }
   \                     ??execute_cb_123:
   \   00000AC8   C0049FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   00000ACC   001090E5           LDR      R1,[R0, #+0]
   \   00000AD0   2000A0E3           MOV      R0,#+32
   \   00000AD4   ........           BL       bit
   \   00000AD8   F6FDFFEA           B        ??execute_cb_14
   3094          		case 106:	/* BIT 5,D */
   3095          		{ bit( 0x20, D() ); return ( 8 ); }
   \                     ??execute_cb_124:
   \   00000ADC   B0049FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000AE0   000090E5           LDR      R0,[R0, #+0]
   \   00000AE4   4014A0E1           ASR      R1,R0,#+8
   \   00000AE8   2000A0E3           MOV      R0,#+32
   \   00000AEC   ........           BL       bit
   \   00000AF0   F0FDFFEA           B        ??execute_cb_14
   3096          		case 107:	/* BIT 5,E */
   3097          		{ bit( 0x20, E() ); return ( 8 ); }
   \                     ??execute_cb_125:
   \   00000AF4   98049FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000AF8   000090E5           LDR      R0,[R0, #+0]
   \   00000AFC   FF1000E2           AND      R1,R0,#0xFF
   \   00000B00   2000A0E3           MOV      R0,#+32
   \   00000B04   ........           BL       bit
   \   00000B08   EAFDFFEA           B        ??execute_cb_14
   3098          		case 108:	/* BIT 5,H */
   3099          		{ bit( 0x20, H() ); return ( 8 ); }
   \                     ??execute_cb_126:
   \   00000B0C   84049FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000B10   000090E5           LDR      R0,[R0, #+0]
   \   00000B14   4014A0E1           ASR      R1,R0,#+8
   \   00000B18   2000A0E3           MOV      R0,#+32
   \   00000B1C   ........           BL       bit
   \   00000B20   E4FDFFEA           B        ??execute_cb_14
   3100          		case 109:	/* BIT 5,L */
   3101          		{ bit( 0x20, L() ); return ( 8 ); }
   \                     ??execute_cb_127:
   \   00000B24   6C049FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000B28   000090E5           LDR      R0,[R0, #+0]
   \   00000B2C   FF1000E2           AND      R1,R0,#0xFF
   \   00000B30   2000A0E3           MOV      R0,#+32
   \   00000B34   ........           BL       bit
   \   00000B38   DEFDFFEA           B        ??execute_cb_14
   3102          		case 110:	/* BIT 5,(HL) */
   3103          		{ bit( 0x20, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_128:
   \   00000B3C   54049FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000B40   40149FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000B44   000090E5           LDR      R0,[R0, #+0]
   \   00000B48   001091E5           LDR      R1,[R1, #+0]
   \   00000B4C   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000B50   2000A0E3           MOV      R0,#+32
   \   00000B54   72FFFFEA           B        ??execute_cb_88
   3104          		case 111:	/* BIT 5,A */
   3105          		{ bit( 0x20, A() ); return ( 8 ); }
   \                     ??execute_cb_129:
   \   00000B58   3C049FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   00000B5C   001090E5           LDR      R1,[R0, #+0]
   \   00000B60   2000A0E3           MOV      R0,#+32
   \   00000B64   ........           BL       bit
   \   00000B68   D2FDFFEA           B        ??execute_cb_14
   3106          
   3107          		case 112:	/* BIT 6,B */
   3108          		{ bit( 0x40, B() ); return ( 8 ); }
   \                     ??execute_cb_130:
   \   00000B6C   18049FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   00000B70   001090E5           LDR      R1,[R0, #+0]
   \   00000B74   4000A0E3           MOV      R0,#+64
   \   00000B78   ........           BL       bit
   \   00000B7C   CDFDFFEA           B        ??execute_cb_14
   3109          		case 113:	/* BIT 6,C */
   3110          		{ bit( 0x40, C() ); return ( 8 ); }
   \                     ??execute_cb_131:
   \   00000B80   08049FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   00000B84   001090E5           LDR      R1,[R0, #+0]
   \   00000B88   4000A0E3           MOV      R0,#+64
   \   00000B8C   ........           BL       bit
   \   00000B90   C8FDFFEA           B        ??execute_cb_14
   3111          		case 114:	/* BIT 6,D */
   3112          		{ bit( 0x40, D() ); return ( 8 ); }
   \                     ??execute_cb_132:
   \   00000B94   F8039FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000B98   000090E5           LDR      R0,[R0, #+0]
   \   00000B9C   4014A0E1           ASR      R1,R0,#+8
   \   00000BA0   4000A0E3           MOV      R0,#+64
   \   00000BA4   ........           BL       bit
   \   00000BA8   C2FDFFEA           B        ??execute_cb_14
   3113          		case 115:	/* BIT 6,E */
   3114          		{ bit( 0x40, E() ); return ( 8 ); }
   \                     ??execute_cb_133:
   \   00000BAC   E0039FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000BB0   000090E5           LDR      R0,[R0, #+0]
   \   00000BB4   FF1000E2           AND      R1,R0,#0xFF
   \   00000BB8   4000A0E3           MOV      R0,#+64
   \   00000BBC   ........           BL       bit
   \   00000BC0   BCFDFFEA           B        ??execute_cb_14
   3115          		case 116:	/* BIT 6,H */
   3116          		{ bit( 0x40, H() ); return ( 8 ); }
   \                     ??execute_cb_134:
   \   00000BC4   CC039FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000BC8   000090E5           LDR      R0,[R0, #+0]
   \   00000BCC   4014A0E1           ASR      R1,R0,#+8
   \   00000BD0   4000A0E3           MOV      R0,#+64
   \   00000BD4   ........           BL       bit
   \   00000BD8   B6FDFFEA           B        ??execute_cb_14
   3117          		case 117:	/* BIT 6,L */
   3118          		{ bit( 0x40, L() ); return ( 8 ); }
   \                     ??execute_cb_135:
   \   00000BDC   B4039FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000BE0   000090E5           LDR      R0,[R0, #+0]
   \   00000BE4   FF1000E2           AND      R1,R0,#0xFF
   \   00000BE8   4000A0E3           MOV      R0,#+64
   \   00000BEC   ........           BL       bit
   \   00000BF0   B0FDFFEA           B        ??execute_cb_14
   3119          		case 118:	/* BIT 6,(HL) */
   3120          		{ bit( 0x40, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_136:
   \   00000BF4   9C039FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000BF8   88139FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000BFC   000090E5           LDR      R0,[R0, #+0]
   \   00000C00   001091E5           LDR      R1,[R1, #+0]
   \   00000C04   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000C08   4000A0E3           MOV      R0,#+64
   \   00000C0C   44FFFFEA           B        ??execute_cb_88
   3121          		case 119:	/* BIT 6,A */
   3122          		{ bit( 0x40, A() ); return ( 8 ); }
   \                     ??execute_cb_137:
   \   00000C10   84039FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   00000C14   001090E5           LDR      R1,[R0, #+0]
   \   00000C18   4000A0E3           MOV      R0,#+64
   \   00000C1C   ........           BL       bit
   \   00000C20   A4FDFFEA           B        ??execute_cb_14
   3123          
   3124          		case 120:	/* BIT 7,B */
   3125          		{ bit( 0x80, B() ); return ( 8 ); }
   \                     ??execute_cb_138:
   \   00000C24   60039FE5           LDR      R0,??execute_cb_1+0xC  ;; _B
   \   00000C28   001090E5           LDR      R1,[R0, #+0]
   \   00000C2C   8000A0E3           MOV      R0,#+128
   \   00000C30   ........           BL       bit
   \   00000C34   9FFDFFEA           B        ??execute_cb_14
   3126          		case 121:	/* BIT 7,C */
   3127          		{ bit( 0x80, C() ); return ( 8 ); }
   \                     ??execute_cb_139:
   \   00000C38   50039FE5           LDR      R0,??execute_cb_1+0x10  ;; _C
   \   00000C3C   001090E5           LDR      R1,[R0, #+0]
   \   00000C40   8000A0E3           MOV      R0,#+128
   \   00000C44   ........           BL       bit
   \   00000C48   9AFDFFEA           B        ??execute_cb_14
   3128          		case 122:	/* BIT 7,D */
   3129          		{ bit( 0x80, D() ); return ( 8 ); }
   \                     ??execute_cb_140:
   \   00000C4C   40039FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000C50   000090E5           LDR      R0,[R0, #+0]
   \   00000C54   4014A0E1           ASR      R1,R0,#+8
   \   00000C58   8000A0E3           MOV      R0,#+128
   \   00000C5C   ........           BL       bit
   \   00000C60   94FDFFEA           B        ??execute_cb_14
   3130          		case 123:	/* BIT 7,E */
   3131          		{ bit( 0x80, E() ); return ( 8 ); }
   \                     ??execute_cb_141:
   \   00000C64   28039FE5           LDR      R0,??execute_cb_1+0x14  ;; _DE
   \   00000C68   000090E5           LDR      R0,[R0, #+0]
   \   00000C6C   FF1000E2           AND      R1,R0,#0xFF
   \   00000C70   8000A0E3           MOV      R0,#+128
   \   00000C74   ........           BL       bit
   \   00000C78   8EFDFFEA           B        ??execute_cb_14
   3132          		case 124:	/* BIT 7,H */
   3133          		{ bit( 0x80, H() ); return ( 8 ); }
   \                     ??execute_cb_142:
   \   00000C7C   14039FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000C80   000090E5           LDR      R0,[R0, #+0]
   \   00000C84   4014A0E1           ASR      R1,R0,#+8
   \   00000C88   8000A0E3           MOV      R0,#+128
   \   00000C8C   ........           BL       bit
   \   00000C90   88FDFFEA           B        ??execute_cb_14
   3134          		case 125:	/* BIT 7,L */
   3135          		{ bit( 0x80, L() ); return ( 8 ); }
   \                     ??execute_cb_143:
   \   00000C94   FC029FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000C98   000090E5           LDR      R0,[R0, #+0]
   \   00000C9C   FF1000E2           AND      R1,R0,#0xFF
   \   00000CA0   8000A0E3           MOV      R0,#+128
   \   00000CA4   ........           BL       bit
   \   00000CA8   82FDFFEA           B        ??execute_cb_14
   3136          		case 126:	/* BIT 7,(HL) */
   3137          		{ bit( 0x80, peekb( HL() ) ); return ( 12 ); }
   \                     ??execute_cb_144:
   \   00000CAC   E4029FE5           LDR      R0,??execute_cb_1+0x18  ;; _HL
   \   00000CB0   D0129FE5           LDR      R1,??execute_cb_1+0x8  ;; mem
   \   00000CB4   000090E5           LDR      R0,[R0, #+0]
   \   00000CB8   001091E5           LDR      R1,[R1, #+0]
   \   00000CBC   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000CC0   8000A0E3           MOV      R0,#+128
   \   00000CC4   16FFFFEA           B        ??execute_cb_88
   3138          		case 127:	/* BIT 7,A */
   3139          		{ bit( 0x80, A() ); return ( 8 ); }
   \                     ??execute_cb_145:
   \   00000CC8   CC029FE5           LDR      R0,??execute_cb_1+0x1C  ;; _A
   \   00000CCC   001090E5           LDR      R1,[R0, #+0]
   \   00000CD0   8000A0E3           MOV      R0,#+128
   \   00000CD4   ........           BL       bit
   \   00000CD8   76FDFFEA           B        ??execute_cb_14
   3140          
   3141          		case 128:	/* RES 0,B */
   3142          		{ xB( res( 0x01, B() ) ); return ( 8 ); }
   \                     ??execute_cb_146:
   \   00000CDC   A8429FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   00000CE0   000094E5           LDR      R0,[R4, #+0]
   \   00000CE4   0100C0E3           BIC      R0,R0,#0x1
   \   00000CE8   71FDFFEA           B        ??execute_cb_4
   3143          		case 129:	/* RES 0,C */
   3144          		{ xC( res( 0x01, C() ) ); return ( 8 ); }
   \                     ??execute_cb_147:
   \   00000CEC   9C429FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   00000CF0   000094E5           LDR      R0,[R4, #+0]
   \   00000CF4   0100C0E3           BIC      R0,R0,#0x1
   \   00000CF8   6DFDFFEA           B        ??execute_cb_4
   3145          		case 130:	/* RES 0,D */
   3146          		{ xD( res( 0x01, D() ) ); return ( 8 ); }
   \                     ??execute_cb_148:
   \   00000CFC   90429FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_149:
   \   00000D00   005094E5           LDR      R5,[R4, #+0]
   \   00000D04   4504A0E1           ASR      R0,R5,#+8
   \   00000D08   0100C0E3           BIC      R0,R0,#0x1
   \   00000D0C   5DFDFFEA           B        ??execute_cb_11
   3147          		case 131:	/* RES 0,E */
   3148          		{ xE( res( 0x01, E() ) ); return ( 8 ); }
   \                     ??execute_cb_150:
   \   00000D10   7C429FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000D14   FE10A0E3           MOV      R1,#+254
   \   00000D18   000094E5           LDR      R0,[R4, #+0]
   \   00000D1C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000D20   000001E0           AND      R0,R1,R0
   \   00000D24   62FDFFEA           B        ??execute_cb_4
   3149          		case 132:	/* RES 0,H */
   3150          		{ xH( res( 0x01, H() ) ); return ( 8 ); }
   \                     ??execute_cb_151:
   \   00000D28   68429FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000D2C   F3FFFFEA           B        ??execute_cb_149
   3151          		case 133:	/* RES 0,L */
   3152          		{ xL( res( 0x01, L() ) ); return ( 8 ); }
   \                     ??execute_cb_152:
   \   00000D30   60429FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000D34   FE10A0E3           MOV      R1,#+254
   \   00000D38   000094E5           LDR      R0,[R4, #+0]
   \   00000D3C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000D40   000001E0           AND      R0,R1,R0
   \   00000D44   5AFDFFEA           B        ??execute_cb_4
   3153          		case 134:	/* RES 0,(HL) */
   3154          		{
   3155          			int hl = HL();
   3156          			pokeb( hl, res( 0x01, peekb( hl ) ) );
   \                     ??execute_cb_153:
   \   00000D48   48429FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000D4C   34029FE5           LDR      R0,??execute_cb_1+0x8  ;; mem
   \   00000D50   005094E5           LDR      R5,[R4, #+0]
   \   00000D54   001090E5           LDR      R1,[R0, #+0]
   \   00000D58   014085E0           ADD      R4,R5,R1
   \   00000D5C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000D60   FE0000E2           AND      R0,R0,#0xFE
   \   00000D64   A8FDFFEA           B        ??execute_cb_16
   3157          			return ( 15 );
   3158          		}
   3159          		case 135:	/* RES 0,A */
   3160          		{ xA( res( 0x01, A() ) ); return ( 8 ); }
   \                     ??execute_cb_154:
   \   00000D68   2C429FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   00000D6C   000094E5           LDR      R0,[R4, #+0]
   \   00000D70   0100C0E3           BIC      R0,R0,#0x1
   \   00000D74   4EFDFFEA           B        ??execute_cb_4
   3161          
   3162          		case 136:	/* RES 1,B */
   3163          		{ xB( res( 0x02, B() ) ); return ( 8 ); }
   \                     ??execute_cb_155:
   \   00000D78   0C429FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   00000D7C   000094E5           LDR      R0,[R4, #+0]
   \   00000D80   0200C0E3           BIC      R0,R0,#0x2
   \   00000D84   4AFDFFEA           B        ??execute_cb_4
   3164          		case 137:	/* RES 1,C */
   3165          		{ xC( res( 0x02, C() ) ); return ( 8 ); }
   \                     ??execute_cb_156:
   \   00000D88   00429FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   00000D8C   000094E5           LDR      R0,[R4, #+0]
   \   00000D90   0200C0E3           BIC      R0,R0,#0x2
   \   00000D94   46FDFFEA           B        ??execute_cb_4
   3166          		case 138:	/* RES 1,D */
   3167          		{ xD( res( 0x02, D() ) ); return ( 8 ); }
   \                     ??execute_cb_157:
   \   00000D98   F4419FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_158:
   \   00000D9C   005094E5           LDR      R5,[R4, #+0]
   \   00000DA0   4504A0E1           ASR      R0,R5,#+8
   \   00000DA4   0200C0E3           BIC      R0,R0,#0x2
   \   00000DA8   36FDFFEA           B        ??execute_cb_11
   3168          		case 139:	/* RES 1,E */
   3169          		{ xE( res( 0x02, E() ) ); return ( 8 ); }
   \                     ??execute_cb_159:
   \   00000DAC   E0419FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000DB0   FD10A0E3           MOV      R1,#+253
   \   00000DB4   000094E5           LDR      R0,[R4, #+0]
   \   00000DB8   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000DBC   000001E0           AND      R0,R1,R0
   \   00000DC0   3BFDFFEA           B        ??execute_cb_4
   3170          		case 140:	/* RES 1,H */
   3171          		{ xH( res( 0x02, H() ) ); return ( 8 ); }
   \                     ??execute_cb_160:
   \   00000DC4   CC419FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000DC8   F3FFFFEA           B        ??execute_cb_158
   3172          		case 141:	/* RES 1,L */
   3173          		{ xL( res( 0x02, L() ) ); return ( 8 ); }
   \                     ??execute_cb_161:
   \   00000DCC   C4419FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000DD0   FD10A0E3           MOV      R1,#+253
   \   00000DD4   000094E5           LDR      R0,[R4, #+0]
   \   00000DD8   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000DDC   000001E0           AND      R0,R1,R0
   \   00000DE0   33FDFFEA           B        ??execute_cb_4
   3174          		case 142:	/* RES 1,(HL) */
   3175          		{
   3176          			int hl = HL();
   3177          			pokeb( hl, res( 0x02, peekb( hl ) ) );
   \                     ??execute_cb_162:
   \   00000DE4   AC419FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000DE8   98019FE5           LDR      R0,??execute_cb_1+0x8  ;; mem
   \   00000DEC   005094E5           LDR      R5,[R4, #+0]
   \   00000DF0   001090E5           LDR      R1,[R0, #+0]
   \   00000DF4   014085E0           ADD      R4,R5,R1
   \   00000DF8   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000DFC   FD0000E2           AND      R0,R0,#0xFD
   \   00000E00   81FDFFEA           B        ??execute_cb_16
   3178          			return ( 15 );
   3179          		}
   3180          		case 143:	/* RES 1,A */
   3181          		{ xA( res( 0x02, A() ) ); return ( 8 ); }
   \                     ??execute_cb_163:
   \   00000E04   90419FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   00000E08   000094E5           LDR      R0,[R4, #+0]
   \   00000E0C   0200C0E3           BIC      R0,R0,#0x2
   \   00000E10   27FDFFEA           B        ??execute_cb_4
   3182          
   3183          		case 144:	/* RES 2,B */
   3184          		{ xB( res( 0x04, B() ) ); return ( 8 ); }
   \                     ??execute_cb_164:
   \   00000E14   70419FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   00000E18   000094E5           LDR      R0,[R4, #+0]
   \   00000E1C   0400C0E3           BIC      R0,R0,#0x4
   \   00000E20   23FDFFEA           B        ??execute_cb_4
   3185          		case 145:	/* RES 2,C */
   3186          		{ xC( res( 0x04, C() ) ); return ( 8 ); }
   \                     ??execute_cb_165:
   \   00000E24   64419FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   00000E28   000094E5           LDR      R0,[R4, #+0]
   \   00000E2C   0400C0E3           BIC      R0,R0,#0x4
   \   00000E30   1FFDFFEA           B        ??execute_cb_4
   3187          		case 146:	/* RES 2,D */
   3188          		{ xD( res( 0x04, D() ) ); return ( 8 ); }
   \                     ??execute_cb_166:
   \   00000E34   58419FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_167:
   \   00000E38   005094E5           LDR      R5,[R4, #+0]
   \   00000E3C   4504A0E1           ASR      R0,R5,#+8
   \   00000E40   0400C0E3           BIC      R0,R0,#0x4
   \   00000E44   0FFDFFEA           B        ??execute_cb_11
   3189          		case 147:	/* RES 2,E */
   3190          		{ xE( res( 0x04, E() ) ); return ( 8 ); }
   \                     ??execute_cb_168:
   \   00000E48   44419FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000E4C   FB10A0E3           MOV      R1,#+251
   \   00000E50   000094E5           LDR      R0,[R4, #+0]
   \   00000E54   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000E58   000001E0           AND      R0,R1,R0
   \   00000E5C   14FDFFEA           B        ??execute_cb_4
   3191          		case 148:	/* RES 2,H */
   3192          		{ xH( res( 0x04, H() ) ); return ( 8 ); }
   \                     ??execute_cb_169:
   \   00000E60   30419FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000E64   F3FFFFEA           B        ??execute_cb_167
   3193          		case 149:	/* RES 2,L */
   3194          		{ xL( res( 0x04, L() ) ); return ( 8 ); }
   \                     ??execute_cb_170:
   \   00000E68   28419FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000E6C   FB10A0E3           MOV      R1,#+251
   \   00000E70   000094E5           LDR      R0,[R4, #+0]
   \   00000E74   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000E78   000001E0           AND      R0,R1,R0
   \   00000E7C   0CFDFFEA           B        ??execute_cb_4
   3195          		case 150:	/* RES 2,(HL) */
   3196          		{
   3197          			int hl = HL();
   3198          			pokeb( hl, res( 0x04, peekb( hl ) ) );
   \                     ??execute_cb_171:
   \   00000E80   10419FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000E84   FC009FE5           LDR      R0,??execute_cb_1+0x8  ;; mem
   \   00000E88   005094E5           LDR      R5,[R4, #+0]
   \   00000E8C   001090E5           LDR      R1,[R0, #+0]
   \   00000E90   014085E0           ADD      R4,R5,R1
   \   00000E94   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000E98   FB0000E2           AND      R0,R0,#0xFB
   \   00000E9C   5AFDFFEA           B        ??execute_cb_16
   3199          			return ( 15 );
   3200          		}
   3201          		case 151:	/* RES 2,A */
   3202          		{ xA( res( 0x04, A() ) ); return ( 8 ); }
   \                     ??execute_cb_172:
   \   00000EA0   F4409FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   00000EA4   000094E5           LDR      R0,[R4, #+0]
   \   00000EA8   0400C0E3           BIC      R0,R0,#0x4
   \   00000EAC   00FDFFEA           B        ??execute_cb_4
   3203          
   3204          		case 152:	/* RES 3,B */
   3205          		{ xB( res( 0x08, B() ) ); return ( 8 ); }
   \                     ??execute_cb_173:
   \   00000EB0   D4409FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   00000EB4   000094E5           LDR      R0,[R4, #+0]
   \   00000EB8   0800C0E3           BIC      R0,R0,#0x8
   \   00000EBC   FCFCFFEA           B        ??execute_cb_4
   3206          		case 153:	/* RES 3,C */
   3207          		{ xC( res( 0x08, C() ) ); return ( 8 ); }
   \                     ??execute_cb_174:
   \   00000EC0   C8409FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   00000EC4   000094E5           LDR      R0,[R4, #+0]
   \   00000EC8   0800C0E3           BIC      R0,R0,#0x8
   \   00000ECC   F8FCFFEA           B        ??execute_cb_4
   3208          		case 154:	/* RES 3,D */
   3209          		{ xD( res( 0x08, D() ) ); return ( 8 ); }
   \                     ??execute_cb_175:
   \   00000ED0   BC409FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_176:
   \   00000ED4   005094E5           LDR      R5,[R4, #+0]
   \   00000ED8   4504A0E1           ASR      R0,R5,#+8
   \   00000EDC   0800C0E3           BIC      R0,R0,#0x8
   \   00000EE0   E8FCFFEA           B        ??execute_cb_11
   3210          		case 155:	/* RES 3,E */
   3211          		{ xE( res( 0x08, E() ) ); return ( 8 ); }
   \                     ??execute_cb_177:
   \   00000EE4   A8409FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \   00000EE8   F710A0E3           MOV      R1,#+247
   \   00000EEC   000094E5           LDR      R0,[R4, #+0]
   \   00000EF0   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000EF4   000001E0           AND      R0,R1,R0
   \   00000EF8   EDFCFFEA           B        ??execute_cb_4
   3212          		case 156:	/* RES 3,H */
   3213          		{ xH( res( 0x08, H() ) ); return ( 8 ); }
   \                     ??execute_cb_178:
   \   00000EFC   94409FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000F00   F3FFFFEA           B        ??execute_cb_176
   3214          		case 157:	/* RES 3,L */
   3215          		{ xL( res( 0x08, L() ) ); return ( 8 ); }
   \                     ??execute_cb_179:
   \   00000F04   8C409FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000F08   F710A0E3           MOV      R1,#+247
   \   00000F0C   000094E5           LDR      R0,[R4, #+0]
   \   00000F10   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000F14   000001E0           AND      R0,R1,R0
   \   00000F18   E5FCFFEA           B        ??execute_cb_4
   3216          		case 158:	/* RES 3,(HL) */
   3217          		{
   3218          			int hl = HL();
   3219          			pokeb( hl, res( 0x08, peekb( hl ) ) );
   \                     ??execute_cb_180:
   \   00000F1C   74409FE5           LDR      R4,??execute_cb_1+0x18  ;; _HL
   \   00000F20   60009FE5           LDR      R0,??execute_cb_1+0x8  ;; mem
   \   00000F24   005094E5           LDR      R5,[R4, #+0]
   \   00000F28   001090E5           LDR      R1,[R0, #+0]
   \   00000F2C   014085E0           ADD      R4,R5,R1
   \   00000F30   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000F34   F70000E2           AND      R0,R0,#0xF7
   \   00000F38   33FDFFEA           B        ??execute_cb_16
   3220          			return ( 15 );
   3221          		}
   3222          		case 159:	/* RES 3,A */
   3223          		{ xA( res( 0x08, A() ) ); return ( 8 ); }
   \                     ??execute_cb_181:
   \   00000F3C   58409FE5           LDR      R4,??execute_cb_1+0x1C  ;; _A
   \   00000F40   000094E5           LDR      R0,[R4, #+0]
   \   00000F44   0800C0E3           BIC      R0,R0,#0x8
   \   00000F48   D9FCFFEA           B        ??execute_cb_4
   3224          
   3225          		case 160:	/* RES 4,B */
   3226          		{ xB( res( 0x10, B() ) ); return ( 8 ); }
   \                     ??execute_cb_182:
   \   00000F4C   38409FE5           LDR      R4,??execute_cb_1+0xC  ;; _B
   \   00000F50   000094E5           LDR      R0,[R4, #+0]
   \   00000F54   1000C0E3           BIC      R0,R0,#0x10
   \   00000F58   D5FCFFEA           B        ??execute_cb_4
   3227          		case 161:	/* RES 4,C */
   3228          		{ xC( res( 0x10, C() ) ); return ( 8 ); }
   \                     ??execute_cb_183:
   \   00000F5C   2C409FE5           LDR      R4,??execute_cb_1+0x10  ;; _C
   \   00000F60   000094E5           LDR      R0,[R4, #+0]
   \   00000F64   1000C0E3           BIC      R0,R0,#0x10
   \   00000F68   D1FCFFEA           B        ??execute_cb_4
   3229          		case 162:	/* RES 4,D */
   3230          		{ xD( res( 0x10, D() ) ); return ( 8 ); }
   \                     ??execute_cb_184:
   \   00000F6C   20409FE5           LDR      R4,??execute_cb_1+0x14  ;; _DE
   \                     ??execute_cb_185:
   \   00000F70   005094E5           LDR      R5,[R4, #+0]
   \   00000F74   4504A0E1           ASR      R0,R5,#+8
   \   00000F78   1000C0E3           BIC      R0,R0,#0x10
   \   00000F7C   C1FCFFEA           B        ??execute_cb_11
   \                     ??execute_cb_1:
   \   00000F80   ........           DC32     _R
   \   00000F84   ........           DC32     _PC
   \   00000F88   ........           DC32     mem
   \   00000F8C   ........           DC32     _B
   \   00000F90   ........           DC32     _C
   \   00000F94   ........           DC32     _DE
   \   00000F98   ........           DC32     _HL
   \   00000F9C   ........           DC32     _A
   3231          		case 163:	/* RES 4,E */
   3232          		{ xE( res( 0x10, E() ) ); return ( 8 ); }
   \                     ??execute_cb_186:
   \   00000FA0   ........           LDR      R4,??DataTable707  ;; _DE
   \   00000FA4   EF10A0E3           MOV      R1,#+239
   \   00000FA8   000094E5           LDR      R0,[R4, #+0]
   \   00000FAC   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000FB0   000001E0           AND      R0,R1,R0
   \   00000FB4   BEFCFFEA           B        ??execute_cb_4
   3233          		case 164:	/* RES 4,H */
   3234          		{ xH( res( 0x10, H() ) ); return ( 8 ); }
   \                     ??execute_cb_187:
   \   00000FB8   ........           LDR      R4,??DataTable710  ;; _HL
   \   00000FBC   EBFFFFEA           B        ??execute_cb_185
   3235          		case 165:	/* RES 4,L */
   3236          		{ xL( res( 0x10, L() ) ); return ( 8 ); }
   \                     ??execute_cb_188:
   \   00000FC0   ........           LDR      R4,??DataTable710  ;; _HL
   \   00000FC4   EF10A0E3           MOV      R1,#+239
   \   00000FC8   000094E5           LDR      R0,[R4, #+0]
   \   00000FCC   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000FD0   000001E0           AND      R0,R1,R0
   \   00000FD4   B6FCFFEA           B        ??execute_cb_4
   3237          		case 166:	/* RES 4,(HL) */
   3238          		{
   3239          			int hl = HL();
   3240          			pokeb( hl, res( 0x10, peekb( hl ) ) );
   \                     ??execute_cb_189:
   \   00000FD8   ........           LDR      R4,??DataTable710  ;; _HL
   \   00000FDC   ........           LDR      R0,??DataTable711  ;; mem
   \   00000FE0   005094E5           LDR      R5,[R4, #+0]
   \   00000FE4   001090E5           LDR      R1,[R0, #+0]
   \   00000FE8   014085E0           ADD      R4,R5,R1
   \   00000FEC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000FF0   EF0000E2           AND      R0,R0,#0xEF
   \   00000FF4   04FDFFEA           B        ??execute_cb_16
   3241          			return ( 15 );
   3242          		}
   3243          		case 167:	/* RES 4,A */
   3244          		{ xA( res( 0x10, A() ) ); return ( 8 ); }
   \                     ??execute_cb_190:
   \   00000FF8   ........           LDR      R4,??DataTable712  ;; _A
   \   00000FFC   000094E5           LDR      R0,[R4, #+0]
   \   00001000   1000C0E3           BIC      R0,R0,#0x10
   \   00001004   AAFCFFEA           B        ??execute_cb_4
   3245          
   3246          		case 168:	/* RES 5,B */
   3247          		{ xB( res( 0x20, B() ) ); return ( 8 ); }
   \                     ??execute_cb_191:
   \   00001008   ........           LDR      R4,??DataTable704  ;; _B
   \   0000100C   000094E5           LDR      R0,[R4, #+0]
   \   00001010   2000C0E3           BIC      R0,R0,#0x20
   \   00001014   A6FCFFEA           B        ??execute_cb_4
   3248          		case 169:	/* RES 5,C */
   3249          		{ xC( res( 0x20, C() ) ); return ( 8 ); }
   \                     ??execute_cb_192:
   \   00001018   ........           LDR      R4,??DataTable705  ;; _C
   \   0000101C   000094E5           LDR      R0,[R4, #+0]
   \   00001020   2000C0E3           BIC      R0,R0,#0x20
   \   00001024   A2FCFFEA           B        ??execute_cb_4
   3250          		case 170:	/* RES 5,D */
   3251          		{ xD( res( 0x20, D() ) ); return ( 8 ); }
   \                     ??execute_cb_193:
   \   00001028   ........           LDR      R4,??DataTable707  ;; _DE
   \                     ??execute_cb_194:
   \   0000102C   005094E5           LDR      R5,[R4, #+0]
   \   00001030   4504A0E1           ASR      R0,R5,#+8
   \   00001034   2000C0E3           BIC      R0,R0,#0x20
   \   00001038   92FCFFEA           B        ??execute_cb_11
   3252          		case 171:	/* RES 5,E */
   3253          		{ xE( res( 0x20, E() ) ); return ( 8 ); }
   \                     ??execute_cb_195:
   \   0000103C   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001040   DF10A0E3           MOV      R1,#+223
   \   00001044   000094E5           LDR      R0,[R4, #+0]
   \   00001048   FF1C81E3           ORR      R1,R1,#0xFF00
   \   0000104C   000001E0           AND      R0,R1,R0
   \   00001050   97FCFFEA           B        ??execute_cb_4
   3254          		case 172:	/* RES 5,H */
   3255          		{ xH( res( 0x20, H() ) ); return ( 8 ); }
   \                     ??execute_cb_196:
   \   00001054   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001058   F3FFFFEA           B        ??execute_cb_194
   3256          		case 173:	/* RES 5,L */
   3257          		{ xL( res( 0x20, L() ) ); return ( 8 ); }
   \                     ??execute_cb_197:
   \   0000105C   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001060   DF10A0E3           MOV      R1,#+223
   \   00001064   000094E5           LDR      R0,[R4, #+0]
   \   00001068   FF1C81E3           ORR      R1,R1,#0xFF00
   \   0000106C   000001E0           AND      R0,R1,R0
   \   00001070   8FFCFFEA           B        ??execute_cb_4
   3258          		case 174:	/* RES 5,(HL) */
   3259          		{
   3260          			int hl = HL();
   3261          			pokeb( hl, res( 0x20, peekb( hl ) ) );
   \                     ??execute_cb_198:
   \   00001074   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001078   ........           LDR      R0,??DataTable711  ;; mem
   \   0000107C   005094E5           LDR      R5,[R4, #+0]
   \   00001080   001090E5           LDR      R1,[R0, #+0]
   \   00001084   014085E0           ADD      R4,R5,R1
   \   00001088   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000108C   DF0000E2           AND      R0,R0,#0xDF
   \   00001090   DDFCFFEA           B        ??execute_cb_16
   3262          			return ( 15 );
   3263          		}
   3264          		case 175:	/* RES 5,A */
   3265          		{ xA( res( 0x20, A() ) ); return ( 8 ); }
   \                     ??execute_cb_199:
   \   00001094   ........           LDR      R4,??DataTable712  ;; _A
   \   00001098   000094E5           LDR      R0,[R4, #+0]
   \   0000109C   2000C0E3           BIC      R0,R0,#0x20
   \   000010A0   83FCFFEA           B        ??execute_cb_4
   3266          
   3267          		case 176:	/* RES 6,B */
   3268          		{ xB( res( 0x40, B() ) ); return ( 8 ); }
   \                     ??execute_cb_200:
   \   000010A4   ........           LDR      R4,??DataTable704  ;; _B
   \   000010A8   000094E5           LDR      R0,[R4, #+0]
   \   000010AC   4000C0E3           BIC      R0,R0,#0x40
   \   000010B0   7FFCFFEA           B        ??execute_cb_4
   3269          		case 177:	/* RES 6,C */
   3270          		{ xC( res( 0x40, C() ) ); return ( 8 ); }
   \                     ??execute_cb_201:
   \   000010B4   ........           LDR      R4,??DataTable705  ;; _C
   \   000010B8   000094E5           LDR      R0,[R4, #+0]
   \   000010BC   4000C0E3           BIC      R0,R0,#0x40
   \   000010C0   7BFCFFEA           B        ??execute_cb_4
   3271          		case 178:	/* RES 6,D */
   3272          		{ xD( res( 0x40, D() ) ); return ( 8 ); }
   \                     ??execute_cb_202:
   \   000010C4   ........           LDR      R4,??DataTable707  ;; _DE
   \                     ??execute_cb_203:
   \   000010C8   005094E5           LDR      R5,[R4, #+0]
   \   000010CC   4504A0E1           ASR      R0,R5,#+8
   \   000010D0   4000C0E3           BIC      R0,R0,#0x40
   \   000010D4   6BFCFFEA           B        ??execute_cb_11
   3273          		case 179:	/* RES 6,E */
   3274          		{ xE( res( 0x40, E() ) ); return ( 8 ); }
   \                     ??execute_cb_204:
   \   000010D8   ........           LDR      R4,??DataTable707  ;; _DE
   \   000010DC   BF10A0E3           MOV      R1,#+191
   \   000010E0   000094E5           LDR      R0,[R4, #+0]
   \   000010E4   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000010E8   000001E0           AND      R0,R1,R0
   \   000010EC   70FCFFEA           B        ??execute_cb_4
   3275          		case 180:	/* RES 6,H */
   3276          		{ xH( res( 0x40, H() ) ); return ( 8 ); }
   \                     ??execute_cb_205:
   \   000010F0   ........           LDR      R4,??DataTable710  ;; _HL
   \   000010F4   F3FFFFEA           B        ??execute_cb_203
   3277          		case 181:	/* RES 6,L */
   3278          		{ xL( res( 0x40, L() ) ); return ( 8 ); }
   \                     ??execute_cb_206:
   \   000010F8   ........           LDR      R4,??DataTable710  ;; _HL
   \   000010FC   BF10A0E3           MOV      R1,#+191
   \   00001100   000094E5           LDR      R0,[R4, #+0]
   \   00001104   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00001108   000001E0           AND      R0,R1,R0
   \   0000110C   68FCFFEA           B        ??execute_cb_4
   3279          		case 182:	/* RES 6,(HL) */
   3280          		{
   3281          			int hl = HL();
   3282          			pokeb( hl, res( 0x40, peekb( hl ) ) );
   \                     ??execute_cb_207:
   \   00001110   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001114   ........           LDR      R0,??DataTable711  ;; mem
   \   00001118   005094E5           LDR      R5,[R4, #+0]
   \   0000111C   001090E5           LDR      R1,[R0, #+0]
   \   00001120   014085E0           ADD      R4,R5,R1
   \   00001124   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001128   BF0000E2           AND      R0,R0,#0xBF
   \   0000112C   B6FCFFEA           B        ??execute_cb_16
   3283          			return ( 15 );
   3284          		}
   3285          		case 183:	/* RES 6,A */
   3286          		{ xA( res( 0x40, A() ) ); return ( 8 ); }
   \                     ??execute_cb_208:
   \   00001130   ........           LDR      R4,??DataTable712  ;; _A
   \   00001134   000094E5           LDR      R0,[R4, #+0]
   \   00001138   4000C0E3           BIC      R0,R0,#0x40
   \   0000113C   5CFCFFEA           B        ??execute_cb_4
   3287          
   3288          		case 184:	/* RES 7,B */
   3289          		{ xB( res( 0x80, B() ) ); return ( 8 ); }
   \                     ??execute_cb_209:
   \   00001140   ........           LDR      R4,??DataTable704  ;; _B
   \   00001144   000094E5           LDR      R0,[R4, #+0]
   \   00001148   8000C0E3           BIC      R0,R0,#0x80
   \   0000114C   58FCFFEA           B        ??execute_cb_4
   3290          		case 185:	/* RES 7,C */
   3291          		{ xC( res( 0x80, C() ) ); return ( 8 ); }
   \                     ??execute_cb_210:
   \   00001150   ........           LDR      R4,??DataTable705  ;; _C
   \   00001154   000094E5           LDR      R0,[R4, #+0]
   \   00001158   8000C0E3           BIC      R0,R0,#0x80
   \   0000115C   54FCFFEA           B        ??execute_cb_4
   3292          		case 186:	/* RES 7,D */
   3293          		{ xD( res( 0x80, D() ) ); return ( 8 ); }
   \                     ??execute_cb_211:
   \   00001160   ........           LDR      R4,??DataTable707  ;; _DE
   \                     ??execute_cb_212:
   \   00001164   005094E5           LDR      R5,[R4, #+0]
   \   00001168   4504A0E1           ASR      R0,R5,#+8
   \   0000116C   8000C0E3           BIC      R0,R0,#0x80
   \   00001170   44FCFFEA           B        ??execute_cb_11
   3294          		case 187:	/* RES 7,E */
   3295          		{ xE( res( 0x80, E() ) ); return ( 8 ); }
   \                     ??execute_cb_213:
   \   00001174   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001178   7F10A0E3           MOV      R1,#+127
   \   0000117C   000094E5           LDR      R0,[R4, #+0]
   \   00001180   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00001184   000001E0           AND      R0,R1,R0
   \   00001188   49FCFFEA           B        ??execute_cb_4
   3296          		case 188:	/* RES 7,H */
   3297          		{ xH( res( 0x80, H() ) ); return ( 8 ); }
   \                     ??execute_cb_214:
   \   0000118C   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001190   F3FFFFEA           B        ??execute_cb_212
   3298          		case 189:	/* RES 7,L */
   3299          		{ xL( res( 0x80, L() ) ); return ( 8 ); }
   \                     ??execute_cb_215:
   \   00001194   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001198   7F10A0E3           MOV      R1,#+127
   \   0000119C   000094E5           LDR      R0,[R4, #+0]
   \   000011A0   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000011A4   000001E0           AND      R0,R1,R0
   \   000011A8   41FCFFEA           B        ??execute_cb_4
   3300          		case 190:	/* RES 7,(HL) */
   3301          		{
   3302          			int hl = HL();
   3303          			pokeb( hl, res( 0x80, peekb( hl ) ) );
   \                     ??execute_cb_216:
   \   000011AC   ........           LDR      R4,??DataTable710  ;; _HL
   \   000011B0   ........           LDR      R0,??DataTable711  ;; mem
   \   000011B4   005094E5           LDR      R5,[R4, #+0]
   \   000011B8   001090E5           LDR      R1,[R0, #+0]
   \   000011BC   014085E0           ADD      R4,R5,R1
   \   000011C0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000011C4   7F0000E2           AND      R0,R0,#0x7F
   \   000011C8   8FFCFFEA           B        ??execute_cb_16
   3304          			return ( 15 );
   3305          		}
   3306          		case 191:	/* RES 7,A */
   3307          		{ xA( res( 0x80, A() ) ); return ( 8 ); }
   \                     ??execute_cb_217:
   \   000011CC   ........           LDR      R4,??DataTable712  ;; _A
   \   000011D0   000094E5           LDR      R0,[R4, #+0]
   \   000011D4   8000C0E3           BIC      R0,R0,#0x80
   \   000011D8   35FCFFEA           B        ??execute_cb_4
   3308          
   3309          		case 192:	/* SET 0,B */
   3310          		{ xB( set( 0x01, B() ) ); return ( 8 ); }
   \                     ??execute_cb_218:
   \   000011DC   ........           LDR      R4,??DataTable704  ;; _B
   \   000011E0   000094E5           LDR      R0,[R4, #+0]
   \   000011E4   010080E3           ORR      R0,R0,#0x1
   \   000011E8   31FCFFEA           B        ??execute_cb_4
   3311          		case 193:	/* SET 0,C */
   3312          		{ xC( set( 0x01, C() ) ); return ( 8 ); }
   \                     ??execute_cb_219:
   \   000011EC   ........           LDR      R4,??DataTable705  ;; _C
   \   000011F0   000094E5           LDR      R0,[R4, #+0]
   \   000011F4   010080E3           ORR      R0,R0,#0x1
   \   000011F8   2DFCFFEA           B        ??execute_cb_4
   3313          		case 194:	/* SET 0,D */
   3314          		{ xD( set( 0x01, D() ) ); return ( 8 ); }
   \                     ??execute_cb_220:
   \   000011FC   ........           LDR      R4,??DataTable707  ;; _DE
   \                     ??execute_cb_221:
   \   00001200   0100A0E3           MOV      R0,#+1
   \                     ??execute_cb_222:
   \   00001204   005094E5           LDR      R5,[R4, #+0]
   \   00001208   450480E1           ORR      R0,R0,R5, ASR #+8
   \   0000120C   1DFCFFEA           B        ??execute_cb_11
   3315          		case 195:	/* SET 0,E */
   3316          		{ xE( set( 0x01, E() ) ); return ( 8 ); }
   \                     ??execute_cb_223:
   \   00001210   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001214   000094E5           LDR      R0,[R4, #+0]
   \   00001218   0008A0E1           LSL      R0,R0,#+16
   \   0000121C   2008A0E1           LSR      R0,R0,#+16
   \   00001220   000084E5           STR      R0,[R4, #+0]
   \   00001224   010080E3           ORR      R0,R0,#0x1
   \   00001228   21FCFFEA           B        ??execute_cb_4
   3317          		case 196:	/* SET 0,H */
   3318          		{ xH( set( 0x01, H() ) ); return ( 8 ); }
   \                     ??execute_cb_224:
   \   0000122C   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001230   F2FFFFEA           B        ??execute_cb_221
   3319          		case 197:	/* SET 0,L */
   3320          		{ xL( set( 0x01, L() ) ); return ( 8 ); }
   \                     ??execute_cb_225:
   \   00001234   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001238   000094E5           LDR      R0,[R4, #+0]
   \   0000123C   0008A0E1           LSL      R0,R0,#+16
   \   00001240   2008A0E1           LSR      R0,R0,#+16
   \   00001244   000084E5           STR      R0,[R4, #+0]
   \   00001248   010080E3           ORR      R0,R0,#0x1
   \   0000124C   18FCFFEA           B        ??execute_cb_4
   3321          		case 198:	/* SET 0,(HL) */
   3322          		{
   3323          			int hl = HL();
   3324          			pokeb( hl, set( 0x01, peekb( hl ) ) );
   \                     ??execute_cb_226:
   \   00001250   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001254   ........           LDR      R0,??DataTable711  ;; mem
   \   00001258   005094E5           LDR      R5,[R4, #+0]
   \   0000125C   001090E5           LDR      R1,[R0, #+0]
   \   00001260   014085E0           ADD      R4,R5,R1
   \   00001264   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001268   010080E3           ORR      R0,R0,#0x1
   \   0000126C   66FCFFEA           B        ??execute_cb_16
   3325          			return ( 15 );
   3326          		}
   3327          		case 199:	/* SET 0,A */
   3328          		{ xA( set( 0x01, A() ) ); return ( 8 ); }
   \                     ??execute_cb_227:
   \   00001270   ........           LDR      R4,??DataTable712  ;; _A
   \   00001274   000094E5           LDR      R0,[R4, #+0]
   \   00001278   010080E3           ORR      R0,R0,#0x1
   \   0000127C   0CFCFFEA           B        ??execute_cb_4
   3329          
   3330          		case 200:	/* SET 1,B */
   3331          		{ xB( set( 0x02, B() ) ); return ( 8 ); }
   \                     ??execute_cb_228:
   \   00001280   ........           LDR      R4,??DataTable704  ;; _B
   \   00001284   000094E5           LDR      R0,[R4, #+0]
   \   00001288   020080E3           ORR      R0,R0,#0x2
   \   0000128C   08FCFFEA           B        ??execute_cb_4
   3332          		case 201:	/* SET 1,C */
   3333          		{ xC( set( 0x02, C() ) ); return ( 8 ); }
   \                     ??execute_cb_229:
   \   00001290   ........           LDR      R4,??DataTable705  ;; _C
   \   00001294   000094E5           LDR      R0,[R4, #+0]
   \   00001298   020080E3           ORR      R0,R0,#0x2
   \   0000129C   04FCFFEA           B        ??execute_cb_4
   3334          		case 202:	/* SET 1,D */
   3335          		{ xD( set( 0x02, D() ) ); return ( 8 ); }
   \                     ??execute_cb_230:
   \   000012A0   ........           LDR      R4,??DataTable707  ;; _DE
   \   000012A4   0200A0E3           MOV      R0,#+2
   \                     ??execute_cb_231:
   \   000012A8   005094E5           LDR      R5,[R4, #+0]
   \   000012AC   450480E1           ORR      R0,R0,R5, ASR #+8
   \   000012B0   F4FBFFEA           B        ??execute_cb_11
   3336          		case 203:	/* SET 1,E */
   3337          		{ xE( set( 0x02, E() ) ); return ( 8 ); }
   \                     ??execute_cb_232:
   \   000012B4   ........           LDR      R4,??DataTable707  ;; _DE
   \   000012B8   000094E5           LDR      R0,[R4, #+0]
   \   000012BC   0008A0E1           LSL      R0,R0,#+16
   \   000012C0   2008A0E1           LSR      R0,R0,#+16
   \   000012C4   000084E5           STR      R0,[R4, #+0]
   \   000012C8   020080E3           ORR      R0,R0,#0x2
   \   000012CC   F8FBFFEA           B        ??execute_cb_4
   3338          		case 204:	/* SET 1,H */
   3339          		{ xH( set( 0x02, H() ) ); return ( 8 ); }
   \                     ??execute_cb_233:
   \   000012D0   ........           LDR      R4,??DataTable710  ;; _HL
   \   000012D4   0200A0E3           MOV      R0,#+2
   \   000012D8   C9FFFFEA           B        ??execute_cb_222
   3340          		case 205:	/* SET 1,L */
   3341          		{ xL( set( 0x02, L() ) ); return ( 8 ); }
   \                     ??execute_cb_234:
   \   000012DC   ........           LDR      R4,??DataTable710  ;; _HL
   \   000012E0   000094E5           LDR      R0,[R4, #+0]
   \   000012E4   0008A0E1           LSL      R0,R0,#+16
   \   000012E8   2008A0E1           LSR      R0,R0,#+16
   \   000012EC   000084E5           STR      R0,[R4, #+0]
   \   000012F0   020080E3           ORR      R0,R0,#0x2
   \   000012F4   EEFBFFEA           B        ??execute_cb_4
   3342          		case 206:	/* SET 1,(HL) */
   3343          		{
   3344          			int hl = HL();
   3345          			pokeb( hl, set( 0x02, peekb( hl ) ) );
   \                     ??execute_cb_235:
   \   000012F8   ........           LDR      R4,??DataTable710  ;; _HL
   \   000012FC   ........           LDR      R0,??DataTable711  ;; mem
   \   00001300   005094E5           LDR      R5,[R4, #+0]
   \   00001304   001090E5           LDR      R1,[R0, #+0]
   \   00001308   014085E0           ADD      R4,R5,R1
   \   0000130C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001310   020080E3           ORR      R0,R0,#0x2
   \   00001314   3CFCFFEA           B        ??execute_cb_16
   3346          			return ( 15 );
   3347          		}
   3348          		case 207:	/* SET 1,A */
   3349          		{ xA( set( 0x02, A() ) ); return ( 8 ); }
   \                     ??execute_cb_236:
   \   00001318   ........           LDR      R4,??DataTable712  ;; _A
   \   0000131C   000094E5           LDR      R0,[R4, #+0]
   \   00001320   020080E3           ORR      R0,R0,#0x2
   \   00001324   E2FBFFEA           B        ??execute_cb_4
   3350          
   3351          		case 208:	/* SET 2,B */
   3352          		{ xB( set( 0x04, B() ) ); return ( 8 ); }
   \                     ??execute_cb_237:
   \   00001328   ........           LDR      R4,??DataTable704  ;; _B
   \   0000132C   000094E5           LDR      R0,[R4, #+0]
   \   00001330   040080E3           ORR      R0,R0,#0x4
   \   00001334   DEFBFFEA           B        ??execute_cb_4
   3353          		case 209:	/* SET 2,C */
   3354          		{ xC( set( 0x04, C() ) ); return ( 8 ); }
   \                     ??execute_cb_238:
   \   00001338   ........           LDR      R4,??DataTable705  ;; _C
   \   0000133C   000094E5           LDR      R0,[R4, #+0]
   \   00001340   040080E3           ORR      R0,R0,#0x4
   \   00001344   DAFBFFEA           B        ??execute_cb_4
   3355          		case 210:	/* SET 2,D */
   3356          		{ xD( set( 0x04, D() ) ); return ( 8 ); }
   \                     ??execute_cb_239:
   \   00001348   ........           LDR      R4,??DataTable707  ;; _DE
   \   0000134C   0400A0E3           MOV      R0,#+4
   \   00001350   D4FFFFEA           B        ??execute_cb_231
   3357          		case 211:	/* SET 2,E */
   3358          		{ xE( set( 0x04, E() ) ); return ( 8 ); }
   \                     ??execute_cb_240:
   \   00001354   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001358   000094E5           LDR      R0,[R4, #+0]
   \   0000135C   0008A0E1           LSL      R0,R0,#+16
   \   00001360   2008A0E1           LSR      R0,R0,#+16
   \   00001364   000084E5           STR      R0,[R4, #+0]
   \   00001368   040080E3           ORR      R0,R0,#0x4
   \   0000136C   D0FBFFEA           B        ??execute_cb_4
   3359          		case 212:	/* SET 2,H */
   3360          		{ xH( set( 0x04, H() ) ); return ( 8 ); }
   \                     ??execute_cb_241:
   \   00001370   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001374   0400A0E3           MOV      R0,#+4
   \   00001378   A1FFFFEA           B        ??execute_cb_222
   3361          		case 213:	/* SET 2,L */
   3362          		{ xL( set( 0x04, L() ) ); return ( 8 ); }
   \                     ??execute_cb_242:
   \   0000137C   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001380   000094E5           LDR      R0,[R4, #+0]
   \   00001384   0008A0E1           LSL      R0,R0,#+16
   \   00001388   2008A0E1           LSR      R0,R0,#+16
   \   0000138C   000084E5           STR      R0,[R4, #+0]
   \   00001390   040080E3           ORR      R0,R0,#0x4
   \   00001394   C6FBFFEA           B        ??execute_cb_4
   3363          		case 214:	/* SET 2,(HL) */
   3364          		{
   3365          			int hl = HL();
   3366          			pokeb( hl, set( 0x04, peekb( hl ) ) );
   \                     ??execute_cb_243:
   \   00001398   ........           LDR      R4,??DataTable710  ;; _HL
   \   0000139C   ........           LDR      R0,??DataTable711  ;; mem
   \   000013A0   005094E5           LDR      R5,[R4, #+0]
   \   000013A4   001090E5           LDR      R1,[R0, #+0]
   \   000013A8   014085E0           ADD      R4,R5,R1
   \   000013AC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000013B0   040080E3           ORR      R0,R0,#0x4
   \   000013B4   14FCFFEA           B        ??execute_cb_16
   3367          			return ( 15 );
   3368          		}
   3369          		case 215:	/* SET 2,A */
   3370          		{ xA( set( 0x04, A() ) ); return ( 8 ); }
   \                     ??execute_cb_244:
   \   000013B8   ........           LDR      R4,??DataTable712  ;; _A
   \   000013BC   000094E5           LDR      R0,[R4, #+0]
   \   000013C0   040080E3           ORR      R0,R0,#0x4
   \   000013C4   BAFBFFEA           B        ??execute_cb_4
   3371          
   3372          		case 216:	/* SET 3,B */
   3373          		{ xB( set( 0x08, B() ) ); return ( 8 ); }
   \                     ??execute_cb_245:
   \   000013C8   ........           LDR      R4,??DataTable704  ;; _B
   \   000013CC   000094E5           LDR      R0,[R4, #+0]
   \   000013D0   080080E3           ORR      R0,R0,#0x8
   \   000013D4   B6FBFFEA           B        ??execute_cb_4
   3374          		case 217:	/* SET 3,C */
   3375          		{ xC( set( 0x08, C() ) ); return ( 8 ); }
   \                     ??execute_cb_246:
   \   000013D8   ........           LDR      R4,??DataTable705  ;; _C
   \   000013DC   000094E5           LDR      R0,[R4, #+0]
   \   000013E0   080080E3           ORR      R0,R0,#0x8
   \   000013E4   B2FBFFEA           B        ??execute_cb_4
   3376          		case 218:	/* SET 3,D */
   3377          		{ xD( set( 0x08, D() ) ); return ( 8 ); }
   \                     ??execute_cb_247:
   \   000013E8   ........           LDR      R4,??DataTable707  ;; _DE
   \   000013EC   0800A0E3           MOV      R0,#+8
   \                     ??execute_cb_248:
   \   000013F0   005094E5           LDR      R5,[R4, #+0]
   \   000013F4   450480E1           ORR      R0,R0,R5, ASR #+8
   \   000013F8   A2FBFFEA           B        ??execute_cb_11
   3378          		case 219:	/* SET 3,E */
   3379          		{ xE( set( 0x08, E() ) ); return ( 8 ); }
   \                     ??execute_cb_249:
   \   000013FC   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001400   000094E5           LDR      R0,[R4, #+0]
   \   00001404   0008A0E1           LSL      R0,R0,#+16
   \   00001408   2008A0E1           LSR      R0,R0,#+16
   \   0000140C   000084E5           STR      R0,[R4, #+0]
   \   00001410   080080E3           ORR      R0,R0,#0x8
   \   00001414   A6FBFFEA           B        ??execute_cb_4
   3380          		case 220:	/* SET 3,H */
   3381          		{ xH( set( 0x08, H() ) ); return ( 8 ); }
   \                     ??execute_cb_250:
   \   00001418   ........           LDR      R4,??DataTable710  ;; _HL
   \   0000141C   0800A0E3           MOV      R0,#+8
   \   00001420   77FFFFEA           B        ??execute_cb_222
   3382          		case 221:	/* SET 3,L */
   3383          		{ xL( set( 0x08, L() ) ); return ( 8 ); }
   \                     ??execute_cb_251:
   \   00001424   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001428   000094E5           LDR      R0,[R4, #+0]
   \   0000142C   0008A0E1           LSL      R0,R0,#+16
   \   00001430   2008A0E1           LSR      R0,R0,#+16
   \   00001434   000084E5           STR      R0,[R4, #+0]
   \   00001438   080080E3           ORR      R0,R0,#0x8
   \   0000143C   9CFBFFEA           B        ??execute_cb_4
   3384          		case 222:	/* SET 3,(HL) */
   3385          		{
   3386          			int hl = HL();
   3387          			pokeb( hl, set( 0x08, peekb( hl ) ) );
   \                     ??execute_cb_252:
   \   00001440   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001444   ........           LDR      R0,??DataTable711  ;; mem
   \   00001448   005094E5           LDR      R5,[R4, #+0]
   \   0000144C   001090E5           LDR      R1,[R0, #+0]
   \   00001450   014085E0           ADD      R4,R5,R1
   \   00001454   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001458   080080E3           ORR      R0,R0,#0x8
   \   0000145C   EAFBFFEA           B        ??execute_cb_16
   3388          			return ( 15 );
   3389          		}
   3390          		case 223:	/* SET 3,A */
   3391          		{ xA( set( 0x08, A() ) ); return ( 8 ); }
   \                     ??execute_cb_253:
   \   00001460   ........           LDR      R4,??DataTable712  ;; _A
   \   00001464   000094E5           LDR      R0,[R4, #+0]
   \   00001468   080080E3           ORR      R0,R0,#0x8
   \   0000146C   90FBFFEA           B        ??execute_cb_4
   3392          
   3393          		case 224:	/* SET 4,B */
   3394          		{ xB( set( 0x10, B() ) ); return ( 8 ); }
   \                     ??execute_cb_254:
   \   00001470   ........           LDR      R4,??DataTable704  ;; _B
   \   00001474   000094E5           LDR      R0,[R4, #+0]
   \   00001478   100080E3           ORR      R0,R0,#0x10
   \   0000147C   8CFBFFEA           B        ??execute_cb_4
   3395          		case 225:	/* SET 4,C */
   3396          		{ xC( set( 0x10, C() ) ); return ( 8 ); }
   \                     ??execute_cb_255:
   \   00001480   ........           LDR      R4,??DataTable705  ;; _C
   \   00001484   000094E5           LDR      R0,[R4, #+0]
   \   00001488   100080E3           ORR      R0,R0,#0x10
   \   0000148C   88FBFFEA           B        ??execute_cb_4
   3397          		case 226:	/* SET 4,D */
   3398          		{ xD( set( 0x10, D() ) ); return ( 8 ); }
   \                     ??execute_cb_256:
   \   00001490   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001494   1000A0E3           MOV      R0,#+16
   \   00001498   82FFFFEA           B        ??execute_cb_231
   3399          		case 227:	/* SET 4,E */
   3400          		{ xE( set( 0x10, E() ) ); return ( 8 ); }
   \                     ??execute_cb_257:
   \   0000149C   ........           LDR      R4,??DataTable707  ;; _DE
   \   000014A0   000094E5           LDR      R0,[R4, #+0]
   \   000014A4   0008A0E1           LSL      R0,R0,#+16
   \   000014A8   2008A0E1           LSR      R0,R0,#+16
   \   000014AC   000084E5           STR      R0,[R4, #+0]
   \   000014B0   100080E3           ORR      R0,R0,#0x10
   \   000014B4   7EFBFFEA           B        ??execute_cb_4
   3401          		case 228:	/* SET 4,H */
   3402          		{ xH( set( 0x10, H() ) ); return ( 8 ); }
   \                     ??execute_cb_258:
   \   000014B8   ........           LDR      R4,??DataTable710  ;; _HL
   \   000014BC   1000A0E3           MOV      R0,#+16
   \   000014C0   4FFFFFEA           B        ??execute_cb_222
   3403          		case 229:	/* SET 4,L */
   3404          		{ xL( set( 0x10, L() ) ); return ( 8 ); }
   \                     ??execute_cb_259:
   \   000014C4   ........           LDR      R4,??DataTable710  ;; _HL
   \   000014C8   000094E5           LDR      R0,[R4, #+0]
   \   000014CC   0008A0E1           LSL      R0,R0,#+16
   \   000014D0   2008A0E1           LSR      R0,R0,#+16
   \   000014D4   000084E5           STR      R0,[R4, #+0]
   \   000014D8   100080E3           ORR      R0,R0,#0x10
   \   000014DC   74FBFFEA           B        ??execute_cb_4
   3405          		case 230:	/* SET 4,(HL) */
   3406          		{
   3407          			int hl = HL();
   3408          			pokeb( hl, set( 0x10, peekb( hl ) ) );
   \                     ??execute_cb_260:
   \   000014E0   ........           LDR      R4,??DataTable710  ;; _HL
   \   000014E4   ........           LDR      R0,??DataTable711  ;; mem
   \   000014E8   005094E5           LDR      R5,[R4, #+0]
   \   000014EC   001090E5           LDR      R1,[R0, #+0]
   \   000014F0   014085E0           ADD      R4,R5,R1
   \   000014F4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000014F8   100080E3           ORR      R0,R0,#0x10
   \   000014FC   C2FBFFEA           B        ??execute_cb_16
   3409          			return ( 15 );
   3410          		}
   3411          		case 231:	/* SET 4,A */
   3412          		{ xA( set( 0x10, A() ) ); return ( 8 ); }
   \                     ??execute_cb_261:
   \   00001500   ........           LDR      R4,??DataTable712  ;; _A
   \   00001504   000094E5           LDR      R0,[R4, #+0]
   \   00001508   100080E3           ORR      R0,R0,#0x10
   \   0000150C   68FBFFEA           B        ??execute_cb_4
   3413          
   3414          		case 232:	/* SET 5,B */
   3415          		{ xB( set( 0x20, B() ) ); return ( 8 ); }
   \                     ??execute_cb_262:
   \   00001510   ........           LDR      R4,??DataTable704  ;; _B
   \   00001514   000094E5           LDR      R0,[R4, #+0]
   \   00001518   200080E3           ORR      R0,R0,#0x20
   \   0000151C   64FBFFEA           B        ??execute_cb_4
   3416          		case 233:	/* SET 5,C */
   3417          		{ xC( set( 0x20, C() ) ); return ( 8 ); }
   \                     ??execute_cb_263:
   \   00001520   ........           LDR      R4,??DataTable705  ;; _C
   \   00001524   000094E5           LDR      R0,[R4, #+0]
   \   00001528   200080E3           ORR      R0,R0,#0x20
   \   0000152C   60FBFFEA           B        ??execute_cb_4
   3418          		case 234:	/* SET 5,D */
   3419          		{ xD( set( 0x20, D() ) ); return ( 8 ); }
   \                     ??execute_cb_264:
   \   00001530   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001534   2000A0E3           MOV      R0,#+32
   \   00001538   ACFFFFEA           B        ??execute_cb_248
   3420          		case 235:	/* SET 5,E */
   3421          		{ xE( set( 0x20, E() ) ); return ( 8 ); }
   \                     ??execute_cb_265:
   \   0000153C   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001540   000094E5           LDR      R0,[R4, #+0]
   \   00001544   0008A0E1           LSL      R0,R0,#+16
   \   00001548   2008A0E1           LSR      R0,R0,#+16
   \   0000154C   000084E5           STR      R0,[R4, #+0]
   \   00001550   200080E3           ORR      R0,R0,#0x20
   \   00001554   56FBFFEA           B        ??execute_cb_4
   3422          		case 236:	/* SET 5,H */
   3423          		{ xH( set( 0x20, H() ) ); return ( 8 ); }
   \                     ??execute_cb_266:
   \   00001558   ........           LDR      R4,??DataTable710  ;; _HL
   \   0000155C   2000A0E3           MOV      R0,#+32
   \   00001560   27FFFFEA           B        ??execute_cb_222
   3424          		case 237:	/* SET 5,L */
   3425          		{ xL( set( 0x20, L() ) ); return ( 8 ); }
   \                     ??execute_cb_267:
   \   00001564   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001568   000094E5           LDR      R0,[R4, #+0]
   \   0000156C   0008A0E1           LSL      R0,R0,#+16
   \   00001570   2008A0E1           LSR      R0,R0,#+16
   \   00001574   000084E5           STR      R0,[R4, #+0]
   \   00001578   200080E3           ORR      R0,R0,#0x20
   \   0000157C   4CFBFFEA           B        ??execute_cb_4
   3426          		case 238:	/* SET 5,(HL) */
   3427          		{
   3428          			int hl = HL();
   3429          			pokeb( hl, set( 0x20, peekb( hl ) ) );
   \                     ??execute_cb_268:
   \   00001580   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001584   ........           LDR      R0,??DataTable711  ;; mem
   \   00001588   005094E5           LDR      R5,[R4, #+0]
   \   0000158C   001090E5           LDR      R1,[R0, #+0]
   \   00001590   014085E0           ADD      R4,R5,R1
   \   00001594   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001598   200080E3           ORR      R0,R0,#0x20
   \   0000159C   9AFBFFEA           B        ??execute_cb_16
   3430          			return ( 15 );
   3431          		}
   3432          		case 239:	/* SET 5,A */
   3433          		{ xA( set( 0x20, A() ) ); return ( 8 ); }
   \                     ??execute_cb_269:
   \   000015A0   ........           LDR      R4,??DataTable712  ;; _A
   \   000015A4   000094E5           LDR      R0,[R4, #+0]
   \   000015A8   200080E3           ORR      R0,R0,#0x20
   \   000015AC   40FBFFEA           B        ??execute_cb_4
   3434          
   3435          		case 240:	/* SET 6,B */
   3436          		{ xB( set( 0x40, B() ) ); return ( 8 ); }
   \                     ??execute_cb_270:
   \   000015B0   ........           LDR      R4,??DataTable704  ;; _B
   \   000015B4   000094E5           LDR      R0,[R4, #+0]
   \   000015B8   400080E3           ORR      R0,R0,#0x40
   \   000015BC   3CFBFFEA           B        ??execute_cb_4
   3437          		case 241:	/* SET 6,C */
   3438          		{ xC( set( 0x40, C() ) ); return ( 8 ); }
   \                     ??execute_cb_271:
   \   000015C0   ........           LDR      R4,??DataTable705  ;; _C
   \   000015C4   000094E5           LDR      R0,[R4, #+0]
   \   000015C8   400080E3           ORR      R0,R0,#0x40
   \   000015CC   38FBFFEA           B        ??execute_cb_4
   3439          		case 242:	/* SET 6,D */
   3440          		{ xD( set( 0x40, D() ) ); return ( 8 ); }
   \                     ??execute_cb_272:
   \   000015D0   ........           LDR      R4,??DataTable707  ;; _DE
   \   000015D4   4000A0E3           MOV      R0,#+64
   \   000015D8   32FFFFEA           B        ??execute_cb_231
   3441          		case 243:	/* SET 6,E */
   3442          		{ xE( set( 0x40, E() ) ); return ( 8 ); }
   \                     ??execute_cb_273:
   \   000015DC   ........           LDR      R4,??DataTable707  ;; _DE
   \   000015E0   000094E5           LDR      R0,[R4, #+0]
   \   000015E4   0008A0E1           LSL      R0,R0,#+16
   \   000015E8   2008A0E1           LSR      R0,R0,#+16
   \   000015EC   000084E5           STR      R0,[R4, #+0]
   \   000015F0   400080E3           ORR      R0,R0,#0x40
   \   000015F4   2EFBFFEA           B        ??execute_cb_4
   3443          		case 244:	/* SET 6,H */
   3444          		{ xH( set( 0x40, H() ) ); return ( 8 ); }
   \                     ??execute_cb_274:
   \   000015F8   ........           LDR      R4,??DataTable710  ;; _HL
   \   000015FC   4000A0E3           MOV      R0,#+64
   \   00001600   FFFEFFEA           B        ??execute_cb_222
   3445          		case 245:	/* SET 6,L */
   3446          		{ xL( set( 0x40, L() ) ); return ( 8 ); }
   \                     ??execute_cb_275:
   \   00001604   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001608   000094E5           LDR      R0,[R4, #+0]
   \   0000160C   0008A0E1           LSL      R0,R0,#+16
   \   00001610   2008A0E1           LSR      R0,R0,#+16
   \   00001614   000084E5           STR      R0,[R4, #+0]
   \   00001618   400080E3           ORR      R0,R0,#0x40
   \   0000161C   24FBFFEA           B        ??execute_cb_4
   3447          		case 246:	/* SET 6,(HL) */
   3448          		{
   3449          			int hl = HL();
   3450          			pokeb( hl, set( 0x40, peekb( hl ) ) );
   \                     ??execute_cb_276:
   \   00001620   ........           LDR      R4,??DataTable710  ;; _HL
   \   00001624   ........           LDR      R0,??DataTable711  ;; mem
   \   00001628   005094E5           LDR      R5,[R4, #+0]
   \   0000162C   001090E5           LDR      R1,[R0, #+0]
   \   00001630   014085E0           ADD      R4,R5,R1
   \   00001634   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001638   400080E3           ORR      R0,R0,#0x40
   \   0000163C   72FBFFEA           B        ??execute_cb_16
   3451          			return ( 15 );
   3452          		}
   3453          		case 247:	/* SET 6,A */
   3454          		{ xA( set( 0x40, A() ) ); return ( 8 ); }
   \                     ??execute_cb_277:
   \   00001640   ........           LDR      R4,??DataTable712  ;; _A
   \   00001644   000094E5           LDR      R0,[R4, #+0]
   \   00001648   400080E3           ORR      R0,R0,#0x40
   \   0000164C   18FBFFEA           B        ??execute_cb_4
   3455          
   3456          		case 248:	/* SET 7,B */
   3457          		{ xB( set( 0x80, B() ) ); return ( 8 ); }
   \                     ??execute_cb_278:
   \   00001650   ........           LDR      R4,??DataTable704  ;; _B
   \   00001654   000094E5           LDR      R0,[R4, #+0]
   \   00001658   800080E3           ORR      R0,R0,#0x80
   \   0000165C   14FBFFEA           B        ??execute_cb_4
   3458          		case 249:	/* SET 7,C */
   3459          		{ xC( set( 0x80, C() ) ); return ( 8 ); }
   \                     ??execute_cb_279:
   \   00001660   ........           LDR      R4,??DataTable705  ;; _C
   \   00001664   000094E5           LDR      R0,[R4, #+0]
   \   00001668   800080E3           ORR      R0,R0,#0x80
   \   0000166C   10FBFFEA           B        ??execute_cb_4
   3460          		case 250:	/* SET 7,D */
   3461          		{ xD( set( 0x80, D() ) ); return ( 8 ); }
   \                     ??execute_cb_280:
   \   00001670   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001674   8000A0E3           MOV      R0,#+128
   \   00001678   005094E5           LDR      R5,[R4, #+0]
   \   0000167C   450480E1           ORR      R0,R0,R5, ASR #+8
   \   00001680   00FBFFEA           B        ??execute_cb_11
   3462          		case 251:	/* SET 7,E */
   3463          		{ xE( set( 0x80, E() ) ); return ( 8 ); }
   \                     ??execute_cb_281:
   \   00001684   ........           LDR      R4,??DataTable707  ;; _DE
   \   00001688   000094E5           LDR      R0,[R4, #+0]
   \   0000168C   0008A0E1           LSL      R0,R0,#+16
   \   00001690   2008A0E1           LSR      R0,R0,#+16
   \   00001694   000084E5           STR      R0,[R4, #+0]
   \   00001698   800080E3           ORR      R0,R0,#0x80
   \   0000169C   04FBFFEA           B        ??execute_cb_4
   3464          		case 252:	/* SET 7,H */
   3465          		{ xH( set( 0x80, H() ) ); return ( 8 ); }
   \                     ??execute_cb_282:
   \   000016A0   ........           LDR      R4,??DataTable710  ;; _HL
   \   000016A4   8000A0E3           MOV      R0,#+128
   \   000016A8   D5FEFFEA           B        ??execute_cb_222
   3466          		case 253:	/* SET 7,L */
   3467          		{ xL( set( 0x80, L() ) ); return ( 8 ); }
   \                     ??execute_cb_283:
   \   000016AC   ........           LDR      R4,??DataTable710  ;; _HL
   \   000016B0   000094E5           LDR      R0,[R4, #+0]
   \   000016B4   0008A0E1           LSL      R0,R0,#+16
   \   000016B8   2008A0E1           LSR      R0,R0,#+16
   \   000016BC   000084E5           STR      R0,[R4, #+0]
   \   000016C0   800080E3           ORR      R0,R0,#0x80
   \   000016C4   FAFAFFEA           B        ??execute_cb_4
   3468          		case 254:	/* SET 7,(HL) */
   3469          		{
   3470          			int hl = HL();
   3471          			pokeb( hl, set( 0x80, peekb( hl ) ) );
   \                     ??execute_cb_284:
   \   000016C8   ........           LDR      R4,??DataTable710  ;; _HL
   \   000016CC   ........           LDR      R0,??DataTable711  ;; mem
   \   000016D0   005094E5           LDR      R5,[R4, #+0]
   \   000016D4   001090E5           LDR      R1,[R0, #+0]
   \   000016D8   014085E0           ADD      R4,R5,R1
   \   000016DC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000016E0   800080E3           ORR      R0,R0,#0x80
   \   000016E4   48FBFFEA           B        ??execute_cb_16
   3472          			return ( 15 );
   3473          		}
   3474          		case 255:	/* SET 7,A */
   3475          		{ xA( set( 0x80, A() ) ); return ( 8 ); }
   \                     ??execute_cb_285:
   \   000016E8   ........           LDR      R4,??DataTable712  ;; _A
   \   000016EC   000094E5           LDR      R0,[R4, #+0]
   \   000016F0   800080E3           ORR      R0,R0,#0x80
   \   000016F4   EEFAFFEA           B        ??execute_cb_4
   3476          
   3477          		} // switch end
   3478          
   3479          		return 0;
   \                     ??execute_cb_2:
   \   000016F8   0000A0E3           MOV      R0,#+0
   \   000016FC   3080BDE8           POP      {R4,R5,PC}       ;; return
   3480          	}
   3481          #pragma optimize=no_code_motion

   \                                 In segment CODE, align 4, keep-with-next
   3482          	private final int execute_id() {
   3483          
   3484          		REFRESH( 1 );
   \                     execute_id:
   \   00000000   ........           LDR      R0,??DataTable717  ;; _R
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   001080E5           STR      R1,[R0, #+0]
   3485          
   3486          		switch ( nxtpcb() ) {
   \   00000014   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   012081E2           ADD      R2,R1,#+1
   \   00000020   002080E5           STR      R2,[R0, #+0]
   \   00000024   ........           LDR      R0,??DataTable780  ;; mem
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   0000D1E7           LDRB     R0,[R1, +R0]
   \   00000030   F90050E3           CMP      R0,#+249
   \   00000034   9F03008A           BHI      ??execute_id_1
   \   00000038   021F8FE2           ADR      R1,??execute_id_0
   \   0000003C   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000040   B01091E1           LDRH     R1,[R1, R0]
   \   00000044   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??execute_id_0:
   \   00000048   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000050   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000058   7C0087007C00       DC16     +124,+135,+124,+124
   \              7C00        
   \   00000060   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000068   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000070   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000078   7C008E007C00       DC16     +124,+142,+124,+124
   \              7C00        
   \   00000080   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000088   7C009E00A000       DC16     +124,+158,+160,+184
   \              B800        
   \   00000090   C400E100FF00       DC16     +196,+225,+255,+124
   \              7C00        
   \   00000098   7C009100AC00       DC16     +124,+145,+172,+188
   \              BC00        
   \   000000A0   CA00E6000D01       DC16     +202,+230,+269,+124
   \              7C00        
   \   000000A8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000000B0   D100ED001B01       DC16     +209,+237,+283,+124
   \              7C00        
   \   000000B8   7C0096007C00       DC16     +124,+150,+124,+124
   \              7C00        
   \   000000C0   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000000C8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000000D0   2C0132013801       DC16     +300,+306,+312,+124
   \              7C00        
   \   000000D8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000000E0   44014A015001       DC16     +324,+330,+336,+124
   \              7C00        
   \   000000E8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000000F0   61016A017301       DC16     +353,+362,+371,+124
   \              7C00        
   \   000000F8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000100   86018E019701       DC16     +390,+398,+407,+124
   \              7C00        
   \   00000108   AA01AD01B601       DC16     +426,+429,+438,+443
   \              BB01        
   \   00000110   E401C001C501       DC16     +484,+448,+453,+471
   \              D701        
   \   00000118   DA01DD01E601       DC16     +474,+477,+486,+493
   \              ED01        
   \   00000120   F401E401F901       DC16     +500,+484,+505,+523
   \              0B02        
   \   00000128   0E021E022E02       DC16     +526,+542,+558,+570
   \              3A02        
   \   00000130   4A025C029B03       DC16     +586,+604,+923,+620
   \              6C02        
   \   00000138   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000140   7C0282028802       DC16     +636,+642,+648,+124
   \              7C00        
   \   00000148   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000150   940299029E02       DC16     +660,+665,+670,+124
   \              7C00        
   \   00000158   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000160   AD02B202B702       DC16     +685,+690,+695,+124
   \              7C00        
   \   00000168   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000170   C602CB02D002       DC16     +710,+715,+720,+124
   \              7C00        
   \   00000178   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000180   DF02E402E902       DC16     +735,+740,+745,+124
   \              7C00        
   \   00000188   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000190   F802FD020203       DC16     +760,+765,+770,+124
   \              7C00        
   \   00000198   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001A0   110316031B03       DC16     +785,+790,+795,+124
   \              7C00        
   \   000001A8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001B0   2A032F033403       DC16     +810,+815,+820,+124
   \              7C00        
   \   000001B8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001C0   430348034D03       DC16     +835,+840,+845,+124
   \              7C00        
   \   000001C8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001D0   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001D8   7C007C007C00       DC16     +124,+124,+124,+876
   \              6C03        
   \   000001E0   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001E8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001F0   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   000001F8   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000200   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000208   7C005C037C00       DC16     +124,+860,+124,+898
   \              8203        
   \   00000210   7C0096037C00       DC16     +124,+918,+124,+124
   \              7C00        
   \   00000218   7C0061037C00       DC16     +124,+865,+124,+124
   \              7C00        
   \   00000220   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000228   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000230   7C007C007C00       DC16     +124,+124,+124,+124
   \              7C00        
   \   00000238   7C006603           DC16     +124,+870
   3487          
   3488          		case  0: /* NOP */
   3489          		case  1:
   3490          		case  2:
   3491          		case  3:
   3492          		case  4:
   3493          		case  5:
   3494          		case  6:
   3495          		case  7:
   3496          		case  8:
   3497          
   3498          		case 10:
   3499          		case 11:
   3500          		case 12:
   3501          		case 13:
   3502          		case 14:
   3503          		case 15:
   3504          		case 16:
   3505          		case 17:
   3506          		case 18:
   3507          		case 19:
   3508          		case 20:
   3509          		case 21:
   3510          		case 22:
   3511          		case 23:
   3512          		case 24:
   3513          
   3514          		case 26:
   3515          		case 27:
   3516          		case 28:
   3517          		case 29:
   3518          		case 30:
   3519          		case 31:
   3520          		case 32:
   3521          
   3522          		case 39:
   3523          		case 40:
   3524          
   3525          		case 47:
   3526          		case 48:
   3527          		case 49:
   3528          		case 50:
   3529          		case 51:
   3530          
   3531          		case 55:
   3532          		case 56:
   3533          
   3534          		case 58:
   3535          		case 59:
   3536          		case 60:
   3537          		case 61:
   3538          		case 62:
   3539          		case 63:
   3540          		case 64:
   3541          		case 65:
   3542          		case 66:
   3543          		case 67:
   3544          
   3545          		case 71:
   3546          		case 72:
   3547          		case 73:
   3548          		case 74:
   3549          		case 75:
   3550          
   3551          		case 79:
   3552          		case 80:
   3553          		case 81:
   3554          		case 82:
   3555          		case 83:
   3556          
   3557          		case 87:
   3558          		case 88:
   3559          		case 89:
   3560          		case 90:
   3561          		case 91:
   3562          
   3563          		case 95:
   3564          
   3565          		case 120:
   3566          		case 121:
   3567          		case 122:
   3568          		case 123:
   3569          
   3570          		case 127:
   3571          		case 128:
   3572          		case 129:
   3573          		case 130:
   3574          		case 131:
   3575          
   3576          		case 135:
   3577          		case 136:
   3578          		case 137:
   3579          		case 138:
   3580          		case 139:
   3581          
   3582          		case 143:
   3583          		case 144:
   3584          		case 145:
   3585          		case 146:
   3586          		case 147:
   3587          
   3588          		case 151:
   3589          		case 152:
   3590          		case 153:
   3591          		case 154:
   3592          		case 155:
   3593          
   3594          		case 159:
   3595          		case 160:
   3596          		case 161:
   3597          		case 162:
   3598          		case 163:
   3599          
   3600          		case 167:
   3601          		case 168:
   3602          		case 169:
   3603          		case 170:
   3604          		case 171:
   3605          
   3606          		case 175:
   3607          		case 176:
   3608          		case 177:
   3609          		case 178:
   3610          		case 179:
   3611          
   3612          		case 183:
   3613          		case 184:
   3614          		case 185:
   3615          		case 186:
   3616          		case 187:
   3617          
   3618          		case 191:
   3619          		case 192:
   3620          		case 193:
   3621          		case 194:
   3622          		case 195:
   3623          		case 196:
   3624          		case 197:
   3625          		case 198:
   3626          		case 199:
   3627          		case 200:
   3628          		case 201:
   3629          		case 202:
   3630          
   3631          		case 204:
   3632          		case 205:
   3633          		case 206:
   3634          		case 207:
   3635          		case 208:
   3636          		case 209:
   3637          		case 210:
   3638          		case 211:
   3639          		case 212:
   3640          		case 213:
   3641          		case 214:
   3642          		case 215:
   3643          		case 216:
   3644          		case 217:
   3645          		case 218:
   3646          		case 219:
   3647          		case 220:
   3648          		case 221:
   3649          		case 222:
   3650          		case 223:
   3651          		case 224:
   3652          
   3653          		case 226:
   3654          
   3655          		case 228:
   3656          
   3657          		case 230:
   3658          		case 231:
   3659          		case 232:
   3660          
   3661          		case 234:
   3662          		case 235:
   3663          		case 236:
   3664          		case 237:
   3665          		case 238:
   3666          		case 239:
   3667          		case 240:
   3668          		case 241:
   3669          		case 242:
   3670          		case 243:
   3671          		case 244:
   3672          		case 245:
   3673          		case 246:
   3674          		case 247:
   3675          		case 248:
   3676          		{
   3677          			xPC( dec16( PC() ) );
   \                     ??execute_id_2:
   \   0000023C   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000240   011042E2           SUB      R1,R2,#+1
   \   00000244   0118A0E1           LSL      R1,R1,#+16
   \   00000248   2118A0E1           LSR      R1,R1,#+16
   \   0000024C   001080E5           STR      R1,[R0, #+0]
   3678          			REFRESH( -1 );
   \   00000250   ........           LDR      R0,??DataTable717  ;; _R
   \   00000254   001090E5           LDR      R1,[R0, #+0]
   \   00000258   011041E2           SUB      R1,R1,#+1
   \   0000025C   001080E5           STR      R1,[R0, #+0]
   3679          			return ( 4 );
   \   00000260   0400A0E3           MOV      R0,#+4
   \   00000264   3080BDE8           POP      {R4,R5,PC}
   3680          		}
   3681          
   3682          		case  9: /* ADD ID,BC */
   3683          		{ xID( add16( ID(), BC() ) ); return ( 15 ); }
   \                     ??execute_id_3:
   \   00000268   ........           LDR      R0,??DataTable816  ;; _B
   \   0000026C   ........           LDR      R1,??DataTable820  ;; _C
   \   00000270   000090E5           LDR      R0,[R0, #+0]
   \   00000274   001091E5           LDR      R1,[R1, #+0]
   \   00000278   ........           LDR      R4,??DataTable900  ;; _ID
   \   0000027C   001481E1           ORR      R1,R1,R0, LSL #+8
   \   00000280   0A0000EA           B        ??execute_id_4
   3684          		case 25: /* ADD ID,DE */
   3685          		{ xID( add16( ID(), DE() ) ); return ( 15 ); }
   \                     ??execute_id_5:
   \   00000284   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000288   ........           LDR      R0,??DataTable828  ;; _DE
   \   0000028C   060000EA           B        ??execute_id_6
   3686          		case 41: /* ADD ID,ID */
   3687          		{
   3688          			int id = ID();
   3689          			xID( add16( id, id ) );
   \                     ??execute_id_7:
   \   00000290   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000294   005094E5           LDR      R5,[R4, #+0]
   \   00000298   0510A0E1           MOV      R1,R5
   \   0000029C   0500A0E1           MOV      R0,R5
   \   000002A0   030000EA           B        ??execute_id_8
   3690          			return ( 15 );
   3691          		}
   3692          		case 57: /* ADD ID,SP */
   3693          		{ xID( add16( ID(),SP() ) ); return ( 15 ); }
   \                     ??execute_id_9:
   \   000002A4   ........           LDR      R4,??DataTable900  ;; _ID
   \   000002A8   ........           LDR      R0,??DataTable897  ;; _SP
   \                     ??execute_id_6:
   \   000002AC   001090E5           LDR      R1,[R0, #+0]
   \                     ??execute_id_4:
   \   000002B0   000094E5           LDR      R0,[R4, #+0]
   \                     ??execute_id_8:
   \   000002B4   ........           BL       add16
   \   000002B8   000084E5           STR      R0,[R4, #+0]
   \   000002BC   0F00A0E3           MOV      R0,#+15
   \   000002C0   3080BDE8           POP      {R4,R5,PC}
   3694          
   3695          		case 33: /* LD ID,nn */
   3696          		{ xID( nxtpcw() ); return ( 14 ); }
   \                     ??execute_id_10:
   \   000002C4   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   000002C8   BC0200EA           B        ??execute_id_11
   3697          		case 34: /* LD (nn),ID */
   3698          		{ pokew( nxtpcw(), ID() ); return ( 20 ); }
   \                     ??execute_id_12:
   \   000002CC   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   000002D0   ........           LDR      R1,??DataTable900  ;; _ID
   \   000002D4   002091E5           LDR      R2,[R1, #+0]
   \   000002D8   ........           LDR      R1,??DataTable780  ;; mem
   \   000002DC   003091E5           LDR      R3,[R1, #+0]
   \   000002E0   0320C0E7           STRB     R2,[R0, +R3]
   \   000002E4   001091E5           LDR      R1,[R1, #+0]
   \   000002E8   010080E2           ADD      R0,R0,#+1
   \   000002EC   0008A0E1           LSL      R0,R0,#+16
   \   000002F0   4224A0E1           ASR      R2,R2,#+8
   \   000002F4   2028C1E7           STRB     R2,[R1, +R0, LSR #+16]
   \   000002F8   D30200EA           B        ??execute_id_13
   3699          		case 42: /* LD ID,(nn) */
   3700          		{ xID( peekw( nxtpcw() ) ); return ( 20 ); }
   \                     ??execute_id_14:
   \   000002FC   ........           _BLF     nxtpcw,??nxtpcw??rA
   \   00000300   ........           LDR      R1,??DataTable780  ;; mem
   \   00000304   002091E5           LDR      R2,[R1, #+0]
   \   00000308   ........           LDR      R1,??DataTable900  ;; _ID
   \   0000030C   0230D0E7           LDRB     R3,[R0, +R2]
   \   00000310   010080E2           ADD      R0,R0,#+1
   \   00000314   0008A0E1           LSL      R0,R0,#+16
   \   00000318   2008D2E7           LDRB     R0,[R2, +R0, LSR #+16]
   \   0000031C   000483E1           ORR      R0,R3,R0, LSL #+8
   \   00000320   000081E5           STR      R0,[R1, #+0]
   \   00000324   1400A0E3           MOV      R0,#+20
   \   00000328   3080BDE8           POP      {R4,R5,PC}
   3701          		case 35:/* INC ID */
   3702          		{ xID( inc16( ID() ) ); return ( 10 ); }
   \                     ??execute_id_15:
   \   0000032C   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000330   000094E5           LDR      R0,[R4, #+0]
   \   00000334   010080E2           ADD      R0,R0,#+1
   \   00000338   020000EA           B        ??execute_id_16
   3703          		case 43:/* DEC ID */
   3704          		{ xID( dec16( ID() ) ); return ( 10 ); }
   \                     ??execute_id_17:
   \   0000033C   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000340   000094E5           LDR      R0,[R4, #+0]
   \   00000344   010040E2           SUB      R0,R0,#+1
   \                     ??execute_id_16:
   \   00000348   0008A0E1           LSL      R0,R0,#+16
   \   0000034C   2008A0E1           LSR      R0,R0,#+16
   \   00000350   000084E5           STR      R0,[R4, #+0]
   \   00000354   0A00A0E3           MOV      R0,#+10
   \   00000358   3080BDE8           POP      {R4,R5,PC}
   3705          		case 36:/* INC IDH */
   3706          		{ xIDH( inc8( IDH() ) ); return ( 8 ); }
   \                     ??execute_id_18:
   \   0000035C   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000360   005094E5           LDR      R5,[R4, #+0]
   \   00000364   4504A0E1           ASR      R0,R5,#+8
   \   00000368   ........           BL       inc8
   \                     ??execute_id_19:
   \   0000036C   FF1005E2           AND      R1,R5,#0xFF
   \   00000370   E70000EA           B        ??execute_id_20
   3707          		case 44:/* INC IDL */
   3708          		{ xIDL( inc8( IDL() ) ); return ( 8 ); }
   \                     ??execute_id_21:
   \   00000374   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000378   005094E5           LDR      R5,[R4, #+0]
   \   0000037C   FF0005E2           AND      R0,R5,#0xFF
   \   00000380   ........           BL       inc8
   \   00000384   FF1C05E2           AND      R1,R5,#0xFF00
   \   00000388   010080E1           ORR      R0,R0,R1
   \   0000038C   110100EA           B        ??execute_id_22
   3709          		case 52:/* INC (ID+d) */
   3710          		{
   3711          		    int z = ID_d();
   \                     ??execute_id_23:
   \   00000390   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000394   0230A0E1           MOV      R3,R2
   \   00000398   011083E2           ADD      R1,R3,#+1
   \   0000039C   001080E5           STR      R1,[R0, #+0]
   \   000003A0   ........           LDR      R1,??DataTable780  ;; mem
   \   000003A4   ........           LDR      R0,??DataTable900  ;; _ID
   \   000003A8   002091E5           LDR      R2,[R1, #+0]
   \   000003AC   000090E5           LDR      R0,[R0, #+0]
   \   000003B0   D21093E1           LDRSB    R1,[R3, +R2]
   \   000003B4   000081E0           ADD      R0,R1,R0
   \   000003B8   0008A0E1           LSL      R0,R0,#+16
   \   000003BC   2008A0E1           LSR      R0,R0,#+16
   3712          		    pokeb( z, inc8( peekb(z) ) );
   \   000003C0   024080E0           ADD      R4,R0,R2
   \   000003C4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000003C8   ........           BL       inc8
   \   000003CC   1A0000EA           B        ??execute_id_24
   3713          		    return ( 23 );
   3714          		}
   3715          		case 37:/* DEC IDH */
   3716          		{ xIDH( dec8( IDH() ) ); return ( 8 ); }
   \                     ??execute_id_25:
   \   000003D0   ........           LDR      R4,??DataTable900  ;; _ID
   \   000003D4   005094E5           LDR      R5,[R4, #+0]
   \   000003D8   4504A0E1           ASR      R0,R5,#+8
   \   000003DC   ........           BL       dec8
   \   000003E0   E1FFFFEA           B        ??execute_id_19
   3717          		case 45:/* DEC IDL */
   3718          		{ xIDL( dec8( IDL() ) ); return ( 8 ); }
   \                     ??execute_id_26:
   \   000003E4   ........           LDR      R4,??DataTable900  ;; _ID
   \   000003E8   005094E5           LDR      R5,[R4, #+0]
   \   000003EC   FF0005E2           AND      R0,R5,#0xFF
   \   000003F0   ........           BL       dec8
   \   000003F4   FF1C05E2           AND      R1,R5,#0xFF00
   \   000003F8   010080E1           ORR      R0,R0,R1
   \   000003FC   F50000EA           B        ??execute_id_22
   3719          		case 53:/* DEC (ID+d) */
   3720          		{
   3721          		    int z = ID_d();
   \                     ??execute_id_27:
   \   00000400   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000404   0230A0E1           MOV      R3,R2
   \   00000408   011083E2           ADD      R1,R3,#+1
   \   0000040C   001080E5           STR      R1,[R0, #+0]
   \   00000410   ........           LDR      R1,??DataTable780  ;; mem
   \   00000414   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000418   002091E5           LDR      R2,[R1, #+0]
   \   0000041C   000090E5           LDR      R0,[R0, #+0]
   \   00000420   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000424   000081E0           ADD      R0,R1,R0
   \   00000428   0008A0E1           LSL      R0,R0,#+16
   \   0000042C   2008A0E1           LSR      R0,R0,#+16
   3722          		    pokeb( z, dec8( peekb(z) ) );
   \   00000430   024080E0           ADD      R4,R0,R2
   \   00000434   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000438   ........           BL       dec8
   \                     ??execute_id_24:
   \   0000043C   0000C4E5           STRB     R0,[R4, #+0]
   3723          		    return ( 23 );
   \                     ??execute_id_28:
   \   00000440   1700A0E3           MOV      R0,#+23
   \   00000444   3080BDE8           POP      {R4,R5,PC}
   3724          		}
   3725          
   3726          		case 38: /* LD IDH,n */
   3727          		{ xIDH( nxtpcb() ); return ( 11 ); }
   \                     ??execute_id_29:
   \   00000448   ........           LDR      R0,??DataTable771  ;; _PC
   \   0000044C   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000450   0210A0E1           MOV      R1,R2
   \   00000454   012081E2           ADD      R2,R1,#+1
   \   00000458   002080E5           STR      R2,[R0, #+0]
   \   0000045C   ........           LDR      R0,??DataTable780  ;; mem
   \   00000460   000090E5           LDR      R0,[R0, #+0]
   \   00000464   0000D1E7           LDRB     R0,[R1, +R0]
   \   00000468   001094E5           LDR      R1,[R4, #+0]
   \   0000046C   FF1001E2           AND      R1,R1,#0xFF
   \   00000470   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000474   000084E5           STR      R0,[R4, #+0]
   \   00000478   0B00A0E3           MOV      R0,#+11
   \   0000047C   3080BDE8           POP      {R4,R5,PC}
   3728          		case 46: /* LD IDL,n */
   3729          		{ xIDL( nxtpcb() ); return ( 11 ); }
   \                     ??execute_id_30:
   \   00000480   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000484   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000488   0210A0E1           MOV      R1,R2
   \   0000048C   012081E2           ADD      R2,R1,#+1
   \   00000490   002080E5           STR      R2,[R0, #+0]
   \   00000494   ........           LDR      R0,??DataTable780  ;; mem
   \   00000498   000090E5           LDR      R0,[R0, #+0]
   \   0000049C   0000D1E7           LDRB     R0,[R1, +R0]
   \   000004A0   001094E5           LDR      R1,[R4, #+0]
   \   000004A4   FF1C01E2           AND      R1,R1,#0xFF00
   \   000004A8   010080E1           ORR      R0,R0,R1
   \   000004AC   000084E5           STR      R0,[R4, #+0]
   \   000004B0   0B00A0E3           MOV      R0,#+11
   \   000004B4   3080BDE8           POP      {R4,R5,PC}
   3730          		case 54: /* LD (ID+d),n */
   3731          		{ int z = ID_d(); pokeb(z,nxtpcb()); return ( 19 ); }
   \                     ??execute_id_31:
   \   000004B8   ........           LDR      R1,??DataTable780  ;; mem
   \   000004BC   ........           LDR      R0,??DataTable771  ;; _PC
   \   000004C0   0240A0E1           MOV      R4,R2
   \   000004C4   002091E5           LDR      R2,[R1, #+0]
   \   000004C8   ........           LDR      R1,??DataTable900  ;; _ID
   \   000004CC   013084E2           ADD      R3,R4,#+1
   \   000004D0   001091E5           LDR      R1,[R1, #+0]
   \   000004D4   003080E5           STR      R3,[R0, #+0]
   \   000004D8   D24094E1           LDRSB    R4,[R4, +R2]
   \   000004DC   011084E0           ADD      R1,R4,R1
   \   000004E0   014083E2           ADD      R4,R3,#+1
   \   000004E4   004080E5           STR      R4,[R0, #+0]
   \   000004E8   0200D3E7           LDRB     R0,[R3, +R2]
   \   000004EC   0118A0E1           LSL      R1,R1,#+16
   \   000004F0   2118A0E1           LSR      R1,R1,#+16
   \   000004F4   0200C1E7           STRB     R0,[R1, +R2]
   \   000004F8   320000EA           B        ??execute_id_32
   3732          
   3733          		case 68: /* LD B,IDH */
   3734          		{ xB( IDH() ); return ( 8 ); }
   \                     ??execute_id_33:
   \   000004FC   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000500   ........           LDR      R0,??DataTable816  ;; _B
   \   00000504   001091E5           LDR      R1,[R1, #+0]
   \   00000508   4114A0E1           ASR      R1,R1,#+8
   \   0000050C   001080E5           STR      R1,[R0, #+0]
   \   00000510   B10000EA           B        ??execute_id_34
   3735          		case 69: /* LD B,IDL */
   3736          		{ xB( IDL() ); return ( 8 ); }
   \                     ??execute_id_35:
   \   00000514   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000518   ........           LDR      R0,??DataTable816  ;; _B
   \   0000051C   001091E5           LDR      R1,[R1, #+0]
   \   00000520   FF1001E2           AND      R1,R1,#0xFF
   \   00000524   001080E5           STR      R1,[R0, #+0]
   \   00000528   AB0000EA           B        ??execute_id_34
   3737          		case 70: /* LD B,(ID+d) */
   3738          		{ xB( peekb( ID_d() ) ); return ( 19 ); }
   \                     ??execute_id_36:
   \   0000052C   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000530   0230A0E1           MOV      R3,R2
   \   00000534   011083E2           ADD      R1,R3,#+1
   \   00000538   001080E5           STR      R1,[R0, #+0]
   \   0000053C   ........           LDR      R1,??DataTable780  ;; mem
   \   00000540   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000544   002091E5           LDR      R2,[R1, #+0]
   \   00000548   000090E5           LDR      R0,[R0, #+0]
   \   0000054C   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000550   000081E0           ADD      R0,R1,R0
   \   00000554   ........           LDR      R1,??DataTable816  ;; _B
   \   00000558   160000EA           B        ??execute_id_37
   3739          
   3740          		case 76: /* LD C,IDH */
   3741          		{ xC( IDH() ); return ( 8 ); }
   \                     ??execute_id_38:
   \   0000055C   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000560   ........           LDR      R0,??DataTable820  ;; _C
   \   00000564   001091E5           LDR      R1,[R1, #+0]
   \   00000568   4114A0E1           ASR      R1,R1,#+8
   \   0000056C   001080E5           STR      R1,[R0, #+0]
   \   00000570   990000EA           B        ??execute_id_34
   3742          		case 77: /* LD C,IDL */
   3743          		{ xC( IDL() ); return ( 8 ); }
   \                     ??execute_id_39:
   \   00000574   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000578   ........           LDR      R0,??DataTable820  ;; _C
   \   0000057C   001091E5           LDR      R1,[R1, #+0]
   \   00000580   FF1001E2           AND      R1,R1,#0xFF
   \   00000584   001080E5           STR      R1,[R0, #+0]
   \   00000588   930000EA           B        ??execute_id_34
   3744          		case 78: /* LD C,(ID+d) */
   3745          		{ xC( peekb( ID_d() ) ); return ( 19 ); }
   \                     ??execute_id_40:
   \   0000058C   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000590   0230A0E1           MOV      R3,R2
   \   00000594   011083E2           ADD      R1,R3,#+1
   \   00000598   001080E5           STR      R1,[R0, #+0]
   \   0000059C   ........           LDR      R1,??DataTable780  ;; mem
   \   000005A0   ........           LDR      R0,??DataTable900  ;; _ID
   \   000005A4   002091E5           LDR      R2,[R1, #+0]
   \   000005A8   000090E5           LDR      R0,[R0, #+0]
   \   000005AC   D21093E1           LDRSB    R1,[R3, +R2]
   \   000005B0   000081E0           ADD      R0,R1,R0
   \   000005B4   ........           LDR      R1,??DataTable820  ;; _C
   \                     ??execute_id_37:
   \   000005B8   0008A0E1           LSL      R0,R0,#+16
   \   000005BC   2008A0E1           LSR      R0,R0,#+16
   \   000005C0   0200D0E7           LDRB     R0,[R0, +R2]
   \                     ??execute_id_41:
   \   000005C4   000081E5           STR      R0,[R1, #+0]
   \                     ??execute_id_32:
   \   000005C8   1300A0E3           MOV      R0,#+19
   \   000005CC   3080BDE8           POP      {R4,R5,PC}
   3746          
   3747          		case 84: /* LD D,IDH */
   3748          		{ xD( IDH() ); return ( 8 ); }
   \                     ??execute_id_42:
   \   000005D0   ........           LDR      R0,??DataTable828  ;; _DE
   \   000005D4   ........           LDR      R1,??DataTable900  ;; _ID
   \   000005D8   002090E5           LDR      R2,[R0, #+0]
   \   000005DC   001091E5           LDR      R1,[R1, #+0]
   \   000005E0   FF2002E2           AND      R2,R2,#0xFF
   \   000005E4   4114A0E1           ASR      R1,R1,#+8
   \   000005E8   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000005EC   001080E5           STR      R1,[R0, #+0]
   \   000005F0   790000EA           B        ??execute_id_34
   3749          		case 85: /* LD D,IDL */
   3750          		{ xD( IDL() ); return ( 8 ); }
   \                     ??execute_id_43:
   \   000005F4   ........           LDR      R0,??DataTable828  ;; _DE
   \   000005F8   ........           LDR      R1,??DataTable900  ;; _ID
   \   000005FC   002090E5           LDR      R2,[R0, #+0]
   \   00000600   001091E5           LDR      R1,[R1, #+0]
   \   00000604   FF2002E2           AND      R2,R2,#0xFF
   \   00000608   FF1001E2           AND      R1,R1,#0xFF
   \   0000060C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000610   001080E5           STR      R1,[R0, #+0]
   \   00000614   700000EA           B        ??execute_id_34
   3751          		case 86: /* LD D,(ID+d) */
   3752          		{ xD( peekb( ID_d() ) ); return ( 19 ); }
   \                     ??execute_id_44:
   \   00000618   ........           LDR      R0,??DataTable771  ;; _PC
   \   0000061C   0230A0E1           MOV      R3,R2
   \   00000620   011083E2           ADD      R1,R3,#+1
   \   00000624   001080E5           STR      R1,[R0, #+0]
   \   00000628   ........           LDR      R1,??DataTable780  ;; mem
   \   0000062C   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000630   002091E5           LDR      R2,[R1, #+0]
   \   00000634   000090E5           LDR      R0,[R0, #+0]
   \   00000638   D21093E1           LDRSB    R1,[R3, +R2]
   \   0000063C   000081E0           ADD      R0,R1,R0
   \   00000640   0008A0E1           LSL      R0,R0,#+16
   \   00000644   2018A0E1           LSR      R1,R0,#+16
   \   00000648   ........           LDR      R0,??DataTable828  ;; _DE
   \   0000064C   0210D1E7           LDRB     R1,[R1, +R2]
   \   00000650   002090E5           LDR      R2,[R0, #+0]
   \   00000654   FF2002E2           AND      R2,R2,#0xFF
   \   00000658   011482E1           ORR      R1,R2,R1, LSL #+8
   \   0000065C   001080E5           STR      R1,[R0, #+0]
   \   00000660   D8FFFFEA           B        ??execute_id_32
   3753          
   3754          		case 92: /* LD E,IDH */
   3755          		{ xE( IDH() ); return ( 8 ); }
   \                     ??execute_id_45:
   \   00000664   ........           LDR      R0,??DataTable828  ;; _DE
   \   00000668   ........           LDR      R2,??DataTable900  ;; _ID
   \   0000066C   001090E5           LDR      R1,[R0, #+0]
   \   00000670   002092E5           LDR      R2,[R2, #+0]
   \   00000674   FF1C01E2           AND      R1,R1,#0xFF00
   \   00000678   421481E1           ORR      R1,R1,R2, ASR #+8
   \   0000067C   001080E5           STR      R1,[R0, #+0]
   \   00000680   550000EA           B        ??execute_id_34
   3756          		case 93: /* LD E,IDL */
   3757          		{ xE( IDL() ); return ( 8 ); }
   \                     ??execute_id_46:
   \   00000684   ........           LDR      R0,??DataTable828  ;; _DE
   \   00000688   ........           LDR      R2,??DataTable900  ;; _ID
   \   0000068C   001090E5           LDR      R1,[R0, #+0]
   \   00000690   002092E5           LDR      R2,[R2, #+0]
   \   00000694   FF1C01E2           AND      R1,R1,#0xFF00
   \   00000698   FF2002E2           AND      R2,R2,#0xFF
   \   0000069C   011082E1           ORR      R1,R2,R1
   \   000006A0   001080E5           STR      R1,[R0, #+0]
   \   000006A4   4C0000EA           B        ??execute_id_34
   3758          		case 94: /* LD E,(ID+d) */
   3759          		{ xE( peekb( ID_d() ) ); return ( 19 ); }
   \                     ??execute_id_47:
   \   000006A8   ........           LDR      R0,??DataTable771  ;; _PC
   \   000006AC   0230A0E1           MOV      R3,R2
   \   000006B0   011083E2           ADD      R1,R3,#+1
   \   000006B4   001080E5           STR      R1,[R0, #+0]
   \   000006B8   ........           LDR      R1,??DataTable780  ;; mem
   \   000006BC   ........           LDR      R0,??DataTable900  ;; _ID
   \   000006C0   002091E5           LDR      R2,[R1, #+0]
   \   000006C4   000090E5           LDR      R0,[R0, #+0]
   \   000006C8   D21093E1           LDRSB    R1,[R3, +R2]
   \   000006CC   000081E0           ADD      R0,R1,R0
   \   000006D0   0008A0E1           LSL      R0,R0,#+16
   \   000006D4   2018A0E1           LSR      R1,R0,#+16
   \   000006D8   ........           LDR      R0,??DataTable828  ;; _DE
   \   000006DC   0210D1E7           LDRB     R1,[R1, +R2]
   \   000006E0   003090E5           LDR      R3,[R0, #+0]
   \   000006E4   FF3C03E2           AND      R3,R3,#0xFF00
   \   000006E8   031081E1           ORR      R1,R1,R3
   \   000006EC   001080E5           STR      R1,[R0, #+0]
   \   000006F0   B4FFFFEA           B        ??execute_id_32
   3760          
   3761          		case 96: /* LD IDH,B */
   3762          		{ xIDH( B() ); return ( 8 ); }
   \                     ??execute_id_48:
   \   000006F4   ........           LDR      R4,??DataTable900  ;; _ID
   \   000006F8   ........           LDR      R0,??DataTable816  ;; _B
   \   000006FC   010000EA           B        ??execute_id_49
   3763          		case 97: /* LD IDH,C */
   3764          		{ xIDH( C() ); return ( 8 ); }
   \                     ??execute_id_50:
   \   00000700   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000704   ........           LDR      R0,??DataTable820  ;; _C
   \                     ??execute_id_49:
   \   00000708   000090E5           LDR      R0,[R0, #+0]
   \                     ??execute_id_51:
   \   0000070C   001094E5           LDR      R1,[R4, #+0]
   \   00000710   FF1001E2           AND      R1,R1,#0xFF
   \                     ??execute_id_20:
   \   00000714   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000718   000084E5           STR      R0,[R4, #+0]
   \   0000071C   0800A0E3           MOV      R0,#+8
   \   00000720   3080BDE8           POP      {R4,R5,PC}
   3765          		case 98: /* LD IDH,D */
   3766          		{ xIDH( D() ); return ( 8 ); }
   \                     ??execute_id_52:
   \   00000724   ........           LDR      R0,??DataTable828  ;; _DE
   \   00000728   ........           LDR      R4,??DataTable900  ;; _ID
   \   0000072C   000090E5           LDR      R0,[R0, #+0]
   \   00000730   4004A0E1           ASR      R0,R0,#+8
   \   00000734   F4FFFFEA           B        ??execute_id_51
   3767          		case 99: /* LD IDH,E */
   3768          		{ xIDH( E() ); return ( 8 ); }
   \                     ??execute_id_53:
   \   00000738   ........           LDR      R0,??DataTable828  ;; _DE
   \   0000073C   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000740   000090E5           LDR      R0,[R0, #+0]
   \   00000744   FF0000E2           AND      R0,R0,#0xFF
   \   00000748   EFFFFFEA           B        ??execute_id_51
   3769          		case 100: /* LD IDH,IDH */
   3770          		{ return ( 8 ); }
   3771          		case 101: /* LD IDH,IDL */
   3772          		{ xIDH( IDL() ); return ( 8 ); }
   \                     ??execute_id_54:
   \   0000074C   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000750   005094E5           LDR      R5,[R4, #+0]
   \   00000754   FF0005E2           AND      R0,R5,#0xFF
   \   00000758   000480E1           ORR      R0,R0,R0, LSL #+8
   \   0000075C   1D0000EA           B        ??execute_id_22
   3773          		case 102: /* LD H,(ID+d) */
   3774          		{ xH( peekb( ID_d() ) ); return ( 19 ); }
   \                     ??execute_id_55:
   \   00000760   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000764   0230A0E1           MOV      R3,R2
   \   00000768   011083E2           ADD      R1,R3,#+1
   \   0000076C   001080E5           STR      R1,[R0, #+0]
   \   00000770   ........           LDR      R1,??DataTable780  ;; mem
   \   00000774   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000778   002091E5           LDR      R2,[R1, #+0]
   \   0000077C   000090E5           LDR      R0,[R0, #+0]
   \   00000780   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000784   000081E0           ADD      R0,R1,R0
   \   00000788   ........           LDR      R1,??DataTable836  ;; _HL
   \   0000078C   0008A0E1           LSL      R0,R0,#+16
   \   00000790   2008A0E1           LSR      R0,R0,#+16
   \   00000794   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000798   002091E5           LDR      R2,[R1, #+0]
   \   0000079C   FF2002E2           AND      R2,R2,#0xFF
   \   000007A0   000482E1           ORR      R0,R2,R0, LSL #+8
   \   000007A4   86FFFFEA           B        ??execute_id_41
   3775          		case 103: /* LD IDH,A */
   3776          		{ xIDH( A() ); return ( 8 ); }
   \                     ??execute_id_56:
   \   000007A8   ........           LDR      R4,??DataTable900  ;; _ID
   \   000007AC   ........           LDR      R0,??DataTable848  ;; _A
   \   000007B0   D4FFFFEA           B        ??execute_id_49
   3777          
   3778          		case 104: /* LD IDL,B */
   3779          		{ xIDL( B() ); return ( 8 ); }
   \                     ??execute_id_57:
   \   000007B4   ........           LDR      R4,??DataTable900  ;; _ID
   \   000007B8   ........           LDR      R1,??DataTable816  ;; _B
   \   000007BC   010000EA           B        ??execute_id_58
   3780          		case 105: /* LD IDL,C */
   3781          		{ xIDL( C() ); return ( 8 ); }
   \                     ??execute_id_59:
   \   000007C0   ........           LDR      R4,??DataTable900  ;; _ID
   \   000007C4   ........           LDR      R1,??DataTable820  ;; _C
   \                     ??execute_id_58:
   \   000007C8   000094E5           LDR      R0,[R4, #+0]
   \   000007CC   001091E5           LDR      R1,[R1, #+0]
   \   000007D0   FF0C00E2           AND      R0,R0,#0xFF00
   \                     ??execute_id_60:
   \   000007D4   000081E1           ORR      R0,R1,R0
   \                     ??execute_id_22:
   \   000007D8   000084E5           STR      R0,[R4, #+0]
   \                     ??execute_id_34:
   \   000007DC   0800A0E3           MOV      R0,#+8
   \   000007E0   3080BDE8           POP      {R4,R5,PC}
   3782          		case 106: /* LD IDL,D */
   3783          		{ xIDL( D() ); return ( 8 ); }
   \                     ??execute_id_61:
   \   000007E4   ........           LDR      R4,??DataTable900  ;; _ID
   \   000007E8   ........           LDR      R1,??DataTable828  ;; _DE
   \   000007EC   000094E5           LDR      R0,[R4, #+0]
   \   000007F0   001091E5           LDR      R1,[R1, #+0]
   \   000007F4   FF0C00E2           AND      R0,R0,#0xFF00
   \   000007F8   410480E1           ORR      R0,R0,R1, ASR #+8
   \   000007FC   F5FFFFEA           B        ??execute_id_22
   3784          		case 107: /* LD IDL,E */
   3785          		{ xIDL( E() ); return ( 8 ); }
   \                     ??execute_id_62:
   \   00000800   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000804   ........           LDR      R1,??DataTable828  ;; _DE
   \   00000808   000094E5           LDR      R0,[R4, #+0]
   \   0000080C   001091E5           LDR      R1,[R1, #+0]
   \   00000810   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000814   FF1001E2           AND      R1,R1,#0xFF
   \   00000818   EDFFFFEA           B        ??execute_id_60
   3786          		case 108: /* LD IDL,IDH */
   3787          		{ xIDL( IDH() ); return ( 8 ); }
   \                     ??execute_id_63:
   \   0000081C   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000820   005094E5           LDR      R5,[R4, #+0]
   \   00000824   FF0C05E2           AND      R0,R5,#0xFF00
   \   00000828   450480E1           ORR      R0,R0,R5, ASR #+8
   \   0000082C   E9FFFFEA           B        ??execute_id_22
   3788          		case 109: /* LD IDL,IDL */
   3789          		{ return ( 8 ); }
   3790          		case 110: /* LD L,(ID+d) */
   3791          		{ xL( peekb( ID_d() ) ); return ( 19 ); }
   \                     ??execute_id_64:
   \   00000830   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000834   0230A0E1           MOV      R3,R2
   \   00000838   011083E2           ADD      R1,R3,#+1
   \   0000083C   001080E5           STR      R1,[R0, #+0]
   \   00000840   ........           LDR      R1,??DataTable780  ;; mem
   \   00000844   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000848   002091E5           LDR      R2,[R1, #+0]
   \   0000084C   000090E5           LDR      R0,[R0, #+0]
   \   00000850   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000854   000081E0           ADD      R0,R1,R0
   \   00000858   ........           LDR      R1,??DataTable836  ;; _HL
   \   0000085C   0008A0E1           LSL      R0,R0,#+16
   \   00000860   003091E5           LDR      R3,[R1, #+0]
   \   00000864   2008A0E1           LSR      R0,R0,#+16
   \   00000868   0200D0E7           LDRB     R0,[R0, +R2]
   \   0000086C   FF3C03E2           AND      R3,R3,#0xFF00
   \   00000870   030080E1           ORR      R0,R0,R3
   \   00000874   52FFFFEA           B        ??execute_id_41
   3792          		case 111: /* LD IDL,A */
   3793          		{ xIDL( A() ); return ( 8 ); }
   \                     ??execute_id_65:
   \   00000878   ........           LDR      R4,??DataTable900  ;; _ID
   \   0000087C   ........           LDR      R1,??DataTable848  ;; _A
   \   00000880   D0FFFFEA           B        ??execute_id_58
   3794          
   3795          		case 112: /* LD (ID+d),B */
   3796          		{ pokeb( ID_d(), B() ); return ( 19 ); }
   \                     ??execute_id_66:
   \   00000884   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000888   0230A0E1           MOV      R3,R2
   \   0000088C   011083E2           ADD      R1,R3,#+1
   \   00000890   001080E5           STR      R1,[R0, #+0]
   \   00000894   ........           LDR      R1,??DataTable780  ;; mem
   \   00000898   ........           LDR      R0,??DataTable900  ;; _ID
   \   0000089C   002091E5           LDR      R2,[R1, #+0]
   \   000008A0   000090E5           LDR      R0,[R0, #+0]
   \   000008A4   D21093E1           LDRSB    R1,[R3, +R2]
   \   000008A8   000081E0           ADD      R0,R1,R0
   \   000008AC   ........           LDR      R1,??DataTable816  ;; _B
   \   000008B0   0008A0E1           LSL      R0,R0,#+16
   \   000008B4   001091E5           LDR      R1,[R1, #+0]
   \   000008B8   2008A0E1           LSR      R0,R0,#+16
   \   000008BC   0210C0E7           STRB     R1,[R0, +R2]
   \   000008C0   40FFFFEA           B        ??execute_id_32
   3797          		case 113: /* LD (ID+d),C */
   3798          		{ pokeb( ID_d(), C() ); return ( 19 ); }
   \                     ??execute_id_67:
   \   000008C4   ........           LDR      R0,??DataTable771  ;; _PC
   \   000008C8   0230A0E1           MOV      R3,R2
   \   000008CC   011083E2           ADD      R1,R3,#+1
   \   000008D0   001080E5           STR      R1,[R0, #+0]
   \   000008D4   ........           LDR      R1,??DataTable780  ;; mem
   \   000008D8   ........           LDR      R0,??DataTable900  ;; _ID
   \   000008DC   002091E5           LDR      R2,[R1, #+0]
   \   000008E0   000090E5           LDR      R0,[R0, #+0]
   \   000008E4   D21093E1           LDRSB    R1,[R3, +R2]
   \   000008E8   000081E0           ADD      R0,R1,R0
   \   000008EC   ........           LDR      R1,??DataTable820  ;; _C
   \   000008F0   0008A0E1           LSL      R0,R0,#+16
   \   000008F4   001091E5           LDR      R1,[R1, #+0]
   \   000008F8   2008A0E1           LSR      R0,R0,#+16
   \   000008FC   0210C0E7           STRB     R1,[R0, +R2]
   \   00000900   30FFFFEA           B        ??execute_id_32
   3799          		case 114: /* LD (ID+d),D */
   3800          		{ pokeb( ID_d(), D() ); return ( 19 ); }
   \                     ??execute_id_68:
   \   00000904   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000908   0230A0E1           MOV      R3,R2
   \   0000090C   011083E2           ADD      R1,R3,#+1
   \   00000910   001080E5           STR      R1,[R0, #+0]
   \   00000914   ........           LDR      R1,??DataTable780  ;; mem
   \   00000918   ........           LDR      R0,??DataTable900  ;; _ID
   \   0000091C   002091E5           LDR      R2,[R1, #+0]
   \   00000920   000090E5           LDR      R0,[R0, #+0]
   \   00000924   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000928   000081E0           ADD      R0,R1,R0
   \   0000092C   ........           LDR      R1,??DataTable828  ;; _DE
   \   00000930   1A0000EA           B        ??execute_id_69
   3801          		case 115: /* LD (ID+d),E */
   3802          		{ pokeb( ID_d(), E() ); return ( 19 ); }
   \                     ??execute_id_70:
   \   00000934   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000938   0230A0E1           MOV      R3,R2
   \   0000093C   011083E2           ADD      R1,R3,#+1
   \   00000940   001080E5           STR      R1,[R0, #+0]
   \   00000944   ........           LDR      R1,??DataTable780  ;; mem
   \   00000948   ........           LDR      R0,??DataTable900  ;; _ID
   \   0000094C   002091E5           LDR      R2,[R1, #+0]
   \   00000950   000090E5           LDR      R0,[R0, #+0]
   \   00000954   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000958   000081E0           ADD      R0,R1,R0
   \   0000095C   ........           LDR      R1,??DataTable828  ;; _DE
   \   00000960   0008A0E1           LSL      R0,R0,#+16
   \   00000964   001091E5           LDR      R1,[R1, #+0]
   \   00000968   2008A0E1           LSR      R0,R0,#+16
   \   0000096C   0210C0E7           STRB     R1,[R0, +R2]
   \   00000970   14FFFFEA           B        ??execute_id_32
   3803          		case 116: /* LD (ID+d),H */
   3804          		{ pokeb( ID_d(), H() ); return ( 19 ); }
   \                     ??execute_id_71:
   \   00000974   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000978   0230A0E1           MOV      R3,R2
   \   0000097C   011083E2           ADD      R1,R3,#+1
   \   00000980   001080E5           STR      R1,[R0, #+0]
   \   00000984   ........           LDR      R1,??DataTable780  ;; mem
   \   00000988   ........           LDR      R0,??DataTable900  ;; _ID
   \   0000098C   002091E5           LDR      R2,[R1, #+0]
   \   00000990   000090E5           LDR      R0,[R0, #+0]
   \   00000994   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000998   000081E0           ADD      R0,R1,R0
   \   0000099C   ........           LDR      R1,??DataTable836  ;; _HL
   \                     ??execute_id_69:
   \   000009A0   0008A0E1           LSL      R0,R0,#+16
   \   000009A4   2008A0E1           LSR      R0,R0,#+16
   \   000009A8   001091E5           LDR      R1,[R1, #+0]
   \   000009AC   4114A0E1           ASR      R1,R1,#+8
   \   000009B0   0210C0E7           STRB     R1,[R0, +R2]
   \   000009B4   1300A0E3           MOV      R0,#+19
   \   000009B8   3080BDE8           POP      {R4,R5,PC}
   3805          		case 117: /* LD (ID+d),L */
   3806          		{ pokeb( ID_d(), L() ); return ( 19 ); }
   \                     ??execute_id_72:
   \   000009BC   ........           LDR      R0,??DataTable771  ;; _PC
   \   000009C0   0230A0E1           MOV      R3,R2
   \   000009C4   011083E2           ADD      R1,R3,#+1
   \   000009C8   001080E5           STR      R1,[R0, #+0]
   \   000009CC   ........           LDR      R1,??DataTable780  ;; mem
   \   000009D0   ........           LDR      R0,??DataTable900  ;; _ID
   \   000009D4   002091E5           LDR      R2,[R1, #+0]
   \   000009D8   000090E5           LDR      R0,[R0, #+0]
   \   000009DC   D21093E1           LDRSB    R1,[R3, +R2]
   \   000009E0   000081E0           ADD      R0,R1,R0
   \   000009E4   ........           LDR      R1,??DataTable836  ;; _HL
   \   000009E8   0008A0E1           LSL      R0,R0,#+16
   \   000009EC   001091E5           LDR      R1,[R1, #+0]
   \   000009F0   2008A0E1           LSR      R0,R0,#+16
   \   000009F4   0210C0E7           STRB     R1,[R0, +R2]
   \   000009F8   F2FEFFEA           B        ??execute_id_32
   3807          		case 119: /* LD (ID+d),A */
   3808          		{ pokeb( ID_d(), A() ); return ( 19 ); }
   \                     ??execute_id_73:
   \   000009FC   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000A00   0230A0E1           MOV      R3,R2
   \   00000A04   011083E2           ADD      R1,R3,#+1
   \   00000A08   001080E5           STR      R1,[R0, #+0]
   \   00000A0C   ........           LDR      R1,??DataTable780  ;; mem
   \   00000A10   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000A14   002091E5           LDR      R2,[R1, #+0]
   \   00000A18   000090E5           LDR      R0,[R0, #+0]
   \   00000A1C   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000A20   000081E0           ADD      R0,R1,R0
   \   00000A24   ........           LDR      R1,??DataTable848  ;; _A
   \   00000A28   0008A0E1           LSL      R0,R0,#+16
   \   00000A2C   001091E5           LDR      R1,[R1, #+0]
   \   00000A30   2008A0E1           LSR      R0,R0,#+16
   \   00000A34   0210C0E7           STRB     R1,[R0, +R2]
   \   00000A38   E2FEFFEA           B        ??execute_id_32
   3809          
   3810          		case 124: /* LD A,IDH */
   3811          		{ xA( IDH() ); return ( 8 ); }
   \                     ??execute_id_74:
   \   00000A3C   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000A40   ........           LDR      R0,??DataTable848  ;; _A
   \   00000A44   001091E5           LDR      R1,[R1, #+0]
   \   00000A48   4114A0E1           ASR      R1,R1,#+8
   \   00000A4C   001080E5           STR      R1,[R0, #+0]
   \   00000A50   61FFFFEA           B        ??execute_id_34
   3812          		case 125: /* LD A,IDL */
   3813          		{ xA( IDL() ); return ( 8 ); }
   \                     ??execute_id_75:
   \   00000A54   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000A58   ........           LDR      R0,??DataTable848  ;; _A
   \   00000A5C   001091E5           LDR      R1,[R1, #+0]
   \   00000A60   FF1001E2           AND      R1,R1,#0xFF
   \   00000A64   001080E5           STR      R1,[R0, #+0]
   \   00000A68   5BFFFFEA           B        ??execute_id_34
   3814          		case 126: /* LD A,(ID+d) */
   3815          		{ xA( peekb( ID_d() ) ); return ( 19 ); }
   \                     ??execute_id_76:
   \   00000A6C   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000A70   0230A0E1           MOV      R3,R2
   \   00000A74   011083E2           ADD      R1,R3,#+1
   \   00000A78   001080E5           STR      R1,[R0, #+0]
   \   00000A7C   ........           LDR      R1,??DataTable780  ;; mem
   \   00000A80   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000A84   002091E5           LDR      R2,[R1, #+0]
   \   00000A88   000090E5           LDR      R0,[R0, #+0]
   \   00000A8C   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000A90   000081E0           ADD      R0,R1,R0
   \   00000A94   ........           LDR      R1,??DataTable848  ;; _A
   \   00000A98   C6FEFFEA           B        ??execute_id_37
   3816          
   3817          		case 132: /* ADD A,IDH */
   3818          		{ add_a(IDH()); return ( 8 ); }
   \                     ??execute_id_77:
   \   00000A9C   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000AA0   000090E5           LDR      R0,[R0, #+0]
   \   00000AA4   4004A0E1           ASR      R0,R0,#+8
   \   00000AA8   ........           BL       add_a
   \   00000AAC   4AFFFFEA           B        ??execute_id_34
   3819          		case 133: /* ADD A,IDL */
   3820          		{ add_a(IDL()); return ( 8 ); }
   \                     ??execute_id_78:
   \   00000AB0   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000AB4   000090E5           LDR      R0,[R0, #+0]
   \   00000AB8   FF0000E2           AND      R0,R0,#0xFF
   \   00000ABC   ........           BL       add_a
   \   00000AC0   45FFFFEA           B        ??execute_id_34
   3821          		case 134: /* ADD A,(ID+d) */
   3822          		{ add_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_79:
   \   00000AC4   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000AC8   0230A0E1           MOV      R3,R2
   \   00000ACC   011083E2           ADD      R1,R3,#+1
   \   00000AD0   001080E5           STR      R1,[R0, #+0]
   \   00000AD4   ........           LDR      R1,??DataTable780  ;; mem
   \   00000AD8   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000ADC   002091E5           LDR      R2,[R1, #+0]
   \   00000AE0   000090E5           LDR      R0,[R0, #+0]
   \   00000AE4   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000AE8   000081E0           ADD      R0,R1,R0
   \   00000AEC   0008A0E1           LSL      R0,R0,#+16
   \   00000AF0   2008A0E1           LSR      R0,R0,#+16
   \   00000AF4   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000AF8   ........           BL       add_a
   \   00000AFC   B1FEFFEA           B        ??execute_id_32
   3823          
   3824          		case 140: /* ADC A,IDH */
   3825          		{ adc_a(IDH()); return ( 8 ); }
   \                     ??execute_id_80:
   \   00000B00   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000B04   000090E5           LDR      R0,[R0, #+0]
   \   00000B08   4004A0E1           ASR      R0,R0,#+8
   \   00000B0C   ........           BL       adc_a
   \   00000B10   31FFFFEA           B        ??execute_id_34
   3826          		case 141: /* ADC A,IDL */
   3827          		{ adc_a(IDL()); return ( 8 ); }
   \                     ??execute_id_81:
   \   00000B14   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000B18   000090E5           LDR      R0,[R0, #+0]
   \   00000B1C   FF0000E2           AND      R0,R0,#0xFF
   \   00000B20   ........           BL       adc_a
   \   00000B24   2CFFFFEA           B        ??execute_id_34
   3828          		case 142: /* ADC A,(ID+d) */
   3829          		{ adc_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_82:
   \   00000B28   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000B2C   0230A0E1           MOV      R3,R2
   \   00000B30   011083E2           ADD      R1,R3,#+1
   \   00000B34   001080E5           STR      R1,[R0, #+0]
   \   00000B38   ........           LDR      R1,??DataTable780  ;; mem
   \   00000B3C   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000B40   002091E5           LDR      R2,[R1, #+0]
   \   00000B44   000090E5           LDR      R0,[R0, #+0]
   \   00000B48   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000B4C   000081E0           ADD      R0,R1,R0
   \   00000B50   0008A0E1           LSL      R0,R0,#+16
   \   00000B54   2008A0E1           LSR      R0,R0,#+16
   \   00000B58   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000B5C   ........           BL       adc_a
   \   00000B60   98FEFFEA           B        ??execute_id_32
   3830          
   3831          		case 148: /* SUB IDH */
   3832          		{ sub_a(IDH()); return ( 8 ); }
   \                     ??execute_id_83:
   \   00000B64   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000B68   000090E5           LDR      R0,[R0, #+0]
   \   00000B6C   4004A0E1           ASR      R0,R0,#+8
   \   00000B70   ........           BL       sub_a
   \   00000B74   18FFFFEA           B        ??execute_id_34
   3833          		case 149: /* SUB IDL */
   3834          		{ sub_a(IDL()); return ( 8 ); }
   \                     ??execute_id_84:
   \   00000B78   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000B7C   000090E5           LDR      R0,[R0, #+0]
   \   00000B80   FF0000E2           AND      R0,R0,#0xFF
   \   00000B84   ........           BL       sub_a
   \   00000B88   13FFFFEA           B        ??execute_id_34
   3835          		case 150: /* SUB (ID+d) */
   3836          		{ sub_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_85:
   \   00000B8C   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000B90   0230A0E1           MOV      R3,R2
   \   00000B94   011083E2           ADD      R1,R3,#+1
   \   00000B98   001080E5           STR      R1,[R0, #+0]
   \   00000B9C   ........           LDR      R1,??DataTable780  ;; mem
   \   00000BA0   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000BA4   002091E5           LDR      R2,[R1, #+0]
   \   00000BA8   000090E5           LDR      R0,[R0, #+0]
   \   00000BAC   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000BB0   000081E0           ADD      R0,R1,R0
   \   00000BB4   0008A0E1           LSL      R0,R0,#+16
   \   00000BB8   2008A0E1           LSR      R0,R0,#+16
   \   00000BBC   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000BC0   ........           BL       sub_a
   \   00000BC4   7FFEFFEA           B        ??execute_id_32
   3837          
   3838          		case 156: /* SBC A,IDH */
   3839          		{ sbc_a(IDH()); return ( 8 ); }
   \                     ??execute_id_86:
   \   00000BC8   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000BCC   000090E5           LDR      R0,[R0, #+0]
   \   00000BD0   4004A0E1           ASR      R0,R0,#+8
   \   00000BD4   ........           BL       sbc_a
   \   00000BD8   FFFEFFEA           B        ??execute_id_34
   3840          		case 157: /* SBC A,IDL */
   3841          		{ sbc_a(IDL()); return ( 8 ); }
   \                     ??execute_id_87:
   \   00000BDC   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000BE0   000090E5           LDR      R0,[R0, #+0]
   \   00000BE4   FF0000E2           AND      R0,R0,#0xFF
   \   00000BE8   ........           BL       sbc_a
   \   00000BEC   FAFEFFEA           B        ??execute_id_34
   3842          		case 158: /* SBC A,(ID+d) */
   3843          		{ sbc_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_88:
   \   00000BF0   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000BF4   0230A0E1           MOV      R3,R2
   \   00000BF8   011083E2           ADD      R1,R3,#+1
   \   00000BFC   001080E5           STR      R1,[R0, #+0]
   \   00000C00   ........           LDR      R1,??DataTable780  ;; mem
   \   00000C04   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000C08   002091E5           LDR      R2,[R1, #+0]
   \   00000C0C   000090E5           LDR      R0,[R0, #+0]
   \   00000C10   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000C14   000081E0           ADD      R0,R1,R0
   \   00000C18   0008A0E1           LSL      R0,R0,#+16
   \   00000C1C   2008A0E1           LSR      R0,R0,#+16
   \   00000C20   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000C24   ........           BL       sbc_a
   \   00000C28   66FEFFEA           B        ??execute_id_32
   3844          
   3845          		case 164: /* AND IDH */
   3846          		{ and_a(IDH()); return ( 8 ); }
   \                     ??execute_id_89:
   \   00000C2C   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000C30   000090E5           LDR      R0,[R0, #+0]
   \   00000C34   4004A0E1           ASR      R0,R0,#+8
   \   00000C38   ........           BL       and_a
   \   00000C3C   E6FEFFEA           B        ??execute_id_34
   3847          		case 165: /* AND IDL */
   3848          		{ and_a(IDL()); return ( 8 ); }
   \                     ??execute_id_90:
   \   00000C40   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000C44   000090E5           LDR      R0,[R0, #+0]
   \   00000C48   FF0000E2           AND      R0,R0,#0xFF
   \   00000C4C   ........           BL       and_a
   \   00000C50   E1FEFFEA           B        ??execute_id_34
   3849          		case 166: /* AND (ID+d) */
   3850          		{ and_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_91:
   \   00000C54   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000C58   0230A0E1           MOV      R3,R2
   \   00000C5C   011083E2           ADD      R1,R3,#+1
   \   00000C60   001080E5           STR      R1,[R0, #+0]
   \   00000C64   ........           LDR      R1,??DataTable780  ;; mem
   \   00000C68   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000C6C   002091E5           LDR      R2,[R1, #+0]
   \   00000C70   000090E5           LDR      R0,[R0, #+0]
   \   00000C74   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000C78   000081E0           ADD      R0,R1,R0
   \   00000C7C   0008A0E1           LSL      R0,R0,#+16
   \   00000C80   2008A0E1           LSR      R0,R0,#+16
   \   00000C84   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000C88   ........           BL       and_a
   \   00000C8C   4DFEFFEA           B        ??execute_id_32
   3851          
   3852          		case 172: /* XOR IDH */
   3853          		{ xor_a(IDH()); return ( 8 ); }
   \                     ??execute_id_92:
   \   00000C90   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000C94   000090E5           LDR      R0,[R0, #+0]
   \   00000C98   4004A0E1           ASR      R0,R0,#+8
   \   00000C9C   ........           BL       xor_a
   \   00000CA0   CDFEFFEA           B        ??execute_id_34
   3854          		case 173: /* XOR IDL */
   3855          		{ xor_a(IDL()); return ( 8 ); }
   \                     ??execute_id_93:
   \   00000CA4   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000CA8   000090E5           LDR      R0,[R0, #+0]
   \   00000CAC   FF0000E2           AND      R0,R0,#0xFF
   \   00000CB0   ........           BL       xor_a
   \   00000CB4   C8FEFFEA           B        ??execute_id_34
   3856          		case 174: /* XOR (ID+d) */
   3857          		{ xor_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_94:
   \   00000CB8   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000CBC   0230A0E1           MOV      R3,R2
   \   00000CC0   011083E2           ADD      R1,R3,#+1
   \   00000CC4   001080E5           STR      R1,[R0, #+0]
   \   00000CC8   ........           LDR      R1,??DataTable780  ;; mem
   \   00000CCC   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000CD0   002091E5           LDR      R2,[R1, #+0]
   \   00000CD4   000090E5           LDR      R0,[R0, #+0]
   \   00000CD8   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000CDC   000081E0           ADD      R0,R1,R0
   \   00000CE0   0008A0E1           LSL      R0,R0,#+16
   \   00000CE4   2008A0E1           LSR      R0,R0,#+16
   \   00000CE8   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000CEC   ........           BL       xor_a
   \   00000CF0   34FEFFEA           B        ??execute_id_32
   3858          
   3859          		case 180: /* OR IDH */
   3860          		{ or_a(IDH()); return ( 8 ); }
   \                     ??execute_id_95:
   \   00000CF4   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000CF8   000090E5           LDR      R0,[R0, #+0]
   \   00000CFC   4004A0E1           ASR      R0,R0,#+8
   \   00000D00   ........           BL       or_a
   \   00000D04   B4FEFFEA           B        ??execute_id_34
   3861          		case 181: /* OR IDL */
   3862          		{ or_a(IDL()); return ( 8 ); }
   \                     ??execute_id_96:
   \   00000D08   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000D0C   000090E5           LDR      R0,[R0, #+0]
   \   00000D10   FF0000E2           AND      R0,R0,#0xFF
   \   00000D14   ........           BL       or_a
   \   00000D18   AFFEFFEA           B        ??execute_id_34
   3863          		case 182: /* OR (ID+d) */
   3864          		{ or_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_97:
   \   00000D1C   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000D20   0230A0E1           MOV      R3,R2
   \   00000D24   011083E2           ADD      R1,R3,#+1
   \   00000D28   001080E5           STR      R1,[R0, #+0]
   \   00000D2C   ........           LDR      R1,??DataTable780  ;; mem
   \   00000D30   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000D34   002091E5           LDR      R2,[R1, #+0]
   \   00000D38   000090E5           LDR      R0,[R0, #+0]
   \   00000D3C   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000D40   000081E0           ADD      R0,R1,R0
   \   00000D44   0008A0E1           LSL      R0,R0,#+16
   \   00000D48   2008A0E1           LSR      R0,R0,#+16
   \   00000D4C   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000D50   ........           BL       or_a
   \   00000D54   1BFEFFEA           B        ??execute_id_32
   3865          
   3866          		case 188: /* CP IDH */
   3867          		{ cp_a(IDH()); return ( 8 ); }
   \                     ??execute_id_98:
   \   00000D58   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000D5C   000090E5           LDR      R0,[R0, #+0]
   \   00000D60   4004A0E1           ASR      R0,R0,#+8
   \   00000D64   ........           BL       cp_a
   \   00000D68   9BFEFFEA           B        ??execute_id_34
   3868          		case 189: /* CP IDL */
   3869          		{ cp_a(IDL()); return ( 8 ); }
   \                     ??execute_id_99:
   \   00000D6C   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000D70   000090E5           LDR      R0,[R0, #+0]
   \   00000D74   FF0000E2           AND      R0,R0,#0xFF
   \   00000D78   ........           BL       cp_a
   \   00000D7C   96FEFFEA           B        ??execute_id_34
   3870          		case 190: /* CP (ID+d) */
   3871          		{ cp_a(peekb( ID_d() )); return ( 19 ); }
   \                     ??execute_id_100:
   \   00000D80   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000D84   0230A0E1           MOV      R3,R2
   \   00000D88   011083E2           ADD      R1,R3,#+1
   \   00000D8C   001080E5           STR      R1,[R0, #+0]
   \   00000D90   ........           LDR      R1,??DataTable780  ;; mem
   \   00000D94   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000D98   002091E5           LDR      R2,[R1, #+0]
   \   00000D9C   000090E5           LDR      R0,[R0, #+0]
   \   00000DA0   D21093E1           LDRSB    R1,[R3, +R2]
   \   00000DA4   000081E0           ADD      R0,R1,R0
   \   00000DA8   0008A0E1           LSL      R0,R0,#+16
   \   00000DAC   2008A0E1           LSR      R0,R0,#+16
   \   00000DB0   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000DB4   ........           BL       cp_a
   \   00000DB8   02FEFFEA           B        ??execute_id_32
   3872          
   3873          		case 225: /* POP ID */
   3874          		{ xID( popw() ); return ( 14 ); }
   \                     ??execute_id_101:
   \   00000DBC   ........           _BLF     popw,??popw??rA
   \                     ??execute_id_11:
   \   00000DC0   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000DC4   000081E5           STR      R0,[R1, #+0]
   \   00000DC8   0E00A0E3           MOV      R0,#+14
   \   00000DCC   3080BDE8           POP      {R4,R5,PC}
   3875          
   3876          		case 233: /* JP (ID) */
   3877          		{ xPC( ID() ); return ( 8 ); }
   \                     ??execute_id_102:
   \   00000DD0   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000DD4   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000DD8   001091E5           LDR      R1,[R1, #+0]
   \   00000DDC   001080E5           STR      R1,[R0, #+0]
   \   00000DE0   7DFEFFEA           B        ??execute_id_34
   3878          
   3879          		case 249: /* LD SP,ID */
   3880          		{ xSP( ID() ); return ( 10 ); }
   \                     ??execute_id_103:
   \   00000DE4   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000DE8   ........           LDR      R0,??DataTable897  ;; _SP
   \   00000DEC   001091E5           LDR      R1,[R1, #+0]
   \   00000DF0   001080E5           STR      R1,[R0, #+0]
   \   00000DF4   0A00A0E3           MOV      R0,#+10
   \   00000DF8   3080BDE8           POP      {R4,R5,PC}
   3881          
   3882          		case 203: /* prefix CB */
   3883          		{
   3884          			// Obtain index address (offset byte goes first)
   3885          			int z = ID_d();
   \                     ??execute_id_104:
   \   00000DFC   ........           LDR      R1,??DataTable780  ;; mem
   \   00000E00   ........           LDR      R0,??DataTable771  ;; _PC
   \   00000E04   0240A0E1           MOV      R4,R2
   \   00000E08   002091E5           LDR      R2,[R1, #+0]
   \   00000E0C   ........           LDR      R1,??DataTable900  ;; _ID
   \   00000E10   013084E2           ADD      R3,R4,#+1
   \   00000E14   001091E5           LDR      R1,[R1, #+0]
   \   00000E18   003080E5           STR      R3,[R0, #+0]
   \   00000E1C   D24094E1           LDRSB    R4,[R4, +R2]
   \   00000E20   011084E0           ADD      R1,R4,R1
   3886          			// opcode comes after offset byte
   3887          			int op = nxtpcb();
   \   00000E24   014083E2           ADD      R4,R3,#+1
   \   00000E28   004080E5           STR      R4,[R0, #+0]
   \   00000E2C   0240D3E7           LDRB     R4,[R3, +R2]
   \   00000E30   0118A0E1           LSL      R1,R1,#+16
   \   00000E34   2118A0E1           LSR      R1,R1,#+16
   3888          			execute_id_cb( op, z );
   \   00000E38   0400A0E1           MOV      R0,R4
   \   00000E3C   ........           BL       execute_id_cb
   3889          			// BIT instructions take 20 T-States, the rests take 23 T-states
   3890          
   3891          			return ( (( op & 0xc0 ) == 0x40) ? 20 : 23 );
   \   00000E40   C00004E2           AND      R0,R4,#0xC0
   \   00000E44   400050E3           CMP      R0,#+64
   \   00000E48   7CFDFF1A           BNE      ??execute_id_28
   \                     ??execute_id_13:
   \   00000E4C   1400A0E3           MOV      R0,#+20
   \   00000E50   3080BDE8           POP      {R4,R5,PC}
   3892          		}
   3893          
   3894          		case 227: /* EX (SP),ID */
   3895          		{
   3896          			int t = ID();
   3897          			int sp = SP();
   \                     ??execute_id_105:
   \   00000E54   ........           LDR      R1,??DataTable897  ;; _SP
   \   00000E58   ........           LDR      R4,??DataTable900  ;; _ID
   \   00000E5C   003091E5           LDR      R3,[R1, #+0]
   \   00000E60   000094E5           LDR      R0,[R4, #+0]
   \   00000E64   011083E2           ADD      R1,R3,#+1
   \   00000E68   0118A0E1           LSL      R1,R1,#+16
   \   00000E6C   2158A0E1           LSR      R5,R1,#+16
   \   00000E70   ........           LDR      R1,??DataTable780  ;; mem
   \   00000E74   002091E5           LDR      R2,[R1, #+0]
   \   00000E78   023083E0           ADD      R3,R3,R2
   \   00000E7C   00C0D3E5           LDRB     R12,[R3, #+0]
   \   00000E80   0220D5E7           LDRB     R2,[R5, +R2]
   \   00000E84   02248CE1           ORR      R2,R12,R2, LSL #+8
   \   00000E88   002084E5           STR      R2,[R4, #+0]
   3898          			xID( peekw( sp ) );
   3899          			pokew( sp, t );
   \   00000E8C   0000C3E5           STRB     R0,[R3, #+0]
   \   00000E90   001091E5           LDR      R1,[R1, #+0]
   \   00000E94   4004A0E1           ASR      R0,R0,#+8
   \   00000E98   0100C5E7           STRB     R0,[R5, +R1]
   3900          			return ( 23 );
   \   00000E9C   1700A0E3           MOV      R0,#+23
   \   00000EA0   3080BDE8           POP      {R4,R5,PC}
   3901          		}
   3902          
   3903          		case 229:    /* PUSH ID */
   3904          		{ pushw( ID() ); return ( 15 ); }
   \                     ??execute_id_106:
   \   00000EA4   ........           LDR      R0,??DataTable900  ;; _ID
   \   00000EA8   000090E5           LDR      R0,[R0, #+0]
   \   00000EAC   ........           _BLF     pushw,??pushw??rA
   \   00000EB0   0F00A0E3           MOV      R0,#+15
   \   00000EB4   3080BDE8           POP      {R4,R5,PC}
   3905          
   3906          		} // switch end
   3907          
   3908          		return 0;
   \                     ??execute_id_1:
   \   00000EB8   0000A0E3           MOV      R0,#+0
   \   00000EBC   3080BDE8           POP      {R4,R5,PC}       ;; return
   3909          	}
   3910          
   3911          #pragma optimize=no_code_motion

   \                                 In segment CODE, align 4, keep-with-next
   3912          	private final void execute_id_cb(int op, int z) {
   \                     execute_id_cb:
   \   00000000   10402DE9           PUSH     {R4,LR}
   3913          
   3914          		switch ( op ) {
   \   00000004   FF0050E3           CMP      R0,#+255
   \   00000008   1080BD88           POPHI    {R4,PC}
   \   0000000C   022F8FE2           ADR      R2,??execute_id_cb_0
   \   00000010   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000014   B02092E1           LDRH     R2,[R2, R0]
   \   00000018   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??execute_id_cb_0:
   \   0000001C   7F0087008F00       DC16     +127,+135,+143,+149
   \              9500        
   \   00000024   9B00A200A900       DC16     +155,+162,+169,+175
   \              AF00        
   \   0000002C   B700BF00C700       DC16     +183,+191,+199,+211
   \              D300        
   \   00000034   DF00E500EC00       DC16     +223,+229,+236,+242
   \              F200        
   \   0000003C   FA0002010A01       DC16     +250,+258,+266,+272
   \              1001        
   \   00000044   16011D012401       DC16     +278,+285,+292,+298
   \              2A01        
   \   0000004C   32013A014201       DC16     +306,+314,+322,+328
   \              4801        
   \   00000054   4E0154015B01       DC16     +334,+340,+347,+353
   \              6101        
   \   0000005C   690171017901       DC16     +361,+369,+377,+383
   \              7F01        
   \   00000064   85018B019201       DC16     +389,+395,+402,+408
   \              9801        
   \   0000006C   A001A801B001       DC16     +416,+424,+432,+438
   \              B601        
   \   00000074   BC01C201C901       DC16     +444,+450,+457,+463
   \              CF01        
   \   0000007C   D701DF01E701       DC16     +471,+479,+487,+493
   \              ED01        
   \   00000084   F301FA010102       DC16     +499,+506,+513,+519
   \              0702        
   \   0000008C   0F0217021F02       DC16     +527,+535,+543,+549
   \              2502        
   \   00000094   2B0231023802       DC16     +555,+561,+568,+574
   \              3E02        
   \   0000009C   460246024602       DC16     +582,+582,+582,+582
   \              4602        
   \   000000A4   460246024602       DC16     +582,+582,+582,+582
   \              4602        
   \   000000AC   4B024B024B02       DC16     +587,+587,+587,+587
   \              4B02        
   \   000000B4   4B024B024B02       DC16     +587,+587,+587,+587
   \              4B02        
   \   000000BC   510251025102       DC16     +593,+593,+593,+593
   \              5102        
   \   000000C4   510251025102       DC16     +593,+593,+593,+593
   \              5102        
   \   000000CC   570257025702       DC16     +599,+599,+599,+599
   \              5702        
   \   000000D4   570257025702       DC16     +599,+599,+599,+599
   \              5702        
   \   000000DC   5C025C025C02       DC16     +604,+604,+604,+604
   \              5C02        
   \   000000E4   5C025C025C02       DC16     +604,+604,+604,+604
   \              5C02        
   \   000000EC   610261026102       DC16     +609,+609,+609,+609
   \              6102        
   \   000000F4   610261026102       DC16     +609,+609,+609,+609
   \              6102        
   \   000000FC   660266026602       DC16     +614,+614,+614,+614
   \              6602        
   \   00000104   660266026602       DC16     +614,+614,+614,+614
   \              6602        
   \   0000010C   6B026B026B02       DC16     +619,+619,+619,+619
   \              6B02        
   \   00000114   6B026B026B02       DC16     +619,+619,+619,+619
   \              6B02        
   \   0000011C   700275027B02       DC16     +624,+629,+635,+641
   \              8102        
   \   00000124   88028F029602       DC16     +648,+655,+662,+668
   \              9C02        
   \   0000012C   A402AE02B802       DC16     +676,+686,+696,+702
   \              BE02        
   \   00000134   C502CC02D302       DC16     +709,+716,+723,+729
   \              D902        
   \   0000013C   E102E602EC02       DC16     +737,+742,+748,+754
   \              F202        
   \   00000144   F90200030703       DC16     +761,+768,+775,+781
   \              0D03        
   \   0000014C   15031A032003       DC16     +789,+794,+800,+806
   \              2603        
   \   00000154   2D0334033B03       DC16     +813,+820,+827,+833
   \              4103        
   \   0000015C   49034E035403       DC16     +841,+846,+852,+858
   \              5A03        
   \   00000164   610368036F03       DC16     +865,+872,+879,+885
   \              7503        
   \   0000016C   7D0382038803       DC16     +893,+898,+904,+910
   \              8E03        
   \   00000174   95039C03A303       DC16     +917,+924,+931,+937
   \              A903        
   \   0000017C   B103B603BC03       DC16     +945,+950,+956,+962
   \              C203        
   \   00000184   C903D003D703       DC16     +969,+976,+983,+989
   \              DD03        
   \   0000018C   E503EA03F003       DC16     +997,+1002,+1008,+1014
   \              F603        
   \   00000194   FD0304040B04       DC16     +1021,+1028,+1035,+1041
   \              1104        
   \   0000019C   19041F042504       DC16     +1049,+1055,+1061,+1067
   \              2B04        
   \   000001A4   320439044004       DC16     +1074,+1081,+1088,+1094
   \              4604        
   \   000001AC   4D0453045904       DC16     +1101,+1107,+1113,+1125
   \              6504        
   \   000001B4   6C0473047A04       DC16     +1132,+1139,+1146,+1152
   \              8004        
   \   000001BC   87048D049304       DC16     +1159,+1165,+1171,+1177
   \              9904        
   \   000001C4   A004A704AE04       DC16     +1184,+1191,+1198,+1204
   \              B404        
   \   000001CC   BB04C104C704       DC16     +1211,+1217,+1223,+1229
   \              CD04        
   \   000001D4   D404DB04E204       DC16     +1236,+1243,+1250,+1256
   \              E804        
   \   000001DC   EF04F504FB04       DC16     +1263,+1269,+1275,+1281
   \              0105        
   \   000001E4   08050F051605       DC16     +1288,+1295,+1302,+1308
   \              1C05        
   \   000001EC   230529052F05       DC16     +1315,+1321,+1327,+1333
   \              3505        
   \   000001F4   3C0543054A05       DC16     +1340,+1347,+1354,+1360
   \              5005        
   \   000001FC   57055D056305       DC16     +1367,+1373,+1379,+1385
   \              6905        
   \   00000204   700577057E05       DC16     +1392,+1399,+1406,+1412
   \              8405        
   \   0000020C   8B0591059705       DC16     +1419,+1425,+1431,+1437
   \              9D05        
   \   00000214   A405AB05B205       DC16     +1444,+1451,+1458,+1464
   \              B805        
   3915          
   3916          		case   0:	/* RLC B */
   3917          		{ xB( op = rlc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_1:
   \   0000021C   780F9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   004081E0           ADD      R4,R1,R0
   \   00000228   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000022C   ........           BL       rlc
   \   00000230   681F9FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   00000234   000081E5           STR      R0,[R1, #+0]
   \   00000238   550000EA           B        ??execute_id_cb_3
   3918          		case   1:	/* RLC C */
   3919          		{ xC( op = rlc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_4:
   \   0000023C   580F9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000240   000090E5           LDR      R0,[R0, #+0]
   \   00000244   004081E0           ADD      R4,R1,R0
   \   00000248   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000024C   ........           BL       rlc
   \   00000250   4C1F9FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   00000254   000081E5           STR      R0,[R1, #+0]
   \   00000258   4D0000EA           B        ??execute_id_cb_3
   3920          		case   2:	/* RLC D */
   3921          		{ xD( op = rlc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_5:
   \   0000025C   380F9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000260   000090E5           LDR      R0,[R0, #+0]
   \   00000264   004081E0           ADD      R4,R1,R0
   \   00000268   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000026C   ........           BL       rlc
   \   00000270   360000EA           B        ??execute_id_cb_6
   3922          		case   3:	/* RLC E */
   3923          		{ xE( op = rlc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_7:
   \   00000274   200F9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000278   000090E5           LDR      R0,[R0, #+0]
   \   0000027C   004081E0           ADD      R4,R1,R0
   \   00000280   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000284   ........           BL       rlc
   \   00000288   3C0000EA           B        ??execute_id_cb_8
   3924          		case   4:	/* RLC H */
   3925          		{ xH( op = rlc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_9:
   \   0000028C   080F9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000290   000090E5           LDR      R0,[R0, #+0]
   \   00000294   004081E0           ADD      R4,R1,R0
   \   00000298   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000029C   ........           BL       rlc
   \                     ??execute_id_cb_10:
   \   000002A0   001F9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   000002A4   2A0000EA           B        ??execute_id_cb_11
   3926          		case   5:	/* RLC L */
   3927          		{ xL( op = rlc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_12:
   \   000002A8   EC0E9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000002AC   000090E5           LDR      R0,[R0, #+0]
   \   000002B0   004081E0           ADD      R4,R1,R0
   \   000002B4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000002B8   ........           BL       rlc
   \   000002BC   E41E9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   000002C0   2F0000EA           B        ??execute_id_cb_13
   3928          		case   6:	/* RLC (HL) */
   3929          		{ pokeb( z, rlc( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_14:
   \   000002C4   D00E9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   004081E0           ADD      R4,R1,R0
   \   000002D0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000002D4   ........           BL       rlc
   \   000002D8   2D0000EA           B        ??execute_id_cb_3
   3930          		case   7:	/* RLC A */
   3931          		{ xA( op = rlc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_15:
   \   000002DC   B80E9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000002E0   000090E5           LDR      R0,[R0, #+0]
   \   000002E4   004081E0           ADD      R4,R1,R0
   \   000002E8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000002EC   ........           BL       rlc
   \   000002F0   B41E9FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   000002F4   000081E5           STR      R0,[R1, #+0]
   \   000002F8   250000EA           B        ??execute_id_cb_3
   3932          
   3933          		case   8:	/* RRC B */
   3934          		{ xB( op = rrc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_16:
   \   000002FC   980E9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000300   000090E5           LDR      R0,[R0, #+0]
   \   00000304   004081E0           ADD      R4,R1,R0
   \   00000308   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000030C   ........           BL       rrc
   \   00000310   881E9FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   00000314   000081E5           STR      R0,[R1, #+0]
   \   00000318   1D0000EA           B        ??execute_id_cb_3
   3935          		case   9:	/* RRC C */
   3936          		{ xC( op = rrc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_17:
   \   0000031C   780E9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000320   000090E5           LDR      R0,[R0, #+0]
   \   00000324   004081E0           ADD      R4,R1,R0
   \   00000328   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000032C   ........           BL       rrc
   \   00000330   6C1E9FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   00000334   000081E5           STR      R0,[R1, #+0]
   \   00000338   150000EA           B        ??execute_id_cb_3
   3937          		case  10:	/* RRC D */
   3938          		{ xD( op = rrc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_18:
   \   0000033C   580E9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000340   000090E5           LDR      R0,[R0, #+0]
   \   00000344   004081E0           ADD      R4,R1,R0
   \   00000348   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000034C   ........           BL       rrc
   \                     ??execute_id_cb_6:
   \   00000350   581E9FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \                     ??execute_id_cb_11:
   \   00000354   002091E5           LDR      R2,[R1, #+0]
   \   00000358   FF2002E2           AND      R2,R2,#0xFF
   \   0000035C   002482E1           ORR      R2,R2,R0, LSL #+8
   \   00000360   002081E5           STR      R2,[R1, #+0]
   \   00000364   0000C4E5           STRB     R0,[R4, #+0]
   \   00000368   1080BDE8           POP      {R4,PC}
   3939          		case  11:	/* RRC E */
   3940          		{ xE( op = rrc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_19:
   \   0000036C   280E9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000370   000090E5           LDR      R0,[R0, #+0]
   \   00000374   004081E0           ADD      R4,R1,R0
   \   00000378   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000037C   ........           BL       rrc
   \                     ??execute_id_cb_8:
   \   00000380   281E9FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \                     ??execute_id_cb_13:
   \   00000384   002091E5           LDR      R2,[R1, #+0]
   \   00000388   FF2C02E2           AND      R2,R2,#0xFF00
   \   0000038C   022080E1           ORR      R2,R0,R2
   \   00000390   002081E5           STR      R2,[R1, #+0]
   \                     ??execute_id_cb_3:
   \   00000394   0000C4E5           STRB     R0,[R4, #+0]
   \   00000398   1080BDE8           POP      {R4,PC}
   3941          		case  12:	/* RRC H */
   3942          		{ xH( op = rrc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_20:
   \   0000039C   F80D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000003A0   000090E5           LDR      R0,[R0, #+0]
   \   000003A4   004081E0           ADD      R4,R1,R0
   \   000003A8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000003AC   ........           BL       rrc
   \   000003B0   BAFFFFEA           B        ??execute_id_cb_10
   3943          		case  13:	/* RRC L */
   3944          		{ xL( op = rrc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_21:
   \   000003B4   E00D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000003B8   000090E5           LDR      R0,[R0, #+0]
   \   000003BC   004081E0           ADD      R4,R1,R0
   \   000003C0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000003C4   ........           BL       rrc
   \   000003C8   D81D9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   000003CC   ECFFFFEA           B        ??execute_id_cb_13
   3945          		case  14:	/* RRC (HL) */
   3946          		{ pokeb( z, rrc( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_22:
   \   000003D0   C40D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000003D4   000090E5           LDR      R0,[R0, #+0]
   \   000003D8   004081E0           ADD      R4,R1,R0
   \   000003DC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000003E0   ........           BL       rrc
   \   000003E4   EAFFFFEA           B        ??execute_id_cb_3
   3947          		case  15:	/* RRC A */
   3948          		{ xA( op = rrc( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_23:
   \   000003E8   AC0D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000003EC   000090E5           LDR      R0,[R0, #+0]
   \   000003F0   004081E0           ADD      R4,R1,R0
   \   000003F4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000003F8   ........           BL       rrc
   \   000003FC   A81D9FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   00000400   000081E5           STR      R0,[R1, #+0]
   \   00000404   E2FFFFEA           B        ??execute_id_cb_3
   3949          
   3950          		case  16:	/* RL B */
   3951          		{ xB( op = rl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_24:
   \   00000408   8C0D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000040C   000090E5           LDR      R0,[R0, #+0]
   \   00000410   004081E0           ADD      R4,R1,R0
   \   00000414   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000418   ........           BL       rl
   \   0000041C   7C1D9FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   00000420   000081E5           STR      R0,[R1, #+0]
   \   00000424   DAFFFFEA           B        ??execute_id_cb_3
   3952          		case  17:	/* RL C */
   3953          		{ xC( op = rl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_25:
   \   00000428   6C0D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000042C   000090E5           LDR      R0,[R0, #+0]
   \   00000430   004081E0           ADD      R4,R1,R0
   \   00000434   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000438   ........           BL       rl
   \   0000043C   601D9FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   00000440   000081E5           STR      R0,[R1, #+0]
   \   00000444   D2FFFFEA           B        ??execute_id_cb_3
   3954          		case  18:	/* RL D */
   3955          		{ xD( op = rl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_26:
   \   00000448   4C0D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000044C   000090E5           LDR      R0,[R0, #+0]
   \   00000450   004081E0           ADD      R4,R1,R0
   \   00000454   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000458   ........           BL       rl
   \   0000045C   BBFFFFEA           B        ??execute_id_cb_6
   3956          		case  19:	/* RL E */
   3957          		{ xE( op = rl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_27:
   \   00000460   340D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000464   000090E5           LDR      R0,[R0, #+0]
   \   00000468   004081E0           ADD      R4,R1,R0
   \   0000046C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000470   ........           BL       rl
   \   00000474   C1FFFFEA           B        ??execute_id_cb_8
   3958          		case  20:	/* RL H */
   3959          		{ xH( op = rl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_28:
   \   00000478   1C0D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000047C   000090E5           LDR      R0,[R0, #+0]
   \   00000480   004081E0           ADD      R4,R1,R0
   \   00000484   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000488   ........           BL       rl
   \                     ??execute_id_cb_29:
   \   0000048C   141D9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000490   AFFFFFEA           B        ??execute_id_cb_11
   3960          		case  21:	/* RL L */
   3961          		{ xL( op = rl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_30:
   \   00000494   000D9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000498   000090E5           LDR      R0,[R0, #+0]
   \   0000049C   004081E0           ADD      R4,R1,R0
   \   000004A0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000004A4   ........           BL       rl
   \   000004A8   F81C9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   000004AC   B4FFFFEA           B        ??execute_id_cb_13
   3962          		case  22:	/* RL (HL) */
   3963          		{ pokeb( z, rl( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_31:
   \   000004B0   E40C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000004B4   000090E5           LDR      R0,[R0, #+0]
   \   000004B8   004081E0           ADD      R4,R1,R0
   \   000004BC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000004C0   ........           BL       rl
   \   000004C4   B2FFFFEA           B        ??execute_id_cb_3
   3964          		case  23:	/* RL A */
   3965          		{ xA( op = rl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_32:
   \   000004C8   CC0C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000004CC   000090E5           LDR      R0,[R0, #+0]
   \   000004D0   004081E0           ADD      R4,R1,R0
   \   000004D4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000004D8   ........           BL       rl
   \   000004DC   C81C9FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   000004E0   000081E5           STR      R0,[R1, #+0]
   \   000004E4   AAFFFFEA           B        ??execute_id_cb_3
   3966          
   3967          		case  24:	/* RR B */
   3968          		{ xB( op = rr( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_33:
   \   000004E8   AC0C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000004EC   000090E5           LDR      R0,[R0, #+0]
   \   000004F0   004081E0           ADD      R4,R1,R0
   \   000004F4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000004F8   ........           BL       rr
   \   000004FC   9C1C9FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   00000500   000081E5           STR      R0,[R1, #+0]
   \   00000504   A2FFFFEA           B        ??execute_id_cb_3
   3969          		case  25:	/* RR C */
   3970          		{ xC( op = rr( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_34:
   \   00000508   8C0C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000050C   000090E5           LDR      R0,[R0, #+0]
   \   00000510   004081E0           ADD      R4,R1,R0
   \   00000514   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000518   ........           BL       rr
   \   0000051C   801C9FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   00000520   000081E5           STR      R0,[R1, #+0]
   \   00000524   9AFFFFEA           B        ??execute_id_cb_3
   3971          		case  26:	/* RR D */
   3972          		{ xD( op = rr( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_35:
   \   00000528   6C0C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000052C   000090E5           LDR      R0,[R0, #+0]
   \   00000530   004081E0           ADD      R4,R1,R0
   \   00000534   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000538   ........           BL       rr
   \   0000053C   83FFFFEA           B        ??execute_id_cb_6
   3973          		case  27:	/* RR E */
   3974          		{ xE( op = rr( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_36:
   \   00000540   540C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000544   000090E5           LDR      R0,[R0, #+0]
   \   00000548   004081E0           ADD      R4,R1,R0
   \   0000054C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000550   ........           BL       rr
   \   00000554   89FFFFEA           B        ??execute_id_cb_8
   3975          		case  28:	/* RR H */
   3976          		{ xH( op = rr( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_37:
   \   00000558   3C0C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000055C   000090E5           LDR      R0,[R0, #+0]
   \   00000560   004081E0           ADD      R4,R1,R0
   \   00000564   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000568   ........           BL       rr
   \   0000056C   4BFFFFEA           B        ??execute_id_cb_10
   3977          		case  29:	/* RR L */
   3978          		{ xL( op = rr( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_38:
   \   00000570   240C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000574   000090E5           LDR      R0,[R0, #+0]
   \   00000578   004081E0           ADD      R4,R1,R0
   \   0000057C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000580   ........           BL       rr
   \   00000584   1C1C9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000588   7DFFFFEA           B        ??execute_id_cb_13
   3979          		case  30:	/* RR (HL) */
   3980          		{ pokeb( z, rr( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_39:
   \   0000058C   080C9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000590   000090E5           LDR      R0,[R0, #+0]
   \   00000594   004081E0           ADD      R4,R1,R0
   \   00000598   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000059C   ........           BL       rr
   \   000005A0   7BFFFFEA           B        ??execute_id_cb_3
   3981          		case  31:	/* RR A */
   3982          		{ xA( op = rr( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_40:
   \   000005A4   F00B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000005A8   000090E5           LDR      R0,[R0, #+0]
   \   000005AC   004081E0           ADD      R4,R1,R0
   \   000005B0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000005B4   ........           BL       rr
   \   000005B8   EC1B9FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   000005BC   000081E5           STR      R0,[R1, #+0]
   \   000005C0   73FFFFEA           B        ??execute_id_cb_3
   3983          
   3984          		case  32:	/* SLA B */
   3985          		{ xB( op = sla( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_41:
   \   000005C4   D00B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000005C8   000090E5           LDR      R0,[R0, #+0]
   \   000005CC   004081E0           ADD      R4,R1,R0
   \   000005D0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000005D4   ........           BL       sla
   \   000005D8   C01B9FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   000005DC   000081E5           STR      R0,[R1, #+0]
   \   000005E0   6BFFFFEA           B        ??execute_id_cb_3
   3986          		case  33:	/* SLA C */
   3987          		{ xC( op = sla( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_42:
   \   000005E4   B00B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000005E8   000090E5           LDR      R0,[R0, #+0]
   \   000005EC   004081E0           ADD      R4,R1,R0
   \   000005F0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000005F4   ........           BL       sla
   \   000005F8   A41B9FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   000005FC   000081E5           STR      R0,[R1, #+0]
   \   00000600   63FFFFEA           B        ??execute_id_cb_3
   3988          		case  34:	/* SLA D */
   3989          		{ xD( op = sla( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_43:
   \   00000604   900B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000608   000090E5           LDR      R0,[R0, #+0]
   \   0000060C   004081E0           ADD      R4,R1,R0
   \   00000610   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000614   ........           BL       sla
   \   00000618   4CFFFFEA           B        ??execute_id_cb_6
   3990          		case  35:	/* SLA E */
   3991          		{ xE( op = sla( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_44:
   \   0000061C   780B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000620   000090E5           LDR      R0,[R0, #+0]
   \   00000624   004081E0           ADD      R4,R1,R0
   \   00000628   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000062C   ........           BL       sla
   \   00000630   52FFFFEA           B        ??execute_id_cb_8
   3992          		case  36:	/* SLA H */
   3993          		{ xH( op = sla( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_45:
   \   00000634   600B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000638   000090E5           LDR      R0,[R0, #+0]
   \   0000063C   004081E0           ADD      R4,R1,R0
   \   00000640   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000644   ........           BL       sla
   \   00000648   8FFFFFEA           B        ??execute_id_cb_29
   3994          		case  37:	/* SLA L */
   3995          		{ xL( op = sla( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_46:
   \   0000064C   480B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000650   000090E5           LDR      R0,[R0, #+0]
   \   00000654   004081E0           ADD      R4,R1,R0
   \   00000658   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000065C   ........           BL       sla
   \   00000660   401B9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000664   46FFFFEA           B        ??execute_id_cb_13
   3996          		case  38:	/* SLA (HL) */
   3997          		{ pokeb( z, sla( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_47:
   \   00000668   2C0B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000066C   000090E5           LDR      R0,[R0, #+0]
   \   00000670   004081E0           ADD      R4,R1,R0
   \   00000674   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000678   ........           BL       sla
   \   0000067C   44FFFFEA           B        ??execute_id_cb_3
   3998          		case  39:	/* SLA A */
   3999          		{ xA( op = sla( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_48:
   \   00000680   140B9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000684   000090E5           LDR      R0,[R0, #+0]
   \   00000688   004081E0           ADD      R4,R1,R0
   \   0000068C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000690   ........           BL       sla
   \   00000694   101B9FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   00000698   000081E5           STR      R0,[R1, #+0]
   \   0000069C   3CFFFFEA           B        ??execute_id_cb_3
   4000          
   4001          		case  40:	/* SRA B */
   4002          		{ xB( op = sra( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_49:
   \   000006A0   F40A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000006A4   000090E5           LDR      R0,[R0, #+0]
   \   000006A8   004081E0           ADD      R4,R1,R0
   \   000006AC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000006B0   ........           BL       sra
   \   000006B4   E41A9FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   000006B8   000081E5           STR      R0,[R1, #+0]
   \   000006BC   34FFFFEA           B        ??execute_id_cb_3
   4003          		case  41:	/* SRA C */
   4004          		{ xC( op = sra( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_50:
   \   000006C0   D40A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000006C4   000090E5           LDR      R0,[R0, #+0]
   \   000006C8   004081E0           ADD      R4,R1,R0
   \   000006CC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000006D0   ........           BL       sra
   \   000006D4   C81A9FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   000006D8   000081E5           STR      R0,[R1, #+0]
   \   000006DC   2CFFFFEA           B        ??execute_id_cb_3
   4005          		case  42:	/* SRA D */
   4006          		{ xD( op = sra( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_51:
   \   000006E0   B40A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000006E4   000090E5           LDR      R0,[R0, #+0]
   \   000006E8   004081E0           ADD      R4,R1,R0
   \   000006EC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000006F0   ........           BL       sra
   \   000006F4   15FFFFEA           B        ??execute_id_cb_6
   4007          		case  43:	/* SRA E */
   4008          		{ xE( op = sra( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_52:
   \   000006F8   9C0A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000006FC   000090E5           LDR      R0,[R0, #+0]
   \   00000700   004081E0           ADD      R4,R1,R0
   \   00000704   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000708   ........           BL       sra
   \   0000070C   1BFFFFEA           B        ??execute_id_cb_8
   4009          		case  44:	/* SRA H */
   4010          		{ xH( op = sra( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_53:
   \   00000710   840A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000714   000090E5           LDR      R0,[R0, #+0]
   \   00000718   004081E0           ADD      R4,R1,R0
   \   0000071C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000720   ........           BL       sra
   \   00000724   DDFEFFEA           B        ??execute_id_cb_10
   4011          		case  45:	/* SRA L */
   4012          		{ xL( op = sra( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_54:
   \   00000728   6C0A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000072C   000090E5           LDR      R0,[R0, #+0]
   \   00000730   004081E0           ADD      R4,R1,R0
   \   00000734   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000738   ........           BL       sra
   \   0000073C   641A9FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000740   0FFFFFEA           B        ??execute_id_cb_13
   4013          		case  46:	/* SRA (HL) */
   4014          		{ pokeb( z, sra( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_55:
   \   00000744   500A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000748   000090E5           LDR      R0,[R0, #+0]
   \   0000074C   004081E0           ADD      R4,R1,R0
   \   00000750   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000754   ........           BL       sra
   \   00000758   0DFFFFEA           B        ??execute_id_cb_3
   4015          		case  47:	/* SRA A */
   4016          		{ xA( op = sra( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_56:
   \   0000075C   380A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000760   000090E5           LDR      R0,[R0, #+0]
   \   00000764   004081E0           ADD      R4,R1,R0
   \   00000768   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000076C   ........           BL       sra
   \   00000770   341A9FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   00000774   000081E5           STR      R0,[R1, #+0]
   \   00000778   05FFFFEA           B        ??execute_id_cb_3
   4017          
   4018          		case  48:	/* SLS B */
   4019          		{ xB( op = sls( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_57:
   \   0000077C   180A9FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000780   000090E5           LDR      R0,[R0, #+0]
   \   00000784   004081E0           ADD      R4,R1,R0
   \   00000788   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000078C   ........           BL       sls
   \   00000790   081A9FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   00000794   000081E5           STR      R0,[R1, #+0]
   \   00000798   FDFEFFEA           B        ??execute_id_cb_3
   4020          		case  49:	/* SLS C */
   4021          		{ xC( op = sls( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_58:
   \   0000079C   F8099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000007A0   000090E5           LDR      R0,[R0, #+0]
   \   000007A4   004081E0           ADD      R4,R1,R0
   \   000007A8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000007AC   ........           BL       sls
   \   000007B0   EC199FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   000007B4   000081E5           STR      R0,[R1, #+0]
   \   000007B8   F5FEFFEA           B        ??execute_id_cb_3
   4022          		case  50:	/* SLS D */
   4023          		{ xD( op = sls( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_59:
   \   000007BC   D8099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000007C0   000090E5           LDR      R0,[R0, #+0]
   \   000007C4   004081E0           ADD      R4,R1,R0
   \   000007C8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000007CC   ........           BL       sls
   \   000007D0   DEFEFFEA           B        ??execute_id_cb_6
   4024          		case  51:	/* SLS E */
   4025          		{ xE( op = sls( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_60:
   \   000007D4   C0099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000007D8   000090E5           LDR      R0,[R0, #+0]
   \   000007DC   004081E0           ADD      R4,R1,R0
   \   000007E0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000007E4   ........           BL       sls
   \   000007E8   E4FEFFEA           B        ??execute_id_cb_8
   4026          		case  52:	/* SLS H */
   4027          		{ xH( op = sls( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_61:
   \   000007EC   A8099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000007F0   000090E5           LDR      R0,[R0, #+0]
   \   000007F4   004081E0           ADD      R4,R1,R0
   \   000007F8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000007FC   ........           BL       sls
   \   00000800   A0199FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000804   D2FEFFEA           B        ??execute_id_cb_11
   4028          		case  53:	/* SLS L */
   4029          		{ xL( op = sls( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_62:
   \   00000808   8C099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000080C   000090E5           LDR      R0,[R0, #+0]
   \   00000810   004081E0           ADD      R4,R1,R0
   \   00000814   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000818   ........           BL       sls
   \   0000081C   84199FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000820   D7FEFFEA           B        ??execute_id_cb_13
   4030          		case  54:	/* SLS (HL) */
   4031          		{ pokeb( z, sls( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_63:
   \   00000824   70099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000828   000090E5           LDR      R0,[R0, #+0]
   \   0000082C   004081E0           ADD      R4,R1,R0
   \   00000830   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000834   ........           BL       sls
   \   00000838   D5FEFFEA           B        ??execute_id_cb_3
   4032          		case  55:	/* SLS A */
   4033          		{ xA( op = sls( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_64:
   \   0000083C   58099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000840   000090E5           LDR      R0,[R0, #+0]
   \   00000844   004081E0           ADD      R4,R1,R0
   \   00000848   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000084C   ........           BL       sls
   \   00000850   54199FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   00000854   000081E5           STR      R0,[R1, #+0]
   \   00000858   CDFEFFEA           B        ??execute_id_cb_3
   4034          
   4035          		case  56:	/* SRL B */
   4036          		{ xB( op = srl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_65:
   \   0000085C   38099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000860   000090E5           LDR      R0,[R0, #+0]
   \   00000864   004081E0           ADD      R4,R1,R0
   \   00000868   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000086C   ........           BL       srl
   \   00000870   28199FE5           LDR      R1,??execute_id_cb_2+0x4  ;; _B
   \   00000874   000081E5           STR      R0,[R1, #+0]
   \   00000878   C5FEFFEA           B        ??execute_id_cb_3
   4037          		case  57:	/* SRL C */
   4038          		{ xC( op = srl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_66:
   \   0000087C   18099FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000880   000090E5           LDR      R0,[R0, #+0]
   \   00000884   004081E0           ADD      R4,R1,R0
   \   00000888   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000088C   ........           BL       srl
   \   00000890   0C199FE5           LDR      R1,??execute_id_cb_2+0x8  ;; _C
   \   00000894   000081E5           STR      R0,[R1, #+0]
   \   00000898   BDFEFFEA           B        ??execute_id_cb_3
   4039          		case  58:	/* SRL D */
   4040          		{ xD( op = srl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_67:
   \   0000089C   F8089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000008A0   000090E5           LDR      R0,[R0, #+0]
   \   000008A4   004081E0           ADD      R4,R1,R0
   \   000008A8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000008AC   ........           BL       srl
   \   000008B0   A6FEFFEA           B        ??execute_id_cb_6
   4041          		case  59:	/* SRL E */
   4042          		{ xE( op = srl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_68:
   \   000008B4   E0089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000008B8   000090E5           LDR      R0,[R0, #+0]
   \   000008BC   004081E0           ADD      R4,R1,R0
   \   000008C0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000008C4   ........           BL       srl
   \   000008C8   ACFEFFEA           B        ??execute_id_cb_8
   4043          		case  60:	/* SRL H */
   4044          		{ xH( op = srl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_69:
   \   000008CC   C8089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000008D0   000090E5           LDR      R0,[R0, #+0]
   \   000008D4   004081E0           ADD      R4,R1,R0
   \   000008D8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000008DC   ........           BL       srl
   \   000008E0   6EFEFFEA           B        ??execute_id_cb_10
   4045          		case  61:	/* SRL L */
   4046          		{ xL( op = srl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_70:
   \   000008E4   B0089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000008E8   000090E5           LDR      R0,[R0, #+0]
   \   000008EC   004081E0           ADD      R4,R1,R0
   \   000008F0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000008F4   ........           BL       srl
   \   000008F8   A8189FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   000008FC   A0FEFFEA           B        ??execute_id_cb_13
   4047          		case  62:	/* SRL (HL) */
   4048          		{ pokeb( z, srl( peekb( z ) ) ); return; }
   \                     ??execute_id_cb_71:
   \   00000900   94089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000904   000090E5           LDR      R0,[R0, #+0]
   \   00000908   004081E0           ADD      R4,R1,R0
   \   0000090C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000910   ........           BL       srl
   \   00000914   9EFEFFEA           B        ??execute_id_cb_3
   4049          		case  63:	/* SRL A */
   4050          		{ xA( op = srl( peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_72:
   \   00000918   7C089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000091C   000090E5           LDR      R0,[R0, #+0]
   \   00000920   004081E0           ADD      R4,R1,R0
   \   00000924   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000928   ........           BL       srl
   \   0000092C   78189FE5           LDR      R1,??execute_id_cb_2+0x10  ;; _A
   \   00000930   000081E5           STR      R0,[R1, #+0]
   \   00000934   96FEFFEA           B        ??execute_id_cb_3
   4051          
   4052          		case  64:	/* BIT 0,B */
   4053          		case  65:	/* BIT 0,B */
   4054          		case  66:	/* BIT 0,B */
   4055          		case  67:	/* BIT 0,B */
   4056          		case  68:	/* BIT 0,B */
   4057          		case  69:	/* BIT 0,B */
   4058          		case  70:	/* BIT 0,B */
   4059          		case  71:	/* BIT 0,B */
   4060          		{ bit( 0x01, peekb( z ) ); return; }
   \                     ??execute_id_cb_73:
   \   00000938   5C089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000093C   000090E5           LDR      R0,[R0, #+0]
   \   00000940   0010D1E7           LDRB     R1,[R1, +R0]
   \   00000944   0100A0E3           MOV      R0,#+1
   \   00000948   090000EA           B        ??execute_id_cb_74
   4061          
   4062          		case  72:	/* BIT 1,B */
   4063          		case  73:	/* BIT 1,B */
   4064          		case  74:	/* BIT 1,B */
   4065          		case  75:	/* BIT 1,B */
   4066          		case  76:	/* BIT 1,B */
   4067          		case  77:	/* BIT 1,B */
   4068          		case  78:	/* BIT 1,B */
   4069          		case  79:	/* BIT 1,B */
   4070          		{ bit( 0x02, peekb( z ) ); return; }
   \                     ??execute_id_cb_75:
   \   0000094C   48089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000950   000090E5           LDR      R0,[R0, #+0]
   \   00000954   0010D1E7           LDRB     R1,[R1, +R0]
   \   00000958   0200A0E3           MOV      R0,#+2
   \   0000095C   ........           BL       bit
   \   00000960   1080BDE8           POP      {R4,PC}
   4071          
   4072          		case  80:	/* BIT 2,B */
   4073          		case  81:	/* BIT 2,B */
   4074          		case  82:	/* BIT 2,B */
   4075          		case  83:	/* BIT 2,B */
   4076          		case  84:	/* BIT 2,B */
   4077          		case  85:	/* BIT 2,B */
   4078          		case  86:	/* BIT 2,B */
   4079          		case  87:	/* BIT 2,B */
   4080          		{ bit( 0x04, peekb( z ) ); return; }
   \                     ??execute_id_cb_76:
   \   00000964   30089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000968   000090E5           LDR      R0,[R0, #+0]
   \   0000096C   0010D1E7           LDRB     R1,[R1, +R0]
   \   00000970   0400A0E3           MOV      R0,#+4
   \                     ??execute_id_cb_74:
   \   00000974   ........           BL       bit
   \   00000978   1080BDE8           POP      {R4,PC}
   4081          
   4082          		case  88:	/* BIT 3,B */
   4083          		case  89:	/* BIT 3,B */
   4084          		case  90:	/* BIT 3,B */
   4085          		case  91:	/* BIT 3,B */
   4086          		case  92:	/* BIT 3,B */
   4087          		case  93:	/* BIT 3,B */
   4088          		case  94:	/* BIT 3,B */
   4089          		case  95:	/* BIT 3,B */
   4090          		{ bit( 0x08, peekb( z ) ); return; }
   \                     ??execute_id_cb_77:
   \   0000097C   18089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000980   000090E5           LDR      R0,[R0, #+0]
   \   00000984   0010D1E7           LDRB     R1,[R1, +R0]
   \   00000988   0800A0E3           MOV      R0,#+8
   \   0000098C   F8FFFFEA           B        ??execute_id_cb_74
   4091          
   4092          		case  96:	/* BIT 4,B */
   4093          		case  97:	/* BIT 4,B */
   4094          		case  98:	/* BIT 4,B */
   4095          		case  99:	/* BIT 4,B */
   4096          		case 100:	/* BIT 4,B */
   4097          		case 101:	/* BIT 4,B */
   4098          		case 102:	/* BIT 4,B */
   4099          		case 103:	/* BIT 4,B */
   4100          		{ bit( 0x10, peekb( z ) ); return; }
   \                     ??execute_id_cb_78:
   \   00000990   04089FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000994   000090E5           LDR      R0,[R0, #+0]
   \   00000998   0010D1E7           LDRB     R1,[R1, +R0]
   \   0000099C   1000A0E3           MOV      R0,#+16
   \   000009A0   F3FFFFEA           B        ??execute_id_cb_74
   4101          
   4102          		case 104:	/* BIT 5,B */
   4103          		case 105:	/* BIT 5,B */
   4104          		case 106:	/* BIT 5,B */
   4105          		case 107:	/* BIT 5,B */
   4106          		case 108:	/* BIT 5,B */
   4107          		case 109:	/* BIT 5,B */
   4108          		case 110:	/* BIT 5,B */
   4109          		case 111:	/* BIT 5,B */
   4110          		{ bit( 0x20, peekb( z ) ); return; }
   \                     ??execute_id_cb_79:
   \   000009A4   F0079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000009A8   000090E5           LDR      R0,[R0, #+0]
   \   000009AC   0010D1E7           LDRB     R1,[R1, +R0]
   \   000009B0   2000A0E3           MOV      R0,#+32
   \   000009B4   EEFFFFEA           B        ??execute_id_cb_74
   4111          
   4112          		case 112:	/* BIT 6,B */
   4113          		case 113:	/* BIT 6,B */
   4114          		case 114:	/* BIT 6,B */
   4115          		case 115:	/* BIT 6,B */
   4116          		case 116:	/* BIT 6,B */
   4117          		case 117:	/* BIT 6,B */
   4118          		case 118:	/* BIT 6,B */
   4119          		case 119:	/* BIT 6,B */
   4120          		{ bit( 0x40, peekb( z ) ); return; }
   \                     ??execute_id_cb_80:
   \   000009B8   DC079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000009BC   000090E5           LDR      R0,[R0, #+0]
   \   000009C0   0010D1E7           LDRB     R1,[R1, +R0]
   \   000009C4   4000A0E3           MOV      R0,#+64
   \   000009C8   E9FFFFEA           B        ??execute_id_cb_74
   4121          
   4122          		case 120:	/* BIT 7,B */
   4123          		case 121:	/* BIT 7,B */
   4124          		case 122:	/* BIT 7,B */
   4125          		case 123:	/* BIT 7,B */
   4126          		case 124:	/* BIT 7,B */
   4127          		case 125:	/* BIT 7,B */
   4128          		case 126:	/* BIT 7,B */
   4129          		case 127:	/* BIT 7,B */
   4130          		{ bit( 0x80, peekb( z ) ); return; }
   \                     ??execute_id_cb_81:
   \   000009CC   C8079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000009D0   000090E5           LDR      R0,[R0, #+0]
   \   000009D4   0010D1E7           LDRB     R1,[R1, +R0]
   \   000009D8   8000A0E3           MOV      R0,#+128
   \   000009DC   E4FFFFEA           B        ??execute_id_cb_74
   4131          
   4132          		case 128:	/* RES 0,B */
   4133          		{ xB( op = res( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_82:
   \   000009E0   B4079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000009E4   000090E5           LDR      R0,[R0, #+0]
   \   000009E8   004081E0           ADD      R4,R1,R0
   \   000009EC   0100E0E3           MVN      R0,#+1
   \   000009F0   320000EA           B        ??execute_id_cb_83
   4134          		case 129:	/* RES 0,C */
   4135          		{ xC( op = res( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_84:
   \   000009F4   A0079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000009F8   000090E5           LDR      R0,[R0, #+0]
   \   000009FC   004081E0           ADD      R4,R1,R0
   \   00000A00   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000A04   0100E0E3           MVN      R0,#+1
   \   00000A08   370000EA           B        ??execute_id_cb_85
   4136          		case 130:	/* RES 0,D */
   4137          		{ xD( op = res( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_86:
   \   00000A0C   88079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000A10   000090E5           LDR      R0,[R0, #+0]
   \   00000A14   004081E0           ADD      R4,R1,R0
   \   00000A18   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000A1C   0100C0E3           BIC      R0,R0,#0x1
   \   00000A20   4AFEFFEA           B        ??execute_id_cb_6
   4138          		case 131:	/* RES 0,E */
   4139          		{ xE( op = res( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_87:
   \   00000A24   70079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000A28   000090E5           LDR      R0,[R0, #+0]
   \   00000A2C   004081E0           ADD      R4,R1,R0
   \   00000A30   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000A34   74179FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   00000A38   0100C0E3           BIC      R0,R0,#0x1
   \   00000A3C   50FEFFEA           B        ??execute_id_cb_13
   4140          		case 132:	/* RES 0,H */
   4141          		{ xH( op = res( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_88:
   \   00000A40   54079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000A44   000090E5           LDR      R0,[R0, #+0]
   \   00000A48   004081E0           ADD      R4,R1,R0
   \   00000A4C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000A50   50179FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000A54   0100C0E3           BIC      R0,R0,#0x1
   \   00000A58   3DFEFFEA           B        ??execute_id_cb_11
   4142          		case 133:	/* RES 0,L */
   4143          		{ xL( op = res( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_89:
   \   00000A5C   38079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000A60   000090E5           LDR      R0,[R0, #+0]
   \   00000A64   004081E0           ADD      R4,R1,R0
   \   00000A68   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000A6C   34179FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000A70   0100C0E3           BIC      R0,R0,#0x1
   \   00000A74   42FEFFEA           B        ??execute_id_cb_13
   4144          		case 134:	/* RES 0,(HL) */
   4145          		{ pokeb( z, res( 0x01, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_90:
   \   00000A78   1C079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000A7C   000090E5           LDR      R0,[R0, #+0]
   \   00000A80   004081E0           ADD      R4,R1,R0
   \   00000A84   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000A88   FE0000E2           AND      R0,R0,#0xFE
   \   00000A8C   40FEFFEA           B        ??execute_id_cb_3
   4146          		case 135:	/* RES 0,A */
   4147          		{ xA( op = res( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_91:
   \   00000A90   04079FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000A94   000090E5           LDR      R0,[R0, #+0]
   \   00000A98   004081E0           ADD      R4,R1,R0
   \   00000A9C   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000AA0   0100E0E3           MVN      R0,#+1
   \   00000AA4   011000E0           AND      R1,R0,R1
   \   00000AA8   FC069FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00000AAC   100000EA           B        ??execute_id_cb_92
   4148          
   4149          		case 136:	/* RES 1,B */
   4150          		{ xB( op = res( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_93:
   \   00000AB0   E4069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000AB4   000090E5           LDR      R0,[R0, #+0]
   \   00000AB8   004081E0           ADD      R4,R1,R0
   \   00000ABC   0200E0E3           MVN      R0,#+2
   \                     ??execute_id_cb_83:
   \   00000AC0   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000AC4   011000E0           AND      R1,R0,R1
   \                     ??execute_id_cb_94:
   \   00000AC8   D0069FE5           LDR      R0,??execute_id_cb_2+0x4  ;; _B
   \   00000ACC   001080E5           STR      R1,[R0, #+0]
   \   00000AD0   0010C4E5           STRB     R1,[R4, #+0]
   \   00000AD4   1080BDE8           POP      {R4,PC}
   4151          		case 137:	/* RES 1,C */
   4152          		{ xC( op = res( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_95:
   \   00000AD8   BC069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000ADC   000090E5           LDR      R0,[R0, #+0]
   \   00000AE0   004081E0           ADD      R4,R1,R0
   \   00000AE4   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000AE8   0200E0E3           MVN      R0,#+2
   \                     ??execute_id_cb_85:
   \   00000AEC   011000E0           AND      R1,R0,R1
   \                     ??execute_id_cb_96:
   \   00000AF0   AC069FE5           LDR      R0,??execute_id_cb_2+0x8  ;; _C
   \                     ??execute_id_cb_92:
   \   00000AF4   001080E5           STR      R1,[R0, #+0]
   \   00000AF8   0010C4E5           STRB     R1,[R4, #+0]
   \   00000AFC   1080BDE8           POP      {R4,PC}
   4153          		case 138:	/* RES 1,D */
   4154          		{ xD( op = res( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_97:
   \   00000B00   94069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000B04   000090E5           LDR      R0,[R0, #+0]
   \   00000B08   004081E0           ADD      R4,R1,R0
   \   00000B0C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000B10   0200C0E3           BIC      R0,R0,#0x2
   \   00000B14   0DFEFFEA           B        ??execute_id_cb_6
   4155          		case 139:	/* RES 1,E */
   4156          		{ xE( op = res( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_98:
   \   00000B18   7C069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000B1C   000090E5           LDR      R0,[R0, #+0]
   \   00000B20   004081E0           ADD      R4,R1,R0
   \   00000B24   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000B28   80169FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   00000B2C   0200C0E3           BIC      R0,R0,#0x2
   \   00000B30   13FEFFEA           B        ??execute_id_cb_13
   4157          		case 140:	/* RES 1,H */
   4158          		{ xH( op = res( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_99:
   \   00000B34   60069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000B38   000090E5           LDR      R0,[R0, #+0]
   \   00000B3C   004081E0           ADD      R4,R1,R0
   \   00000B40   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000B44   5C169FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000B48   0200C0E3           BIC      R0,R0,#0x2
   \   00000B4C   00FEFFEA           B        ??execute_id_cb_11
   4159          		case 141:	/* RES 1,L */
   4160          		{ xL( op = res( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_100:
   \   00000B50   44069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000B54   000090E5           LDR      R0,[R0, #+0]
   \   00000B58   004081E0           ADD      R4,R1,R0
   \   00000B5C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000B60   40169FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000B64   0200C0E3           BIC      R0,R0,#0x2
   \   00000B68   05FEFFEA           B        ??execute_id_cb_13
   4161          		case 142:	/* RES 1,(HL) */
   4162          		{ pokeb( z, res( 0x02, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_101:
   \   00000B6C   28069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000B70   000090E5           LDR      R0,[R0, #+0]
   \   00000B74   004081E0           ADD      R4,R1,R0
   \   00000B78   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000B7C   FD0000E2           AND      R0,R0,#0xFD
   \   00000B80   03FEFFEA           B        ??execute_id_cb_3
   4163          		case 143:	/* RES 1,A */
   4164          		{ xA( op = res( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_102:
   \   00000B84   10069FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000B88   000090E5           LDR      R0,[R0, #+0]
   \   00000B8C   004081E0           ADD      R4,R1,R0
   \   00000B90   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000B94   0200E0E3           MVN      R0,#+2
   \   00000B98   011000E0           AND      R1,R0,R1
   \   00000B9C   08069FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00000BA0   D3FFFFEA           B        ??execute_id_cb_92
   4165          
   4166          		case 144:	/* RES 2,B */
   4167          		{ xB( op = res( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_103:
   \   00000BA4   F0059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000BA8   000090E5           LDR      R0,[R0, #+0]
   \   00000BAC   004081E0           ADD      R4,R1,R0
   \   00000BB0   0400E0E3           MVN      R0,#+4
   \   00000BB4   C1FFFFEA           B        ??execute_id_cb_83
   4168          		case 145:	/* RES 2,C */
   4169          		{ xC( op = res( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_104:
   \   00000BB8   DC059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000BBC   000090E5           LDR      R0,[R0, #+0]
   \   00000BC0   004081E0           ADD      R4,R1,R0
   \   00000BC4   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000BC8   0400E0E3           MVN      R0,#+4
   \   00000BCC   C6FFFFEA           B        ??execute_id_cb_85
   4170          		case 146:	/* RES 2,D */
   4171          		{ xD( op = res( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_105:
   \   00000BD0   C4059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000BD4   000090E5           LDR      R0,[R0, #+0]
   \   00000BD8   004081E0           ADD      R4,R1,R0
   \   00000BDC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000BE0   0400C0E3           BIC      R0,R0,#0x4
   \   00000BE4   D9FDFFEA           B        ??execute_id_cb_6
   4172          		case 147:	/* RES 2,E */
   4173          		{ xE( op = res( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_106:
   \   00000BE8   AC059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000BEC   000090E5           LDR      R0,[R0, #+0]
   \   00000BF0   004081E0           ADD      R4,R1,R0
   \   00000BF4   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000BF8   B0159FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   00000BFC   0400C0E3           BIC      R0,R0,#0x4
   \   00000C00   DFFDFFEA           B        ??execute_id_cb_13
   4174          		case 148:	/* RES 2,H */
   4175          		{ xH( op = res( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_107:
   \   00000C04   90059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000C08   000090E5           LDR      R0,[R0, #+0]
   \   00000C0C   004081E0           ADD      R4,R1,R0
   \   00000C10   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000C14   8C159FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000C18   0400C0E3           BIC      R0,R0,#0x4
   \   00000C1C   CCFDFFEA           B        ??execute_id_cb_11
   4176          		case 149:	/* RES 2,L */
   4177          		{ xL( op = res( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_108:
   \   00000C20   74059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000C24   000090E5           LDR      R0,[R0, #+0]
   \   00000C28   004081E0           ADD      R4,R1,R0
   \   00000C2C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000C30   70159FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000C34   0400C0E3           BIC      R0,R0,#0x4
   \   00000C38   D1FDFFEA           B        ??execute_id_cb_13
   4178          		case 150:	/* RES 2,(HL) */
   4179          		{ pokeb( z, res( 0x04, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_109:
   \   00000C3C   58059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000C40   000090E5           LDR      R0,[R0, #+0]
   \   00000C44   004081E0           ADD      R4,R1,R0
   \   00000C48   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000C4C   FB0000E2           AND      R0,R0,#0xFB
   \   00000C50   CFFDFFEA           B        ??execute_id_cb_3
   4180          		case 151:	/* RES 2,A */
   4181          		{ xA( op = res( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_110:
   \   00000C54   40059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000C58   000090E5           LDR      R0,[R0, #+0]
   \   00000C5C   004081E0           ADD      R4,R1,R0
   \   00000C60   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000C64   0400E0E3           MVN      R0,#+4
   \   00000C68   011000E0           AND      R1,R0,R1
   \   00000C6C   38059FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00000C70   9FFFFFEA           B        ??execute_id_cb_92
   4182          
   4183          		case 152:	/* RES 3,B */
   4184          		{ xB( op = res( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_111:
   \   00000C74   20059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000C78   000090E5           LDR      R0,[R0, #+0]
   \   00000C7C   004081E0           ADD      R4,R1,R0
   \   00000C80   0800E0E3           MVN      R0,#+8
   \   00000C84   8DFFFFEA           B        ??execute_id_cb_83
   4185          		case 153:	/* RES 3,C */
   4186          		{ xC( op = res( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_112:
   \   00000C88   0C059FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000C8C   000090E5           LDR      R0,[R0, #+0]
   \   00000C90   004081E0           ADD      R4,R1,R0
   \   00000C94   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000C98   0800E0E3           MVN      R0,#+8
   \   00000C9C   92FFFFEA           B        ??execute_id_cb_85
   4187          		case 154:	/* RES 3,D */
   4188          		{ xD( op = res( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_113:
   \   00000CA0   F4049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000CA4   000090E5           LDR      R0,[R0, #+0]
   \   00000CA8   004081E0           ADD      R4,R1,R0
   \   00000CAC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000CB0   0800C0E3           BIC      R0,R0,#0x8
   \   00000CB4   A5FDFFEA           B        ??execute_id_cb_6
   4189          		case 155:	/* RES 3,E */
   4190          		{ xE( op = res( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_114:
   \   00000CB8   DC049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000CBC   000090E5           LDR      R0,[R0, #+0]
   \   00000CC0   004081E0           ADD      R4,R1,R0
   \   00000CC4   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000CC8   E0149FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   00000CCC   0800C0E3           BIC      R0,R0,#0x8
   \   00000CD0   ABFDFFEA           B        ??execute_id_cb_13
   4191          		case 156:	/* RES 3,H */
   4192          		{ xH( op = res( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_115:
   \   00000CD4   C0049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000CD8   000090E5           LDR      R0,[R0, #+0]
   \   00000CDC   004081E0           ADD      R4,R1,R0
   \   00000CE0   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000CE4   BC149FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000CE8   0800C0E3           BIC      R0,R0,#0x8
   \   00000CEC   98FDFFEA           B        ??execute_id_cb_11
   4193          		case 157:	/* RES 3,L */
   4194          		{ xL( op = res( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_116:
   \   00000CF0   A4049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000CF4   000090E5           LDR      R0,[R0, #+0]
   \   00000CF8   004081E0           ADD      R4,R1,R0
   \   00000CFC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000D00   A0149FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000D04   0800C0E3           BIC      R0,R0,#0x8
   \   00000D08   9DFDFFEA           B        ??execute_id_cb_13
   4195          		case 158:	/* RES 3,(HL) */
   4196          		{ pokeb( z, res( 0x08, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_117:
   \   00000D0C   88049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000D10   000090E5           LDR      R0,[R0, #+0]
   \   00000D14   004081E0           ADD      R4,R1,R0
   \   00000D18   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000D1C   F70000E2           AND      R0,R0,#0xF7
   \   00000D20   9BFDFFEA           B        ??execute_id_cb_3
   4197          		case 159:	/* RES 3,A */
   4198          		{ xA( op = res( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_118:
   \   00000D24   70049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000D28   000090E5           LDR      R0,[R0, #+0]
   \   00000D2C   004081E0           ADD      R4,R1,R0
   \   00000D30   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000D34   0800E0E3           MVN      R0,#+8
   \   00000D38   011000E0           AND      R1,R0,R1
   \   00000D3C   68049FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00000D40   6BFFFFEA           B        ??execute_id_cb_92
   4199          
   4200          		case 160:	/* RES 4,B */
   4201          		{ xB( op = res( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_119:
   \   00000D44   50049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000D48   000090E5           LDR      R0,[R0, #+0]
   \   00000D4C   004081E0           ADD      R4,R1,R0
   \   00000D50   1000E0E3           MVN      R0,#+16
   \   00000D54   59FFFFEA           B        ??execute_id_cb_83
   4202          		case 161:	/* RES 4,C */
   4203          		{ xC( op = res( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_120:
   \   00000D58   3C049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000D5C   000090E5           LDR      R0,[R0, #+0]
   \   00000D60   004081E0           ADD      R4,R1,R0
   \   00000D64   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000D68   1000E0E3           MVN      R0,#+16
   \   00000D6C   5EFFFFEA           B        ??execute_id_cb_85
   4204          		case 162:	/* RES 4,D */
   4205          		{ xD( op = res( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_121:
   \   00000D70   24049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000D74   000090E5           LDR      R0,[R0, #+0]
   \   00000D78   004081E0           ADD      R4,R1,R0
   \   00000D7C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000D80   1000C0E3           BIC      R0,R0,#0x10
   \   00000D84   71FDFFEA           B        ??execute_id_cb_6
   4206          		case 163:	/* RES 4,E */
   4207          		{ xE( op = res( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_122:
   \   00000D88   0C049FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000D8C   000090E5           LDR      R0,[R0, #+0]
   \   00000D90   004081E0           ADD      R4,R1,R0
   \   00000D94   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000D98   10149FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   00000D9C   1000C0E3           BIC      R0,R0,#0x10
   \   00000DA0   77FDFFEA           B        ??execute_id_cb_13
   4208          		case 164:	/* RES 4,H */
   4209          		{ xH( op = res( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_123:
   \   00000DA4   F0039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000DA8   000090E5           LDR      R0,[R0, #+0]
   \   00000DAC   004081E0           ADD      R4,R1,R0
   \   00000DB0   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000DB4   EC139FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000DB8   1000C0E3           BIC      R0,R0,#0x10
   \   00000DBC   64FDFFEA           B        ??execute_id_cb_11
   4210          		case 165:	/* RES 4,L */
   4211          		{ xL( op = res( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_124:
   \   00000DC0   D4039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000DC4   000090E5           LDR      R0,[R0, #+0]
   \   00000DC8   004081E0           ADD      R4,R1,R0
   \   00000DCC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000DD0   D0139FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000DD4   1000C0E3           BIC      R0,R0,#0x10
   \   00000DD8   69FDFFEA           B        ??execute_id_cb_13
   4212          		case 166:	/* RES 4,(HL) */
   4213          		{ pokeb( z, res( 0x10, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_125:
   \   00000DDC   B8039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000DE0   000090E5           LDR      R0,[R0, #+0]
   \   00000DE4   004081E0           ADD      R4,R1,R0
   \   00000DE8   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000DEC   EF0000E2           AND      R0,R0,#0xEF
   \   00000DF0   67FDFFEA           B        ??execute_id_cb_3
   4214          		case 167:	/* RES 4,A */
   4215          		{ xA( op = res( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_126:
   \   00000DF4   A0039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000DF8   000090E5           LDR      R0,[R0, #+0]
   \   00000DFC   004081E0           ADD      R4,R1,R0
   \   00000E00   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000E04   1000E0E3           MVN      R0,#+16
   \   00000E08   011000E0           AND      R1,R0,R1
   \   00000E0C   98039FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00000E10   37FFFFEA           B        ??execute_id_cb_92
   4216          
   4217          		case 168:	/* RES 5,B */
   4218          		{ xB( op = res( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_127:
   \   00000E14   80039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000E18   000090E5           LDR      R0,[R0, #+0]
   \   00000E1C   004081E0           ADD      R4,R1,R0
   \   00000E20   2000E0E3           MVN      R0,#+32
   \   00000E24   25FFFFEA           B        ??execute_id_cb_83
   4219          		case 169:	/* RES 5,C */
   4220          		{ xC( op = res( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_128:
   \   00000E28   6C039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000E2C   000090E5           LDR      R0,[R0, #+0]
   \   00000E30   004081E0           ADD      R4,R1,R0
   \   00000E34   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000E38   2000E0E3           MVN      R0,#+32
   \   00000E3C   2AFFFFEA           B        ??execute_id_cb_85
   4221          		case 170:	/* RES 5,D */
   4222          		{ xD( op = res( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_129:
   \   00000E40   54039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000E44   000090E5           LDR      R0,[R0, #+0]
   \   00000E48   004081E0           ADD      R4,R1,R0
   \   00000E4C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000E50   2000C0E3           BIC      R0,R0,#0x20
   \   00000E54   3DFDFFEA           B        ??execute_id_cb_6
   4223          		case 171:	/* RES 5,E */
   4224          		{ xE( op = res( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_130:
   \   00000E58   3C039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000E5C   000090E5           LDR      R0,[R0, #+0]
   \   00000E60   004081E0           ADD      R4,R1,R0
   \   00000E64   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000E68   40139FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   00000E6C   2000C0E3           BIC      R0,R0,#0x20
   \   00000E70   43FDFFEA           B        ??execute_id_cb_13
   4225          		case 172:	/* RES 5,H */
   4226          		{ xH( op = res( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_131:
   \   00000E74   20039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000E78   000090E5           LDR      R0,[R0, #+0]
   \   00000E7C   004081E0           ADD      R4,R1,R0
   \   00000E80   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000E84   1C139FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000E88   2000C0E3           BIC      R0,R0,#0x20
   \   00000E8C   30FDFFEA           B        ??execute_id_cb_11
   4227          		case 173:	/* RES 5,L */
   4228          		{ xL( op = res( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_132:
   \   00000E90   04039FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000E94   000090E5           LDR      R0,[R0, #+0]
   \   00000E98   004081E0           ADD      R4,R1,R0
   \   00000E9C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000EA0   00139FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000EA4   2000C0E3           BIC      R0,R0,#0x20
   \   00000EA8   35FDFFEA           B        ??execute_id_cb_13
   4229          		case 174:	/* RES 5,(HL) */
   4230          		{ pokeb( z, res( 0x20, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_133:
   \   00000EAC   E8029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000EB0   000090E5           LDR      R0,[R0, #+0]
   \   00000EB4   004081E0           ADD      R4,R1,R0
   \   00000EB8   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000EBC   DF0000E2           AND      R0,R0,#0xDF
   \   00000EC0   33FDFFEA           B        ??execute_id_cb_3
   4231          		case 175:	/* RES 5,A */
   4232          		{ xA( op = res( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_134:
   \   00000EC4   D0029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000EC8   000090E5           LDR      R0,[R0, #+0]
   \   00000ECC   004081E0           ADD      R4,R1,R0
   \   00000ED0   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000ED4   2000E0E3           MVN      R0,#+32
   \   00000ED8   011000E0           AND      R1,R0,R1
   \   00000EDC   C8029FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00000EE0   03FFFFEA           B        ??execute_id_cb_92
   4233          
   4234          		case 176:	/* RES 6,B */
   4235          		{ xB( op = res( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_135:
   \   00000EE4   B0029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000EE8   000090E5           LDR      R0,[R0, #+0]
   \   00000EEC   004081E0           ADD      R4,R1,R0
   \   00000EF0   4000E0E3           MVN      R0,#+64
   \   00000EF4   F1FEFFEA           B        ??execute_id_cb_83
   4236          		case 177:	/* RES 6,C */
   4237          		{ xC( op = res( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_136:
   \   00000EF8   9C029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000EFC   000090E5           LDR      R0,[R0, #+0]
   \   00000F00   004081E0           ADD      R4,R1,R0
   \   00000F04   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000F08   4000E0E3           MVN      R0,#+64
   \   00000F0C   F6FEFFEA           B        ??execute_id_cb_85
   4238          		case 178:	/* RES 6,D */
   4239          		{ xD( op = res( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_137:
   \   00000F10   84029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000F14   000090E5           LDR      R0,[R0, #+0]
   \   00000F18   004081E0           ADD      R4,R1,R0
   \   00000F1C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000F20   4000C0E3           BIC      R0,R0,#0x40
   \   00000F24   09FDFFEA           B        ??execute_id_cb_6
   4240          		case 179:	/* RES 6,E */
   4241          		{ xE( op = res( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_138:
   \   00000F28   6C029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000F2C   000090E5           LDR      R0,[R0, #+0]
   \   00000F30   004081E0           ADD      R4,R1,R0
   \   00000F34   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000F38   70129FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   00000F3C   4000C0E3           BIC      R0,R0,#0x40
   \   00000F40   0FFDFFEA           B        ??execute_id_cb_13
   4242          		case 180:	/* RES 6,H */
   4243          		{ xH( op = res( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_139:
   \   00000F44   50029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000F48   000090E5           LDR      R0,[R0, #+0]
   \   00000F4C   004081E0           ADD      R4,R1,R0
   \   00000F50   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000F54   4C129FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000F58   4000C0E3           BIC      R0,R0,#0x40
   \   00000F5C   FCFCFFEA           B        ??execute_id_cb_11
   4244          		case 181:	/* RES 6,L */
   4245          		{ xL( op = res( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_140:
   \   00000F60   34029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000F64   000090E5           LDR      R0,[R0, #+0]
   \   00000F68   004081E0           ADD      R4,R1,R0
   \   00000F6C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000F70   30129FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00000F74   4000C0E3           BIC      R0,R0,#0x40
   \   00000F78   01FDFFEA           B        ??execute_id_cb_13
   4246          		case 182:	/* RES 6,(HL) */
   4247          		{ pokeb( z, res( 0x40, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_141:
   \   00000F7C   18029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000F80   000090E5           LDR      R0,[R0, #+0]
   \   00000F84   004081E0           ADD      R4,R1,R0
   \   00000F88   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000F8C   BF0000E2           AND      R0,R0,#0xBF
   \   00000F90   FFFCFFEA           B        ??execute_id_cb_3
   4248          		case 183:	/* RES 6,A */
   4249          		{ xA( op = res( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_142:
   \   00000F94   00029FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000F98   000090E5           LDR      R0,[R0, #+0]
   \   00000F9C   004081E0           ADD      R4,R1,R0
   \   00000FA0   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000FA4   4000E0E3           MVN      R0,#+64
   \   00000FA8   011000E0           AND      R1,R0,R1
   \   00000FAC   F8019FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00000FB0   CFFEFFEA           B        ??execute_id_cb_92
   4250          
   4251          		case 184:	/* RES 7,B */
   4252          		{ xB( op = res( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_143:
   \   00000FB4   E0019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000FB8   000090E5           LDR      R0,[R0, #+0]
   \   00000FBC   004081E0           ADD      R4,R1,R0
   \   00000FC0   8000E0E3           MVN      R0,#+128
   \   00000FC4   BDFEFFEA           B        ??execute_id_cb_83
   4253          		case 185:	/* RES 7,C */
   4254          		{ xC( op = res( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_144:
   \   00000FC8   CC019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000FCC   000090E5           LDR      R0,[R0, #+0]
   \   00000FD0   004081E0           ADD      R4,R1,R0
   \   00000FD4   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000FD8   8000E0E3           MVN      R0,#+128
   \   00000FDC   C2FEFFEA           B        ??execute_id_cb_85
   4255          		case 186:	/* RES 7,D */
   4256          		{ xD( op = res( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_145:
   \   00000FE0   B4019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000FE4   000090E5           LDR      R0,[R0, #+0]
   \   00000FE8   004081E0           ADD      R4,R1,R0
   \   00000FEC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000FF0   8000C0E3           BIC      R0,R0,#0x80
   \   00000FF4   D5FCFFEA           B        ??execute_id_cb_6
   4257          		case 187:	/* RES 7,E */
   4258          		{ xE( op = res( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_146:
   \   00000FF8   9C019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00000FFC   000090E5           LDR      R0,[R0, #+0]
   \   00001000   004081E0           ADD      R4,R1,R0
   \   00001004   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001008   A0119FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   0000100C   8000C0E3           BIC      R0,R0,#0x80
   \   00001010   DBFCFFEA           B        ??execute_id_cb_13
   4259          		case 188:	/* RES 7,H */
   4260          		{ xH( op = res( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_147:
   \   00001014   80019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001018   000090E5           LDR      R0,[R0, #+0]
   \   0000101C   004081E0           ADD      R4,R1,R0
   \   00001020   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001024   7C119FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00001028   8000C0E3           BIC      R0,R0,#0x80
   \   0000102C   C8FCFFEA           B        ??execute_id_cb_11
   4261          		case 189:	/* RES 7,L */
   4262          		{ xL( op = res( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_148:
   \   00001030   64019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001034   000090E5           LDR      R0,[R0, #+0]
   \   00001038   004081E0           ADD      R4,R1,R0
   \   0000103C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001040   60119FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00001044   8000C0E3           BIC      R0,R0,#0x80
   \   00001048   CDFCFFEA           B        ??execute_id_cb_13
   4263          		case 190:	/* RES 7,(HL) */
   4264          		{ pokeb( z, res( 0x80, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_149:
   \   0000104C   48019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001050   000090E5           LDR      R0,[R0, #+0]
   \   00001054   004081E0           ADD      R4,R1,R0
   \   00001058   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000105C   7F0000E2           AND      R0,R0,#0x7F
   \   00001060   CBFCFFEA           B        ??execute_id_cb_3
   4265          		case 191:	/* RES 7,A */
   4266          		{ xA( op = res( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_150:
   \   00001064   30019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001068   000090E5           LDR      R0,[R0, #+0]
   \   0000106C   004081E0           ADD      R4,R1,R0
   \   00001070   0010D4E5           LDRB     R1,[R4, #+0]
   \   00001074   8000E0E3           MVN      R0,#+128
   \   00001078   011000E0           AND      R1,R0,R1
   \   0000107C   28019FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00001080   9BFEFFEA           B        ??execute_id_cb_92
   4267          
   4268          		case 192:	/* SET 0,B */
   4269          		{ xB( op = set( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_151:
   \   00001084   10019FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001088   000090E5           LDR      R0,[R0, #+0]
   \   0000108C   004081E0           ADD      R4,R1,R0
   \   00001090   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001094   011080E3           ORR      R1,R0,#0x1
   \   00001098   8AFEFFEA           B        ??execute_id_cb_94
   4270          		case 193:	/* SET 0,C */
   4271          		{ xC( op = set( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_152:
   \   0000109C   F8009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000010A0   000090E5           LDR      R0,[R0, #+0]
   \   000010A4   004081E0           ADD      R4,R1,R0
   \   000010A8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000010AC   011080E3           ORR      R1,R0,#0x1
   \   000010B0   8EFEFFEA           B        ??execute_id_cb_96
   4272          		case 194:	/* SET 0,D */
   4273          		{ xD( op = set( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_153:
   \   000010B4   E0009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000010B8   000090E5           LDR      R0,[R0, #+0]
   \   000010BC   004081E0           ADD      R4,R1,R0
   \   000010C0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000010C4   010080E3           ORR      R0,R0,#0x1
   \   000010C8   A0FCFFEA           B        ??execute_id_cb_6
   4274          		case 195:	/* SET 0,E */
   4275          		{ xE( op = set( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_154:
   \   000010CC   C8009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000010D0   000090E5           LDR      R0,[R0, #+0]
   \   000010D4   004081E0           ADD      R4,R1,R0
   \   000010D8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000010DC   CC109FE5           LDR      R1,??execute_id_cb_2+0x14  ;; _DE
   \   000010E0   010080E3           ORR      R0,R0,#0x1
   \   000010E4   A6FCFFEA           B        ??execute_id_cb_13
   4276          		case 196:	/* SET 0,H */
   4277          		{ xH( op = set( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_155:
   \   000010E8   AC009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   000010EC   000090E5           LDR      R0,[R0, #+0]
   \   000010F0   004081E0           ADD      R4,R1,R0
   \   000010F4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000010F8   A8109FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   000010FC   010080E3           ORR      R0,R0,#0x1
   \   00001100   93FCFFEA           B        ??execute_id_cb_11
   4278          		case 197:	/* SET 0,L */
   4279          		{ xL( op = set( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_156:
   \   00001104   90009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001108   000090E5           LDR      R0,[R0, #+0]
   \   0000110C   004081E0           ADD      R4,R1,R0
   \   00001110   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001114   8C109FE5           LDR      R1,??execute_id_cb_2+0xC  ;; _HL
   \   00001118   010080E3           ORR      R0,R0,#0x1
   \   0000111C   98FCFFEA           B        ??execute_id_cb_13
   4280          		case 198:	/* SET 0,(HL) */
   4281          		{ pokeb( z, set( 0x01, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_157:
   \   00001120   74009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001124   000090E5           LDR      R0,[R0, #+0]
   \   00001128   004081E0           ADD      R4,R1,R0
   \   0000112C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001130   010080E3           ORR      R0,R0,#0x1
   \   00001134   96FCFFEA           B        ??execute_id_cb_3
   4282          		case 199:	/* SET 0,A */
   4283          		{ xA( op = set( 0x01, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_158:
   \   00001138   5C009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   0000113C   000090E5           LDR      R0,[R0, #+0]
   \   00001140   004081E0           ADD      R4,R1,R0
   \   00001144   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001148   011080E3           ORR      R1,R0,#0x1
   \   0000114C   58009FE5           LDR      R0,??execute_id_cb_2+0x10  ;; _A
   \   00001150   67FEFFEA           B        ??execute_id_cb_92
   4284          
   4285          		case 200:	/* SET 1,B */
   4286          		{ xB( op = set( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_159:
   \   00001154   40009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001158   000090E5           LDR      R0,[R0, #+0]
   \   0000115C   004081E0           ADD      R4,R1,R0
   \   00001160   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001164   021080E3           ORR      R1,R0,#0x2
   \   00001168   56FEFFEA           B        ??execute_id_cb_94
   4287          		case 201:	/* SET 1,C */
   4288          		{ xC( op = set( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_160:
   \   0000116C   28009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001170   000090E5           LDR      R0,[R0, #+0]
   \   00001174   004081E0           ADD      R4,R1,R0
   \   00001178   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000117C   021080E3           ORR      R1,R0,#0x2
   \   00001180   5AFEFFEA           B        ??execute_id_cb_96
   4289          		case 202:	/* SET 1,D */
   4290          		{ xD( op = set( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_161:
   \   00001184   10009FE5           LDR      R0,??execute_id_cb_2  ;; mem
   \   00001188   000090E5           LDR      R0,[R0, #+0]
   \   0000118C   004081E0           ADD      R4,R1,R0
   \   00001190   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001194   020080E3           ORR      R0,R0,#0x2
   \   00001198   6CFCFFEA           B        ??execute_id_cb_6
   \                     ??execute_id_cb_2:
   \   0000119C   ........           DC32     mem
   \   000011A0   ........           DC32     _B
   \   000011A4   ........           DC32     _C
   \   000011A8   ........           DC32     _HL
   \   000011AC   ........           DC32     _A
   \   000011B0   ........           DC32     _DE
   4291          		case 203:	/* SET 1,E */
   4292          		{ xE( op = set( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_162:
   \   000011B4   ........           LDR      R0,??DataTable1030  ;; mem
   \   000011B8   000090E5           LDR      R0,[R0, #+0]
   \   000011BC   004081E0           ADD      R4,R1,R0
   \   000011C0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000011C4   ........           LDR      R1,??DataTable1015  ;; _DE
   \   000011C8   020080E3           ORR      R0,R0,#0x2
   \   000011CC   6CFCFFEA           B        ??execute_id_cb_13
   4293          		case 204:	/* SET 1,H */
   4294          		{ xH( op = set( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_163:
   \   000011D0   ........           LDR      R0,??DataTable1030  ;; mem
   \   000011D4   000090E5           LDR      R0,[R0, #+0]
   \   000011D8   004081E0           ADD      R4,R1,R0
   \   000011DC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000011E0   ........           LDR      R1,??DataTable1014  ;; _HL
   \   000011E4   020080E3           ORR      R0,R0,#0x2
   \   000011E8   59FCFFEA           B        ??execute_id_cb_11
   4295          		case 205:	/* SET 1,L */
   4296          		{ xL( op = set( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_164:
   \   000011EC   ........           LDR      R0,??DataTable1030  ;; mem
   \   000011F0   000090E5           LDR      R0,[R0, #+0]
   \   000011F4   004081E0           ADD      R4,R1,R0
   \   000011F8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000011FC   ........           LDR      R1,??DataTable1014  ;; _HL
   \   00001200   020080E3           ORR      R0,R0,#0x2
   \   00001204   5EFCFFEA           B        ??execute_id_cb_13
   4297          		case 206:	/* SET 1,(HL) */
   4298          		{ pokeb( z, set( 0x02, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_165:
   \   00001208   ........           LDR      R0,??DataTable1030  ;; mem
   \   0000120C   000090E5           LDR      R0,[R0, #+0]
   \   00001210   004081E0           ADD      R4,R1,R0
   \   00001214   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001218   020080E3           ORR      R0,R0,#0x2
   \   0000121C   5CFCFFEA           B        ??execute_id_cb_3
   4299          		case 207:	/* SET 1,A */
   4300          		{ xA( op = set( 0x02, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_166:
   \   00001220   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001224   000090E5           LDR      R0,[R0, #+0]
   \   00001228   004081E0           ADD      R4,R1,R0
   \   0000122C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001230   021080E3           ORR      R1,R0,#0x2
   \   00001234   ........           LDR      R0,??DataTable1018  ;; _A
   \   00001238   2DFEFFEA           B        ??execute_id_cb_92
   4301          
   4302          		case 208:	/* SET 2,B */
   4303          		{ xB( op = set( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_167:
   \   0000123C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001240   000090E5           LDR      R0,[R0, #+0]
   \   00001244   004081E0           ADD      R4,R1,R0
   \   00001248   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000124C   041080E3           ORR      R1,R0,#0x4
   \   00001250   1CFEFFEA           B        ??execute_id_cb_94
   4304          		case 209:	/* SET 2,C */
   4305          		{ xC( op = set( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_168:
   \   00001254   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001258   000090E5           LDR      R0,[R0, #+0]
   \   0000125C   004081E0           ADD      R4,R1,R0
   \   00001260   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001264   041080E3           ORR      R1,R0,#0x4
   \   00001268   20FEFFEA           B        ??execute_id_cb_96
   4306          		case 210:	/* SET 2,D */
   4307          		{ xD( op = set( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_169:
   \   0000126C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001270   000090E5           LDR      R0,[R0, #+0]
   \   00001274   004081E0           ADD      R4,R1,R0
   \   00001278   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000127C   040080E3           ORR      R0,R0,#0x4
   \   00001280   32FCFFEA           B        ??execute_id_cb_6
   4308          		case 211:	/* SET 2,E */
   4309          		{ xE( op = set( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_170:
   \   00001284   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001288   000090E5           LDR      R0,[R0, #+0]
   \   0000128C   004081E0           ADD      R4,R1,R0
   \   00001290   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001294   ........           LDR      R1,??DataTable1015  ;; _DE
   \   00001298   040080E3           ORR      R0,R0,#0x4
   \   0000129C   38FCFFEA           B        ??execute_id_cb_13
   4310          		case 212:	/* SET 2,H */
   4311          		{ xH( op = set( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_171:
   \   000012A0   ........           LDR      R0,??DataTable1030  ;; mem
   \   000012A4   000090E5           LDR      R0,[R0, #+0]
   \   000012A8   004081E0           ADD      R4,R1,R0
   \   000012AC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000012B0   ........           LDR      R1,??DataTable1014  ;; _HL
   \   000012B4   040080E3           ORR      R0,R0,#0x4
   \   000012B8   25FCFFEA           B        ??execute_id_cb_11
   4312          		case 213:	/* SET 2,L */
   4313          		{ xL( op = set( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_172:
   \   000012BC   ........           LDR      R0,??DataTable1030  ;; mem
   \   000012C0   000090E5           LDR      R0,[R0, #+0]
   \   000012C4   004081E0           ADD      R4,R1,R0
   \   000012C8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000012CC   ........           LDR      R1,??DataTable1014  ;; _HL
   \   000012D0   040080E3           ORR      R0,R0,#0x4
   \   000012D4   2AFCFFEA           B        ??execute_id_cb_13
   4314          		case 214:	/* SET 2,(HL) */
   4315          		{ pokeb( z, set( 0x04, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_173:
   \   000012D8   ........           LDR      R0,??DataTable1030  ;; mem
   \   000012DC   000090E5           LDR      R0,[R0, #+0]
   \   000012E0   004081E0           ADD      R4,R1,R0
   \   000012E4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000012E8   040080E3           ORR      R0,R0,#0x4
   \   000012EC   28FCFFEA           B        ??execute_id_cb_3
   4316          		case 215:	/* SET 2,A */
   4317          		{ xA( op = set( 0x04, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_174:
   \   000012F0   ........           LDR      R0,??DataTable1030  ;; mem
   \   000012F4   000090E5           LDR      R0,[R0, #+0]
   \   000012F8   004081E0           ADD      R4,R1,R0
   \   000012FC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001300   041080E3           ORR      R1,R0,#0x4
   \   00001304   ........           LDR      R0,??DataTable1018  ;; _A
   \   00001308   F9FDFFEA           B        ??execute_id_cb_92
   4318          
   4319          		case 216:	/* SET 3,B */
   4320          		{ xB( op = set( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_175:
   \   0000130C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001310   000090E5           LDR      R0,[R0, #+0]
   \   00001314   004081E0           ADD      R4,R1,R0
   \   00001318   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000131C   081080E3           ORR      R1,R0,#0x8
   \   00001320   E8FDFFEA           B        ??execute_id_cb_94
   4321          		case 217:	/* SET 3,C */
   4322          		{ xC( op = set( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_176:
   \   00001324   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001328   000090E5           LDR      R0,[R0, #+0]
   \   0000132C   004081E0           ADD      R4,R1,R0
   \   00001330   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001334   081080E3           ORR      R1,R0,#0x8
   \   00001338   ECFDFFEA           B        ??execute_id_cb_96
   4323          		case 218:	/* SET 3,D */
   4324          		{ xD( op = set( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_177:
   \   0000133C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001340   000090E5           LDR      R0,[R0, #+0]
   \   00001344   004081E0           ADD      R4,R1,R0
   \   00001348   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000134C   080080E3           ORR      R0,R0,#0x8
   \   00001350   FEFBFFEA           B        ??execute_id_cb_6
   4325          		case 219:	/* SET 3,E */
   4326          		{ xE( op = set( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_178:
   \   00001354   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001358   000090E5           LDR      R0,[R0, #+0]
   \   0000135C   004081E0           ADD      R4,R1,R0
   \   00001360   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001364   ........           LDR      R1,??DataTable1015  ;; _DE
   \   00001368   080080E3           ORR      R0,R0,#0x8
   \   0000136C   04FCFFEA           B        ??execute_id_cb_13
   4327          		case 220:	/* SET 3,H */
   4328          		{ xH( op = set( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_179:
   \   00001370   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001374   000090E5           LDR      R0,[R0, #+0]
   \   00001378   004081E0           ADD      R4,R1,R0
   \   0000137C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001380   ........           LDR      R1,??DataTable1014  ;; _HL
   \   00001384   080080E3           ORR      R0,R0,#0x8
   \   00001388   F1FBFFEA           B        ??execute_id_cb_11
   4329          		case 221:	/* SET 3,L */
   4330          		{ xL( op = set( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_180:
   \   0000138C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001390   000090E5           LDR      R0,[R0, #+0]
   \   00001394   004081E0           ADD      R4,R1,R0
   \   00001398   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000139C   ........           LDR      R1,??DataTable1014  ;; _HL
   \   000013A0   080080E3           ORR      R0,R0,#0x8
   \   000013A4   F6FBFFEA           B        ??execute_id_cb_13
   4331          		case 222:	/* SET 3,(HL) */
   4332          		{ pokeb( z, set( 0x08, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_181:
   \   000013A8   ........           LDR      R0,??DataTable1030  ;; mem
   \   000013AC   000090E5           LDR      R0,[R0, #+0]
   \   000013B0   004081E0           ADD      R4,R1,R0
   \   000013B4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000013B8   080080E3           ORR      R0,R0,#0x8
   \   000013BC   F4FBFFEA           B        ??execute_id_cb_3
   4333          		case 223:	/* SET 3,A */
   4334          		{ xA( op = set( 0x08, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_182:
   \   000013C0   ........           LDR      R0,??DataTable1030  ;; mem
   \   000013C4   000090E5           LDR      R0,[R0, #+0]
   \   000013C8   004081E0           ADD      R4,R1,R0
   \   000013CC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000013D0   081080E3           ORR      R1,R0,#0x8
   \   000013D4   ........           LDR      R0,??DataTable1018  ;; _A
   \   000013D8   C5FDFFEA           B        ??execute_id_cb_92
   4335          
   4336          		case 224:	/* SET 4,B */
   4337          		{ xB( op = set( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_183:
   \   000013DC   ........           LDR      R0,??DataTable1030  ;; mem
   \   000013E0   000090E5           LDR      R0,[R0, #+0]
   \   000013E4   004081E0           ADD      R4,R1,R0
   \   000013E8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000013EC   101080E3           ORR      R1,R0,#0x10
   \   000013F0   B4FDFFEA           B        ??execute_id_cb_94
   4338          		case 225:	/* SET 4,C */
   4339          		{ xC( op = set( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_184:
   \   000013F4   ........           LDR      R0,??DataTable1030  ;; mem
   \   000013F8   000090E5           LDR      R0,[R0, #+0]
   \   000013FC   004081E0           ADD      R4,R1,R0
   \   00001400   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001404   101080E3           ORR      R1,R0,#0x10
   \   00001408   B8FDFFEA           B        ??execute_id_cb_96
   4340          		case 226:	/* SET 4,D */
   4341          		{ xD( op = set( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_185:
   \   0000140C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001410   000090E5           LDR      R0,[R0, #+0]
   \   00001414   004081E0           ADD      R4,R1,R0
   \   00001418   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000141C   100080E3           ORR      R0,R0,#0x10
   \   00001420   CAFBFFEA           B        ??execute_id_cb_6
   4342          		case 227:	/* SET 4,E */
   4343          		{ xE( op = set( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_186:
   \   00001424   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001428   000090E5           LDR      R0,[R0, #+0]
   \   0000142C   004081E0           ADD      R4,R1,R0
   \   00001430   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001434   ........           LDR      R1,??DataTable1015  ;; _DE
   \   00001438   100080E3           ORR      R0,R0,#0x10
   \   0000143C   D0FBFFEA           B        ??execute_id_cb_13
   4344          		case 228:	/* SET 4,H */
   4345          		{ xH( op = set( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_187:
   \   00001440   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001444   000090E5           LDR      R0,[R0, #+0]
   \   00001448   004081E0           ADD      R4,R1,R0
   \   0000144C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001450   ........           LDR      R1,??DataTable1014  ;; _HL
   \   00001454   100080E3           ORR      R0,R0,#0x10
   \   00001458   BDFBFFEA           B        ??execute_id_cb_11
   4346          		case 229:	/* SET 4,L */
   4347          		{ xL( op = set( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_188:
   \   0000145C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001460   000090E5           LDR      R0,[R0, #+0]
   \   00001464   004081E0           ADD      R4,R1,R0
   \   00001468   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000146C   ........           LDR      R1,??DataTable1014  ;; _HL
   \   00001470   100080E3           ORR      R0,R0,#0x10
   \   00001474   C2FBFFEA           B        ??execute_id_cb_13
   4348          		case 230:	/* SET 4,(HL) */
   4349          		{ pokeb( z, set( 0x10, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_189:
   \   00001478   ........           LDR      R0,??DataTable1030  ;; mem
   \   0000147C   000090E5           LDR      R0,[R0, #+0]
   \   00001480   004081E0           ADD      R4,R1,R0
   \   00001484   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001488   100080E3           ORR      R0,R0,#0x10
   \   0000148C   C0FBFFEA           B        ??execute_id_cb_3
   4350          		case 231:	/* SET 4,A */
   4351          		{ xA( op = set( 0x10, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_190:
   \   00001490   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001494   000090E5           LDR      R0,[R0, #+0]
   \   00001498   004081E0           ADD      R4,R1,R0
   \   0000149C   0000D4E5           LDRB     R0,[R4, #+0]
   \   000014A0   101080E3           ORR      R1,R0,#0x10
   \   000014A4   ........           LDR      R0,??DataTable1018  ;; _A
   \   000014A8   91FDFFEA           B        ??execute_id_cb_92
   4352          
   4353          		case 232:	/* SET 5,B */
   4354          		{ xB( op = set( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_191:
   \   000014AC   ........           LDR      R0,??DataTable1030  ;; mem
   \   000014B0   000090E5           LDR      R0,[R0, #+0]
   \   000014B4   004081E0           ADD      R4,R1,R0
   \   000014B8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000014BC   201080E3           ORR      R1,R0,#0x20
   \   000014C0   80FDFFEA           B        ??execute_id_cb_94
   4355          		case 233:	/* SET 5,C */
   4356          		{ xC( op = set( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_192:
   \   000014C4   ........           LDR      R0,??DataTable1030  ;; mem
   \   000014C8   000090E5           LDR      R0,[R0, #+0]
   \   000014CC   004081E0           ADD      R4,R1,R0
   \   000014D0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000014D4   201080E3           ORR      R1,R0,#0x20
   \   000014D8   84FDFFEA           B        ??execute_id_cb_96
   4357          		case 234:	/* SET 5,D */
   4358          		{ xD( op = set( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_193:
   \   000014DC   ........           LDR      R0,??DataTable1030  ;; mem
   \   000014E0   000090E5           LDR      R0,[R0, #+0]
   \   000014E4   004081E0           ADD      R4,R1,R0
   \   000014E8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000014EC   200080E3           ORR      R0,R0,#0x20
   \   000014F0   96FBFFEA           B        ??execute_id_cb_6
   4359          		case 235:	/* SET 5,E */
   4360          		{ xE( op = set( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_194:
   \   000014F4   ........           LDR      R0,??DataTable1030  ;; mem
   \   000014F8   000090E5           LDR      R0,[R0, #+0]
   \   000014FC   004081E0           ADD      R4,R1,R0
   \   00001500   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001504   ........           LDR      R1,??DataTable1015  ;; _DE
   \   00001508   200080E3           ORR      R0,R0,#0x20
   \   0000150C   9CFBFFEA           B        ??execute_id_cb_13
   4361          		case 236:	/* SET 5,H */
   4362          		{ xH( op = set( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_195:
   \   00001510   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001514   000090E5           LDR      R0,[R0, #+0]
   \   00001518   004081E0           ADD      R4,R1,R0
   \   0000151C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001520   ........           LDR      R1,??DataTable1014  ;; _HL
   \   00001524   200080E3           ORR      R0,R0,#0x20
   \   00001528   89FBFFEA           B        ??execute_id_cb_11
   4363          		case 237:	/* SET 5,L */
   4364          		{ xL( op = set( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_196:
   \   0000152C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001530   000090E5           LDR      R0,[R0, #+0]
   \   00001534   004081E0           ADD      R4,R1,R0
   \   00001538   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000153C   ........           LDR      R1,??DataTable1014  ;; _HL
   \   00001540   200080E3           ORR      R0,R0,#0x20
   \   00001544   8EFBFFEA           B        ??execute_id_cb_13
   4365          		case 238:	/* SET 5,(HL) */
   4366          		{ pokeb( z, set( 0x20, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_197:
   \   00001548   ........           LDR      R0,??DataTable1030  ;; mem
   \   0000154C   000090E5           LDR      R0,[R0, #+0]
   \   00001550   004081E0           ADD      R4,R1,R0
   \   00001554   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001558   200080E3           ORR      R0,R0,#0x20
   \   0000155C   8CFBFFEA           B        ??execute_id_cb_3
   4367          		case 239:	/* SET 5,A */
   4368          		{ xA( op = set( 0x20, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_198:
   \   00001560   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001564   000090E5           LDR      R0,[R0, #+0]
   \   00001568   004081E0           ADD      R4,R1,R0
   \   0000156C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001570   201080E3           ORR      R1,R0,#0x20
   \   00001574   ........           LDR      R0,??DataTable1018  ;; _A
   \   00001578   5DFDFFEA           B        ??execute_id_cb_92
   4369          
   4370          		case 240:	/* SET 6,B */
   4371          		{ xB( op = set( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_199:
   \   0000157C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001580   000090E5           LDR      R0,[R0, #+0]
   \   00001584   004081E0           ADD      R4,R1,R0
   \   00001588   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000158C   401080E3           ORR      R1,R0,#0x40
   \   00001590   4CFDFFEA           B        ??execute_id_cb_94
   4372          		case 241:	/* SET 6,C */
   4373          		{ xC( op = set( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_200:
   \   00001594   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001598   000090E5           LDR      R0,[R0, #+0]
   \   0000159C   004081E0           ADD      R4,R1,R0
   \   000015A0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000015A4   401080E3           ORR      R1,R0,#0x40
   \   000015A8   50FDFFEA           B        ??execute_id_cb_96
   4374          		case 242:	/* SET 6,D */
   4375          		{ xD( op = set( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_201:
   \   000015AC   ........           LDR      R0,??DataTable1030  ;; mem
   \   000015B0   000090E5           LDR      R0,[R0, #+0]
   \   000015B4   004081E0           ADD      R4,R1,R0
   \   000015B8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000015BC   400080E3           ORR      R0,R0,#0x40
   \   000015C0   62FBFFEA           B        ??execute_id_cb_6
   4376          		case 243:	/* SET 6,E */
   4377          		{ xE( op = set( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_202:
   \   000015C4   ........           LDR      R0,??DataTable1030  ;; mem
   \   000015C8   000090E5           LDR      R0,[R0, #+0]
   \   000015CC   004081E0           ADD      R4,R1,R0
   \   000015D0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000015D4   ........           LDR      R1,??DataTable1015  ;; _DE
   \   000015D8   400080E3           ORR      R0,R0,#0x40
   \   000015DC   68FBFFEA           B        ??execute_id_cb_13
   4378          		case 244:	/* SET 6,H */
   4379          		{ xH( op = set( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_203:
   \   000015E0   ........           LDR      R0,??DataTable1030  ;; mem
   \   000015E4   000090E5           LDR      R0,[R0, #+0]
   \   000015E8   004081E0           ADD      R4,R1,R0
   \   000015EC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000015F0   ........           LDR      R1,??DataTable1014  ;; _HL
   \   000015F4   400080E3           ORR      R0,R0,#0x40
   \   000015F8   55FBFFEA           B        ??execute_id_cb_11
   4380          		case 245:	/* SET 6,L */
   4381          		{ xL( op = set( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_204:
   \   000015FC   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001600   000090E5           LDR      R0,[R0, #+0]
   \   00001604   004081E0           ADD      R4,R1,R0
   \   00001608   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000160C   ........           LDR      R1,??DataTable1014  ;; _HL
   \   00001610   400080E3           ORR      R0,R0,#0x40
   \   00001614   5AFBFFEA           B        ??execute_id_cb_13
   4382          		case 246:	/* SET 6,(HL) */
   4383          		{ pokeb( z, set( 0x40, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_205:
   \   00001618   ........           LDR      R0,??DataTable1030  ;; mem
   \   0000161C   000090E5           LDR      R0,[R0, #+0]
   \   00001620   004081E0           ADD      R4,R1,R0
   \   00001624   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001628   400080E3           ORR      R0,R0,#0x40
   \   0000162C   58FBFFEA           B        ??execute_id_cb_3
   4384          		case 247:	/* SET 6,A */
   4385          		{ xA( op = set( 0x40, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_206:
   \   00001630   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001634   000090E5           LDR      R0,[R0, #+0]
   \   00001638   004081E0           ADD      R4,R1,R0
   \   0000163C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001640   401080E3           ORR      R1,R0,#0x40
   \   00001644   ........           LDR      R0,??DataTable1018  ;; _A
   \   00001648   29FDFFEA           B        ??execute_id_cb_92
   4386          
   4387          		case 248:	/* SET 7,B */
   4388          		{ xB( op = set( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_207:
   \   0000164C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001650   000090E5           LDR      R0,[R0, #+0]
   \   00001654   004081E0           ADD      R4,R1,R0
   \   00001658   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000165C   801080E3           ORR      R1,R0,#0x80
   \   00001660   18FDFFEA           B        ??execute_id_cb_94
   4389          		case 249:	/* SET 7,C */
   4390          		{ xC( op = set( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_208:
   \   00001664   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001668   000090E5           LDR      R0,[R0, #+0]
   \   0000166C   004081E0           ADD      R4,R1,R0
   \   00001670   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001674   801080E3           ORR      R1,R0,#0x80
   \   00001678   1CFDFFEA           B        ??execute_id_cb_96
   4391          		case 250:	/* SET 7,D */
   4392          		{ xD( op = set( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_209:
   \   0000167C   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001680   000090E5           LDR      R0,[R0, #+0]
   \   00001684   004081E0           ADD      R4,R1,R0
   \   00001688   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000168C   800080E3           ORR      R0,R0,#0x80
   \   00001690   2EFBFFEA           B        ??execute_id_cb_6
   4393          		case 251:	/* SET 7,E */
   4394          		{ xE( op = set( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_210:
   \   00001694   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001698   000090E5           LDR      R0,[R0, #+0]
   \   0000169C   004081E0           ADD      R4,R1,R0
   \   000016A0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000016A4   ........           LDR      R1,??DataTable1015  ;; _DE
   \   000016A8   800080E3           ORR      R0,R0,#0x80
   \   000016AC   34FBFFEA           B        ??execute_id_cb_13
   4395          		case 252:	/* SET 7,H */
   4396          		{ xH( op = set( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_211:
   \   000016B0   ........           LDR      R0,??DataTable1030  ;; mem
   \   000016B4   000090E5           LDR      R0,[R0, #+0]
   \   000016B8   004081E0           ADD      R4,R1,R0
   \   000016BC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000016C0   ........           LDR      R1,??DataTable1014  ;; _HL
   \   000016C4   800080E3           ORR      R0,R0,#0x80
   \   000016C8   21FBFFEA           B        ??execute_id_cb_11
   4397          		case 253:	/* SET 7,L */
   4398          		{ xL( op = set( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_212:
   \   000016CC   ........           LDR      R0,??DataTable1030  ;; mem
   \   000016D0   000090E5           LDR      R0,[R0, #+0]
   \   000016D4   004081E0           ADD      R4,R1,R0
   \   000016D8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000016DC   ........           LDR      R1,??DataTable1014  ;; _HL
   \   000016E0   800080E3           ORR      R0,R0,#0x80
   \   000016E4   26FBFFEA           B        ??execute_id_cb_13
   4399          		case 254:	/* SET 7,(HL) */
   4400          		{ pokeb( z, set( 0x80, peekb( z ) ) ); return; }
   \                     ??execute_id_cb_213:
   \   000016E8   ........           LDR      R0,??DataTable1030  ;; mem
   \   000016EC   000090E5           LDR      R0,[R0, #+0]
   \   000016F0   004081E0           ADD      R4,R1,R0
   \   000016F4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000016F8   800080E3           ORR      R0,R0,#0x80
   \   000016FC   24FBFFEA           B        ??execute_id_cb_3
   4401          		case 255:	/* SET 7,A */
   4402          		{ xA( op = set( 0x80, peekb( z ) ) ); pokeb( z, op ); return; }
   \                     ??execute_id_cb_214:
   \   00001700   ........           LDR      R0,??DataTable1030  ;; mem
   \   00001704   000090E5           LDR      R0,[R0, #+0]
   \   00001708   004081E0           ADD      R4,R1,R0
   \   0000170C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00001710   801080E3           ORR      R1,R0,#0x80
   \   00001714   ........           LDR      R0,??DataTable1018  ;; _A
   \   00001718   001080E5           STR      R1,[R0, #+0]
   \   0000171C   0010C4E5           STRB     R1,[R4, #+0]
   \                     ??execute_id_cb_215:
   \   00001720   1080BDE8           POP      {R4,PC}          ;; return
   4403          
   4404          		} // switch end
   4405          	}
   4406          
   4407          
   4408          
   4409          ////////////////////from spectrum

   \                                 In segment CODE, align 4, keep-with-next
   4410          	public void resetKeyboard() { for(int i=0;i<8;i++) keylines[i]=(byte)0xff;}
   \                     resetKeyboard:
   \   00000000   ........           LDR      R1,??DataTable983  ;; keylines
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   0020E0E1           MVN      R2,R0
   \                     ??resetKeyboard_0:
   \   0000000C   002181E7           STR      R2,[R1, +R0, LSL #+2]
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   080050E3           CMP      R0,#+8
   \   00000018   FBFFFFBA           BLT      ??resetKeyboard_0
   \   0000001C   1EFF2FE1           BX       LR               ;; return
   4411          

   \                                 In segment CODE, align 4, keep-with-next
   4412          	public int inb( int port ) {
   4413          		int res = 0xff, i, j;
   \                     inb:
   \   00000000   FF10A0E3           MOV      R1,#+255
   4414          		if ((port&1)==0) 
   \   00000004   010010E3           TST      R0,#0x1
   \   00000008   0900001A           BNE      ??inb_0
   4415            		  for(i=0,j=0x100;i<8;i++,j<<=1)
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   403FA0E3           MOV      R3,#+256
   4416          			if((port & j) == 0) res &= keylines[i]; 
   \                     ??inb_1:
   \   00000014   000013E1           TST      R3,R0
   \   00000018   ........           LDREQ    R12,??DataTable983  ;; keylines
   \   0000001C   8330A0E1           LSL      R3,R3,#+1
   \   00000020   02C19C07           LDREQ    R12,[R12, +R2, LSL #+2]
   \   00000024   012082E2           ADD      R2,R2,#+1
   \   00000028   01100C00           ANDEQ    R1,R12,R1
   \   0000002C   080052E3           CMP      R2,#+8
   \   00000030   F7FFFFBA           BLT      ??inb_1
   4417          		return(res);
   \                     ??inb_0:
   \   00000034   0100A0E1           MOV      R0,R1
   \   00000038   1EFF2FE1           BX       LR               ;; return
   4418          	}
   4419          	

   \                                 In segment CODE, align 4, keep-with-next
   4420          	public void outb( int port, int outByte, int tstates ) {
   \                     outb:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   4421          	  if((port & 2)==0 && (port&0x8000)==0){  
   \   00000008   0220A0E3           MOV      R2,#+2
   \   0000000C   802C82E3           ORR      R2,R2,#0x8000
   \   00000010   000012E1           TST      R2,R0
   \   00000014   2800001A           BNE      ??outb_0
   4422          	  //if((port==0x7ffd)){
   4423          	    if(fz128){
   \   00000018   ........           LDR      R0,??DataTable1062  ;; fz128
   \   0000001C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F081BD08           POPEQ    {R4-R8,PC}
   4424          	      if((pport&0x10)!=(outByte&0x10))
   \   00000028   ........           LDR      R6,??DataTable1061  ;; pport
   \   0000002C   ........           LDR      R5,??DataTable1030  ;; mem
   \   00000030   D000D6E1           LDRSB    R0,[R6, #+0]
   \   00000034   101004E2           AND      R1,R4,#0x10
   \   00000038   100000E2           AND      R0,R0,#0x10
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   0600000A           BEQ      ??outb_1
   4425                    memcpy(mem,mem+(((outByte & 0x10)==0)?rom128:rom48),rompage);
   \   00000044   000095E5           LDR      R0,[R5, #+0]
   \   00000048   100014E3           TST      R4,#0x10
   \   0000004C   B01BA003           MOVEQ    R1,#+180224
   \   00000050   A01BA013           MOVNE    R1,#+163840
   \   00000054   402CA0E3           MOV      R2,#+16384
   \   00000058   001081E0           ADD      R1,R1,R0
   \   0000005C   ........           _BLF     memcpy,??memcpy??rA
   \                     ??outb_1:
   \   00000060   D000D6E1           LDRSB    R0,[R6, #+0]
   \   00000064   072004E2           AND      R2,R4,#0x7
   \   00000068   071000E2           AND      R1,R0,#0x7
   \   0000006C   020051E1           CMP      R1,R2
   \   00000070   0F00000A           BEQ      ??outb_2
   4426          	        //System.arraycopy(mem,((outByte & 0x10)==0)?rom128:rom48,mem,0,rompage);
   4427          		  if((pport&7)!=(outByte&7)){
   4428                  memcpy(mem+zxpage[pport&7],mem+rombank,rompage);
   \   00000074   ........           LDR      R7,??DataTable1064  ;; zxpage
   \   00000078   003095E5           LDR      R3,[R5, #+0]
   \   0000007C   070000E2           AND      R0,R0,#0x7
   \   00000080   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   00000084   C08CA0E3           MOV      R8,#+49152
   \   00000088   402CA0E3           MOV      R2,#+16384
   \   0000008C   031088E0           ADD      R1,R8,R3
   \   00000090   030080E0           ADD      R0,R0,R3
   \   00000094   ........           _BLF     memcpy,??memcpy??rA
   4429          		    //System.arraycopy(mem,rombank,mem,zxpage[pport&7],rompage);//romstart+rompage*i
   4430                  memcpy(mem+rombank,mem+zxpage[outByte&7],rompage);
   \   00000098   000095E5           LDR      R0,[R5, #+0]
   \   0000009C   071004E2           AND      R1,R4,#0x7
   \   000000A0   011197E7           LDR      R1,[R7, +R1, LSL #+2]
   \   000000A4   402CA0E3           MOV      R2,#+16384
   \   000000A8   001081E0           ADD      R1,R1,R0
   \   000000AC   000088E0           ADD      R0,R8,R0
   \   000000B0   ........           _BLF     memcpy,??memcpy??rA
   4431          		    //System.arraycopy(mem,zxpage[outByte&7],mem,rombank,rompage);//romstart+rompage*j
   4432          		  }
   4433          		  pport=(byte)outByte;
   \                     ??outb_2:
   \   000000B4   0040C6E5           STRB     R4,[R6, #+0]
   \   000000B8   F081BDE8           POP      {R4-R8,PC}
   4434          		}
   4435           	  }else if((port&1)==0) newBorder=(outByte & 7);
   \                     ??outb_0:
   \   000000BC   010010E3           TST      R0,#0x1
   \   000000C0   ........           LDREQ    R0,??DataTable1075  ;; newBorder
   \   000000C4   07100402           ANDEQ    R1,R4,#0x7
   \   000000C8   00108005           STREQ    R1,[R0, #+0]
   4436          	}
   \   000000CC   F081BDE8           POP      {R4-R8,PC}       ;; return
   4437          	

   \                                 In segment CODE, align 4, keep-with-next
   4438            public boolean loadSNA(unsigned char *zx, int rombuf){// throws Exception {
   \                     loadSNA:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable1084  ;; zxfilesize
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   1F10A0E3           MOV      R1,#+31
   \   00000018   801B81E3           ORR      R1,R1,#0x20000
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   0300001A           BNE      ??loadSNA_0
   \   00000024   ........           LDR      R0,??DataTable1062  ;; fz128
   \   00000028   D000D0E1           LDRSB    R0,[R0, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   4439          		if(zxfilesize==131103 && !fz128) return false;//throw new Exception( "" );
   \   00000030   F08FBD08           POPEQ    {R4-R11,PC}
   4440          		memcpy(mem+16384,zx+rombuf+27,49152);
   \                     ??loadSNA_0:
   \   00000034   ........           LDR      R6,??DataTable1030  ;; mem
   4441              //System.arraycopy(zx,rombuf+27,mem,16384, 49152 );
   4442          		_I=(zx[rombuf]);
   4443          		_HL=( (zx[rombuf+1]) | ((zx[rombuf+2])<<8) );
   4444          		_DE=( (zx[rombuf+3]) | ((zx[rombuf+4])<<8) );
   \   00000038   ........           LDR      R9,??DataTable1015  ;; _DE
   4445          		xBC( (zx[rombuf+5]) | ((zx[rombuf+6])<<8) );
   \   0000003C   ........           LDR      R10,??DataTable1068  ;; _B
   \   00000040   ........           LDR      R11,??DataTable1067  ;; _C
   4446          		xAF( (zx[rombuf+7]) | ((zx[rombuf+8])<<8) );
   \   00000044   ........           LDR      R8,??DataTable1018  ;; _A
   \   00000048   040085E0           ADD      R0,R5,R4
   \   0000004C   1B1080E2           ADD      R1,R0,#+27
   \   00000050   000096E5           LDR      R0,[R6, #+0]
   \   00000054   C02CA0E3           MOV      R2,#+49152
   \   00000058   400C80E2           ADD      R0,R0,#+16384
   \   0000005C   ........           _BLF     memcpy,??memcpy??rA
   \   00000060   0410D5E7           LDRB     R1,[R5, +R4]
   \   00000064   ........           LDR      R0,??DataTable1073  ;; _I
   \   00000068   001080E5           STR      R1,[R0, #+0]
   \   0000006C   040085E0           ADD      R0,R5,R4
   \   00000070   017080E2           ADD      R7,R0,#+1
   \   00000074   0010D7E5           LDRB     R1,[R7, #+0]
   \   00000078   0120D7E5           LDRB     R2,[R7, #+1]
   \   0000007C   ........           LDR      R0,??DataTable1014  ;; _HL
   \   00000080   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000084   001080E5           STR      R1,[R0, #+0]
   \   00000088   0200D7E5           LDRB     R0,[R7, #+2]
   \   0000008C   0310D7E5           LDRB     R1,[R7, #+3]
   \   00000090   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000094   000089E5           STR      R0,[R9, #+0]
   \   00000098   0400D7E5           LDRB     R0,[R7, #+4]
   \   0000009C   0510D7E5           LDRB     R1,[R7, #+5]
   \   000000A0   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000000A4   4014A0E1           ASR      R1,R0,#+8
   \   000000A8   00108AE5           STR      R1,[R10, #+0]
   \   000000AC   FF0000E2           AND      R0,R0,#0xFF
   \   000000B0   00008BE5           STR      R0,[R11, #+0]
   \   000000B4   0600D7E5           LDRB     R0,[R7, #+6]
   \   000000B8   0710D7E5           LDRB     R1,[R7, #+7]
   \   000000BC   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000000C0   4014A0E1           ASR      R1,R0,#+8
   \   000000C4   001088E5           STR      R1,[R8, #+0]
   \   000000C8   FF0000E2           AND      R0,R0,#0xFF
   \   000000CC   ........           BL       xF
   4447          		exx();
   \   000000D0   ........           BL       exx
   4448          		ex_af_af();
   \   000000D4   ........           BL       ex_af_af
   4449          		_HL=( (zx[rombuf+9])  | ((zx[rombuf+10])<<8) );
   \   000000D8   0810D7E5           LDRB     R1,[R7, #+8]
   \   000000DC   0920D7E5           LDRB     R2,[R7, #+9]
   \   000000E0   ........           LDR      R0,??DataTable1014  ;; _HL
   \   000000E4   021481E1           ORR      R1,R1,R2, LSL #+8
   \   000000E8   001080E5           STR      R1,[R0, #+0]
   4450          		_DE=( (zx[rombuf+11]) | ((zx[rombuf+12])<<8) );
   \   000000EC   0A00D7E5           LDRB     R0,[R7, #+10]
   \   000000F0   0B10D7E5           LDRB     R1,[R7, #+11]
   \   000000F4   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000000F8   000089E5           STR      R0,[R9, #+0]
   4451          		xBC( (zx[rombuf+13]) | ((zx[rombuf+14])<<8) );
   \   000000FC   0C00D7E5           LDRB     R0,[R7, #+12]
   \   00000100   0D10D7E5           LDRB     R1,[R7, #+13]
   4452          		_IY=( (zx[rombuf+15]) | ((zx[rombuf+16])<<8) );
   4453          		_IX=( (zx[rombuf+17]) | ((zx[rombuf+18])<<8) );
   4454          		if ((( zx[rombuf+19])& 0x04)!= 0 ) xIFF2( true );	else xIFF2( false );
   \   00000104   ........           LDR      R9,??DataTable1098  ;; _IFF2
   \   00000108   010480E1           ORR      R0,R0,R1, LSL #+8
   \   0000010C   4014A0E1           ASR      R1,R0,#+8
   \   00000110   00108AE5           STR      R1,[R10, #+0]
   4455          		_R=( zx[rombuf+20] );
   \   00000114   ........           LDR      R10,??DataTable1093  ;; _R
   \   00000118   FF0000E2           AND      R0,R0,#0xFF
   \   0000011C   00008BE5           STR      R0,[R11, #+0]
   \   00000120   0E10D7E5           LDRB     R1,[R7, #+14]
   \   00000124   0F20D7E5           LDRB     R2,[R7, #+15]
   \   00000128   ........           LDR      R0,??DataTable1094  ;; _IY
   \   0000012C   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000130   001080E5           STR      R1,[R0, #+0]
   \   00000134   1010D7E5           LDRB     R1,[R7, #+16]
   \   00000138   1120D7E5           LDRB     R2,[R7, #+17]
   \   0000013C   ........           LDR      R0,??DataTable1095  ;; _IX
   \   00000140   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000144   001080E5           STR      R1,[R0, #+0]
   \   00000148   1200D7E5           LDRB     R0,[R7, #+18]
   \   0000014C   040010E3           TST      R0,#0x4
   \   00000150   0100A013           MOVNE    R0,#+1
   \   00000154   0000A003           MOVEQ    R0,#+0
   \   00000158   0000C9E5           STRB     R0,[R9, #+0]
   \   0000015C   1300D7E5           LDRB     R0,[R7, #+19]
   \   00000160   00008AE5           STR      R0,[R10, #+0]
   4456          		xAF( (zx[rombuf+21]) | ((zx[rombuf+22])<<8) );
   \   00000164   1400D7E5           LDRB     R0,[R7, #+20]
   \   00000168   1510D7E5           LDRB     R1,[R7, #+21]
   \   0000016C   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000170   4014A0E1           ASR      R1,R0,#+8
   \   00000174   001088E5           STR      R1,[R8, #+0]
   \   00000178   FF0000E2           AND      R0,R0,#0xFF
   \   0000017C   ........           BL       xF
   4457          		_SP=(( zx[rombuf+23]) | ((zx[rombuf+24])<<8) );
   \   00000180   1610D7E5           LDRB     R1,[R7, #+22]
   \   00000184   1720D7E5           LDRB     R2,[R7, #+23]
   \   00000188   ........           LDR      R0,??DataTable1085  ;; _SP
   \   0000018C   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000190   001080E5           STR      R1,[R0, #+0]
   4458          		switch( zx[rombuf+25]) {
   \   00000194   1800D7E5           LDRB     R0,[R7, #+24]
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   0200000A           BEQ      ??loadSNA_1
   \   000001A0   010050E2           SUBS     R0,R0,#+1
   \   000001A4   0200000A           BEQ      ??loadSNA_2
   \   000001A8   030000EA           B        ??loadSNA_3
   4459          		case 0:	xIM( IM0 );	break;
   \                     ??loadSNA_1:
   \   000001AC   ........           LDR      R0,??DataTable1097  ;; IM0
   \   000001B0   020000EA           B        ??loadSNA_4
   4460          		case 1:	xIM( IM1 );	break;
   \                     ??loadSNA_2:
   \   000001B4   ........           LDR      R0,??DataTable1082  ;; IM1
   \   000001B8   000000EA           B        ??loadSNA_4
   4461          		default:xIM( IM2 );	break;
   \                     ??loadSNA_3:
   \   000001BC   ........           LDR      R0,??DataTable1059  ;; IM2
   \                     ??loadSNA_4:
   \   000001C0   ........           LDR      R1,??DataTable1099  ;; _IM
   \   000001C4   000090E5           LDR      R0,[R0, #+0]
   4462          		}
   4463          		outb( 254, zx[rombuf+26], 0 ); // border
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   000081E5           STR      R0,[R1, #+0]
   \   000001D0   1910D7E5           LDRB     R1,[R7, #+25]
   4464          		xIFF1( IFF2() );
   4465          		if(zxfilesize==49179){
   \   000001D4   ........           LDR      R7,??DataTable1091  ;; _PC
   \   000001D8   FE00A0E3           MOV      R0,#+254
   \   000001DC   ........           BL       outb
   \   000001E0   D010D9E1           LDRSB    R1,[R9, #+0]
   \   000001E4   ........           LDR      R0,??DataTable1096  ;; _IFF1
   \   000001E8   0010C0E5           STRB     R1,[R0, #+0]
   \   000001EC   ........           LDR      R1,??DataTable1084  ;; zxfilesize
   \   000001F0   1B00A0E3           MOV      R0,#+27
   \   000001F4   001091E5           LDR      R1,[R1, #+0]
   \   000001F8   C00C80E3           ORR      R0,R0,#0xC000
   \   000001FC   000051E1           CMP      R1,R0
   \   00000200   0600001A           BNE      ??loadSNA_5
   4466          		  _R +=( 2 );
   \   00000204   00009AE5           LDR      R0,[R10, #+0]
   \   00000208   020080E2           ADD      R0,R0,#+2
   \   0000020C   00008AE5           STR      R0,[R10, #+0]
   4467          		  poppc();
   \   00000210   ........           _BLF     popw,??popw??rA
   \   00000214   000087E5           STR      R0,[R7, #+0]
   \   00000218   0100A0E3           MOV      R0,#+1
   \   0000021C   F08FBDE8           POP      {R4-R11,PC}
   4468          		}else{ //128k
   4469          		  _PC=( (zx[rombuf+49179]) | ((zx[rombuf+49180])<<8) );
   4470          		  pport=zx[rombuf+49181];
   4471                memcpy(mem+zxpage[pport&7],mem+0xc000,rompage);
   \                     ??loadSNA_5:
   \   00000220   ........           LDR      R8,??DataTable1064  ;; zxpage
   \   00000224   041085E0           ADD      R1,R5,R4
   \   00000228   015080E0           ADD      R5,R0,R1
   \   0000022C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000230   0110D5E5           LDRB     R1,[R5, #+1]
   \   00000234   402CA0E3           MOV      R2,#+16384
   4472          		  //System.arraycopy(mem,0xc000,mem,zxpage[pport&7],rompage);
   4473          		  trdos=zx[rombuf+49182];
   4474          		  int off=49183;
   4475          		  for(int i=0;i<8;i++)
   \   00000238   0090A0E3           MOV      R9,#+0
   \   0000023C   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000240   000087E5           STR      R0,[R7, #+0]
   \   00000244   D200D5E1           LDRSB    R0,[R5, #+2]
   \   00000248   ........           LDR      R7,??DataTable1061  ;; pport
   \   0000024C   0000C7E5           STRB     R0,[R7, #+0]
   \   00000250   D030D7E1           LDRSB    R3,[R7, #+0]
   \   00000254   000096E5           LDR      R0,[R6, #+0]
   \   00000258   C01C80E2           ADD      R1,R0,#+49152
   \   0000025C   073003E2           AND      R3,R3,#0x7
   \   00000260   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   00000264   000083E0           ADD      R0,R3,R0
   \   00000268   ........           _BLF     memcpy,??memcpy??rA
   \   0000026C   D310D5E1           LDRSB    R1,[R5, #+3]
   \   00000270   ........           LDR      R0,??DataTable1033  ;; trdos
   \   00000274   1F50A0E3           MOV      R5,#+31
   \   00000278   0010C0E5           STRB     R1,[R0, #+0]
   \   0000027C   C05C85E3           ORR      R5,R5,#0xC000
   \   00000280   020000EA           B        ??loadSNA_6
   4476          		    if(i!=2 && i!=5 && i!=(pport&7)){
   \                     ??loadSNA_7:
   \   00000284   020059E3           CMP      R9,#+2
   \   00000288   05005913           CMPNE    R9,#+5
   \   0000028C   0A00000A           BEQ      ??loadSNA_8
   \                     ??loadSNA_6:
   \   00000290   D000D7E1           LDRSB    R0,[R7, #+0]
   \   00000294   070000E2           AND      R0,R0,#0x7
   \   00000298   000059E1           CMP      R9,R0
   \   0000029C   0600000A           BEQ      ??loadSNA_8
   4477                    memcpy(mem+zxpage[i],zx+off,rompage);
   \   000002A0   090198E7           LDR      R0,[R8, +R9, LSL #+2]
   \   000002A4   003096E5           LDR      R3,[R6, #+0]
   \   000002A8   402CA0E3           MOV      R2,#+16384
   \   000002AC   041085E0           ADD      R1,R5,R4
   \   000002B0   030080E0           ADD      R0,R0,R3
   \   000002B4   ........           _BLF     memcpy,??memcpy??rA
   4478          		      //System.arraycopy(zx,off,mem,zxpage[i],rompage);
   4479          		      off+=rompage;
   \   000002B8   405C85E2           ADD      R5,R5,#+16384
   4480          		    }
   \                     ??loadSNA_8:
   \   000002BC   019089E2           ADD      R9,R9,#+1
   \   000002C0   080059E3           CMP      R9,#+8
   \   000002C4   EEFFFFBA           BLT      ??loadSNA_7
   4481                memcpy(mem,mem+(((pport & 0x10)==0)?rom128:rom48),rompage);
   \   000002C8   0000D7E5           LDRB     R0,[R7, #+0]
   \   000002CC   402CA0E3           MOV      R2,#+16384
   \   000002D0   100010E3           TST      R0,#0x10
   \   000002D4   000096E5           LDR      R0,[R6, #+0]
   \   000002D8   B01BA003           MOVEQ    R1,#+180224
   \   000002DC   A01BA013           MOVNE    R1,#+163840
   \   000002E0   001081E0           ADD      R1,R1,R0
   \   000002E4   ........           _BLF     memcpy,??memcpy??rA
   4482          		  //System.arraycopy(mem,((pport & 0x10)==0)?rom128:rom48,mem,0,rompage);
   4483          		}
   4484              return true;
   \   000002E8   0100A0E3           MOV      R0,#+1
   \   000002EC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   4485          	}
   4486          	

   \                                 In segment CODE, align 4, keep-with-next
   4487          	public void reg(int val, unsigned char *zx, int pos){
   4488          	  zx[pos]=(byte)val;
   \                     reg:
   \   00000000   0100C2E7           STRB     R0,[R2, +R1]
   4489          	  zx[pos+1]=(byte)(val>>8);
   \   00000004   011082E0           ADD      R1,R2,R1
   \   00000008   4004A0E1           ASR      R0,R0,#+8
   \   0000000C   0100C1E5           STRB     R0,[R1, #+1]
   4490          	}
   \   00000010   1EFF2FE1           BX       LR               ;; return
   4491          

   \                                 In segment CODE, align 4, keep-with-next
   4492          	public void saveSNA(unsigned char *zx, int rombuf){
   \                     saveSNA:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   4493          		exx();
   4494          		ex_af_af();
   4495          		zx[rombuf]=(byte)_I;
   4496          		reg(_HL,zx,rombuf+1);
   \   00000008   ........           LDR      R8,??DataTable1014  ;; _HL
   4497          		reg(_DE,zx,rombuf+3);
   \   0000000C   ........           LDR      R9,??DataTable1015  ;; _DE
   4498          		reg(BC(),zx,rombuf+5);
   \   00000010   ........           LDR      R10,??DataTable1067  ;; _C
   \   00000014   ........           LDR      R11,??DataTable1068  ;; _B
   4499          		zx[rombuf+8]=(byte)_A;
   \   00000018   ........           LDR      R7,??DataTable1018  ;; _A
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   ........           BL       exx
   \   00000024   ........           BL       ex_af_af
   \   00000028   ........           LDR      R0,??DataTable1073  ;; _I
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   0400C5E7           STRB     R0,[R5, +R4]
   \   00000034   001098E5           LDR      R1,[R8, #+0]
   \   00000038   010085E2           ADD      R0,R5,#+1
   \   0000003C   0410C0E7           STRB     R1,[R0, +R4]
   \   00000040   040080E0           ADD      R0,R0,R4
   \   00000044   4114A0E1           ASR      R1,R1,#+8
   \   00000048   0110C0E5           STRB     R1,[R0, #+1]
   \   0000004C   001099E5           LDR      R1,[R9, #+0]
   \   00000050   030085E2           ADD      R0,R5,#+3
   \   00000054   0410C0E7           STRB     R1,[R0, +R4]
   \   00000058   040080E0           ADD      R0,R0,R4
   \   0000005C   4114A0E1           ASR      R1,R1,#+8
   \   00000060   0110C0E5           STRB     R1,[R0, #+1]
   \   00000064   00109BE5           LDR      R1,[R11, #+0]
   \   00000068   00209AE5           LDR      R2,[R10, #+0]
   \   0000006C   050085E2           ADD      R0,R5,#+5
   \   00000070   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000074   0410C0E7           STRB     R1,[R0, +R4]
   \   00000078   040080E0           ADD      R0,R0,R4
   \   0000007C   4114A0E1           ASR      R1,R1,#+8
   \   00000080   0110C0E5           STRB     R1,[R0, #+1]
   \   00000084   040085E0           ADD      R0,R5,R4
   \   00000088   076080E2           ADD      R6,R0,#+7
   \   0000008C   000097E5           LDR      R0,[R7, #+0]
   \   00000090   0100C6E5           STRB     R0,[R6, #+1]
   4500          		zx[rombuf+7]=(byte)F();
   \   00000094   ........           BL       F
   \   00000098   0000C6E5           STRB     R0,[R6, #+0]
   4501          		exx();
   \   0000009C   ........           BL       exx
   4502          		ex_af_af();
   \   000000A0   ........           BL       ex_af_af
   4503          		reg(_HL,zx,rombuf+9);
   \   000000A4   001098E5           LDR      R1,[R8, #+0]
   \   000000A8   090085E2           ADD      R0,R5,#+9
   \   000000AC   0410C0E7           STRB     R1,[R0, +R4]
   \   000000B0   040080E0           ADD      R0,R0,R4
   \   000000B4   4114A0E1           ASR      R1,R1,#+8
   \   000000B8   0110C0E5           STRB     R1,[R0, #+1]
   4504          		reg(_DE,zx,rombuf+11);
   \   000000BC   001099E5           LDR      R1,[R9, #+0]
   \   000000C0   0B0085E2           ADD      R0,R5,#+11
   \   000000C4   0410C0E7           STRB     R1,[R0, +R4]
   \   000000C8   040080E0           ADD      R0,R0,R4
   \   000000CC   4114A0E1           ASR      R1,R1,#+8
   \   000000D0   0110C0E5           STRB     R1,[R0, #+1]
   4505          		reg(BC(),zx,rombuf+13);
   \   000000D4   00109BE5           LDR      R1,[R11, #+0]
   \   000000D8   00209AE5           LDR      R2,[R10, #+0]
   \   000000DC   0D0085E2           ADD      R0,R5,#+13
   \   000000E0   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000000E4   0410C0E7           STRB     R1,[R0, +R4]
   \   000000E8   040080E0           ADD      R0,R0,R4
   \   000000EC   4114A0E1           ASR      R1,R1,#+8
   \   000000F0   0110C0E5           STRB     R1,[R0, #+1]
   4506          		reg(_IY,zx,rombuf+15);
   \   000000F4   ........           LDR      R1,??DataTable1094  ;; _IY
   \   000000F8   0F0085E2           ADD      R0,R5,#+15
   \   000000FC   001091E5           LDR      R1,[R1, #+0]
   4507          		reg(_IX,zx,rombuf+17);
   4508          	    zx[rombuf+19]=(byte)(_IFF2?4:0);
   \   00000100   0080A0E3           MOV      R8,#+0
   \   00000104   0410C0E7           STRB     R1,[R0, +R4]
   \   00000108   040080E0           ADD      R0,R0,R4
   \   0000010C   4114A0E1           ASR      R1,R1,#+8
   \   00000110   0110C0E5           STRB     R1,[R0, #+1]
   \   00000114   ........           LDR      R1,??DataTable1095  ;; _IX
   \   00000118   110085E2           ADD      R0,R5,#+17
   \   0000011C   001091E5           LDR      R1,[R1, #+0]
   \   00000120   0410C0E7           STRB     R1,[R0, +R4]
   \   00000124   040080E0           ADD      R0,R0,R4
   \   00000128   4114A0E1           ASR      R1,R1,#+8
   \   0000012C   0110C0E5           STRB     R1,[R0, #+1]
   \   00000130   ........           LDR      R0,??DataTable1098  ;; _IFF2
   \   00000134   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0400A013           MOVNE    R0,#+4
   \   00000140   0C00C6E5           STRB     R0,[R6, #+12]
   4509          		zx[rombuf+20]=(byte)_R;
   \   00000144   ........           LDR      R0,??DataTable1093  ;; _R
   \   00000148   000090E5           LDR      R0,[R0, #+0]
   \   0000014C   0D00C6E5           STRB     R0,[R6, #+13]
   4510          		zx[rombuf+22]=(byte)_A;
   \   00000150   000097E5           LDR      R0,[R7, #+0]
   \   00000154   0F00C6E5           STRB     R0,[R6, #+15]
   4511          		zx[rombuf+21]=(byte)F();
   \   00000158   ........           BL       F
   4512          		reg(_SP-2,zx,rombuf+23); ///////////////SP-2????????????????
   \   0000015C   ........           LDR      R1,??DataTable1085  ;; _SP
   \   00000160   0E00C6E5           STRB     R0,[R6, #+14]
   \   00000164   001091E5           LDR      R1,[R1, #+0]
   \   00000168   170085E2           ADD      R0,R5,#+23
   \   0000016C   021041E2           SUB      R1,R1,#+2
   \   00000170   0410C0E7           STRB     R1,[R0, +R4]
   \   00000174   040080E0           ADD      R0,R0,R4
   \   00000178   4114A0E1           ASR      R1,R1,#+8
   \   0000017C   0110C0E5           STRB     R1,[R0, #+1]
   4513          		zx[rombuf+25]=(byte)((_IM==IM0)?0:((_IM==IM1)?1:2));
   \   00000180   ........           LDR      R0,??DataTable1099  ;; _IM
   \   00000184   ........           LDR      R1,??DataTable1097  ;; IM0
   \   00000188   000090E5           LDR      R0,[R0, #+0]
   \   0000018C   001091E5           LDR      R1,[R1, #+0]
   \   00000190   010050E1           CMP      R0,R1
   \   00000194   0400000A           BEQ      ??saveSNA_0
   \   00000198   ........           LDR      R1,??DataTable1082  ;; IM1
   \   0000019C   001091E5           LDR      R1,[R1, #+0]
   \   000001A0   010050E1           CMP      R0,R1
   \   000001A4   0180A003           MOVEQ    R8,#+1
   \   000001A8   0280A013           MOVNE    R8,#+2
   4514          		zx[rombuf+26]=(byte)newBorder;
   \                     ??saveSNA_0:
   \   000001AC   ........           LDR      R0,??DataTable1075  ;; newBorder
   \   000001B0   1280C6E5           STRB     R8,[R6, #+18]
   \   000001B4   000090E5           LDR      R0,[R0, #+0]
   4515              memcpy(zx+rombuf+27,mem+16384,49152);
   4516          		//System.arraycopy(mem,16384,zx,rombuf+27, 49152 );
   4517          		if(fz128){
   \   000001B8   ........           LDR      R8,??DataTable1062  ;; fz128
   \   000001BC   1300C6E5           STRB     R0,[R6, #+19]
   \   000001C0   ........           LDR      R6,??DataTable1030  ;; mem
   \   000001C4   C02CA0E3           MOV      R2,#+49152
   \   000001C8   000096E5           LDR      R0,[R6, #+0]
   \   000001CC   1B70A0E3           MOV      R7,#+27
   \   000001D0   401C80E2           ADD      R1,R0,#+16384
   \   000001D4   040085E0           ADD      R0,R5,R4
   \   000001D8   1B0080E2           ADD      R0,R0,#+27
   \   000001DC   ........           _BLF     memcpy,??memcpy??rA
   \   000001E0   D000D8E1           LDRSB    R0,[R8, #+0]
   \   000001E4   C07C87E3           ORR      R7,R7,#0xC000
   \   000001E8   000050E3           CMP      R0,#+0
   \   000001EC   2400000A           BEQ      ??saveSNA_1
   4518          		  reg(_PC,zx,rombuf+49179);
   \   000001F0   ........           LDR      R1,??DataTable1091  ;; _PC
   \   000001F4   050087E0           ADD      R0,R7,R5
   \   000001F8   001091E5           LDR      R1,[R1, #+0]
   4519          		  zx[rombuf+49181]=pport;
   4520          		  zx[rombuf+49182]=trdos;
   4521          		  int off=49183;
   \   000001FC   049087E3           ORR      R9,R7,#0x4
   \   00000200   0410C0E7           STRB     R1,[R0, +R4]
   \   00000204   040080E0           ADD      R0,R0,R4
   \   00000208   4114A0E1           ASR      R1,R1,#+8
   \   0000020C   0110C0E5           STRB     R1,[R0, #+1]
   \   00000210   041085E0           ADD      R1,R5,R4
   \   00000214   ........           LDR      R5,??DataTable1061  ;; pport
   \   00000218   020087E2           ADD      R0,R7,#+2
   \   0000021C   010080E0           ADD      R0,R0,R1
   \   00000220   0010D5E5           LDRB     R1,[R5, #+0]
   4522          		  for(int i=0;i<8;i++)
   \   00000224   00A0A0E3           MOV      R10,#+0
   \   00000228   0010C0E5           STRB     R1,[R0, #+0]
   \   0000022C   ........           LDR      R1,??DataTable1033  ;; trdos
   \   00000230   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000234   0110C0E5           STRB     R1,[R0, #+1]
   \   00000238   020000EA           B        ??saveSNA_2
   4523          		    if(i!=2 && i!=5 && i!=(pport&7)){
   \                     ??saveSNA_3:
   \   0000023C   02005AE3           CMP      R10,#+2
   \   00000240   05005A13           CMPNE    R10,#+5
   \   00000244   0B00000A           BEQ      ??saveSNA_4
   \                     ??saveSNA_2:
   \   00000248   D000D5E1           LDRSB    R0,[R5, #+0]
   \   0000024C   070000E2           AND      R0,R0,#0x7
   \   00000250   00005AE1           CMP      R10,R0
   \   00000254   0700000A           BEQ      ??saveSNA_4
   4524                    memcpy(zx+off,mem+zxpage[i],rompage);
   \   00000258   ........           LDR      R0,??DataTable1064  ;; zxpage
   \   0000025C   001096E5           LDR      R1,[R6, #+0]
   \   00000260   0A0190E7           LDR      R0,[R0, +R10, LSL #+2]
   \   00000264   402CA0E3           MOV      R2,#+16384
   \   00000268   011080E0           ADD      R1,R0,R1
   \   0000026C   040089E0           ADD      R0,R9,R4
   \   00000270   ........           _BLF     memcpy,??memcpy??rA
   4525          		      //System.arraycopy(mem,zxpage[i],zx,off,rompage);
   4526          		      off+=rompage;
   \   00000274   409C89E2           ADD      R9,R9,#+16384
   4527          		    }
   \                     ??saveSNA_4:
   \   00000278   01A08AE2           ADD      R10,R10,#+1
   \   0000027C   08005AE3           CMP      R10,#+8
   \   00000280   EDFFFFBA           BLT      ??saveSNA_3
   4528          		}
   4529          	    zxfilesize=(fz128)?131103:49179;
   \                     ??saveSNA_1:
   \   00000284   D000D8E1           LDRSB    R0,[R8, #+0]
   \   00000288   000050E3           CMP      R0,#+0
   \   0000028C   ........           LDR      R0,??DataTable1084  ;; zxfilesize
   \   00000290   1F70A013           MOVNE    R7,#+31
   \   00000294   807B8713           ORRNE    R7,R7,#0x20000
   \   00000298   007080E5           STR      R7,[R0, #+0]
   4530          	}
   \   0000029C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   4531          

   \                                 In segment CODE, align 4, keep-with-next
   4532            private int loadZ80_page(unsigned char *zx, int i ){ // throws Exception {
   \                     loadZ80_page:
   \   00000000   F0002DE9           PUSH     {R4-R7}
   4533          		int k, tbyte, blocklen, addr, page;
   4534          		unsigned char bite;
   4535          		blocklen = (zx[i]) | ((zx[i+1]) << 8);
   \   00000004   0020D1E7           LDRB     R2,[R1, +R0]
   \   00000008   003081E0           ADD      R3,R1,R0
   \   0000000C   0130D3E5           LDRB     R3,[R3, #+1]
   4536                          i+=2;
   \   00000010   021081E2           ADD      R1,R1,#+2
   \   00000014   032482E1           ORR      R2,R2,R3, LSL #+8
   4537          		page=(zx[i++])-3;
   \   00000018   0030D1E7           LDRB     R3,[R1, +R0]
   \   0000001C   011081E2           ADD      R1,R1,#+1
   \   00000020   033043E2           SUB      R3,R3,#+3
   4538          		if(page<0 || page>7) return -1; //throw new Exception( "Z80 (page): out of range " + page );
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   0E00004A           BMI      ??loadZ80_page_0
   \   0000002C   080053E3           CMP      R3,#+8
   \   00000030   000000BA           BLT      ??loadZ80_page_1
   \                     ??loadZ80_page_2:
   \   00000034   0B0000EA           B        ??loadZ80_page_0
   4539          		if(fz128){
   \                     ??loadZ80_page_1:
   \   00000038   ........           LDR      R4,??DataTable1062  ;; fz128
   \   0000003C   D040D4E1           LDRSB    R4,[R4, #+0]
   \   00000040   000054E3           CMP      R4,#+0
   \   00000044   0A00000A           BEQ      ??loadZ80_page_3
   4540                    addr=zxpage[page];
   \   00000048   ........           LDR      R4,??DataTable1064  ;; zxpage
   \   0000004C   03C194E7           LDR      R12,[R4, +R3, LSL #+2]
   4541          		}else{
   4542          		//pport=2;
   4543          		switch(page){
   4544          		  case 5: addr = 0x4000; break;
   4545          		  case 1: addr = 0x8000; break;
   4546          		  case 2: addr = 0xc000; break;
   4547          		  default: fneed128=true; return -1; //throw new Exception( "128:" );
   4548          		}}
   4549          		k=i;
   \                     ??loadZ80_page_4:
   \   00000050   0130A0E1           MOV      R3,R1
   \   00000054   010052E3           CMP      R2,#+1
   \   00000058   190000AA           BGE      ??loadZ80_page_5
   4550          		while ( (i-k < blocklen) )
   4551          		  if ( (bite=zx[i++]) != (unsigned char)0xed ) mem[ addr++]= bite;
   4552          		  else 
   4553          			if ( (bite=zx[i++]) != (unsigned char)0xed ) { mem[addr++]=(unsigned char) 0xed; i--;}
   4554          			else {
   4555          			  tbyte = zx[i++];
   4556          			  bite = zx[i++];
   4557          			  while ( (tbyte--) > 0 ) mem[addr++]=bite;
   4558          			}	
   4559          		if ((addr & 16383) != 0)   return -1;
   \                     ??loadZ80_page_6:
   \   0000005C   0C09A0E1           LSL      R0,R12,#+18
   \   00000060   2009B0E1           LSRS     R0,R0,#+18
   \   00000064   3600000A           BEQ      ??loadZ80_page_7
   \                     ??loadZ80_page_0:
   \   00000068   F000BDE8           POP      {R4-R7}
   \   0000006C   0000E0E3           MVN      R0,#+0
   \   00000070   1EFF2FE1           BX       LR
   \                     ??loadZ80_page_3:
   \   00000074   013053E2           SUBS     R3,R3,#+1
   \   00000078   0500000A           BEQ      ??loadZ80_page_8
   \   0000007C   013053E2           SUBS     R3,R3,#+1
   \   00000080   0500000A           BEQ      ??loadZ80_page_9
   \   00000084   033053E2           SUBS     R3,R3,#+3
   \   00000088   0500001A           BNE      ??loadZ80_page_10
   \   0000008C   40CCA0E3           MOV      R12,#+16384
   \   00000090   EEFFFFEA           B        ??loadZ80_page_4
   \                     ??loadZ80_page_8:
   \   00000094   80CCA0E3           MOV      R12,#+32768
   \   00000098   ECFFFFEA           B        ??loadZ80_page_4
   \                     ??loadZ80_page_9:
   \   0000009C   C0CCA0E3           MOV      R12,#+49152
   \   000000A0   EAFFFFEA           B        ??loadZ80_page_4
   \                     ??loadZ80_page_10:
   \   000000A4   ........           LDR      R0,??DataTable1038  ;; fneed128
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   0010C0E5           STRB     R1,[R0, #+0]
   \   000000B0   F000BDE8           POP      {R4-R7}
   \   000000B4   000061E2           RSB      R0,R1,#+0
   \   000000B8   1EFF2FE1           BX       LR
   \                     ??loadZ80_page_11:
   \   000000BC   0050C6E5           STRB     R5,[R6, #+0]
   \   000000C0   07C0A0E1           MOV      R12,R7
   \                     ??loadZ80_page_5:
   \   000000C4   034041E0           SUB      R4,R1,R3
   \   000000C8   020054E1           CMP      R4,R2
   \   000000CC   E2FFFFAA           BGE      ??loadZ80_page_6
   \   000000D0   0050D1E7           LDRB     R5,[R1, +R0]
   \   000000D4   ........           LDR      R4,??DataTable1120  ;; mem
   \   000000D8   011081E2           ADD      R1,R1,#+1
   \   000000DC   006094E5           LDR      R6,[R4, #+0]
   \   000000E0   01708CE2           ADD      R7,R12,#+1
   \   000000E4   06608CE0           ADD      R6,R12,R6
   \   000000E8   ED0055E3           CMP      R5,#+237
   \   000000EC   F2FFFF1A           BNE      ??loadZ80_page_11
   \   000000F0   0050D1E7           LDRB     R5,[R1, +R0]
   \   000000F4   011081E2           ADD      R1,R1,#+1
   \   000000F8   ED0055E3           CMP      R5,#+237
   \   000000FC   0400000A           BEQ      ??loadZ80_page_12
   \   00000100   ED40A0E3           MOV      R4,#+237
   \   00000104   0040C6E5           STRB     R4,[R6, #+0]
   \   00000108   07C0A0E1           MOV      R12,R7
   \   0000010C   011041E2           SUB      R1,R1,#+1
   \   00000110   EBFFFFEA           B        ??loadZ80_page_5
   \                     ??loadZ80_page_12:
   \   00000114   0060D1E7           LDRB     R6,[R1, +R0]
   \   00000118   011081E2           ADD      R1,R1,#+1
   \   0000011C   0050D1E7           LDRB     R5,[R1, +R0]
   \   00000120   011081E2           ADD      R1,R1,#+1
   \                     ??loadZ80_page_13:
   \   00000124   0670A0E1           MOV      R7,R6
   \   00000128   016047E2           SUB      R6,R7,#+1
   \   0000012C   010057E3           CMP      R7,#+1
   \   00000130   E3FFFFBA           BLT      ??loadZ80_page_5
   \   00000134   007094E5           LDR      R7,[R4, #+0]
   \   00000138   0750CCE7           STRB     R5,[R12, +R7]
   \   0000013C   01C08CE2           ADD      R12,R12,#+1
   \   00000140   F7FFFFEA           B        ??loadZ80_page_13
   4560          			//throw new Exception( "Z80 (page): overrun" );
   4561          		return i;
   \                     ??loadZ80_page_7:
   \   00000144   F000BDE8           POP      {R4-R7}
   \   00000148   0100A0E1           MOV      R0,R1
   \   0000014C   1EFF2FE1           BX       LR               ;; return
   4562          	}
   4563          

   \                                 In segment CODE, align 4, keep-with-next
   4564            public boolean loadZ80(unsigned char *zx, int rombuf){ // throws Exception {
   \                     loadZ80:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   4565          	  resetKeyboard();
   4566          	  //rp.fr128=false;
   4567          	  if (zxfilesize == 49179 || zxfilesize==131103 ){ return loadSNA(zx,rombuf); }
   \   00000004   ........           LDR      R6,??DataTable1084  ;; zxfilesize
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   ........           BL       resetKeyboard
   \   00000014   000096E5           LDR      R0,[R6, #+0]
   \   00000018   1B10A0E3           MOV      R1,#+27
   \   0000001C   C01C81E3           ORR      R1,R1,#0xC000
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   0300000A           BEQ      ??loadZ80_0
   \   00000028   1F10A0E3           MOV      R1,#+31
   \   0000002C   801B81E3           ORR      R1,R1,#0x20000
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   0300001A           BNE      ??loadZ80_1
   \                     ??loadZ80_0:
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       loadSNA
   \   00000044   F08FBDE8           POP      {R4-R11,PC}
   \                     ??loadZ80_1:
   \   00000048   0410D5E7           LDRB     R1,[R5, +R4]
   \   0000004C   ........           LDR      R0,??DataTable1088  ;; _A
   4568          	    unsigned char bite;
   4569          		boolean compressed = false;
   4570          		int i,j, tbyte, addr, size, offset;
   4571          		_A=( zx[rombuf] );
   4572          		xF( zx[rombuf+1] );
   4573          		xBC( (zx[rombuf+2]) | ((zx[rombuf+3])<<8) );
   \   00000050   ........           LDR      R8,??DataTable1067  ;; _C
   4574          		_HL=( (zx[rombuf+4]) | ((zx[rombuf+5])<<8) );
   \   00000054   ........           LDR      R9,??DataTable1086  ;; _HL
   4575          		_PC=( (zx[rombuf+6]) | ((zx[rombuf+7])<<8) );
   \   00000058   ........           LDR      R7,??DataTable1091  ;; _PC
   4576          		_SP=( (zx[rombuf+8]) | ((zx[rombuf+9])<<8) );
   4577          		_I=( zx[rombuf+10] );
   4578          		_R=( zx[rombuf+11] );
   \   0000005C   ........           LDR      R10,??DataTable1093  ;; _R
   \   00000060   001080E5           STR      R1,[R0, #+0]
   \   00000064   040085E0           ADD      R0,R5,R4
   \   00000068   0100D0E5           LDRB     R0,[R0, #+1]
   \   0000006C   ........           BL       xF
   \   00000070   040085E0           ADD      R0,R5,R4
   \   00000074   0200D0E5           LDRB     R0,[R0, #+2]
   \   00000078   041085E0           ADD      R1,R5,R4
   \   0000007C   0310D1E5           LDRB     R1,[R1, #+3]
   \   00000080   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000084   ........           LDR      R1,??DataTable1068  ;; _B
   \   00000088   4024A0E1           ASR      R2,R0,#+8
   \   0000008C   002081E5           STR      R2,[R1, #+0]
   \   00000090   FF0000E2           AND      R0,R0,#0xFF
   \   00000094   000088E5           STR      R0,[R8, #+0]
   \   00000098   040085E0           ADD      R0,R5,R4
   \   0000009C   0400D0E5           LDRB     R0,[R0, #+4]
   \   000000A0   041085E0           ADD      R1,R5,R4
   \   000000A4   0510D1E5           LDRB     R1,[R1, #+5]
   \   000000A8   042085E0           ADD      R2,R5,R4
   \   000000AC   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000000B0   000089E5           STR      R0,[R9, #+0]
   \   000000B4   040085E0           ADD      R0,R5,R4
   \   000000B8   0600D0E5           LDRB     R0,[R0, #+6]
   \   000000BC   041085E0           ADD      R1,R5,R4
   \   000000C0   0710D1E5           LDRB     R1,[R1, #+7]
   \   000000C4   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000000C8   000087E5           STR      R0,[R7, #+0]
   \   000000CC   0920D2E5           LDRB     R2,[R2, #+9]
   \   000000D0   ........           LDR      R0,??DataTable1085  ;; _SP
   \   000000D4   041085E0           ADD      R1,R5,R4
   \   000000D8   0810D1E5           LDRB     R1,[R1, #+8]
   \   000000DC   021481E1           ORR      R1,R1,R2, LSL #+8
   \   000000E0   001080E5           STR      R1,[R0, #+0]
   \   000000E4   ........           LDR      R0,??DataTable1073  ;; _I
   \   000000E8   041085E0           ADD      R1,R5,R4
   \   000000EC   0A10D1E5           LDRB     R1,[R1, #+10]
   4579          		tbyte = (zx[rombuf+12]);
   4580          		if ( tbyte == 255 ) tbyte = 1;
   4581          		outb( 254, ((tbyte >> 1) & 0x07), 0 ); // border
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   001080E5           STR      R1,[R0, #+0]
   \   000000F8   040085E0           ADD      R0,R5,R4
   \   000000FC   0B00D0E5           LDRB     R0,[R0, #+11]
   \   00000100   00008AE5           STR      R0,[R10, #+0]
   \   00000104   040085E0           ADD      R0,R5,R4
   \   00000108   0CB0D0E5           LDRB     R11,[R0, #+12]
   \   0000010C   0700A0E3           MOV      R0,#+7
   \   00000110   FF005BE3           CMP      R11,#+255
   \   00000114   01B0A003           MOVEQ    R11,#+1
   \   00000118   CB1000E0           AND      R1,R0,R11, ASR #+1
   \   0000011C   FE00A0E3           MOV      R0,#+254
   \   00000120   ........           BL       outb
   4582          		if ( (tbyte & 0x01) != 0 ) 	xR( R() | 0x80 );
   \   00000124   01001BE3           TST      R11,#0x1
   \   00000128   0800000A           BEQ      ??loadZ80_2
   \   0000012C   ........           LDR      R0,??DataTable1049  ;; _R7
   \   00000130   00109AE5           LDR      R1,[R10, #+0]
   \   00000134   002090E5           LDR      R2,[R0, #+0]
   \   00000138   7F1001E2           AND      R1,R1,#0x7F
   \   0000013C   011082E1           ORR      R1,R2,R1
   \   00000140   801081E3           ORR      R1,R1,#0x80
   \   00000144   00108AE5           STR      R1,[R10, #+0]
   \   00000148   8010A0E3           MOV      R1,#+128
   \   0000014C   001080E5           STR      R1,[R0, #+0]
   4583          		compressed = ((tbyte & 0x20) != 0);
   4584          		_DE=( (zx[rombuf+13]) | ((zx[rombuf+14])<<8) );
   \                     ??loadZ80_2:
   \   00000150   040085E0           ADD      R0,R5,R4
   \   00000154   0D00D0E5           LDRB     R0,[R0, #+13]
   \   00000158   ........           LDR      R10,??DataTable1087  ;; _DE
   \   0000015C   041085E0           ADD      R1,R5,R4
   \   00000160   0E10D1E5           LDRB     R1,[R1, #+14]
   \   00000164   20001BE3           TST      R11,#0x20
   \   00000168   01B0A013           MOVNE    R11,#+1
   \   0000016C   00B0A003           MOVEQ    R11,#+0
   \   00000170   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000174   00008AE5           STR      R0,[R10, #+0]
   4585          		ex_af_af();
   \   00000178   ........           BL       ex_af_af
   4586          		exx();
   \   0000017C   ........           BL       exx
   4587          		xBC( (zx[rombuf+15]) | ((zx[rombuf+16])<<8) );
   \   00000180   040085E0           ADD      R0,R5,R4
   \   00000184   0F00D0E5           LDRB     R0,[R0, #+15]
   \   00000188   041085E0           ADD      R1,R5,R4
   \   0000018C   1010D1E5           LDRB     R1,[R1, #+16]
   \   00000190   010480E1           ORR      R0,R0,R1, LSL #+8
   \   00000194   ........           LDR      R1,??DataTable1068  ;; _B
   \   00000198   4024A0E1           ASR      R2,R0,#+8
   \   0000019C   002081E5           STR      R2,[R1, #+0]
   \   000001A0   FF0000E2           AND      R0,R0,#0xFF
   \   000001A4   000088E5           STR      R0,[R8, #+0]
   4588          		_DE=( (zx[rombuf+17]) | ((zx[rombuf+18])<<8) );
   \   000001A8   040085E0           ADD      R0,R5,R4
   \   000001AC   1100D0E5           LDRB     R0,[R0, #+17]
   \   000001B0   041085E0           ADD      R1,R5,R4
   \   000001B4   1210D1E5           LDRB     R1,[R1, #+18]
   \   000001B8   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000001BC   00008AE5           STR      R0,[R10, #+0]
   4589          		_HL=( (zx[rombuf+19]) | ((zx[rombuf+20])<<8) );
   \   000001C0   040085E0           ADD      R0,R5,R4
   \   000001C4   1300D0E5           LDRB     R0,[R0, #+19]
   \   000001C8   041085E0           ADD      R1,R5,R4
   \   000001CC   1410D1E5           LDRB     R1,[R1, #+20]
   \   000001D0   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000001D4   000089E5           STR      R0,[R9, #+0]
   4590          		_A=( zx[rombuf+21]);
   \   000001D8   ........           LDR      R0,??DataTable1088  ;; _A
   \   000001DC   041085E0           ADD      R1,R5,R4
   \   000001E0   1510D1E5           LDRB     R1,[R1, #+21]
   \   000001E4   001080E5           STR      R1,[R0, #+0]
   4591          		xF( zx[rombuf+22]);
   \   000001E8   040085E0           ADD      R0,R5,R4
   \   000001EC   1600D0E5           LDRB     R0,[R0, #+22]
   \   000001F0   ........           BL       xF
   4592          		ex_af_af();
   \   000001F4   ........           BL       ex_af_af
   4593          		exx();
   \   000001F8   ........           BL       exx
   4594          		_IY=((zx[rombuf+23]) | ((zx[rombuf+24])<<8) );
   \   000001FC   041085E0           ADD      R1,R5,R4
   \   00000200   1710D1E5           LDRB     R1,[R1, #+23]
   \   00000204   ........           LDR      R0,??DataTable1094  ;; _IY
   4595          		_IX=((zx[rombuf+25]) | ((zx[rombuf+26])<<8) );
   4596          		xIFF1( zx[rombuf+27] != 0 );
   \   00000208   ........           LDR      R3,??DataTable1096  ;; _IFF1
   \   0000020C   042085E0           ADD      R2,R5,R4
   \   00000210   1820D2E5           LDRB     R2,[R2, #+24]
   \   00000214   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000218   001080E5           STR      R1,[R0, #+0]
   \   0000021C   041085E0           ADD      R1,R5,R4
   \   00000220   1910D1E5           LDRB     R1,[R1, #+25]
   \   00000224   ........           LDR      R0,??DataTable1095  ;; _IX
   \   00000228   042085E0           ADD      R2,R5,R4
   \   0000022C   1A20D2E5           LDRB     R2,[R2, #+26]
   \   00000230   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000234   001080E5           STR      R1,[R0, #+0]
   \   00000238   042085E0           ADD      R2,R5,R4
   \   0000023C   1B20D2E5           LDRB     R2,[R2, #+27]
   \   00000240   0010A0E3           MOV      R1,#+0
   \   00000244   0100A0E3           MOV      R0,#+1
   \   00000248   000052E3           CMP      R2,#+0
   \   0000024C   0120A013           MOVNE    R2,#+1
   \   00000250   0020C3E5           STRB     R2,[R3, #+0]
   4597          		xIFF2( zx[rombuf+28] != 0 );
   \   00000254   042085E0           ADD      R2,R5,R4
   \   00000258   1C20D2E5           LDRB     R2,[R2, #+28]
   \   0000025C   000052E3           CMP      R2,#+0
   \   00000260   ........           LDR      R2,??DataTable1098  ;; _IFF2
   \   00000264   0110A013           MOVNE    R1,#+1
   \   00000268   0010C2E5           STRB     R1,[R2, #+0]
   4598          		switch ( zx[rombuf+29] & 0x03 ) {
   \   0000026C   041085E0           ADD      R1,R5,R4
   \   00000270   1D10D1E5           LDRB     R1,[R1, #+29]
   \   00000274   031011E2           ANDS     R1,R1,#0x3
   \   00000278   0200000A           BEQ      ??loadZ80_3
   \   0000027C   011051E2           SUBS     R1,R1,#+1
   \   00000280   0200000A           BEQ      ??loadZ80_4
   \   00000284   030000EA           B        ??loadZ80_5
   4599          		case 0:	xIM( IM0 );	break;
   \                     ??loadZ80_3:
   \   00000288   ........           LDR      R1,??DataTable1097  ;; IM0
   \   0000028C   020000EA           B        ??loadZ80_6
   4600          		case 1:	xIM( IM1 );	break;
   \                     ??loadZ80_4:
   \   00000290   ........           LDR      R1,??DataTable1082  ;; IM1
   \   00000294   000000EA           B        ??loadZ80_6
   4601          		default:xIM( IM2 );	break;
   \                     ??loadZ80_5:
   \   00000298   ........           LDR      R1,??DataTable1059  ;; IM2
   \                     ??loadZ80_6:
   \   0000029C   ........           LDR      R2,??DataTable1099  ;; _IM
   \   000002A0   001091E5           LDR      R1,[R1, #+0]
   4602          		}
   4603          		if ( _PC == 0 ){ 
   \   000002A4   ........           LDR      R8,??DataTable1061  ;; pport
   \   000002A8   ........           LDR      R9,??DataTable1062  ;; fz128
   \   000002AC   ........           LDR      R10,??DataTable1120  ;; mem
   \   000002B0   001082E5           STR      R1,[R2, #+0]
   \   000002B4   001097E5           LDR      R1,[R7, #+0]
   \   000002B8   000051E3           CMP      R1,#+0
   \   000002BC   4400001A           BNE      ??loadZ80_7
   4604          			switch( (zx[rombuf+30]) | (zx[rombuf+31]) << 8){
   \   000002C0   041085E0           ADD      R1,R5,R4
   \   000002C4   1E10D1E5           LDRB     R1,[R1, #+30]
   \   000002C8   042085E0           ADD      R2,R5,R4
   \   000002CC   1F20D2E5           LDRB     R2,[R2, #+31]
   \   000002D0   021481E1           ORR      R1,R1,R2, LSL #+8
   \   000002D4   171051E2           SUBS     R1,R1,#+23
   \   000002D8   0500000A           BEQ      ??loadZ80_8
   \   000002DC   1F1051E2           SUBS     R1,R1,#+31
   \   000002E0   3300000A           BEQ      ??loadZ80_9
   \   000002E4   041051E2           SUBS     R1,R1,#+4
   \   000002E8   3400000A           BEQ      ??loadZ80_10
   \   000002EC   0000A0E3           MOV      R0,#+0
   \   000002F0   F08FBDE8           POP      {R4-R11,PC}
   4605          			case 23: size=23; bite=1; break;
   \                     ??loadZ80_8:
   \   000002F4   1710A0E3           MOV      R1,#+23
   4606          			case 54: size=54; bite=6; break;
   4607          			case 58: size=58; bite=7; break;
   4608          			default: return false;
   4609          				//throw new Exception( "Z80 (extended): unsupported type ");
   4610          			}
   4611          			_PC=( (zx[rombuf+32]) | ((zx[rombuf+33])<<8) );
   \                     ??loadZ80_11:
   \   000002F8   042085E0           ADD      R2,R5,R4
   \   000002FC   2020D2E5           LDRB     R2,[R2, #+32]
   \   00000300   043085E0           ADD      R3,R5,R4
   \   00000304   2130D3E5           LDRB     R3,[R3, #+33]
   \   00000308   032482E1           ORR      R2,R2,R3, LSL #+8
   \   0000030C   002087E5           STR      R2,[R7, #+0]
   4612          			if ( (tbyte=(zx[rombuf+34])) > bite ) 
   \   00000310   042085E0           ADD      R2,R5,R4
   \   00000314   2220D2E5           LDRB     R2,[R2, #+34]
   \   00000318   020050E1           CMP      R0,R2
   \   0000031C   2A00003A           BCC      ??loadZ80_12
   4613          			  return false;//???
   4614                  //throw new Exception( "Z80: unsupported type " + tbyte );
   4615          			if(fz128) pport=zx[rombuf+35];
   \   00000320   D000D9E1           LDRSB    R0,[R9, #+0]
   4616          			for ( offset = rombuf+32+size, j = 0; j < 8 && offset<rombuf+zxfilesize; j++ ) 
   \   00000324   0070A0E3           MOV      R7,#+0
   \   00000328   000050E3           CMP      R0,#+0
   \   0000032C   04008510           ADDNE    R0,R5,R4
   \   00000330   D302D011           LDRSBNE  R0,[R0, #+35]
   \   00000334   0000C815           STRBNE   R0,[R8, #+0]
   \   00000338   050081E0           ADD      R0,R1,R5
   \   0000033C   200080E2           ADD      R0,R0,#+32
   \                     ??loadZ80_13:
   \   00000340   001096E5           LDR      R1,[R6, #+0]
   \   00000344   051081E0           ADD      R1,R1,R5
   \   00000348   010050E1           CMP      R0,R1
   \   0000034C   070000AA           BGE      ??loadZ80_14
   4617          		 	  if((offset = loadZ80_page(zx,offset))==-1) return false;
   \   00000350   0010A0E1           MOV      R1,R0
   \   00000354   0400A0E1           MOV      R0,R4
   \   00000358   ........           BL       loadZ80_page
   \   0000035C   010070E3           CMN      R0,#+1
   \   00000360   1900000A           BEQ      ??loadZ80_12
   \   00000364   017087E2           ADD      R7,R7,#+1
   \   00000368   080057E3           CMP      R7,#+8
   \   0000036C   F3FFFFBA           BLT      ??loadZ80_13
   4618          		}else{
   4619          		if (! compressed ){
   4620          		  /*if(rp.fz128 && zxfilesize==131104){ //128k snap
   4621          		    for(i=0;i<8;i++){
   4622          		      j=i; if(j==2) j=-2; else if(j==5) j=-3;
   4623          		      System.arraycopy(mem,romstart+rompage*j,zx,32+i*rompage,rompage);
   4624          		    } swappage(zx[rombuf+30],false);
   4625          		  }else */
   4626                memcpy(mem+16384,zx+rombuf+30,49152 );
   4627          		  //System.arraycopy(zx,rombuf+30,mem,16384,49152 );
   4628          		}else{
   4629          			addr=16384;
   4630          			size=rombuf+zxfilesize;
   4631          			i = rombuf+30;
   4632          			while ( (addr < 65536) && (i < size) )
   4633          		  	  if ( (bite=zx[i++]) != (unsigned char)0xed ) mem[ addr++]= bite;
   4634          			  else 
   4635          				if ( (bite=zx[i++]) != (unsigned char)0xed ) { mem[addr++]=(unsigned char) 0xed; i--;}
   4636          				else {
   4637          				  tbyte = zx[i++]&0xff;
   4638          				  bite = zx[i++];
   4639          				  while ( (tbyte--) != 0 ) mem[addr++]=bite;
   4640          	}	}	}
   4641          	if(fz128){
   \                     ??loadZ80_14:
   \   00000370   D000D9E1           LDRSB    R0,[R9, #+0]
   \   00000374   000050E3           CMP      R0,#+0
   \   00000378   4900000A           BEQ      ??loadZ80_15
   4642              memcpy(mem+rombank,mem+zxpage[pport&7],rompage);
   \   0000037C   D010D8E1           LDRSB    R1,[R8, #+0]
   \   00000380   ........           LDR      R3,??DataTable1064  ;; zxpage
   \   00000384   00009AE5           LDR      R0,[R10, #+0]
   \   00000388   071001E2           AND      R1,R1,#0x7
   \   0000038C   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   00000390   402CA0E3           MOV      R2,#+16384
   \   00000394   001081E0           ADD      R1,R1,R0
   \   00000398   C00C80E2           ADD      R0,R0,#+49152
   \   0000039C   ........           _BLF     memcpy,??memcpy??rA
   4643          	  //System.arraycopy(mem,zxpage[pport&7],mem,rombank,rompage);
   4644              memcpy(mem,mem+(((pport & 0x10)==0)?rom128:rom48),rompage);
   \   000003A0   0000D8E5           LDRB     R0,[R8, #+0]
   \   000003A4   100010E3           TST      R0,#0x10
   \   000003A8   A01BA013           MOVNE    R1,#+163840
   \   000003AC   B01BA003           MOVEQ    R1,#+180224
   \   000003B0   370000EA           B        ??loadZ80_16
   \                     ??loadZ80_9:
   \   000003B4   3610A0E3           MOV      R1,#+54
   \   000003B8   0600A0E3           MOV      R0,#+6
   \   000003BC   CDFFFFEA           B        ??loadZ80_11
   \                     ??loadZ80_10:
   \   000003C0   3A10A0E3           MOV      R1,#+58
   \   000003C4   0700A0E3           MOV      R0,#+7
   \   000003C8   CAFFFFEA           B        ??loadZ80_11
   \                     ??loadZ80_12:
   \   000003CC   0000A0E3           MOV      R0,#+0
   \   000003D0   F08FBDE8           POP      {R4-R11,PC}
   \                     ??loadZ80_7:
   \   000003D4   00005BE3           CMP      R11,#+0
   \   000003D8   0600001A           BNE      ??loadZ80_17
   \   000003DC   040085E0           ADD      R0,R5,R4
   \   000003E0   1E1080E2           ADD      R1,R0,#+30
   \   000003E4   00009AE5           LDR      R0,[R10, #+0]
   \   000003E8   C02CA0E3           MOV      R2,#+49152
   \   000003EC   400C80E2           ADD      R0,R0,#+16384
   \   000003F0   ........           _BLF     memcpy,??memcpy??rA
   \   000003F4   DDFFFFEA           B        ??loadZ80_14
   \                     ??loadZ80_17:
   \   000003F8   000096E5           LDR      R0,[R6, #+0]
   \   000003FC   402CA0E3           MOV      R2,#+16384
   \   00000400   051080E0           ADD      R1,R0,R5
   \   00000404   1E3085E2           ADD      R3,R5,#+30
   \                     ??loadZ80_18:
   \   00000408   010053E1           CMP      R3,R1
   \   0000040C   D7FFFFAA           BGE      ??loadZ80_14
   \   00000410   0400D3E7           LDRB     R0,[R3, +R4]
   \   00000414   00509AE5           LDR      R5,[R10, #+0]
   \   00000418   013083E2           ADD      R3,R3,#+1
   \   0000041C   055082E0           ADD      R5,R2,R5
   \   00000420   016082E2           ADD      R6,R2,#+1
   \   00000424   ED0050E3           CMP      R0,#+237
   \   00000428   0000C515           STRBNE   R0,[R5, #+0]
   \   0000042C   0620A011           MOVNE    R2,R6
   \   00000430   1000001A           BNE      ??loadZ80_19
   \   00000434   0400D3E7           LDRB     R0,[R3, +R4]
   \   00000438   013083E2           ADD      R3,R3,#+1
   \   0000043C   ED0050E3           CMP      R0,#+237
   \   00000440   0400000A           BEQ      ??loadZ80_20
   \   00000444   ED00A0E3           MOV      R0,#+237
   \   00000448   0000C5E5           STRB     R0,[R5, #+0]
   \   0000044C   0620A0E1           MOV      R2,R6
   \   00000450   013043E2           SUB      R3,R3,#+1
   \   00000454   070000EA           B        ??loadZ80_19
   \                     ??loadZ80_20:
   \   00000458   04B0D3E7           LDRB     R11,[R3, +R4]
   \   0000045C   013083E2           ADD      R3,R3,#+1
   \   00000460   0400D3E7           LDRB     R0,[R3, +R4]
   \   00000464   013083E2           ADD      R3,R3,#+1
   \                     ??loadZ80_21:
   \   00000468   0B50A0E1           MOV      R5,R11
   \   0000046C   01B045E2           SUB      R11,R5,#+1
   \   00000470   000055E3           CMP      R5,#+0
   \   00000474   0200001A           BNE      ??loadZ80_22
   \                     ??loadZ80_19:
   \   00000478   400B52E3           CMP      R2,#+65536
   \   0000047C   BBFFFFAA           BGE      ??loadZ80_14
   \   00000480   E0FFFFEA           B        ??loadZ80_18
   \                     ??loadZ80_22:
   \   00000484   00509AE5           LDR      R5,[R10, #+0]
   \   00000488   0500C2E7           STRB     R0,[R2, +R5]
   \   0000048C   012082E2           ADD      R2,R2,#+1
   \   00000490   F4FFFFEA           B        ??loadZ80_21
   \                     ??loadZ80_16:
   \   00000494   00009AE5           LDR      R0,[R10, #+0]
   \   00000498   402CA0E3           MOV      R2,#+16384
   \   0000049C   001081E0           ADD      R1,R1,R0
   \   000004A0   ........           _BLF     memcpy,??memcpy??rA
   4645          	  //System.arraycopy(mem,((pport & 0x10)==0)?rom128:rom48,mem,0,rompage);
   4646              }
   4647            return true;
   \                     ??loadZ80_15:
   \   000004A4   0100A0E3           MOV      R0,#+1
   \   000004A8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   4648            }
   4649          

   \                                 In segment CODE, align 4, keep-with-next
   4650          	public void saveZ80(unsigned char *zx, int rombuf){
   \                     saveZ80:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   4651          		if(fz128 || fsna){ saveSNA(zx,rombuf); return;}
   \   00000008   ........           LDR      R0,??DataTable1065  ;; fz128
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0300001A           BNE      ??saveZ80_0
   \   0000001C   4C029FE5           LDR      R0,??saveZ80_1   ;; fsna
   \   00000020   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??saveZ80_2
   \                     ??saveZ80_0:
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       saveSNA
   \   00000034   F087BDE8           POP      {R4-R10,PC}
   4652          		//int i,j, addr;
   4653          		zx[rombuf]=(byte)_A;
   \                     ??saveZ80_2:
   \   00000038   ........           LDR      R6,??DataTable1088  ;; _A
   4654          		zx[rombuf+1]=(byte)F();
   4655          		reg(BC(),zx,rombuf+2);
   \   0000003C   ........           LDR      R7,??DataTable1067  ;; _C
   \   00000040   000096E5           LDR      R0,[R6, #+0]
   \   00000044   ........           LDR      R8,??DataTable1068  ;; _B
   4656          		reg(_HL,zx,rombuf+4);
   \   00000048   ........           LDR      R9,??DataTable1086  ;; _HL
   4657          		reg(_PC,zx,rombuf+6);
   4658          		reg(_SP,zx,rombuf+8);
   4659          		zx[rombuf+10]=(byte)_I;
   4660          		zx[rombuf+11]=(byte)_R;
   4661          		zx[rombuf+12]=(byte)((((_R & 0x80)!=0)?1:0)|((newBorder & 0x07)<<1));
   4662          		reg(_DE,zx,13+rombuf);
   \   0000004C   ........           LDR      R10,??DataTable1087  ;; _DE
   \   00000050   0400C5E7           STRB     R0,[R5, +R4]
   \   00000054   ........           BL       F
   \   00000058   041085E0           ADD      R1,R5,R4
   \   0000005C   0100C1E5           STRB     R0,[R1, #+1]
   \   00000060   001098E5           LDR      R1,[R8, #+0]
   \   00000064   002097E5           LDR      R2,[R7, #+0]
   \   00000068   020085E2           ADD      R0,R5,#+2
   \   0000006C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000070   0410C0E7           STRB     R1,[R0, +R4]
   \   00000074   040080E0           ADD      R0,R0,R4
   \   00000078   4114A0E1           ASR      R1,R1,#+8
   \   0000007C   0110C0E5           STRB     R1,[R0, #+1]
   \   00000080   001099E5           LDR      R1,[R9, #+0]
   \   00000084   040085E2           ADD      R0,R5,#+4
   \   00000088   0410C0E7           STRB     R1,[R0, +R4]
   \   0000008C   040080E0           ADD      R0,R0,R4
   \   00000090   4114A0E1           ASR      R1,R1,#+8
   \   00000094   0110C0E5           STRB     R1,[R0, #+1]
   \   00000098   ........           LDR      R1,??DataTable1091  ;; _PC
   \   0000009C   060085E2           ADD      R0,R5,#+6
   \   000000A0   001091E5           LDR      R1,[R1, #+0]
   \   000000A4   0410C0E7           STRB     R1,[R0, +R4]
   \   000000A8   040080E0           ADD      R0,R0,R4
   \   000000AC   4114A0E1           ASR      R1,R1,#+8
   \   000000B0   0110C0E5           STRB     R1,[R0, #+1]
   \   000000B4   ........           LDR      R1,??DataTable1085  ;; _SP
   \   000000B8   080085E2           ADD      R0,R5,#+8
   \   000000BC   001091E5           LDR      R1,[R1, #+0]
   \   000000C0   0410C0E7           STRB     R1,[R0, +R4]
   \   000000C4   040080E0           ADD      R0,R0,R4
   \   000000C8   4114A0E1           ASR      R1,R1,#+8
   \   000000CC   0110C0E5           STRB     R1,[R0, #+1]
   \   000000D0   ........           LDR      R1,??DataTable1073  ;; _I
   \   000000D4   040085E0           ADD      R0,R5,R4
   \   000000D8   001091E5           LDR      R1,[R1, #+0]
   \   000000DC   0A10C0E5           STRB     R1,[R0, #+10]
   \   000000E0   ........           LDR      R0,??DataTable1093  ;; _R
   \   000000E4   041085E0           ADD      R1,R5,R4
   \   000000E8   002090E5           LDR      R2,[R0, #+0]
   \   000000EC   0B20C1E5           STRB     R2,[R1, #+11]
   \   000000F0   ........           LDR      R2,??DataTable1075  ;; newBorder
   \   000000F4   000090E5           LDR      R0,[R0, #+0]
   \   000000F8   002092E5           LDR      R2,[R2, #+0]
   \   000000FC   800010E3           TST      R0,#0x80
   \   00000100   0100A013           MOVNE    R0,#+1
   \   00000104   0000A003           MOVEQ    R0,#+0
   \   00000108   072002E2           AND      R2,R2,#0x7
   \   0000010C   820080E1           ORR      R0,R0,R2, LSL #+1
   \   00000110   0C00C1E5           STRB     R0,[R1, #+12]
   \   00000114   00109AE5           LDR      R1,[R10, #+0]
   \   00000118   0D0085E2           ADD      R0,R5,#+13
   \   0000011C   0410C0E7           STRB     R1,[R0, +R4]
   \   00000120   040080E0           ADD      R0,R0,R4
   \   00000124   4114A0E1           ASR      R1,R1,#+8
   \   00000128   0110C0E5           STRB     R1,[R0, #+1]
   4663          		ex_af_af();
   \   0000012C   ........           BL       ex_af_af
   4664          		exx();
   \   00000130   ........           BL       exx
   4665          		reg(BC(),zx,15+rombuf);
   \   00000134   001098E5           LDR      R1,[R8, #+0]
   \   00000138   002097E5           LDR      R2,[R7, #+0]
   \   0000013C   0F0085E2           ADD      R0,R5,#+15
   \   00000140   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000144   0410C0E7           STRB     R1,[R0, +R4]
   \   00000148   040080E0           ADD      R0,R0,R4
   \   0000014C   4114A0E1           ASR      R1,R1,#+8
   \   00000150   0110C0E5           STRB     R1,[R0, #+1]
   4666          		reg(_DE,zx,17+rombuf);
   \   00000154   00109AE5           LDR      R1,[R10, #+0]
   \   00000158   110085E2           ADD      R0,R5,#+17
   \   0000015C   0410C0E7           STRB     R1,[R0, +R4]
   \   00000160   040080E0           ADD      R0,R0,R4
   \   00000164   4114A0E1           ASR      R1,R1,#+8
   \   00000168   0110C0E5           STRB     R1,[R0, #+1]
   4667          		reg(_HL,zx,19+rombuf);
   \   0000016C   001099E5           LDR      R1,[R9, #+0]
   \   00000170   130085E2           ADD      R0,R5,#+19
   \   00000174   0410C0E7           STRB     R1,[R0, +R4]
   \   00000178   040080E0           ADD      R0,R0,R4
   \   0000017C   4114A0E1           ASR      R1,R1,#+8
   \   00000180   0110C0E5           STRB     R1,[R0, #+1]
   4668          		zx[rombuf+21]=(byte)_A;
   \   00000184   001096E5           LDR      R1,[R6, #+0]
   \   00000188   040085E0           ADD      R0,R5,R4
   \   0000018C   1510C0E5           STRB     R1,[R0, #+21]
   4669          		zx[rombuf+22]=(byte)F();
   \   00000190   ........           BL       F
   \   00000194   041085E0           ADD      R1,R5,R4
   \   00000198   1600C1E5           STRB     R0,[R1, #+22]
   4670          		ex_af_af();
   \   0000019C   ........           BL       ex_af_af
   4671          		exx();
   \   000001A0   ........           BL       exx
   4672          		reg(_IY,zx,23+rombuf);
   \   000001A4   ........           LDR      R1,??DataTable1094  ;; _IY
   \   000001A8   170085E2           ADD      R0,R5,#+23
   \   000001AC   001091E5           LDR      R1,[R1, #+0]
   4673          		reg(_IX,zx,25+rombuf);
   4674          		zx[rombuf+27]=(byte)(_IFF1?1:0);
   \   000001B0   042085E0           ADD      R2,R5,R4
   \   000001B4   0410C0E7           STRB     R1,[R0, +R4]
   \   000001B8   040080E0           ADD      R0,R0,R4
   \   000001BC   4114A0E1           ASR      R1,R1,#+8
   \   000001C0   0110C0E5           STRB     R1,[R0, #+1]
   \   000001C4   ........           LDR      R1,??DataTable1095  ;; _IX
   \   000001C8   190085E2           ADD      R0,R5,#+25
   \   000001CC   001091E5           LDR      R1,[R1, #+0]
   \   000001D0   0410C0E7           STRB     R1,[R0, +R4]
   \   000001D4   040080E0           ADD      R0,R0,R4
   \   000001D8   4114A0E1           ASR      R1,R1,#+8
   \   000001DC   0110C0E5           STRB     R1,[R0, #+1]
   \   000001E0   ........           LDR      R1,??DataTable1096  ;; _IFF1
   \   000001E4   0100A0E3           MOV      R0,#+1
   \   000001E8   D010D1E1           LDRSB    R1,[R1, #+0]
   \   000001EC   000051E3           CMP      R1,#+0
   \   000001F0   0110A013           MOVNE    R1,#+1
   \   000001F4   1B10C2E5           STRB     R1,[R2, #+27]
   4675          		zx[rombuf+28]=(byte)(_IFF2?1:0);
   \   000001F8   ........           LDR      R1,??DataTable1098  ;; _IFF2
   \   000001FC   D010D1E1           LDRSB    R1,[R1, #+0]
   \   00000200   000051E3           CMP      R1,#+0
   \   00000204   0110A013           MOVNE    R1,#+1
   \   00000208   1C10C2E5           STRB     R1,[R2, #+28]
   4676          		zx[rombuf+29]=(byte)((_IM==IM0)?0:((_IM==IM1)?1:2));
   \   0000020C   ........           LDR      R1,??DataTable1099  ;; _IM
   \   00000210   ........           LDR      R2,??DataTable1097  ;; IM0
   \   00000214   001091E5           LDR      R1,[R1, #+0]
   \   00000218   002092E5           LDR      R2,[R2, #+0]
   \   0000021C   020051E1           CMP      R1,R2
   \   00000220   0000A003           MOVEQ    R0,#+0
   \   00000224   0300000A           BEQ      ??saveZ80_3
   \   00000228   ........           LDR      R2,??DataTable1082  ;; IM1
   \   0000022C   002092E5           LDR      R2,[R2, #+0]
   \   00000230   020051E1           CMP      R1,R2
   \   00000234   0200A013           MOVNE    R0,#+2
   \                     ??saveZ80_3:
   \   00000238   041085E0           ADD      R1,R5,R4
   \   0000023C   1D00C1E5           STRB     R0,[R1, #+29]
   4677          		memcpy(zx+rombuf+30,mem+16384,49152 );
   \   00000240   ........           LDR      R0,??DataTable1120  ;; mem
   \   00000244   C02CA0E3           MOV      R2,#+49152
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   401C80E2           ADD      R1,R0,#+16384
   \   00000250   040085E0           ADD      R0,R5,R4
   \   00000254   1E0080E2           ADD      R0,R0,#+30
   \   00000258   ........           _BLF     memcpy,??memcpy??rA
   4678                          zxfilesize=49182;
   \   0000025C   ........           LDR      R0,??DataTable1084  ;; zxfilesize
   \   00000260   1E10A0E3           MOV      R1,#+30
   \   00000264   C01C81E3           ORR      R1,R1,#0xC000
   \   00000268   001080E5           STR      R1,[R0, #+0]
   4679          	}
   \   0000026C   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??saveZ80_1:
   \   00000270   ........           DC32     fsna
   4680          
   4681          	/** Reset all registers */

   \                                 In segment CODE, align 4, keep-with-next
   4682          	public void reset() {
   4683          		_PC=_SP=_A=_DE=_HL=0;
   \                     reset:
   \   00000000   ........           LDR      R0,??DataTable1085  ;; _SP
   \   00000004   F0432DE9           PUSH     {R4-R9,LR}
   \   00000008   ........           LDR      R4,??DataTable1086  ;; _HL
   \   0000000C   ........           LDR      R6,??DataTable1087  ;; _DE
   \   00000010   ........           LDR      R7,??DataTable1088  ;; _A
   4684                          xBC( 0 );
   \   00000014   ........           LDR      R8,??DataTable1089  ;; _B
   \   00000018   ........           LDR      R9,??DataTable1090  ;; _C
   \   0000001C   0050A0E3           MOV      R5,#+0
   \   00000020   005080E5           STR      R5,[R0, #+0]
   \   00000024   ........           LDR      R0,??DataTable1091  ;; _PC
   \   00000028   005084E5           STR      R5,[R4, #+0]
   \   0000002C   005086E5           STR      R5,[R6, #+0]
   \   00000030   005087E5           STR      R5,[R7, #+0]
   \   00000034   005080E5           STR      R5,[R0, #+0]
   \   00000038   005088E5           STR      R5,[R8, #+0]
   \   0000003C   005089E5           STR      R5,[R9, #+0]
   4685          		xF( 0 );
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   ........           BL       xF
   4686          		exx();
   \   00000048   ........           BL       exx
   4687          		ex_af_af();
   \   0000004C   ........           BL       ex_af_af
   4688          		_A=_DE=_HL=_IX=_IY=_R=_I=0;
   \   00000050   ........           LDR      R0,??DataTable1092  ;; _I
   \   00000054   005084E5           STR      R5,[R4, #+0]
   \   00000058   005080E5           STR      R5,[R0, #+0]
   \   0000005C   ........           LDR      R0,??DataTable1093  ;; _R
   \   00000060   005086E5           STR      R5,[R6, #+0]
   \   00000064   005080E5           STR      R5,[R0, #+0]
   \   00000068   ........           LDR      R0,??DataTable1094  ;; _IY
   \   0000006C   005087E5           STR      R5,[R7, #+0]
   \   00000070   005080E5           STR      R5,[R0, #+0]
   \   00000074   ........           LDR      R0,??DataTable1095  ;; _IX
   4689                          xBC( 0 );
   \   00000078   005088E5           STR      R5,[R8, #+0]
   \   0000007C   005080E5           STR      R5,[R0, #+0]
   \   00000080   005089E5           STR      R5,[R9, #+0]
   4690          		xF( 0 );
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       xF
   4691          		xIFF1( false );
   \   0000008C   ........           LDR      R0,??DataTable1096  ;; _IFF1
   4692          		xIFF2( false );
   4693          		xIM( IM0 );
   \   00000090   ........           LDR      R1,??DataTable1097  ;; IM0
   \   00000094   0050C0E5           STRB     R5,[R0, #+0]
   \   00000098   ........           LDR      R0,??DataTable1098  ;; _IFF2
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   0050C0E5           STRB     R5,[R0, #+0]
   \   000000A4   ........           LDR      R0,??DataTable1099  ;; _IM
   4694          		outb( 254, 0xff, 0 );//
   \   000000A8   0520A0E1           MOV      R2,R5
   \   000000AC   001080E5           STR      R1,[R0, #+0]
   \   000000B0   FF10A0E3           MOV      R1,#+255
   \   000000B4   FE00A0E3           MOV      R0,#+254
   \   000000B8   ........           BL       outb
   4695          		resetKeyboard();//
   \   000000BC   ........           BL       resetKeyboard
   4696          		pport=0;
   \   000000C0   ........           LDR      R0,??DataTable1100  ;; pport
   \   000000C4   0050C0E5           STRB     R5,[R0, #+0]
   4697          	}
   \   000000C8   F083BDE8           POP      {R4-R9,PC}       ;; return
   4698          
   4699          

   \                                 In segment CODE, align 4, keep-with-next
   4700          public void zxpaintrotate() { // основной мелкий
   4701              int x,y,xx,yy,yyy, col1, col2, col3, pal=22528, width4=width<<2, width_4=width-4;
   \                     zxpaintrotate:
   \   00000000   ........           LDR      R0,??DataTable1126  ;; width
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   585CA0E3           MOV      R5,#+22528
   \   00000014   0021A0E1           LSL      R2,R0,#+2
   \   00000018   04208DE5           STR      R2,[SP, #+4]
   \   0000001C   040040E2           SUB      R0,R0,#+4
   4702          	int b, off=16384, off2, off3, scr=0, scr2;
   \   00000020   401CA0E3           MOV      R1,#+16384
   \   00000024   0020A0E3           MOV      R2,#+0
   4703          	for(yyy=0;yyy<3;yyy++){
   \   00000028   0040A0E3           MOV      R4,#+0
   \   0000002C   00408DE5           STR      R4,[SP, #+0]
   4704          	  off3=off;
   \                     ??zxpaintrotate_0:
   \   00000030   10108DE5           STR      R1,[SP, #+16]
   4705            	  for(yy=0;yy<8;yy++){
   \   00000034   0030A0E3           MOV      R3,#+0
   4706            	    off2=off; scr2=scr;
   \                     ??zxpaintrotate_1:
   \   00000038   08108DE5           STR      R1,[SP, #+8]
   \   0000003C   0C208DE5           STR      R2,[SP, #+12]
   4707          	    for(xx=0;xx<32;xx++){
   \   00000040   00C0A0E3           MOV      R12,#+0
   4708          	      b=mem[pal++];
   \                     ??zxpaintrotate_2:
   \   00000044   ........           LDR      R4,??DataTable1120  ;; mem
   4709          	      col3=(b>>3)&0x08;
   4710          	      col1=colors[(b & 0x07)|col3];
   \   00000048   ........           LDR      R9,??DataTable1121  ;; colors
   \   0000004C   006094E5           LDR      R6,[R4, #+0]
   \   00000050   0670D5E7           LDRB     R7,[R5, +R6]
   \   00000054   015085E2           ADD      R5,R5,#+1
   \   00000058   C7A1A0E1           ASR      R10,R7,#+3
   \   0000005C   08800AE2           AND      R8,R10,#0x8
   \   00000060   076007E2           AND      R6,R7,#0x7
   \   00000064   066088E1           ORR      R6,R8,R6
   \   00000068   D96096E1           LDRSB    R6,[R6, +R9]
   4711          	      col2=colors[((b>>3)&0x07)|col3];
   \   0000006C   07700AE2           AND      R7,R10,#0x7
   \   00000070   077088E1           ORR      R7,R8,R7
   \   00000074   D98097E1           LDRSB    R8,[R7, +R9]
   4712                        for(y=0;y<4;y++){
   \   00000078   0090A0E3           MOV      R9,#+0
   4713                          b=mem[off];
   \                     ??zxpaintrotate_3:
   \   0000007C   007094E5           LDR      R7,[R4, #+0]
   4714          	        for(x=0;x<4;x++,scr++){
   \   00000080   00A0A0E3           MOV      R10,#+0
   \   00000084   0770D1E7           LDRB     R7,[R1, +R7]
   4715          	          screen[scr]=((b & 0x80)!=0)?col1:col2;
   \                     ??zxpaintrotate_4:
   \   00000088   ........           LDR      LR,??DataTable1187  ;; screen
   \   0000008C   800017E3           TST      R7,#0x80
   \   00000090   00E09EE5           LDR      LR,[LR, #+0]
   \   00000094   06B0A011           MOVNE    R11,R6
   \   00000098   08B0A001           MOVEQ    R11,R8
   \   0000009C   0EB0C2E7           STRB     R11,[R2, +LR]
   4716          	          b<<=2;
   \   000000A0   0771A0E1           LSL      R7,R7,#+2
   4717          	        } //x
   \   000000A4   01A08AE2           ADD      R10,R10,#+1
   \   000000A8   012082E2           ADD      R2,R2,#+1
   \   000000AC   04005AE3           CMP      R10,#+4
   \   000000B0   F4FFFFBA           BLT      ??zxpaintrotate_4
   4718          	        off+=512;
   \   000000B4   801F81E2           ADD      R1,R1,#+512
   4719          	        scr+=width_4;//124; //128-4
   \   000000B8   022080E0           ADD      R2,R0,R2
   4720          	      } //y
   \   000000BC   019089E2           ADD      R9,R9,#+1
   \   000000C0   040059E3           CMP      R9,#+4
   \   000000C4   ECFFFFBA           BLT      ??zxpaintrotate_3
   4721          	      off-=2047; //(512*4-1);
   \   000000C8   FE40E0E3           MVN      R4,#+254
   \   000000CC   704EC4E3           BIC      R4,R4,#0x700
   \   000000D0   011084E0           ADD      R1,R4,R1
   4722          	      scr-=width4-4;//508;  //(128*4-4);
   \   000000D4   04409DE5           LDR      R4,[SP, #+4]
   4723          	    } //xx
   \   000000D8   01C08CE2           ADD      R12,R12,#+1
   \   000000DC   042042E0           SUB      R2,R2,R4
   \   000000E0   042082E2           ADD      R2,R2,#+4
   \   000000E4   20005CE3           CMP      R12,#+32
   \   000000E8   D5FFFFBA           BLT      ??zxpaintrotate_2
   4724          	    off=off2+32;
   \   000000EC   08109DE5           LDR      R1,[SP, #+8]
   4725          	    scr=scr2+width4;//512; //128*4;
   \   000000F0   0C209DE5           LDR      R2,[SP, #+12]
   \   000000F4   201081E2           ADD      R1,R1,#+32
   \   000000F8   022084E0           ADD      R2,R4,R2
   4726          	  } //yy
   \   000000FC   013083E2           ADD      R3,R3,#+1
   \   00000100   080053E3           CMP      R3,#+8
   \   00000104   CBFFFFBA           BLT      ??zxpaintrotate_1
   4727          	  off=off3+2048; //256*8;
   \   00000108   10109DE5           LDR      R1,[SP, #+16]
   4728          	}
   \   0000010C   00409DE5           LDR      R4,[SP, #+0]
   \   00000110   801E81E2           ADD      R1,R1,#+2048
   \   00000114   014084E2           ADD      R4,R4,#+1
   \   00000118   00408DE5           STR      R4,[SP, #+0]
   \   0000011C   030054E3           CMP      R4,#+3
   \   00000120   C2FFFFBA           BLT      ??zxpaintrotate_0
   4729          }
   \   00000124   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000128   F08FBDE8           POP      {R4-R11,PC}      ;; return
   4730          

   \                                 In segment CODE, align 4, keep-with-next
   4731          public void zxpaintsmall() { // повернуто мелкий (с65 только)
   4732          	int x,y,xx,yy,yyy, col1, col2, col3, pal=22528;
   4733          	int b, off=16384, off2, off3, scr=width-1, width4=width<<2, scr2;
   \                     zxpaintsmall:
   \   00000000   ........           LDR      R2,??DataTable1126  ;; width
   4734          	if(frotate) for(b=0;b<screensize;b++) screen[b]=0; // ·РЫШвм дЮЭ
   \   00000004   ........           LDR      R12,??DataTable1187  ;; screen
   \   00000008   F04F2DE9           PUSH     {R4-R11,LR}
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   004092E5           LDR      R4,[R2, #+0]
   \   00000014   580CA0E3           MOV      R0,#+22528
   \   00000018   013044E2           SUB      R3,R4,#+1
   \   0000001C   0441A0E1           LSL      R4,R4,#+2
   \   00000020   08408DE5           STR      R4,[SP, #+8]
   \   00000024   ........           LDR      R4,??DataTable1156  ;; frotate
   \   00000028   401CA0E3           MOV      R1,#+16384
   \   0000002C   D040D4E1           LDRSB    R4,[R4, #+0]
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   0C00000A           BEQ      ??zxpaintsmall_0
   \   00000038   ........           LDR      R5,??DataTable1186  ;; screensize
   \   0000003C   0040A0E3           MOV      R4,#+0
   \   00000040   006095E5           LDR      R6,[R5, #+0]
   \   00000044   0070A0E3           MOV      R7,#+0
   \   00000048   010056E3           CMP      R6,#+1
   \   0000004C   030000AA           BGE      ??zxpaintsmall_1
   \   00000050   050000EA           B        ??zxpaintsmall_0
   \                     ??zxpaintsmall_2:
   \   00000054   00609CE5           LDR      R6,[R12, #+0]
   \   00000058   0670C4E7           STRB     R7,[R4, +R6]
   \   0000005C   014084E2           ADD      R4,R4,#+1
   \                     ??zxpaintsmall_1:
   \   00000060   006095E5           LDR      R6,[R5, #+0]
   \   00000064   060054E1           CMP      R4,R6
   \   00000068   F9FFFFBA           BLT      ??zxpaintsmall_2
   4735          	for(yyy=0;yyy<3;yyy++){//3
   \                     ??zxpaintsmall_0:
   \   0000006C   ........           LDR      R6,??DataTable1120  ;; mem
   \   00000070   0050A0E3           MOV      R5,#+0
   \   00000074   04508DE5           STR      R5,[SP, #+4]
   4736          	  off3=off;
   \                     ??zxpaintsmall_3:
   \   00000078   14108DE5           STR      R1,[SP, #+20]
   4737            	  for(yy=0;yy<8;yy++){
   \   0000007C   0050A0E3           MOV      R5,#+0
   \   00000080   00508DE5           STR      R5,[SP, #+0]
   4738            	    off2=off; scr2=scr;
   \                     ??zxpaintsmall_4:
   \   00000084   0C108DE5           STR      R1,[SP, #+12]
   \   00000088   10308DE5           STR      R3,[SP, #+16]
   4739          	    for(xx=0;xx<32;xx++){
   \   0000008C   0050A0E3           MOV      R5,#+0
   4740          	      b=mem[pal++];
   \                     ??zxpaintsmall_5:
   \   00000090   004096E5           LDR      R4,[R6, #+0]
   4741          	      col3=(b>>3)&0x08;
   4742          	      col1=colors[(b & 0x07)|col3];
   \   00000094   ........           LDR      R9,??DataTable1121  ;; colors
   \   00000098   0440D0E7           LDRB     R4,[R0, +R4]
   \   0000009C   010080E2           ADD      R0,R0,#+1
   \   000000A0   C4A1A0E1           ASR      R10,R4,#+3
   \   000000A4   08800AE2           AND      R8,R10,#0x8
   \   000000A8   074004E2           AND      R4,R4,#0x7
   \   000000AC   044088E1           ORR      R4,R8,R4
   \   000000B0   D97094E1           LDRSB    R7,[R4, +R9]
   4743          	      col2=colors[((b>>3)&0x07)|col3];
   \   000000B4   07400AE2           AND      R4,R10,#0x7
   \   000000B8   044088E1           ORR      R4,R8,R4
   \   000000BC   D98094E1           LDRSB    R8,[R4, +R9]
   4744                    for(y=0;y<4;y++){
   \   000000C0   0090A0E3           MOV      R9,#+0
   4745                      b=mem[off];
   \                     ??zxpaintsmall_6:
   \   000000C4   004096E5           LDR      R4,[R6, #+0]
   4746          	        for(x=0;x<4;x++,scr+=width){
   \   000000C8   00A0A0E3           MOV      R10,#+0
   \   000000CC   0440D1E7           LDRB     R4,[R1, +R4]
   4747          	          screen[scr]=((b & 0x80)!=0)?col1:col2;
   \                     ??zxpaintsmall_7:
   \   000000D0   00E09CE5           LDR      LR,[R12, #+0]
   \   000000D4   800014E3           TST      R4,#0x80
   \   000000D8   07B0A011           MOVNE    R11,R7
   \   000000DC   08B0A001           MOVEQ    R11,R8
   \   000000E0   0EB0C3E7           STRB     R11,[R3, +LR]
   4748          	          b<<=2;
   4749          	        } //x
   \   000000E4   00B092E5           LDR      R11,[R2, #+0]
   \   000000E8   0441A0E1           LSL      R4,R4,#+2
   \   000000EC   01A08AE2           ADD      R10,R10,#+1
   \   000000F0   03308BE0           ADD      R3,R11,R3
   \   000000F4   04005AE3           CMP      R10,#+4
   \   000000F8   F4FFFFBA           BLT      ??zxpaintsmall_7
   4750          	        off+=512;
   4751          	        scr-=(width4)+1;
   \   000000FC   08409DE5           LDR      R4,[SP, #+8]
   \   00000100   801F81E2           ADD      R1,R1,#+512
   \   00000104   043043E0           SUB      R3,R3,R4
   \   00000108   013043E2           SUB      R3,R3,#+1
   4752          	      } //y
   \   0000010C   019089E2           ADD      R9,R9,#+1
   \   00000110   040059E3           CMP      R9,#+4
   \   00000114   EAFFFFBA           BLT      ??zxpaintsmall_6
   4753          	      off-=2047; //(512*4-1);
   \   00000118   FE40E0E3           MVN      R4,#+254
   \   0000011C   704EC4E3           BIC      R4,R4,#0x700
   \   00000120   011084E0           ADD      R1,R4,R1
   4754          	      scr+=(width4)+4;
   \   00000124   08409DE5           LDR      R4,[SP, #+8]
   4755          	    } //xx
   \   00000128   015085E2           ADD      R5,R5,#+1
   \   0000012C   044084E2           ADD      R4,R4,#+4
   \   00000130   033084E0           ADD      R3,R4,R3
   \   00000134   200055E3           CMP      R5,#+32
   \   00000138   D4FFFFBA           BLT      ??zxpaintsmall_5
   4756          	    off=off2+32;
   \   0000013C   0C109DE5           LDR      R1,[SP, #+12]
   4757          	    scr=scr2-4;
   \   00000140   10309DE5           LDR      R3,[SP, #+16]
   4758          	  } //yy
   \   00000144   00509DE5           LDR      R5,[SP, #+0]
   \   00000148   201081E2           ADD      R1,R1,#+32
   \   0000014C   043043E2           SUB      R3,R3,#+4
   \   00000150   015085E2           ADD      R5,R5,#+1
   \   00000154   00508DE5           STR      R5,[SP, #+0]
   \   00000158   080055E3           CMP      R5,#+8
   \   0000015C   C8FFFFBA           BLT      ??zxpaintsmall_4
   4759          	  off=off3+2048;//256*8;
   \   00000160   14109DE5           LDR      R1,[SP, #+20]
   4760          	}
   \   00000164   04509DE5           LDR      R5,[SP, #+4]
   \   00000168   801E81E2           ADD      R1,R1,#+2048
   \   0000016C   015085E2           ADD      R5,R5,#+1
   \   00000170   04508DE5           STR      R5,[SP, #+4]
   \   00000174   030055E3           CMP      R5,#+3
   \   00000178   BEFFFFBA           BLT      ??zxpaintsmall_3
   4761          }
   \   0000017C   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000180   F08FBDE8           POP      {R4-R11,PC}      ;; return
   4762          

   \                                 In segment CODE, align 4, keep-with-next
   4763          public void zxpaint() { // повернуто с "окошком"
   4764          	int x,y,xx,yy,yyy, col1, col2, col3, pal=22528+minx, dminy=miny, dy;
   \                     zxpaint:
   \   00000000   ........           LDR      R0,??DataTable1154  ;; minx
   \   00000004   ........           LDR      R2,??DataTable1159  ;; miny
   \   00000008   F04F2DE9           PUSH     {R4-R11,LR}
   \   0000000C   1CD04DE2           SUB      SP,SP,#+28
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   002092E5           LDR      R2,[R2, #+0]
   \   00000018   586C81E2           ADD      R6,R1,#+22528
   \   0000001C   00208DE5           STR      R2,[SP, #+0]
   4765          	int b, off=16384+minx, off2, off3, scr=width-1, width8=width<<3, scr2;
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   4766          	for(yyy=dy=0;yyy<3 && dy<=maxy; yyy++){
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   402C80E2           ADD      R2,R0,#+16384
   \   0000002C   ........           LDR      R0,??DataTable1126  ;; width
   \   00000030   04508DE5           STR      R5,[SP, #+4]
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   0C508DE5           STR      R5,[SP, #+12]
   \   0000003C   013041E2           SUB      R3,R1,#+1
   \   00000040   8111A0E1           LSL      R1,R1,#+3
   \                     ??zxpaint_0:
   \   00000044   ........           LDR      R4,??DataTable1116  ;; maxy
   \   00000048   04509DE5           LDR      R5,[SP, #+4]
   \   0000004C   004094E5           LDR      R4,[R4, #+0]
   \   00000050   050054E1           CMP      R4,R5
   \   00000054   5D0000BA           BLT      ??zxpaint_1
   4767          	  off3=off;
   4768          	  if(dminy>0){
   \   00000058   00409DE5           LDR      R4,[SP, #+0]
   \   0000005C   18208DE5           STR      R2,[SP, #+24]
   \   00000060   010054E3           CMP      R4,#+1
   4769          	    off+=dminy<<5;
   \   00000064   8442A0A1           LSLGE    R4,R4,#+5
   \   00000068   022084A0           ADDGE    R2,R4,R2
   4770          	    pal+=dminy<<5;
   \   0000006C   066084A0           ADDGE    R6,R4,R6
   4771          	  }
   4772            	  for(yy=0;yy<8-dminy && ++dy<=maxy; yy++){
   \   00000070   0050A0E3           MOV      R5,#+0
   \   00000074   090000EA           B        ??zxpaint_2
   4773            	    off2=off; scr2=scr;
   4774          	    for(xx=0;xx<maxx;xx++){//32
   4775          	      b=mem[pal++];
   4776          	      col3=(b>>3)&0x08;
   4777          	      col1=colors[(b & 0x07)|col3];
   4778          	      col2=colors[((b>>3)&0x07)|col3];
   4779                    for(y=0;y<8;y++){
   4780                      b=mem[off];
   4781          	        for(x=0;x<8;x++,scr+=width){
   4782          	          screen[scr]=((b & 0x80)!=0)?col1:col2;
   4783          	          b<<=1;
   4784          	        } //x
   4785          	        off+=256;
   4786          	        scr-=(width8)+1;
   4787          	      } //y
   4788          	      off-=2047;//(256*8-1);
   4789          	      scr+=(width8)+8;
   4790          	    } //xx
   4791          	    off=off2+32;
   4792          	    pal+=32-maxx;
   \                     ??zxpaint_3:
   \   00000078   ........           LDR      R4,??DataTable1149  ;; maxx
   \   0000007C   10209DE5           LDR      R2,[SP, #+16]
   \   00000080   004094E5           LDR      R4,[R4, #+0]
   4793          	    scr=scr2-8;
   \   00000084   08509DE5           LDR      R5,[SP, #+8]
   \   00000088   203086E2           ADD      R3,R6,#+32
   \   0000008C   046043E0           SUB      R6,R3,R4
   \   00000090   14309DE5           LDR      R3,[SP, #+20]
   \   00000094   202082E2           ADD      R2,R2,#+32
   \   00000098   083043E2           SUB      R3,R3,#+8
   \   0000009C   015085E2           ADD      R5,R5,#+1
   \                     ??zxpaint_2:
   \   000000A0   08508DE5           STR      R5,[SP, #+8]
   \   000000A4   08409DE5           LDR      R4,[SP, #+8]
   \   000000A8   00509DE5           LDR      R5,[SP, #+0]
   \   000000AC   085065E2           RSB      R5,R5,#+8
   \   000000B0   050054E1           CMP      R4,R5
   \   000000B4   3C0000AA           BGE      ??zxpaint_4
   \   000000B8   ........           LDR      R4,??DataTable1116  ;; maxy
   \   000000BC   04509DE5           LDR      R5,[SP, #+4]
   \   000000C0   004094E5           LDR      R4,[R4, #+0]
   \   000000C4   015085E2           ADD      R5,R5,#+1
   \   000000C8   04508DE5           STR      R5,[SP, #+4]
   \   000000CC   050054E1           CMP      R4,R5
   \   000000D0   350000BA           BLT      ??zxpaint_4
   \   000000D4   ........           LDR      R4,??DataTable1149  ;; maxx
   \   000000D8   10208DE5           STR      R2,[SP, #+16]
   \   000000DC   004094E5           LDR      R4,[R4, #+0]
   \   000000E0   14308DE5           STR      R3,[SP, #+20]
   \   000000E4   00C0A0E3           MOV      R12,#+0
   \   000000E8   010054E3           CMP      R4,#+1
   \   000000EC   150000AA           BGE      ??zxpaint_5
   \   000000F0   E0FFFFEA           B        ??zxpaint_3
   \                     ??zxpaint_6:
   \   000000F4   ........           LDR      LR,??DataTable1187  ;; screen
   \   000000F8   8550A0E1           LSL      R5,R5,#+1
   \   000000FC   00E09EE5           LDR      LR,[LR, #+0]
   \   00000100   019089E2           ADD      R9,R9,#+1
   \   00000104   0EB0C3E7           STRB     R11,[R3, +LR]
   \   00000108   00B090E5           LDR      R11,[R0, #+0]
   \   0000010C   080059E3           CMP      R9,#+8
   \   00000110   03308BE0           ADD      R3,R11,R3
   \   00000114   200000BA           BLT      ??zxpaint_7
   \   00000118   402F82E2           ADD      R2,R2,#+256
   \   0000011C   013043E0           SUB      R3,R3,R1
   \   00000120   013043E2           SUB      R3,R3,#+1
   \   00000124   01A08AE2           ADD      R10,R10,#+1
   \   00000128   08005AE3           CMP      R10,#+8
   \   0000012C   170000BA           BLT      ??zxpaint_8
   \   00000130   FE40E0E3           MVN      R4,#+254
   \   00000134   704EC4E3           BIC      R4,R4,#0x700
   \   00000138   022084E0           ADD      R2,R4,R2
   \   0000013C   084081E2           ADD      R4,R1,#+8
   \   00000140   033084E0           ADD      R3,R4,R3
   \   00000144   01C08CE2           ADD      R12,R12,#+1
   \                     ??zxpaint_5:
   \   00000148   ........           LDR      R4,??DataTable1149  ;; maxx
   \   0000014C   004094E5           LDR      R4,[R4, #+0]
   \   00000150   04005CE1           CMP      R12,R4
   \   00000154   C7FFFFAA           BGE      ??zxpaint_3
   \   00000158   ........           LDR      R4,??DataTable1120  ;; mem
   \   0000015C   ........           LDR      R9,??DataTable1121  ;; colors
   \   00000160   005094E5           LDR      R5,[R4, #+0]
   \   00000164   0550D6E7           LDRB     R5,[R6, +R5]
   \   00000168   016086E2           ADD      R6,R6,#+1
   \   0000016C   C5A1A0E1           ASR      R10,R5,#+3
   \   00000170   08800AE2           AND      R8,R10,#0x8
   \   00000174   075005E2           AND      R5,R5,#0x7
   \   00000178   055088E1           ORR      R5,R8,R5
   \   0000017C   D97095E1           LDRSB    R7,[R5, +R9]
   \   00000180   07500AE2           AND      R5,R10,#0x7
   \   00000184   055088E1           ORR      R5,R8,R5
   \   00000188   D98095E1           LDRSB    R8,[R5, +R9]
   \   0000018C   00A0A0E3           MOV      R10,#+0
   \                     ??zxpaint_8:
   \   00000190   005094E5           LDR      R5,[R4, #+0]
   \   00000194   0090A0E3           MOV      R9,#+0
   \   00000198   0550D2E7           LDRB     R5,[R2, +R5]
   \                     ??zxpaint_7:
   \   0000019C   800015E3           TST      R5,#0x80
   \   000001A0   08B0A001           MOVEQ    R11,R8
   \   000001A4   07B0A011           MOVNE    R11,R7
   \   000001A8   D1FFFFEA           B        ??zxpaint_6
   4794          	  } //yy
   4795          	  dminy=0;
   4796          	  off=off3+2048;//256*8;
   \                     ??zxpaint_4:
   \   000001AC   18209DE5           LDR      R2,[SP, #+24]
   4797          	}
   \   000001B0   0C509DE5           LDR      R5,[SP, #+12]
   \   000001B4   0040A0E3           MOV      R4,#+0
   \   000001B8   00408DE5           STR      R4,[SP, #+0]
   \   000001BC   802E82E2           ADD      R2,R2,#+2048
   \   000001C0   015085E2           ADD      R5,R5,#+1
   \   000001C4   0C508DE5           STR      R5,[SP, #+12]
   \   000001C8   030055E3           CMP      R5,#+3
   \   000001CC   9CFFFFBA           BLT      ??zxpaint_0
   4798          }
   \                     ??zxpaint_1:
   \   000001D0   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000001D4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   4799          
   4800          

   \                                 In segment CODE, align 4, keep-with-next
   4801           void rotate(){ // Повернуть экран
   4802            int i,j,k,l;
   4803            if(C65){// && width==height){ //90 поворот на c65
   \                     rotate:
   \   00000000   ........           LDR      R1,??DataTable1148  ;; C65
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000000C   ........           LDR      R4,??DataTable1187  ;; screen
   \   00000010   ........           LDR      R6,??DataTable1186  ;; screensize
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   000096E5           LDR      R0,[R6, #+0]
   \   0000001C   4800000A           BEQ      ??rotate_0
   4804              if(scrrot==null) scrrot=malloc(screensize);
   \   00000020   ........           LDR      R5,??DataTable1125  ;; scrrot
   \   00000024   001095E5           LDR      R1,[R5, #+0]
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0100001A           BNE      ??rotate_1
   \   00000030   140000EF           SWI      +20
   \   00000034   000085E5           STR      R0,[R5, #+0]
   4805              memcpy(scrrot,screen,screensize);
   \                     ??rotate_1:
   \   00000038   002096E5           LDR      R2,[R6, #+0]
   \   0000003C   001094E5           LDR      R1,[R4, #+0]
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   ........           _BLF     memcpy,??memcpy??rA
   4806              l=0;
   4807              for(j=0;j<width;j++){
   \   00000048   ........           LDR      R0,??DataTable1126  ;; width
   \   0000004C   0030A0E3           MOV      R3,#+0
   \   00000050   002090E5           LDR      R2,[R0, #+0]
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   010052E3           CMP      R2,#+1
   \   0000005C   140000AA           BGE      ??rotate_2
   4808                k=width-1-j;
   4809                for(i=0;i<width;i++,l++,k+=width)
   4810                  screen[l]=scrrot[k];
   4811              }
   4812          //    if(width==130){//fzx&&
   4813                l=width-4;
   4814                for(i=0;i<height;i++,l+=width)
   \                     ??rotate_3:
   \   00000060   ........           LDR      R3,??DataTable1150  ;; height
   \   00000064   001090E5           LDR      R1,[R0, #+0]
   \   00000068   006093E5           LDR      R6,[R3, #+0]
   \   0000006C   042041E2           SUB      R2,R1,#+4
   \   00000070   0050A0E3           MOV      R5,#+0
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   010056E3           CMP      R6,#+1
   \   0000007C   230000AA           BGE      ??rotate_4
   \   00000080   250000EA           B        ??rotate_5
   \                     ??rotate_6:
   \   00000084   00E095E5           LDR      LR,[R5, #+0]
   \   00000088   00C094E5           LDR      R12,[R4, #+0]
   \   0000008C   DEE092E1           LDRSB    LR,[R2, +LR]
   \   00000090   016086E2           ADD      R6,R6,#+1
   \   00000094   0CE0C3E7           STRB     LR,[R3, +R12]
   \   00000098   00C090E5           LDR      R12,[R0, #+0]
   \   0000009C   013083E2           ADD      R3,R3,#+1
   \   000000A0   02208CE0           ADD      R2,R12,R2
   \                     ??rotate_7:
   \   000000A4   00C090E5           LDR      R12,[R0, #+0]
   \   000000A8   0C0056E1           CMP      R6,R12
   \   000000AC   F4FFFFBA           BLT      ??rotate_6
   \                     ??rotate_8:
   \   000000B0   011081E2           ADD      R1,R1,#+1
   \                     ??rotate_2:
   \   000000B4   00C090E5           LDR      R12,[R0, #+0]
   \   000000B8   0C0051E1           CMP      R1,R12
   \   000000BC   E7FFFFAA           BGE      ??rotate_3
   \   000000C0   01204CE2           SUB      R2,R12,#+1
   \   000000C4   012042E0           SUB      R2,R2,R1
   \   000000C8   0060A0E3           MOV      R6,#+0
   \   000000CC   01005CE3           CMP      R12,#+1
   \   000000D0   F3FFFFAA           BGE      ??rotate_7
   \   000000D4   F5FFFFEA           B        ??rotate_8
   4815                  screen[l]=screen[l+1]=screen[l+2]=screen[l+3]=0;
   \                     ??rotate_9:
   \   000000D8   006094E5           LDR      R6,[R4, #+0]
   \   000000DC   015085E2           ADD      R5,R5,#+1
   \   000000E0   066082E0           ADD      R6,R2,R6
   \   000000E4   0310C6E5           STRB     R1,[R6, #+3]
   \   000000E8   006094E5           LDR      R6,[R4, #+0]
   \   000000EC   066082E0           ADD      R6,R2,R6
   \   000000F0   0210C6E5           STRB     R1,[R6, #+2]
   \   000000F4   006094E5           LDR      R6,[R4, #+0]
   \   000000F8   066082E0           ADD      R6,R2,R6
   \   000000FC   0110C6E5           STRB     R1,[R6, #+1]
   \   00000100   006094E5           LDR      R6,[R4, #+0]
   \   00000104   0610C2E7           STRB     R1,[R2, +R6]
   \   00000108   006090E5           LDR      R6,[R0, #+0]
   \   0000010C   022086E0           ADD      R2,R6,R2
   \                     ??rotate_4:
   \   00000110   006093E5           LDR      R6,[R3, #+0]
   \   00000114   060055E1           CMP      R5,R6
   \   00000118   EEFFFFBA           BLT      ??rotate_9
   4816                l=128*width;//screenlength;
   \                     ??rotate_5:
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   8023A0E1           LSL      R2,R0,#+7
   4817                i=width<<2;
   \   00000124   0001A0E1           LSL      R0,R0,#+2
   4818          //      i=width+width;
   4819                do screen[l++]=0;
   \                     ??rotate_10:
   \   00000128   003094E5           LDR      R3,[R4, #+0]
   4820                while(--i>0);
   \   0000012C   010040E2           SUB      R0,R0,#+1
   \   00000130   0310C2E7           STRB     R1,[R2, +R3]
   \   00000134   012082E2           ADD      R2,R2,#+1
   \   00000138   010050E3           CMP      R0,#+1
   \   0000013C   F9FFFFAA           BGE      ??rotate_10
   \   00000140   7080BDE8           POP      {R4-R6,PC}
   4821            }else
   4822            for(i=(screensize>>1),j=i-1;i>0;){
   \                     ??rotate_0:
   \   00000144   C000A0E1           ASR      R0,R0,#+1
   \   00000148   011040E2           SUB      R1,R0,#+1
   \   0000014C   010050E3           CMP      R0,#+1
   \   00000150   7080BDB8           POPLT    {R4-R6,PC}
   4823              k=screen[--i]; screen[i]=screen[++j]; screen[j]=k;
   \                     ??rotate_11:
   \   00000154   003094E5           LDR      R3,[R4, #+0]
   \   00000158   010040E2           SUB      R0,R0,#+1
   \   0000015C   035080E0           ADD      R5,R0,R3
   \   00000160   D020D5E1           LDRSB    R2,[R5, #+0]
   \   00000164   011081E2           ADD      R1,R1,#+1
   \   00000168   D33091E1           LDRSB    R3,[R1, +R3]
   4824            }
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   0030C5E5           STRB     R3,[R5, #+0]
   \   00000174   003094E5           LDR      R3,[R4, #+0]
   \   00000178   0320C1E7           STRB     R2,[R1, +R3]
   \   0000017C   F4FFFFAA           BGE      ??rotate_11
   4825          }
   \   00000180   7080BDE8           POP      {R4-R6,PC}       ;; return
   4826          
   4827          extern void zxrepaint(char *scrbuf, char *scr); // Повернутый экран
   4828          extern void zxelpaint(char *s, char *ss); //for EL
   4829          extern void zx65paint(char *s, char *ss); //x65
   4830          
   4831          

   \                                 In segment CODE, align 4, keep-with-next
   4832          void onredraw(void){
   4833            if(!mode){
   \                     onredraw:
   \   00000000   ........           LDR      R0,??DataTable1206  ;; mode
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   2900001A           BNE      ??onredraw_0
   4834              if(fzxrotate){ 
   \   00000014   ........           LDR      R4,??DataTable1221  ;; fzxrotate
   \   00000018   D000D4E1           LDRSB    R0,[R4, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0100000A           BEQ      ??onredraw_1
   4835                zxpaintrotate(); 
   \   00000024   ........           BL       zxpaintrotate
   \   00000028   1A0000EA           B        ??onredraw_2
   4836              }else{ 
   4837                if(!fzxsmall){ 
   \                     ??onredraw_1:
   \   0000002C   ........           LDR      R0,??DataTable1223  ;; fzxsmall
   \   00000030   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   1500001A           BNE      ??onredraw_3
   4838                  if(C65) zxpaintsmall(); 
   \   0000003C   ........           LDR      R0,??DataTable1148  ;; C65
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0100000A           BEQ      ??onredraw_4
   \   0000004C   ........           BL       zxpaintsmall
   \   00000050   100000EA           B        ??onredraw_2
   4839                  else{
   4840                    zxrepaint(scrbuf,(char*)mem);
   \                     ??onredraw_4:
   \   00000054   74509FE5           LDR      R5,??onredraw_5  ;; scrbuf
   \   00000058   ........           LDR      R0,??DataTable1224  ;; mem
   \   0000005C   001090E5           LDR      R1,[R0, #+0]
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           _BLF     zxrepaint,??zxrepaint??rA
   4841                    if(EL71) zxelpaint(screen,scrbuf);
   \   00000068   64009FE5           LDR      R0,??onredraw_5+0x4  ;; EL71
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   ........           LDR      R0,??DataTable1187  ;; screen
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   0100000A           BEQ      ??onredraw_6
   \   00000084   ........           _BLF     zxelpaint,??zxelpaint??rA
   \   00000088   020000EA           B        ??onredraw_2
   4842                    else zx65paint(screen,scrbuf);
   \                     ??onredraw_6:
   \   0000008C   ........           _BLF     zx65paint,??zx65paint??rA
   \   00000090   000000EA           B        ??onredraw_2
   4843                  }
   4844                }else zxpaint(); //сюда тож
   \                     ??onredraw_3:
   \   00000094   ........           BL       zxpaint
   4845              }
   4846              if(frotate && !fzxrotate) rotate();
   \                     ??onredraw_2:
   \   00000098   ........           LDR      R0,??DataTable1156  ;; frotate
   \   0000009C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   3080BD08           POPEQ    {R4,R5,PC}
   \   000000A8   D000D4E1           LDRSB    R0,[R4, #+0]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   3080BD18           POPNE    {R4,R5,PC}
   \   000000B4   ........           BL       rotate
   \   000000B8   3080BDE8           POP      {R4,R5,PC}
   4847            }else if(mode==99) drawhelp();
   \                     ??onredraw_0:
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   630050E3           CMP      R0,#+99
   \   000000C4   3080BD18           POPNE    {R4,R5,PC}
   \   000000C8   ........           BL       drawhelp
   4848          }
   \   000000CC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??onredraw_5:
   \   000000D0   ........           DC32     scrbuf
   \   000000D4   ........           DC32     EL71
   4849          

   \                                 In segment CODE, align 4, keep-with-next
   4850          boolean loadini(){
   4851            int f;
   4852            char *ptr;
   4853            *(ptr=file)='i'; *++ptr='n'; *++ptr='i'; *++ptr=0;
   \                     loadini:
   \   00000000   ........           LDR      R0,??DataTable1166  ;; file
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   6910A0E3           MOV      R1,#+105
   4854            if((f=fopen(filename,A_ReadOnly+A_BIN,P_READ,&err))==-1) return false;
   \   00000010   ........           LDR      R6,??DataTable1181  ;; err
   \   00000014   ........           STRB     R1,[R0], #+1
   \   00000018   6E20A0E3           MOV      R2,#+110
   \   0000001C   ........           STRB     R2,[R0], #+1
   \   00000020   ........           STRB     R1,[R0], #+1
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
   \   0000002C   ........           LDR      R0,??DataTable1167  ;; filename
   \   00000030   0630A0E1           MOV      R3,R6
   \   00000034   8020A0E3           MOV      R2,#+128
   \   00000038   801CA0E3           MOV      R1,#+32768
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0050A0E1           MOV      R5,R0
   \   00000044   010075E3           CMN      R5,#+1
   \   00000048   0900000A           BEQ      ??loadini_0
   4855            if(fread(f, param, paramlength, &err)!=paramlength){ fclose(f,&err); return false;}
   \   0000004C   ........           LDR      R4,??DataTable1202  ;; param
   \   00000050   0630A0E1           MOV      R3,R6
   \   00000054   9720A0E3           MOV      R2,#+151
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   0B0000EF           SWI      +11
   \   00000060   970050E3           CMP      R0,#+151
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   0200000A           BEQ      ??loadini_1
   \   00000070   0D0000EF           SWI      +13
   \                     ??loadini_0:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   7080BDE8           POP      {R4-R6,PC}
   4856            fclose(f,&err);
   \                     ??loadini_1:
   \   0000007C   0D0000EF           SWI      +13
   4857            minx=param[95];
   \   00000080   DF15D4E1           LDRSB    R1,[R4, #+95]
   \   00000084   ........           LDR      R0,??DataTable1154  ;; minx
   4858            miny=param[96];
   4859            if(!(fps=(unsigned)param[97])) fps=262/6;
   4860            if(!(tst=(unsigned)param[98])) tst=4;
   4861            tstatesPerInterrupt=tst*20000;
   \   00000088   2020A0E3           MOV      R2,#+32
   \   0000008C   001080E5           STR      R1,[R0, #+0]
   \   00000090   D016D4E1           LDRSB    R1,[R4, #+96]
   \   00000094   ........           LDR      R0,??DataTable1159  ;; miny
   \   00000098   4E2C82E3           ORR      R2,R2,#0x4E00
   \   0000009C   001080E5           STR      R1,[R0, #+0]
   \   000000A0   D106D4E1           LDRSB    R0,[R4, #+97]
   \   000000A4   ........           LDR      R1,??DataTable1218  ;; fps
   4862            f=(unsigned)param[99];
   \   000000A8   D356D4E1           LDRSB    R5,[R4, #+99]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   2B00A003           MOVEQ    R0,#+43
   \   000000B4   000081E5           STR      R0,[R1, #+0]
   \   000000B8   D206D4E1           LDRSB    R0,[R4, #+98]
   \   000000BC   ........           LDR      R1,??DataTable1219  ;; `tst`
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0400A003           MOVEQ    R0,#+4
   \   000000C8   000081E5           STR      R0,[R1, #+0]
   \   000000CC   ........           LDR      R1,??DataTable1220  ;; tstatesPerInterrupt
   \   000000D0   920000E0           MUL      R0,R2,R0
   \   000000D4   000081E5           STR      R0,[R1, #+0]
   4863            ldir=f&0x1;
   \   000000D8   ........           LDR      R0,??DataTable1162  ;; ldir
   \   000000DC   011005E2           AND      R1,R5,#0x1
   \   000000E0   0010C0E5           STRB     R1,[R0, #+0]
   4864          //  fc65=f&0x2;
   4865            frotate=f&0x4;
   \   000000E4   ........           LDR      R0,??DataTable1156  ;; frotate
   \   000000E8   041005E2           AND      R1,R5,#0x4
   \   000000EC   0010C0E5           STRB     R1,[R0, #+0]
   4866            fzxrotate=f&0x8;
   \   000000F0   ........           LDR      R0,??DataTable1221  ;; fzxrotate
   \   000000F4   081005E2           AND      R1,R5,#0x8
   \   000000F8   0010C0E5           STRB     R1,[R0, #+0]
   4867            fzxsmall=f&0x10;
   \   000000FC   ........           LDR      R0,??DataTable1223  ;; fzxsmall
   \   00000100   101005E2           AND      R1,R5,#0x10
   \   00000104   0010C0E5           STRB     R1,[R0, #+0]
   4868            maxx=(C65?130:height)>>3; //???
   \   00000108   ........           LDR      R0,??DataTable1148  ;; C65
   \   0000010C   ........           LDR      R1,??DataTable1149  ;; maxx
   \   00000110   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   ........           LDREQ    R0,??DataTable1150  ;; height
   \   0000011C   8200A013           MOVNE    R0,#+130
   \   00000120   00009005           LDREQ    R0,[R0, #+0]
   \   00000124   C001A0E1           ASR      R0,R0,#+3
   \   00000128   000081E5           STR      R0,[R1, #+0]
   4869            return true;
   \   0000012C   0100A0E3           MOV      R0,#+1
   \   00000130   7080BDE8           POP      {R4-R6,PC}       ;; return
   4870          }
   4871          

   \                                 In segment CODE, align 4, keep-with-next
   4872          boolean saveini(){
   4873            int f;
   4874            char *ptr;
   4875            *(ptr=file)='i'; *++ptr='n'; *++ptr='i'; *++ptr=0;
   \                     saveini:
   \   00000000   ........           LDR      R0,??DataTable1166  ;; file
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   4876            if((f=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err))==-1) return false;
   \   0000000C   ........           LDR      R4,??DataTable1181  ;; err
   \   00000010   6910A0E3           MOV      R1,#+105
   \   00000014   ........           STRB     R1,[R0], #+1
   \   00000018   6E20A0E3           MOV      R2,#+110
   \   0000001C   ........           STRB     R2,[R0], #+1
   \   00000020   ........           STRB     R1,[R0], #+1
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
   \   0000002C   ........           LDR      R0,??DataTable1167  ;; filename
   \   00000030   0430A0E1           MOV      R3,R4
   \   00000034   602FA0E3           MOV      R2,#+384
   \   00000038   0210A0E3           MOV      R1,#+2
   \   0000003C   811C81E3           ORR      R1,R1,#0x8100
   \   00000040   0A0000EF           SWI      +10
   \   00000044   0050A0E1           MOV      R5,R0
   \   00000048   010075E3           CMN      R5,#+1
   \   0000004C   0000A003           MOVEQ    R0,#+0
   \   00000050   3080BD08           POPEQ    {R4,R5,PC}
   4877          
   4878            param[95]=(char)minx;
   \   00000054   ........           LDR      R0,??DataTable1154  ;; minx
   \   00000058   ........           LDR      R1,??DataTable1202  ;; param
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   4879            param[96]=(char)miny;
   4880            param[97]=(char)fps;
   4881            param[98]=(char)tst;
   4882            param[99]=(ldir?0x1:0)|(frotate?0x4:0)|(fzxrotate?0x8:0)|(fzxsmall?0x10:0);
   \   00000060   ........           LDR      R2,??DataTable1156  ;; frotate
   \   00000064   ........           LDR      R3,??DataTable1221  ;; fzxrotate
   \   00000068   ........           LDR      R12,??DataTable1223  ;; fzxsmall
   \   0000006C   5F00C1E5           STRB     R0,[R1, #+95]
   \   00000070   ........           LDR      R0,??DataTable1159  ;; miny
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   D020D2E1           LDRSB    R2,[R2, #+0]
   \   0000007C   D030D3E1           LDRSB    R3,[R3, #+0]
   \   00000080   D0C0DCE1           LDRSB    R12,[R12, #+0]
   \   00000084   6000C1E5           STRB     R0,[R1, #+96]
   \   00000088   ........           LDR      R0,??DataTable1218  ;; fps
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   6100C1E5           STRB     R0,[R1, #+97]
   \   00000094   ........           LDR      R0,??DataTable1219  ;; `tst`
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   6200C1E5           STRB     R0,[R1, #+98]
   \   000000A0   ........           LDR      R0,??DataTable1162  ;; ldir
   \   000000A4   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0100A013           MOVNE    R0,#+1
   \   000000B0   000052E3           CMP      R2,#+0
   \   000000B4   0420A013           MOVNE    R2,#+4
   \   000000B8   000053E3           CMP      R3,#+0
   \   000000BC   0830A013           MOVNE    R3,#+8
   \   000000C0   00005CE3           CMP      R12,#+0
   \   000000C4   10C0A013           MOVNE    R12,#+16
   \   000000C8   000082E1           ORR      R0,R2,R0
   \   000000CC   000083E1           ORR      R0,R3,R0
   \   000000D0   00008CE1           ORR      R0,R12,R0
   \   000000D4   6300C1E5           STRB     R0,[R1, #+99]
   4883            
   4884            fwrite(f, param, paramlength, &err);
   \   000000D8   0430A0E1           MOV      R3,R4
   \   000000DC   9720A0E3           MOV      R2,#+151
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   0C0000EF           SWI      +12
   4885            fclose(f,&err);
   \   000000E8   0410A0E1           MOV      R1,R4
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   0D0000EF           SWI      +13
   4886            return true;
   \   000000F4   0100A0E3           MOV      R0,#+1
   \   000000F8   3080BDE8           POP      {R4,R5,PC}       ;; return
   4887          }
   4888          

   \                                 In segment CODE, align 4, keep-with-next
   4889          boolean loadrom(){
   4890            int f;
   4891            char *ptr;
   4892            if(fz128){ //128k
   \                     loadrom:
   \   00000000   ........           LDR      R3,??DataTable1239  ;; fz128
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   D030D3E1           LDRSB    R3,[R3, #+0]
   \   0000000C   ........           LDR      R6,??DataTable1234  ;; zx
   \   00000010   ........           LDR      R4,??DataTable1224  ;; mem
   \   00000014   001096E5           LDR      R1,[R6, #+0]
   \   00000018   002094E5           LDR      R2,[R4, #+0]
   \   0000001C   4000A0E3           MOV      R0,#+64
   \   00000020   800B80E3           ORR      R0,R0,#0x20000
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   000053E3           CMP      R3,#+0
   \   0000002C   0E00000A           BEQ      ??loadrom_0
   4893              if(mem && zx) return true;
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   0300000A           BEQ      ??loadrom_1
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0400000A           BEQ      ??loadrom_2
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   F08FBDE8           POP      {R4-R11,PC}
   4894              if(!mem) zx=malloc( rom48size );
   \                     ??loadrom_1:
   \   00000048   140000EF           SWI      +20
   \   0000004C   0020A0E1           MOV      R2,R0
   \   00000050   000000EA           B        ??loadrom_3
   4895              else{ zx=mem; mem=null;}
   \                     ??loadrom_2:
   \   00000054   005084E5           STR      R5,[R4, #+0]
   \                     ??loadrom_3:
   \   00000058   002086E5           STR      R2,[R6, #+0]
   4896              mem=malloc( rom128size );
   \   0000005C   C00BA0E3           MOV      R0,#+196608
   \                     ??loadrom_4:
   \   00000060   140000EF           SWI      +20
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   060000EA           B        ??loadrom_5
   4897            }else{ //48k
   4898              if(mem && !zx) return true;
   \                     ??loadrom_0:
   \   0000006C   000052E3           CMP      R2,#+0
   \   00000070   0100000A           BEQ      ??loadrom_6
   \   00000074   000051E3           CMP      R1,#+0
   \   00000078   4C00000A           BEQ      ??loadrom_7
   4899              if(!zx) mem=malloc( rom48size );
   \                     ??loadrom_6:
   \   0000007C   000051E3           CMP      R1,#+0
   \   00000080   F6FFFF0A           BEQ      ??loadrom_4
   4900              else{ mem=zx; zx=null;}
   \   00000084   005086E5           STR      R5,[R6, #+0]
   4901            }
   4902            reset();    
   4903              *(ptr=file)='4'; *++ptr='8'; *++ptr=0;
   \                     ??loadrom_5:
   \   00000088   ........           LDR      R6,??DataTable1166  ;; file
   4904              if((f=fopen(filename,A_ReadOnly+A_BIN,P_READ,&err))==-1) return false;
   \   0000008C   ........           LDR      R8,??DataTable1167  ;; filename
   \   00000090   ........           LDR      R9,??DataTable1181  ;; err
   \   00000094   001084E5           STR      R1,[R4, #+0]
   \   00000098   ........           BL       reset
   \   0000009C   000096E5           LDR      R0,[R6, #+0]
   \   000000A0   3410A0E3           MOV      R1,#+52
   \   000000A4   ........           STRB     R1,[R0], #+1
   \   000000A8   3870A0E3           MOV      R7,#+56
   \   000000AC   ........           STRB     R7,[R0], #+1
   \   000000B0   0050C0E5           STRB     R5,[R0, #+0]
   \   000000B4   0930A0E1           MOV      R3,R9
   \   000000B8   8020A0E3           MOV      R2,#+128
   \   000000BC   801CA0E3           MOV      R1,#+32768
   \   000000C0   0800A0E1           MOV      R0,R8
   \   000000C4   0A0000EF           SWI      +10
   \   000000C8   00B0A0E1           MOV      R11,R0
   \   000000CC   05A0E0E1           MVN      R10,R5
   \   000000D0   0A0050E1           CMP      R0,R10
   \   000000D4   0000001A           BNE      ??loadrom_8
   \                     ??loadrom_9:
   \   000000D8   0E0000EA           B        ??loadrom_10
   4905              if(fz128){
   \                     ??loadrom_8:
   \   000000DC   ........           LDR      R1,??DataTable1239  ;; fz128
   \   000000E0   000094E5           LDR      R0,[R4, #+0]
   \   000000E4   D010D1E1           LDRSB    R1,[R1, #+0]
   \   000000E8   000051E3           CMP      R1,#+0
   \   000000EC   2000000A           BEQ      ??loadrom_11
   4906                if(fread(f, mem+rom48, rompage, &err)!=rompage){ fclose(f,&err); return false;}
   \   000000F0   0930A0E1           MOV      R3,R9
   \   000000F4   402CA0E3           MOV      R2,#+16384
   \   000000F8   A01B80E2           ADD      R1,R0,#+163840
   \   000000FC   0B00A0E1           MOV      R0,R11
   \   00000100   0B0000EF           SWI      +11
   \   00000104   400C50E3           CMP      R0,#+16384
   \   00000108   0400000A           BEQ      ??loadrom_12
   \                     ??loadrom_13:
   \   0000010C   0910A0E1           MOV      R1,R9
   \   00000110   0B00A0E1           MOV      R0,R11
   \   00000114   0D0000EF           SWI      +13
   \                     ??loadrom_10:
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   F08FBDE8           POP      {R4-R11,PC}
   4907                fclose(f,&err);
   \                     ??loadrom_12:
   \   00000120   0910A0E1           MOV      R1,R9
   \   00000124   0B00A0E1           MOV      R0,R11
   \   00000128   0D0000EF           SWI      +13
   4908                *(ptr=file)='1'; *++ptr='2'; *++ptr='8'; *++ptr=0;
   \   0000012C   000096E5           LDR      R0,[R6, #+0]
   \   00000130   3110A0E3           MOV      R1,#+49
   \   00000134   ........           STRB     R1,[R0], #+1
   \   00000138   3210A0E3           MOV      R1,#+50
   \   0000013C   ........           STRB     R1,[R0], #+1
   \   00000140   ........           STRB     R7,[R0], #+1
   \   00000144   0050C0E5           STRB     R5,[R0, #+0]
   4909                if((f=fopen(filename,A_ReadOnly+A_BIN,P_READ,&err))==-1) return false;
   \   00000148   0930A0E1           MOV      R3,R9
   \   0000014C   8020A0E3           MOV      R2,#+128
   \   00000150   801CA0E3           MOV      R1,#+32768
   \   00000154   0800A0E1           MOV      R0,R8
   \   00000158   0A0000EF           SWI      +10
   \   0000015C   00B0A0E1           MOV      R11,R0
   \   00000160   0A0050E1           CMP      R0,R10
   \   00000164   EBFFFF0A           BEQ      ??loadrom_10
   4910                if(fread(f, mem+rom128, rompage, &err)!=rompage){ fclose(f,&err); return false;}
   \   00000168   000094E5           LDR      R0,[R4, #+0]
   \   0000016C   B05BA0E3           MOV      R5,#+180224
   \   00000170   000000EA           B        ??loadrom_14
   4911                memcpy(mem,mem+rom128,rompage);
   4912              }else{
   4913                if(fread(f, mem+romstart, rompage, &err)!=rompage){ fclose(f,&err); return false;}
   \                     ??loadrom_11:
   \   00000174   405BA0E3           MOV      R5,#+65536
   \                     ??loadrom_14:
   \   00000178   0930A0E1           MOV      R3,R9
   \   0000017C   402CA0E3           MOV      R2,#+16384
   \   00000180   001085E0           ADD      R1,R5,R0
   \   00000184   0B00A0E1           MOV      R0,R11
   \   00000188   0B0000EF           SWI      +11
   \   0000018C   400C50E3           CMP      R0,#+16384
   \   00000190   DDFFFF1A           BNE      ??loadrom_13
   4914                memcpy(mem,mem+romstart,rompage);
   \   00000194   000094E5           LDR      R0,[R4, #+0]
   \   00000198   402CA0E3           MOV      R2,#+16384
   \   0000019C   001085E0           ADD      R1,R5,R0
   \   000001A0   ........           _BLF     memcpy,??memcpy??rA
   4915              }
   4916              fclose(f,&err);
   \   000001A4   0910A0E1           MOV      R1,R9
   \   000001A8   0B00A0E1           MOV      R0,R11
   \   000001AC   0D0000EF           SWI      +13
   4917              return true;
   \                     ??loadrom_7:
   \   000001B0   0100A0E3           MOV      R0,#+1
   \   000001B4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   4918          }
   4919          
   4920          //int z80startret=0;
   4921          

   \                                 In segment CODE, align 4, keep-with-next
   4922          public boolean z80start(boolean isz80){
   \                     z80start:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   4923            if(mem==null) loadrom();
   \   00000004   ........           LDR      R5,??DataTable1224  ;; mem
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   000095E5           LDR      R0,[R5, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000001A           BNE      ??z80start_0
   \   00000018   ........           BL       loadrom
   4924            if(isz80){
   \                     ??z80start_0:
   \   0000001C   0040A0E3           MOV      R4,#+0
   \   00000020   000056E3           CMP      R6,#+0
   \   00000024   2200000A           BEQ      ??z80start_1
   4925          //    memcpy(mem,mem+(fz128?(((pport & 0x10)==0)?rom128:rom48):romstart),rompage);
   4926                memcpy(mem,mem+romstart,rompage);
   \   00000028   000095E5           LDR      R0,[R5, #+0]
   4927              //System.arraycopy(mem,fz128?(((pport & 0x10)==0)?rom128:rom48):romstart,mem,0,rompage);
   4928              fneed128=false;
   4929              if(!loadZ80((fz128)?zx:mem,(fz128)?0:rombuf1)){
   \   0000002C   ........           LDR      R7,??DataTable1239  ;; fz128
   \   00000030   402CA0E3           MOV      R2,#+16384
   \   00000034   ........           LDR      R8,??DataTable1172  ;; fneed128
   \   00000038   ........           LDR      R6,??DataTable1234  ;; zx
   \   0000003C   401B80E2           ADD      R1,R0,#+65536
   \   00000040   ........           _BLF     memcpy,??memcpy??rA
   \   00000044   D000D7E1           LDRSB    R0,[R7, #+0]
   \   00000048   0040C8E5           STRB     R4,[R8, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   00009615           LDRNE    R0,[R6, #+0]
   \   00000054   0010A013           MOVNE    R1,#+0
   \   00000058   00009505           LDREQ    R0,[R5, #+0]
   \   0000005C   501BA003           MOVEQ    R1,#+81920
   \   00000060   ........           BL       loadZ80
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   1100001A           BNE      ??z80start_1
   4930          //      if(!fneed128){ return false;}
   4931                fneed128=true;
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   0000C8E5           STRB     R0,[R8, #+0]
   4932                fz128=true; loadrom();
   \   00000074   0000C7E5           STRB     R0,[R7, #+0]
   \   00000078   ........           BL       loadrom
   4933                memcpy(zx,zx+rombuf1,zxfilesize);
   \   0000007C   000096E5           LDR      R0,[R6, #+0]
   \   00000080   ........           LDR      R1,??DataTable1235  ;; zxfilesize
   \   00000084   002091E5           LDR      R2,[R1, #+0]
   \   00000088   501B80E2           ADD      R1,R0,#+81920
   \   0000008C   ........           _BLF     memcpy,??memcpy??rA
   4934                if(!loadZ80((fz128)?zx:mem,(fz128)?0:rombuf1)) return false;
   \   00000090   D000D7E1           LDRSB    R0,[R7, #+0]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   00009615           LDRNE    R0,[R6, #+0]
   \   0000009C   0010A013           MOVNE    R1,#+0
   \   000000A0   00009505           LDREQ    R0,[R5, #+0]
   \   000000A4   501BA003           MOVEQ    R1,#+81920
   \   000000A8   ........           BL       loadZ80
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   F081BD08           POPEQ    {R4-R8,PC}
   4935              }
   4936            }
   4937            resetKeyboard();
   \                     ??z80start_1:
   \   000000B4   ........           BL       resetKeyboard
   4938            for(int i=0;i<screensize;i++) screen[i]=0; // Залить фон  
   \   000000B8   ........           LDR      R1,??DataTable1186  ;; screensize
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   002091E5           LDR      R2,[R1, #+0]
   \   000000C4   010052E3           CMP      R2,#+1
   \   000000C8   050000AA           BGE      ??z80start_2
   \   000000CC   0100A0E3           MOV      R0,#+1
   \   000000D0   F081BDE8           POP      {R4-R8,PC}
   \                     ??z80start_3:
   \   000000D4   ........           LDR      R2,??DataTable1187  ;; screen
   \   000000D8   002092E5           LDR      R2,[R2, #+0]
   \   000000DC   0240C0E7           STRB     R4,[R0, +R2]
   \   000000E0   010080E2           ADD      R0,R0,#+1
   \                     ??z80start_2:
   \   000000E4   002091E5           LDR      R2,[R1, #+0]
   \   000000E8   020050E1           CMP      R0,R2
   \   000000EC   F8FFFFBA           BLT      ??z80start_3
   4939          //  znostop=true;
   4940          //  thread.start();
   4941          
   4942          //  repaint();
   4943            return true;
   \   000000F0   0100A0E3           MOV      R0,#+1
   \   000000F4   F081BDE8           POP      {R4-R8,PC}       ;; return
   4944          }
   4945          

   \                                 In segment CODE, align 4, keep-with-next
   4946          boolean z80zipload(char *fname){
   \                     z80zipload:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   4947             char *buf;
   4948             if(!(buf=loadfile(fname))) return false;
   \   00000004   ........           _BLF     loadfile,??loadfile??rA
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0A00000A           BEQ      ??z80zipload_0
   4949             if(fz128){ fz128=false; if(!loadrom()){ mfree(buf); return false;}}
   \   00000010   ........           LDR      R5,??DataTable1239  ;; fz128
   \   00000014   D000D5E1           LDRSB    R0,[R5, #+0]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0800000A           BEQ      ??z80zipload_1
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0000C5E5           STRB     R0,[R5, #+0]
   \   00000028   ........           BL       loadrom
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0300001A           BNE      ??z80zipload_1
   \                     ??z80zipload_2:
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   150000EF           SWI      +21
   \                     ??z80zipload_0:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   7080BDE8           POP      {R4-R6,PC}
   4950             if(!fz128 && loadfilesize>rom48size-rombuf1){ 
   \                     ??z80zipload_1:
   \   00000044   D000D5E1           LDRSB    R0,[R5, #+0]
   \   00000048   6C609FE5           LDR      R6,??z80zipload_3  ;; loadfilesize
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0900001A           BNE      ??z80zipload_4
   \   00000054   000096E5           LDR      R0,[R6, #+0]
   \   00000058   4110A0E3           MOV      R1,#+65
   \   0000005C   C01C81E3           ORR      R1,R1,#0xC000
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   040000BA           BLT      ??z80zipload_4
   4951               fz128=true; if(!loadrom()){ mfree(buf); return false;}
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   0000C5E5           STRB     R0,[R5, #+0]
   \   00000070   ........           BL       loadrom
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   EDFFFF0A           BEQ      ??z80zipload_2
   4952             }
   4953             memcpy(fz128?zx:(mem+rombuf1),buf,zxfilesize=loadfilesize);
   \                     ??z80zipload_4:
   \   0000007C   002096E5           LDR      R2,[R6, #+0]
   \   00000080   ........           LDR      R0,??DataTable1235  ;; zxfilesize
   \   00000084   0410A0E1           MOV      R1,R4
   \   00000088   002080E5           STR      R2,[R0, #+0]
   \   0000008C   D000D5E1           LDRSB    R0,[R5, #+0]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   ........           LDREQ    R0,??DataTable1224  ;; mem
   \   00000098   ........           LDRNE    R0,??DataTable1234  ;; zx
   \   0000009C   00009015           LDRNE    R0,[R0, #+0]
   \   000000A0   00009005           LDREQ    R0,[R0, #+0]
   \   000000A4   500B8002           ADDEQ    R0,R0,#+81920
   \   000000A8   ........           _BLF     memcpy,??memcpy??rA
   4954             mfree(buf);
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   150000EF           SWI      +21
   4955             return true;
   \   000000B4   0100A0E3           MOV      R0,#+1
   \   000000B8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??z80zipload_3:
   \   000000BC   ........           DC32     loadfilesize
   4956          }
   4957          

   \                                 In segment CODE, align 4, keep-with-next
   4958          boolean z80load(int f){
   \                     z80load:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   4959             int size=lseek(f,0,2,&err,&err);
   \   00000004   ........           LDR      R5,??DataTable1181  ;; err
   4960             if(fz128){ fz128=false; if(!loadrom()) return false;} 
   \   00000008   ........           LDR      R7,??DataTable1239  ;; fz128
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   0530A0E1           MOV      R3,R5
   \   0000001C   0220A0E3           MOV      R2,#+2
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   0F0000EF           SWI      +15
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   D000D7E1           LDRSB    R0,[R7, #+0]
   \   00000034   04D08DE2           ADD      SP,SP,#+4
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0400000A           BEQ      ??z80load_0
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   0000C7E5           STRB     R0,[R7, #+0]
   \   00000048   ........           BL       loadrom
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F080BD08           POPEQ    {R4-R7,PC}
   4961             if(!fz128 && size>rom48size-rombuf1){ 
   \                     ??z80load_0:
   \   00000054   D000D7E1           LDRSB    R0,[R7, #+0]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0800001A           BNE      ??z80load_1
   \   00000060   4100A0E3           MOV      R0,#+65
   \   00000064   C00C80E3           ORR      R0,R0,#0xC000
   \   00000068   000056E1           CMP      R6,R0
   \   0000006C   040000BA           BLT      ??z80load_1
   4962               fz128=true; if(!loadrom()) return false;
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   0000C7E5           STRB     R0,[R7, #+0]
   \   00000078   ........           BL       loadrom
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   F080BD08           POPEQ    {R4-R7,PC}
   4963             }
   4964             lseek(f,0,0,&err,&err);
   \                     ??z80load_1:
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   0530A0E1           MOV      R3,R5
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   0F0000EF           SWI      +15
   4965             if((zxfilesize=fread32(f,fz128?zx:(mem+rombuf1),size,&err))!=size) return false; //?????
   \   000000A0   D000D7E1           LDRSB    R0,[R7, #+0]
   \   000000A4   04D08DE2           ADD      SP,SP,#+4
   \   000000A8   0530A0E1           MOV      R3,R5
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   ........           LDREQ    R0,??DataTable1224  ;; mem
   \   000000B4   0620A0E1           MOV      R2,R6
   \   000000B8   ........           LDRNE    R0,??DataTable1234  ;; zx
   \   000000BC   00109015           LDRNE    R1,[R0, #+0]
   \   000000C0   00009005           LDREQ    R0,[R0, #+0]
   \   000000C4   501B8002           ADDEQ    R1,R0,#+81920
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   0B0000EF           SWI      +11
   \   000000D0   ........           LDR      R1,??DataTable1235  ;; zxfilesize
   \   000000D4   060050E1           CMP      R0,R6
   \   000000D8   000081E5           STR      R0,[R1, #+0]
   \   000000DC   0000A013           MOVNE    R0,#+0
   \   000000E0   F080BD18           POPNE    {R4-R7,PC}
   4966             return true;
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   F080BDE8           POP      {R4-R7,PC}       ;; return
   4967          }
   4968          

   \                                 In segment CODE, align 4, keep-with-next
   4969          void cls(){
   4970            memset(screen,0,screensize);
   \                     cls:
   \   00000000   ........           LDR      R0,??DataTable1186  ;; screensize
   \   00000004   002090E5           LDR      R2,[R0, #+0]
   \   00000008   ........           LDR      R0,??DataTable1187  ;; screen
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BF      memset,??memset??rA  ;; tailcall
   4971          //  for(int i=0;i<screensize;i++) screen[i]=0; // Залить фон  
   4972          }
   4973          ///////////////////////////////////////////////////
   4974          //////////////////////////////////////////////////

   \                                 In segment DATA_Z, align 4, align-sorted
   4975          volatile int xx=0, yy=0;
   \                     xx:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     yy:
   \   00000000                      DS8 4
   4976          

   \                                 In segment CODE, align 4, keep-with-next
   4977          void timer_proc(void){
   4978            if(!mode){
   \                     timer_proc:
   \   00000000   ........           LDR      R0,??DataTable1206  ;; mode
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000001A           BNE      ??timer_proc_0
   4979              REDRAW();
   \   00000014   720100EF           SWI      +370
   4980            }
   4981            GBS_StartTimerProc(&timer,fps,timer_proc);
   \                     ??timer_proc_0:
   \   00000018   ........           LDR      R0,??DataTable1218  ;; fps
   \   0000001C   ........           LDR      R2,??DataTable1193  ;; timer_proc
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   ........           LDR      R0,??DataTable1228  ;; timer
   \   00000028   4D0000EF           SWI      +77
   4982          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   4983          

   \                                 In segment CODE, align 4, keep-with-next
   4984          void start(){
   4985            mode=0;
   \                     start:
   \   00000000   ........           LDR      R0,??DataTable1206  ;; mode
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   4986            cls();
   \   00000010   ........           BL       cls
   4987            SUBPROC((void *)execute);
   \   00000014   04009FE5           LDR      R0,??start_0     ;; execute
   \   00000018   710100EF           SWI      +369
   4988          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??start_0:
   \   00000020   ........           DC32     execute
   4989          
   4990          

   \                                 In segment CODE, align 4, keep-with-next
   4991          void oncreate(){
   \                     oncreate:
   \   00000000   00402DE9           PUSH     {LR}
   4992          //   mode=0;
   4993          //   SUBPROC((void *)execute);
   4994             start();
   \   00000004   ........           BL       start
   4995             GBS_StartTimerProc(&timer,262/20,timer_proc);
   \   00000008   ........           LDR      R2,??DataTable1193  ;; timer_proc
   \   0000000C   ........           LDR      R0,??DataTable1228  ;; timer
   \   00000010   0D10A0E3           MOV      R1,#+13
   \   00000014   4D0000EF           SWI      +77
   4996          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   4997          
   4998          

   \                                 In segment CODE, align 4, keep-with-next
   4999          void key(int keyCode, int press){
   5000            keyCode=param[100+alternate+keyCode-'0'];
   \                     key:
   \   00000000   ........           LDR      R2,??DataTable1210  ;; alternate
   5001            if(press) keylines[(keyCode>>4)&0x7]&=~(1<<(keyCode&0x7));
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   0710A0E3           MOV      R1,#+7
   \   00000010   020080E0           ADD      R0,R0,R2
   \   00000014   ........           LDR      R2,??DataTable1202  ;; param
   \   00000018   01C0A0E3           MOV      R12,#+1
   \   0000001C   020080E0           ADD      R0,R0,R2
   \   00000020   D423D0E1           LDRSB    R2,[R0, #+52]
   \   00000024   ........           LDR      R0,??DataTable1197  ;; keylines
   \   00000028   421201E0           AND      R1,R1,R2, ASR #+4
   \   0000002C   013190E7           LDR      R3,[R0, +R1, LSL #+2]
   \   00000030   072002E2           AND      R2,R2,#0x7
   \   00000034   1C22E011           MVNNE    R2,R12, LSL R2
   \   00000038   03200210           ANDNE    R2,R2,R3
   5002            else      keylines[(keyCode>>4)&0x7]|=(1<<(keyCode&0x7));
   \   0000003C   1C228301           ORREQ    R2,R3,R12, LSL R2
   \   00000040   012180E7           STR      R2,[R0, +R1, LSL #+2]
   5003          }
   \   00000044   1EFF2FE1           BX       LR               ;; return
   5004          

   \                                 In segment CODE, align 4, keep-with-next
   5005          void getkkk(){ //count redkey
   5006            if(!(redkey-='0'))  redkey=10;
   \                     getkkk:
   \   00000000   ........           LDR      R1,??DataTable1209  ;; redkey
   5007            --count; --count;
   \   00000004   ........           LDR      R3,??DataTable1207  ;; count
   5008            if(--redkey<6) param[100+alternate+rrkey-'0'] = param[redkey*4+(count%4)] ;
   \   00000008   ........           LDR      R12,??DataTable1208  ;; rrkey
   \   0000000C   30002DE9           PUSH     {R4,R5}
   \   00000010   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000014   00C0DCE5           LDRB     R12,[R12, #+0]
   \   00000018   D02080E2           ADD      R2,R0,#+208
   \   0000001C   0000D3E5           LDRB     R0,[R3, #+0]
   \   00000020   FF2012E2           ANDS     R2,R2,#0xFF
   \   00000024   0A20A003           MOVEQ    R2,#+10
   \   00000028   FE0080E2           ADD      R0,R0,#+254
   \   0000002C   0000C3E5           STRB     R0,[R3, #+0]
   \   00000030   013042E2           SUB      R3,R2,#+1
   \   00000034   ........           LDR      R2,??DataTable1210  ;; alternate
   \   00000038   0030C1E5           STRB     R3,[R1, #+0]
   \   0000003C   ........           LDR      R1,??DataTable1202  ;; param
   \   00000040   002092E5           LDR      R2,[R2, #+0]
   \   00000044   FF3003E2           AND      R3,R3,#0xFF
   \   00000048   02208CE0           ADD      R2,R12,R2
   \   0000004C   012082E0           ADD      R2,R2,R1
   \   00000050   060053E3           CMP      R3,#+6
   \   00000054   0500002A           BCS      ??getkkk_0
   \   00000058   FF0000E2           AND      R0,R0,#0xFF
   \   0000005C   033180E0           ADD      R3,R0,R3, LSL #+2
   \   00000060   4001A0E1           ASR      R0,R0,#+2
   \   00000064   000143E0           SUB      R0,R3,R0, LSL #+2
   \   00000068   D10090E1           LDRSB    R0,[R0, +R1]
   \   0000006C   0A0000EA           B        ??getkkk_1
   5009            else param[100+alternate+rrkey-'0'] = param[24+(redkey-6)*5+(count%5)] ;
   \                     ??getkkk_0:
   \   00000070   ........           LDR      R12,??DataTable1203  ;; 0x66666667
   \   00000074   FF0000E2           AND      R0,R0,#0xFF
   \   00000078   904CC5E0           SMULL    R4,R5,R0,R12
   \   0000007C   0540A0E3           MOV      R4,#+5
   \   00000080   C550A0E1           ASR      R5,R5,#+1
   \   00000084   940505E0           MUL      R5,R4,R5
   \   00000088   033183E0           ADD      R3,R3,R3, LSL #+2
   \   0000008C   050040E0           SUB      R0,R0,R5
   \   00000090   030080E0           ADD      R0,R0,R3
   \   00000094   010080E0           ADD      R0,R0,R1
   \   00000098   D60050E1           LDRSB    R0,[R0, #-6]
   \                     ??getkkk_1:
   \   0000009C   3400C2E5           STRB     R0,[R2, #+52]
   5010          }
   \   000000A0   3000BDE8           POP      {R4,R5}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
   5011          
   5012          //int method5(MAIN_GUI *data, GUI_MSG *msg)

   \                                 In segment CODE, align 4, keep-with-next
   5013          int onkey(unsigned char keycode, int pressed){
   \                     onkey:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   5014            switch(pressed){
   \   00000004   ........           LDR      R9,??DataTable1204  ;; miny
   \   00000008   ........           LDR      R10,??DataTable1205  ;; minx
   \   0000000C   ........           LDR      R11,??DataTable1206  ;; mode
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0080A0E1           MOV      R8,R0
   \   00000018   9320A0E3           MOV      R2,#+147
   \   0000001C   402F82E3           ORR      R2,R2,#0x100
   \   00000020   020051E1           CMP      R1,R2
   \   00000024   2800000A           BEQ      ??onkey_3
   \   00000028   650F51E3           CMP      R1,#+404
   \   0000002C   0300000A           BEQ      ??onkey_4
   \   00000030   022082E2           ADD      R2,R2,#+2
   \   00000034   020051E1           CMP      R1,R2
   \   00000038   2300000A           BEQ      ??onkey_3
   \   0000003C   A00000EA           B        ??onkey_5
   5015            case KEY_UP: // Клавиша отпущена
   5016              if(!mode){
   \                     ??onkey_4:
   \   00000040   00109BE5           LDR      R1,[R11, #+0]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   8A00001A           BNE      ??onkey_6
   5017                if(keycode>='0' && keycode<='9') key(keycode,false);
   \   0000004C   300050E3           CMP      R0,#+48
   \   00000050   0200003A           BCC      ??onkey_7
   \   00000054   3A0050E3           CMP      R0,#+58
   \   00000058   0000002A           BCS      ??onkey_7
   \   0000005C   ........           BL       key
   5018                switch(keycode){
   \                     ??onkey_7:
   \   00000060   3B8058E2           SUBS     R8,R8,#+59
   \   00000064   0B00000A           BEQ      ??onkey_8
   \   00000068   018058E2           SUBS     R8,R8,#+1
   \   0000006C   0F00000A           BEQ      ??onkey_9
   \   00000070   018058E2           SUBS     R8,R8,#+1
   \   00000074   8C00000A           BEQ      ??onkey_10
   \   00000078   018058E2           SUBS     R8,R8,#+1
   \   0000007C   9000001A           BNE      ??onkey_5
   5019                case LEFT_BUTTON:if(miny<8) ++miny; break;
   5020                case RIGHT_BUTTON: if(miny>0) --miny; break;
   \                     ??onkey_11:
   \   00000080   000099E5           LDR      R0,[R9, #+0]
   \   00000084   010050E3           CMP      R0,#+1
   \   00000088   7A0000BA           BLT      ??onkey_6
   \   0000008C   000099E5           LDR      R0,[R9, #+0]
   \   00000090   010040E2           SUB      R0,R0,#+1
   \   00000094   890000EA           B        ??onkey_12
   5021                case UP_BUTTON: if(minx>0) --minx; break;
   \                     ??onkey_8:
   \   00000098   00009AE5           LDR      R0,[R10, #+0]
   \   0000009C   010050E3           CMP      R0,#+1
   \   000000A0   740000BA           BLT      ??onkey_6
   \   000000A4   00009AE5           LDR      R0,[R10, #+0]
   \   000000A8   010040E2           SUB      R0,R0,#+1
   \   000000AC   040000EA           B        ??onkey_13
   5022                case DOWN_BUTTON:  if(minx<10) ++minx; break;
   \                     ??onkey_9:
   \   000000B0   00009AE5           LDR      R0,[R10, #+0]
   \   000000B4   0A0050E3           CMP      R0,#+10
   \   000000B8   6E0000AA           BGE      ??onkey_6
   \   000000BC   00009AE5           LDR      R0,[R10, #+0]
   \   000000C0   010080E2           ADD      R0,R0,#+1
   \                     ??onkey_13:
   \   000000C4   00008AE5           STR      R0,[R10, #+0]
   5023                }
   5024              }return 0;
   \                     ??onkey_14:
   \   000000C8   6A0000EA           B        ??onkey_6
   5025            case KEY_DOWN: case LONG_PRESS: // Кл. нажата или удерживается
   5026            if(keycode==RED_BUTTON)  return(1); //Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
   \                     ??onkey_3:
   \   000000CC   0C0050E3           CMP      R0,#+12
   \   000000D0   0100001A           BNE      ??onkey_15
   \                     ??onkey_16:
   \   000000D4   0100A0E3           MOV      R0,#+1
   \   000000D8   F08FBDE8           POP      {R4-R11,PC}
   5027            switch(mode){
   \                     ??onkey_15:
   \   000000DC   00109BE5           LDR      R1,[R11, #+0]
   \   000000E0   ........           LDR      R5,??DataTable1207  ;; count
   \   000000E4   0070A0E3           MOV      R7,#+0
   \   000000E8   0160A0E3           MOV      R6,#+1
   \   000000EC   630051E3           CMP      R1,#+99
   \   000000F0   2E00008A           BHI      ??onkey_17
   \   000000F4   012F8FE2           ADR      R2,??onkey_0
   \   000000F8   0120D2E7           LDRB     R2,[R2, R1]
   \   000000FC   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??onkey_0:
   \   00000100   2D788593           DC8      +45,+120,+133,+147
   \   00000104   9E2B182B           DC8      +158,+43,+24,+43
   \   00000108   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000010C   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000110   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000114   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000118   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000011C   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000120   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000124   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000128   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000012C   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000130   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000134   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000138   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000013C   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000140   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000144   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000148   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000014C   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000150   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000154   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000158   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000015C   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000160   2B2B2BAC           DC8      +43,+43,+43,+172
   5028            case 6: //redefine keys
   5029              if(keycode>='0' && keycode<='9'){ 
   \                     ??onkey_18:
   \   00000164   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000168   300050E3           CMP      R0,#+48
   \   0000016C   0C00003A           BCC      ??onkey_19
   \   00000170   3A0050E3           CMP      R0,#+58
   \   00000174   0A00002A           BCS      ??onkey_19
   5030                if(!count){ rrkey=keycode; ++count;}
   \   00000178   000051E3           CMP      R1,#+0
   \   0000017C   0300001A           BNE      ??onkey_20
   \   00000180   ........           LDR      R1,??DataTable1208  ;; rrkey
   \   00000184   0060C5E5           STRB     R6,[R5, #+0]
   \   00000188   0000C1E5           STRB     R0,[R1, #+0]
   \   0000018C   4C0000EA           B        ??onkey_5
   5031                else{ redkey=keycode; ++count;}
   \                     ??onkey_20:
   \   00000190   ........           LDR      R2,??DataTable1209  ;; redkey
   \   00000194   0000C2E5           STRB     R0,[R2, #+0]
   \   00000198   010081E2           ADD      R0,R1,#+1
   \   0000019C   0000C5E5           STRB     R0,[R5, #+0]
   \   000001A0   470000EA           B        ??onkey_5
   5032              }else{
   5033                if(count>0)  getkkk();
   \                     ??onkey_19:
   \   000001A4   000051E3           CMP      R1,#+0
   \   000001A8   0000000A           BEQ      ??onkey_17
   \   000001AC   ........           BL       getkkk
   5034                start();
   \                     ??onkey_17:
   \   000001B0   ........           BL       start
   \   000001B4   420000EA           B        ??onkey_5
   5035              }
   5036              break;
   5037            case 0: //zx starting
   5038              if(keycode>='0' && keycode<='9') key(keycode,true);
   \                     ??onkey_21:
   \   000001B8   300050E3           CMP      R0,#+48
   \   000001BC   0300003A           BCC      ??onkey_22
   \   000001C0   3A0050E3           CMP      R0,#+58
   \   000001C4   0100002A           BCS      ??onkey_22
   \   000001C8   0110A0E3           MOV      R1,#+1
   \   000001CC   ........           BL       key
   5039              switch(keycode){
   \                     ??onkey_22:
   \   000001D0   018048E2           SUB      R8,R8,#+1
   \   000001D4   3D0058E3           CMP      R8,#+61
   \   000001D8   2600008A           BHI      ??onkey_6
   \   000001DC   020F8FE2           ADR      R0,??onkey_1
   \   000001E0   8880A0E1           MOV      R8,R8, LSL #+1
   \   000001E4   F80090E1           LDRSH    R0,[R0, R8]
   \   000001E8   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??onkey_1:
   \   000001EC   240022002200       DC16     +36,+34,+34,+30
   \              1E00        
   \   000001F4   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   000001FC   220022002B00       DC16     +34,+34,+43,+34
   \              2200        
   \   00000204   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   0000020C   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   00000214   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   0000021C   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   00000224   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   0000022C   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   00000234   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   0000023C   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   00000244   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   0000024C   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   00000254   220022002200       DC16     +34,+34,+34,+34
   \              2200        
   \   0000025C   22002200AAFF       DC16     +34,+34,+65450,+65456
   \              B0FF        
   \   00000264   2F003700           DC16     +47,+55
   5040              case RIGHT_SOFT: 
   5041                mode=99;
   \                     ??onkey_23:
   \   00000268   6300A0E3           MOV      R0,#+99
   \   0000026C   00008BE5           STR      R0,[R11, #+0]
   5042                onredraw(); DrawScreen();
   \   00000270   ........           BL       onredraw
   \   00000274   ........           _BLF     DrawScreen,??DrawScreen??rA
   5043                return 0;
   \                     ??onkey_6:
   \   00000278   0000A0E3           MOV      R0,#+0
   \   0000027C   F08FBDE8           POP      {R4-R11,PC}
   5044                //for(i=0;i<screenlength;i++) screen[i]=0xff;
   5045                //draw menu
   5046                //break;
   5047              case LEFT_SOFT: if(alternate) alternate=0; else alternate=17; break;
   \                     ??onkey_24:
   \   00000280   ........           LDR      R0,??DataTable1210  ;; alternate
   \   00000284   001090E5           LDR      R1,[R0, #+0]
   \   00000288   000051E3           CMP      R1,#+0
   \   0000028C   1110A003           MOVEQ    R1,#+17
   \   00000290   00108005           STREQ    R1,[R0, #+0]
   \   00000294   00708015           STRNE    R7,[R0, #+0]
   \   00000298   090000EA           B        ??onkey_5
   5048              case GREEN_BUTTON: mode=6; count=0; break; //redefine
   \                     ??onkey_25:
   \   0000029C   0600A0E3           MOV      R0,#+6
   \   000002A0   00008BE5           STR      R0,[R11, #+0]
   \   000002A4   0070C5E5           STRB     R7,[R5, #+0]
   \   000002A8   050000EA           B        ??onkey_5
   5049              case LEFT_BUTTON:if(miny<8) ++miny; break;
   \                     ??onkey_10:
   \   000002AC   000099E5           LDR      R0,[R9, #+0]
   \   000002B0   080050E3           CMP      R0,#+8
   \   000002B4   EFFFFFAA           BGE      ??onkey_6
   \   000002B8   000099E5           LDR      R0,[R9, #+0]
   \   000002BC   010080E2           ADD      R0,R0,#+1
   \                     ??onkey_12:
   \   000002C0   000089E5           STR      R0,[R9, #+0]
   \                     ??onkey_5:
   \   000002C4   0000A0E3           MOV      R0,#+0
   \   000002C8   F08FBDE8           POP      {R4-R11,PC}
   5050              case RIGHT_BUTTON: if(miny>0) --miny; break;
   \                     ??onkey_26:
   \   000002CC   000099E5           LDR      R0,[R9, #+0]
   \   000002D0   010050E3           CMP      R0,#+1
   \   000002D4   E7FFFFBA           BLT      ??onkey_6
   \   000002D8   000099E5           LDR      R0,[R9, #+0]
   \   000002DC   010040E2           SUB      R0,R0,#+1
   \   000002E0   F6FFFFEA           B        ??onkey_12
   5051              case UP_BUTTON: if(minx>0) --minx; break;
   5052              case DOWN_BUTTON:  if(minx<10) ++minx; break;
   5053              }break;
   5054            case 1: //Load
   5055              loadsave(keycode, false);
   \                     ??onkey_27:
   \   000002E4   0010A0E3           MOV      R1,#+0
   \   000002E8   ........           BL       loadsave
   5056              loadZ80(fz128?zx:mem,fz128?0:rombuf1);
   \   000002EC   ........           LDR      R0,??DataTable1239  ;; fz128
   \   000002F0   D000D0E1           LDRSB    R0,[R0, #+0]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   ........           LDRNE    R0,??DataTable1234  ;; zx
   \   000002FC   0010A013           MOVNE    R1,#+0
   \   00000300   ........           LDREQ    R0,??DataTable1224  ;; mem
   \   00000304   501BA003           MOVEQ    R1,#+81920
   \   00000308   000090E5           LDR      R0,[R0, #+0]
   \   0000030C   ........           BL       loadZ80
   5057              start(); break;
   \   00000310   ........           BL       start
   \   00000314   EAFFFFEA           B        ??onkey_5
   5058            case 2: //Save
   5059              saveZ80((fz128)?zx:mem,(fz128)?0:rombuf1);
   \                     ??onkey_28:
   \   00000318   ........           LDR      R0,??DataTable1239  ;; fz128
   \   0000031C   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000320   000050E3           CMP      R0,#+0
   \   00000324   ........           LDRNE    R0,??DataTable1234  ;; zx
   \   00000328   0010A013           MOVNE    R1,#+0
   \   0000032C   ........           LDREQ    R0,??DataTable1224  ;; mem
   \   00000330   501BA003           MOVEQ    R1,#+81920
   \   00000334   000090E5           LDR      R0,[R0, #+0]
   \   00000338   ........           BL       saveZ80
   5060              loadsave(keycode, true);
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   0400A0E1           MOV      R0,R4
   \   00000344   ........           BL       loadsave
   5061              start(); break;  
   \   00000348   ........           BL       start
   \   0000034C   DCFFFFEA           B        ??onkey_5
   5062            case 3: //fps
   5063              if(keycode>='0' && keycode<='9'){
   \                     ??onkey_29:
   \   00000350   300050E3           CMP      R0,#+48
   \   00000354   95FFFF3A           BCC      ??onkey_17
   \   00000358   3A0050E3           CMP      R0,#+58
   \   0000035C   93FFFF2A           BCS      ??onkey_17
   5064                //fps=262/(keycode=='0'?20:((keycode-'0')*2)); //ДЕЛЕНИЯ НЕТ???????????????
   5065                fps=fpstab[keycode-'0'];
   \   00000360   ........           LDR      R1,??DataTable1217  ;; fpstab
   \   00000364   ........           LDR      R0,??DataTable1218  ;; fps
   \   00000368   011084E0           ADD      R1,R4,R1
   \   0000036C   301051E5           LDRB     R1,[R1, #-48]
   \   00000370   001080E5           STR      R1,[R0, #+0]
   \   00000374   ........           BL       start
   \   00000378   D1FFFFEA           B        ??onkey_5
   5066              }start(); break;
   5067            case 4: //interrupt
   5068              if(keycode>'0' && keycode<'6'){
   \                     ??onkey_30:
   \   0000037C   310050E3           CMP      R0,#+49
   \   00000380   8AFFFF3A           BCC      ??onkey_17
   \   00000384   360050E3           CMP      R0,#+54
   \   00000388   88FFFF2A           BCS      ??onkey_17
   5069                tst=(keycode-'0');
   \   0000038C   ........           LDR      R1,??DataTable1219  ;; `tst`
   \   00000390   300044E2           SUB      R0,R4,#+48
   \   00000394   000081E5           STR      R0,[R1, #+0]
   5070                tstatesPerInterrupt=tst*20000;
   \   00000398   ........           LDR      R1,??DataTable1220  ;; tstatesPerInterrupt
   \   0000039C   2020A0E3           MOV      R2,#+32
   \   000003A0   4E2C82E3           ORR      R2,R2,#0x4E00
   \   000003A4   920000E0           MUL      R0,R2,R0
   \   000003A8   000081E5           STR      R0,[R1, #+0]
   \   000003AC   ........           BL       start
   \   000003B0   C3FFFFEA           B        ??onkey_5
   5071              }start(); break;
   5072            case 99: //main menu
   5073              switch(keycode){
   \                     ??onkey_31:
   \   000003B4   308048E2           SUB      R8,R8,#+48
   \   000003B8   080058E3           CMP      R8,#+8
   \   000003BC   7BFFFF8A           BHI      ??onkey_17
   \   000003C0   020F8FE2           ADR      R0,??onkey_2
   \   000003C4   8880A0E1           MOV      R8,R8, LSL #+1
   \   000003C8   F80090E1           LDRSH    R0,[R0, R8]
   \   000003CC   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??onkey_2:
   \   000003D0   40FF04000600       DC16     +65344,+4,+6,+9
   \              0900        
   \   000003D8   0C0077FF77FF       DC16     +12,+65399,+65399,+15
   \              0F00        
   \   000003E0   1E000000           DC16     +30,+0
   5074              case '1': mode=1; break;  //Load
   \                     ??onkey_32:
   \   000003E4   00608BE5           STR      R6,[R11, #+0]
   \   000003E8   B5FFFFEA           B        ??onkey_5
   5075              case '2': mode=2; break;  //Save
   \                     ??onkey_33:
   \   000003EC   0200A0E3           MOV      R0,#+2
   \   000003F0   00008BE5           STR      R0,[R11, #+0]
   \   000003F4   B2FFFFEA           B        ??onkey_5
   5076              case '3': mode=3; break; //fps
   \                     ??onkey_34:
   \   000003F8   0300A0E3           MOV      R0,#+3
   \   000003FC   00008BE5           STR      R0,[R11, #+0]
   \   00000400   AFFFFFEA           B        ??onkey_5
   5077              case '4': mode=4; break; //interrupt
   \                     ??onkey_35:
   \   00000404   0400A0E3           MOV      R0,#+4
   \   00000408   00008BE5           STR      R0,[R11, #+0]
   \   0000040C   ACFFFFEA           B        ??onkey_5
   5078          //    case '5': ldir=!ldir; start(); break; //optimize
   5079          //    case '6': cls(); fc65=!fc65; //fc65
   5080          //      minx=miny=0;
   5081          //      maxx=(fc65?130:176)>>3;
   5082          //      start(); break; 
   5083              case '7': cls();
   \                     ??onkey_36:
   \   00000410   ........           BL       cls
   5084                if(fzxrotate) frotate=!frotate;
   \   00000414   ........           LDR      R0,??DataTable1221  ;; fzxrotate
   \   00000418   D010D0E1           LDRSB    R1,[R0, #+0]
   \   0000041C   000051E3           CMP      R1,#+0
   \   00000420   0500000A           BEQ      ??onkey_37
   \   00000424   ........           LDR      R1,??DataTable1222  ;; frotate
   \   00000428   D020D1E1           LDRSB    R2,[R1, #+0]
   \   0000042C   000052E3           CMP      R2,#+0
   \   00000430   0060A013           MOVNE    R6,#+0
   \   00000434   0060C1E5           STRB     R6,[R1, #+0]
   \   00000438   000000EA           B        ??onkey_38
   5085                fzxrotate=!fzxrotate;
   \                     ??onkey_37:
   \   0000043C   0170A0E3           MOV      R7,#+1
   \                     ??onkey_38:
   \   00000440   0070C0E5           STRB     R7,[R0, #+0]
   5086                start(); break;
   \   00000444   ........           BL       start
   \   00000448   9DFFFFEA           B        ??onkey_5
   5087              case '8': cls(); fzxsmall=!fzxsmall; start(); break;
   \                     ??onkey_39:
   \   0000044C   ........           BL       cls
   \   00000450   ........           LDR      R0,??DataTable1223  ;; fzxsmall
   \   00000454   D010D0E1           LDRSB    R1,[R0, #+0]
   \   00000458   000051E3           CMP      R1,#+0
   \   0000045C   0170A003           MOVEQ    R7,#+1
   \   00000460   0070C0E5           STRB     R7,[R0, #+0]
   \   00000464   ........           BL       start
   \   00000468   95FFFFEA           B        ??onkey_5
   5088              case '0': return(1);
   5089              default: start(); break;
   5090              }break;
   5091            default: start(); break;
   5092            }
   5093          //  onredraw(); DrawScreen();
   5094            }
   5095            return 0;
   5096          }
   5097          

   \                                 In segment CODE, align 4, keep-with-next
   5098          void onexit(){
   5099            if(mem) mfree(mem);
   \                     onexit:
   \   00000000   ........           LDR      R0,??DataTable1224  ;; mem
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??onexit_0
   \   00000014   150000EF           SWI      +21
   5100            if(zx) mfree(zx);
   \                     ??onexit_0:
   \   00000018   ........           LDR      R0,??DataTable1234  ;; zx
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??onexit_1
   \   00000028   150000EF           SWI      +21
   5101            if(scrrot) mfree(scrrot);
   \                     ??onexit_1:
   \   0000002C   ........           LDR      R0,??DataTable1226  ;; scrrot
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0080BD08           POPEQ    {PC}
   \   0000003C   150000EF           SWI      +21
   5102          }
   \   00000040   0080BDE8           POP      {PC}             ;; return
   5103          

   \                                 In segment CODE, align 4, keep-with-next
   5104          void onclose(){
   5105            mode=100;
   \                     onclose:
   \   00000000   ........           LDR      R0,??DataTable1227  ;; mode
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   6410A0E3           MOV      R1,#+100
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   5106          //  debsave();//!!!!!!!!
   5107            GBS_DelTimer(&timer);
   \   00000010   ........           LDR      R0,??DataTable1228  ;; timer
   \   00000014   8C0100EF           SWI      +396
   5108            saveini();
   \   00000018   0040BDE8           POP      {LR}             ;; Pop
   \   0000001C   ........           B        saveini          ;; tailcall
   5109          }
   5110          

   \                                 In segment CODE, align 4, keep-with-next
   5111          void loadsave(int num, boolean save){
   \                     loadsave:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   5112            char *ptr;
   5113            int f;
   5114            if(num<'0' || num>'9') return;
   \   00000004   300050E3           CMP      R0,#+48
   \   00000008   F081BDB8           POPLT    {R4-R8,PC}
   \   0000000C   3A0050E3           CMP      R0,#+58
   \   00000010   F081BDA8           POPGE    {R4-R8,PC}
   5115            *(file-1)=(byte)num; *(ptr=file)='.'; *++ptr='z'; *++ptr='8'; *++ptr='0'; *++ptr=0;
   \   00000014   ........           LDR      R6,??DataTable1240  ;; file
   5116            if(!save){ //load
   \   00000018   ........           LDR      R4,??DataTable1230  ;; err
   \   0000001C   002096E5           LDR      R2,[R6, #+0]
   \   00000020   2E70A0E3           MOV      R7,#+46
   \   00000024   010042E5           STRB     R0,[R2, #-1]
   \   00000028   000096E5           LDR      R0,[R6, #+0]
   \   0000002C   7A20A0E3           MOV      R2,#+122
   \   00000030   ........           STRB     R7,[R0], #+1
   \   00000034   ........           STRB     R2,[R0], #+1
   \   00000038   3820A0E3           MOV      R2,#+56
   \   0000003C   ........           STRB     R2,[R0], #+1
   \   00000040   3020A0E3           MOV      R2,#+48
   \   00000044   ........           STRB     R2,[R0], #+1
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0020C0E5           STRB     R2,[R0, #+0]
   \   00000050   ........           LDR      R0,??DataTable1238  ;; filename
   \   00000054   0280E0E1           MVN      R8,R2
   \   00000058   000051E3           CMP      R1,#+0
   \   0000005C   0430A0E1           MOV      R3,R4
   \   00000060   1100001A           BNE      ??loadsave_0
   5117              f=fopen(filename,A_ReadOnly+A_BIN,P_READ,&err);
   \   00000064   8020A0E3           MOV      R2,#+128
   \   00000068   801CA0E3           MOV      R1,#+32768
   \   0000006C   0A0000EF           SWI      +10
   \   00000070   0050A0E1           MOV      R5,R0
   5118              *(file-1)='.';
   \   00000074   000096E5           LDR      R0,[R6, #+0]
   5119              if(f==-1) return;
   \   00000078   080055E1           CMP      R5,R8
   \   0000007C   017040E5           STRB     R7,[R0, #-1]
   \   00000080   F081BD08           POPEQ    {R4-R8,PC}
   5120              if(!z80load(f)){ fclose(f,&err); return;}
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       z80load
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0410A0E1           MOV      R1,R4
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   2200000A           BEQ      ??loadsave_1
   5121              fclose(f,&err);
   \                     ??loadsave_2:
   \   0000009C   0D0000EF           SWI      +13
   5122              if(!z80start(true)) return; 
   \   000000A0   0100A0E3           MOV      R0,#+1
   \   000000A4   ........           BL       z80start
   \   000000A8   F081BDE8           POP      {R4-R8,PC}
   5123            }else{ //save
   5124              f=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err);
   \                     ??loadsave_0:
   \   000000AC   602FA0E3           MOV      R2,#+384
   \   000000B0   0210A0E3           MOV      R1,#+2
   \   000000B4   811C81E3           ORR      R1,R1,#0x8100
   \   000000B8   0A0000EF           SWI      +10
   \   000000BC   0050A0E1           MOV      R5,R0
   5125              *(file-1)='.';
   \   000000C0   000096E5           LDR      R0,[R6, #+0]
   5126              if (f==-1) return;
   \   000000C4   080055E1           CMP      R5,R8
   \   000000C8   017040E5           STRB     R7,[R0, #-1]
   \   000000CC   F081BD08           POPEQ    {R4-R8,PC}
   5127              saveZ80((fz128)?zx:mem,(fz128)?0:rombuf1); 
   \   000000D0   ........           LDR      R8,??DataTable1239  ;; fz128
   \   000000D4   ........           LDR      R6,??DataTable1233  ;; mem
   \   000000D8   D000D8E1           LDRSB    R0,[R8, #+0]
   \   000000DC   ........           LDR      R7,??DataTable1234  ;; zx
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   00009715           LDRNE    R0,[R7, #+0]
   \   000000E8   0010A013           MOVNE    R1,#+0
   \   000000EC   00009605           LDREQ    R0,[R6, #+0]
   \   000000F0   501BA003           MOVEQ    R1,#+81920
   \   000000F4   ........           BL       saveZ80
   5128              fwrite32(f,(fz128)?zx:mem+((fz128)?0:rombuf1),zxfilesize,&err);
   \   000000F8   D000D8E1           LDRSB    R0,[R8, #+0]
   \   000000FC   0430A0E1           MOV      R3,R4
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   00009605           LDREQ    R0,[R6, #+0]
   \   00000108   00109715           LDRNE    R1,[R7, #+0]
   \   0000010C   501B8002           ADDEQ    R1,R0,#+81920
   \   00000110   ........           LDR      R0,??DataTable1235  ;; zxfilesize
   \   00000114   002090E5           LDR      R2,[R0, #+0]
   \   00000118   0500A0E1           MOV      R0,R5
   \   0000011C   0C0000EF           SWI      +12
   5129              //file.truncate(handle,i);
   5130              fclose(f,&err);
   \   00000120   0410A0E1           MOV      R1,R4
   \   00000124   0500A0E1           MOV      R0,R5
   \                     ??loadsave_1:
   \   00000128   0D0000EF           SWI      +13
   \   0000012C   F081BDE8           POP      {R4-R8,PC}       ;; return
   5131            }
   5132          }
   5133          

   \                                 In segment DATA_I, align 4, align-sorted
   5134          const char *errors[]={
   \                     errors:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for errors>`
   5135            "",
   5136            "Щелкните на .z80 файл",
   5137            "Файл настроек .ini не найден!",
   5138            "Не могу загрузить ром",
   5139            "Ошибка загрузки",
   5140            "128k Roms not supported!"
   5141          };
   5142          

   \                                 In segment CODE, align 4, keep-with-next
   5143          int onstart(char *exename, char *fname){
   \                     onstart:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0140B0E1           MOVS     R4,R1
   5144              if(!fname) return 1;
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   7280BD08           POPEQ    {R1,R4-R6,PC}
   5145              maxy=width>>3;
   \   00000018   ........           LDR      R1,??DataTable1236  ;; width
   \   0000001C   ........           LDR      R0,??DataTable1237  ;; maxy
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   5146              fz128=false;
   5147              initparity(); //!!!
   5148              strcpy(filename,exename);
   \   00000024   ........           LDR      R6,??DataTable1238  ;; filename
   \   00000028   C111A0E1           ASR      R1,R1,#+3
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable1239  ;; fz128
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   0010C0E5           STRB     R1,[R0, #+0]
   \   0000003C   ........           BL       initparity
   \   00000040   0510A0E1           MOV      R1,R5
   5149              file=filename+strlen(filename);
   \   00000044   ........           LDR      R5,??DataTable1240  ;; file
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           _BLF     strcpy,??strcpy??rA
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           _BLF     strlen,??strlen??rA
   \   00000058   060080E0           ADD      R0,R0,R6
   \   0000005C   000085E5           STR      R0,[R5, #+0]
   5150              while(file>filename && *--file!='.');
   \                     ??onstart_0:
   \   00000060   000095E5           LDR      R0,[R5, #+0]
   \   00000064   000056E1           CMP      R6,R0
   \   00000068   0400002A           BCS      ??onstart_1
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   000085E5           STR      R0,[R5, #+0]
   \   00000074   D000D0E1           LDRSB    R0,[R0, #+0]
   \   00000078   2E0050E3           CMP      R0,#+46
   \   0000007C   F7FFFF1A           BNE      ??onstart_0
   5151              ++file;
   \                     ??onstart_1:
   \   00000080   000095E5           LDR      R0,[R5, #+0]
   \   00000084   010080E2           ADD      R0,R0,#+1
   \   00000088   000085E5           STR      R0,[R5, #+0]
   5152              if(!loadini()) return 2;
   \   0000008C   ........           BL       loadini
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0200A003           MOVEQ    R0,#+2
   \   00000098   7280BD08           POPEQ    {R1,R4-R6,PC}
   5153              if(!loadrom()) return 3;
   \   0000009C   ........           BL       loadrom
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0300A003           MOVEQ    R0,#+3
   \   000000A8   7280BD08           POPEQ    {R1,R4-R6,PC}
   5154              if(!z80zipload(fname)) return 4;
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       z80zipload
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0400A003           MOVEQ    R0,#+4
   \   000000BC   7280BD08           POPEQ    {R1,R4-R6,PC}
   5155              if(!z80start(true)) return 5; 
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   ........           BL       z80start
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0500A003           MOVEQ    R0,#+5
   \   000000D0   7280BD08           POPEQ    {R1,R4-R6,PC}
   5156              return 0; 
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
   5157          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     fz128

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     fpstab

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     fps

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     `tst`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     screen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     height

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   67666666           DC32     0x66666667

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     F_Z

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     F_PV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     F_N

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     F_C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     _IFF1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   ........           DC32     _IM

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     _PC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     _B

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     _C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable156:
   \   00000000   ........           DC32     F_H

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable186:
   \   00000000   ........           DC32     F_S

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable187:
   \   00000000   ........           DC32     fS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable191:
   \   00000000   ........           DC32     f5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable193:
   \   00000000   ........           DC32     parity

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable194:
   \   00000000   ........           DC32     fPV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable195:
   \   00000000   ........           DC32     fZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable197:
   \   00000000   ........           DC32     fC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable200:
   \   00000000   ........           DC32     F_3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable201:
   \   00000000   ........           DC32     f3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable202:
   \   00000000   ........           DC32     F_5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable204:
   \   00000000   ........           DC32     fH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable205:
   \   00000000   ........           DC32     fN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable212:
   \   00000000   ........           DC32     _I

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable220:
   \   00000000   ........           DC32     _IFF2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable225:
   \   00000000   ........           DC32     _R

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable226:
   \   00000000   ........           DC32     _R7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable241:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable253:
   \   00000000   ........           DC32     _HL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable254:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable263:
   \   00000000   ........           DC32     _IFF2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable285:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable383:
   \   00000000   ........           DC32     parity

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable387:
   \   00000000   ........           DC32     fC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable399:
   \   00000000   ........           DC32     F_H

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable400:
   \   00000000   ........           DC32     fS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable401:
   \   00000000   ........           DC32     F_S

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable405:
   \   00000000   ........           DC32     f5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable407:
   \   00000000   ........           DC32     fPV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable408:
   \   00000000   ........           DC32     fH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable409:
   \   00000000   ........           DC32     fN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable413:
   \   00000000   ........           DC32     F_3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable414:
   \   00000000   ........           DC32     f3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable415:
   \   00000000   ........           DC32     F_5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable419:
   \   00000000   ........           DC32     fZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable428:
   \   00000000   ........           DC32     fC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable429:
   \   00000000   ........           DC32     F_S

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable430:
   \   00000000   ........           DC32     fS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable431:
   \   00000000   ........           DC32     F_3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable432:
   \   00000000   ........           DC32     f3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable433:
   \   00000000   ........           DC32     F_5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable434:
   \   00000000   ........           DC32     f5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable435:
   \   00000000   ........           DC32     fPV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable436:
   \   00000000   ........           DC32     fH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable437:
   \   00000000   ........           DC32     fZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable438:
   \   00000000   ........           DC32     fN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable439:
   \   00000000   ........           DC32     _HL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable440:
   \   00000000   ........           DC32     _DE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable441:
   \   00000000   ........           DC32     _C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable442:
   \   00000000   ........           DC32     _B

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable443:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable494:
   \   00000000   ........           DC32     _SP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable495:
   \   00000000   ........           DC32     _IFF2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable496:
   \   00000000   ........           DC32     _IFF1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable499:
   \   00000000   ........           DC32     IM0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable501:
   \   00000000   ........           DC32     IM1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable502:
   \   00000000   ........           DC32     _IM

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable503:
   \   00000000   ........           DC32     IM2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable505:
   \   00000000   ........           DC32     _I

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable506:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable508:
   \   00000000   ........           DC32     _R7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable559:
   \   00000000   ........           DC32     fH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable562:
   \   00000000   ........           DC32     _R

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable571:
   \   00000000   ........           DC32     _PC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable588:
   \   00000000   ........           DC32     _DE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable594:
   \   00000000   ........           DC32     fPV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable595:
   \   00000000   ........           DC32     fC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable602:
   \   00000000   ........           DC32     _B

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable603:
   \   00000000   ........           DC32     _HL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable604:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable605:
   \   00000000   ........           DC32     _C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable606:
   \   00000000   ........           DC32     fZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable607:
   \   00000000   ........           DC32     fN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable704:
   \   00000000   ........           DC32     _B

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable705:
   \   00000000   ........           DC32     _C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable707:
   \   00000000   ........           DC32     _DE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable710:
   \   00000000   ........           DC32     _HL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable711:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable712:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable717:
   \   00000000   ........           DC32     _R

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable771:
   \   00000000   ........           DC32     _PC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable780:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable816:
   \   00000000   ........           DC32     _B

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable820:
   \   00000000   ........           DC32     _C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable828:
   \   00000000   ........           DC32     _DE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable836:
   \   00000000   ........           DC32     _HL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable848:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable897:
   \   00000000   ........           DC32     _SP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable900:
   \   00000000   ........           DC32     _ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable983:
   \   00000000   ........           DC32     keylines

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1014:
   \   00000000   ........           DC32     _HL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1015:
   \   00000000   ........           DC32     _DE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1018:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1030:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1033:
   \   00000000   ........           DC32     trdos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1038:
   \   00000000   ........           DC32     fneed128

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1049:
   \   00000000   ........           DC32     _R7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1059:
   \   00000000   ........           DC32     IM2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1061:
   \   00000000   ........           DC32     pport

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1062:
   \   00000000   ........           DC32     fz128

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1064:
   \   00000000   ........           DC32     zxpage

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1065:
   \   00000000   ........           DC32     fz128

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1067:
   \   00000000   ........           DC32     _C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1068:
   \   00000000   ........           DC32     _B

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1073:
   \   00000000   ........           DC32     _I

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1075:
   \   00000000   ........           DC32     newBorder

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1082:
   \   00000000   ........           DC32     IM1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1084:
   \   00000000   ........           DC32     zxfilesize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1085:
   \   00000000   ........           DC32     _SP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1086:
   \   00000000   ........           DC32     _HL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1087:
   \   00000000   ........           DC32     _DE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1088:
   \   00000000   ........           DC32     _A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1089:
   \   00000000   ........           DC32     _B

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1090:
   \   00000000   ........           DC32     _C

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1091:
   \   00000000   ........           DC32     _PC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1092:
   \   00000000   ........           DC32     _I

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1093:
   \   00000000   ........           DC32     _R

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1094:
   \   00000000   ........           DC32     _IY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1095:
   \   00000000   ........           DC32     _IX

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1096:
   \   00000000   ........           DC32     _IFF1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1097:
   \   00000000   ........           DC32     IM0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1098:
   \   00000000   ........           DC32     _IFF2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1099:
   \   00000000   ........           DC32     _IM

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1100:
   \   00000000   ........           DC32     pport

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1116:
   \   00000000   ........           DC32     maxy

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1120:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1121:
   \   00000000   ........           DC32     colors

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1125:
   \   00000000   ........           DC32     scrrot

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1126:
   \   00000000   ........           DC32     width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1148:
   \   00000000   ........           DC32     C65

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1149:
   \   00000000   ........           DC32     maxx

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1150:
   \   00000000   ........           DC32     height

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1154:
   \   00000000   ........           DC32     minx

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1156:
   \   00000000   ........           DC32     frotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1159:
   \   00000000   ........           DC32     miny

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1162:
   \   00000000   ........           DC32     ldir

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1166:
   \   00000000   ........           DC32     file

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1167:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1172:
   \   00000000   ........           DC32     fneed128

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1181:
   \   00000000   ........           DC32     err

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1186:
   \   00000000   ........           DC32     screensize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1187:
   \   00000000   ........           DC32     screen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1193:
   \   00000000   ........           DC32     timer_proc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1197:
   \   00000000   ........           DC32     keylines

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1202:
   \   00000000   ........           DC32     param

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1203:
   \   00000000   67666666           DC32     0x66666667

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1204:
   \   00000000   ........           DC32     miny

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1205:
   \   00000000   ........           DC32     minx

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1206:
   \   00000000   ........           DC32     mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1207:
   \   00000000   ........           DC32     count

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1208:
   \   00000000   ........           DC32     rrkey

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1209:
   \   00000000   ........           DC32     redkey

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1210:
   \   00000000   ........           DC32     alternate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1217:
   \   00000000   ........           DC32     fpstab

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1218:
   \   00000000   ........           DC32     fps

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1219:
   \   00000000   ........           DC32     `tst`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1220:
   \   00000000   ........           DC32     tstatesPerInterrupt

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1221:
   \   00000000   ........           DC32     fzxrotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1222:
   \   00000000   ........           DC32     frotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1223:
   \   00000000   ........           DC32     fzxsmall

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1224:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1226:
   \   00000000   ........           DC32     scrrot

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1227:
   \   00000000   ........           DC32     mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1228:
   \   00000000   ........           DC32     timer

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1230:
   \   00000000   ........           DC32     err

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1233:
   \   00000000   ........           DC32     mem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1234:
   \   00000000   ........           DC32     zx

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1235:
   \   00000000   ........           DC32     zxfilesize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1236:
   \   00000000   ........           DC32     width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1237:
   \   00000000   ........           DC32     maxy

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1238:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1239:
   \   00000000   ........           DC32     fz128

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1240:
   \   00000000   ........           DC32     file

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Title>`:
   \   00000000   ........           DC32 `?<Constant "Z80 0.88 (c)bn">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for help>`:
   \   00000000   205A38302065       DC8 20H, 5AH, 38H, 30H, 20H, 65H, 6CH, 66H
   \              6C66        
   \   00000008   20302E38380A       DC8 20H, 30H, 2EH, 38H, 38H, 0AH, 31H, 2EH
   \              312E        
   \   00000010   4C6F61642030       DC8 4CH, 6FH, 61H, 64H, 20H, 30H, 2DH, 39H
   \              2D39        
   \   00000018   2C230A322E53       DC8 2CH, 23H, 0AH, 32H, 2EH, 53H, 61H, 76H
   \              6176        
   \   00000020   6520302D392C       DC8 65H, 20H, 30H, 2DH, 39H, 2CH, 23H, 0AH
   \              230A        
   \   00000028   332E46707320       DC8 33H, 2EH, 46H, 70H, 73H, 20H, 30H, 2DH
   \              302D        
   \   00000030   393A25640A34       DC8 39H, 3AH, 25H, 64H, 0AH, 34H, 2EH, 49H
   \              2E49        
   \   00000038   6E7420312D35       DC8 6EH, 74H, 20H, 31H, 2DH, 35H, 3AH, 25H
   \              3A25        
   \   00000040   640A372E526F       DC8 64H, 0AH, 37H, 2EH, 52H, 6FH, 74H, 61H
   \              7461        
   \   00000048   74650A382E52       DC8 74H, 65H, 0AH, 38H, 2EH, 52H, 65H, 73H
   \              6573        
   \   00000050   697A650A4C65       DC8 69H, 7AH, 65H, 0AH, 4CH, 65H, 66H, 74H
   \              6674        
   \   00000058   3A416C746572       DC8 3AH, 41H, 6CH, 74H, 65H, 72H, 6EH, 20H
   \              6E20        
   \   00000060   4B65790A4772       DC8 4BH, 65H, 79H, 0AH, 47H, 72H, 65H, 65H
   \              6565        
   \   00000068   6E3A52656465       DC8 6EH, 3AH, 52H, 65H, 64H, 65H, 66H, 69H
   \              6669        
   \   00000070   6E653A0A6B65       DC8 6EH, 65H, 3AH, 0AH, 6BH, 65H, 79H, 3AH
   \              793A        
   \   00000078   76616C75653A       DC8 76H, 61H, 6CH, 75H, 65H, 3AH, 47H, 72H
   \              4772        
   \   00000080   65656E0A6362       DC8 65H, 65H, 6EH, 0AH, 63H, 62H, 6EH, 2EH
   \              6E2E        
   \   00000088   6E61726F642E       DC8 6EH, 61H, 72H, 6FH, 64H, 2EH, 72H, 75H
   \              7275        
   \   00000090   0A63626E4079       DC8 0AH, 63H, 62H, 6EH, 40H, 79H, 61H, 6EH
   \              616E        
   \   00000098   6465782E7275       DC8 64H, 65H, 78H, 2EH, 72H, 75H, 0
   \              00          
   \   0000009F   00                 DC8 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for maxx>`:
   \   00000000   16000000           DC32 22

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for fsna>`:
   \   00000000   01                 DC8 1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for mode>`:
   \   00000000   64000000           DC32 100

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for maxy>`:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for newBorder>`:
   \   00000000   07000000           DC32 7

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for colors>`:
   \   00000000   0002C0C2181E       DC8 0, 2, -64, -62, 24, 30, -40, -38, 0, 3, -32, -29, 28, 31, -4, -1
   \              D8DA0003E0E3
   \              1C1FFCFF    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fps>`:
   \   00000000   2B000000           DC32 43

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for tst>`:
   \   00000000   04000000           DC32 4

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for autostart>`:
   \   00000000   01                 DC8 1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for tstatesPerInterrupt>`:
   \   00000000   80380100           DC32 80000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for IM1>`:
   \   00000000   01000000           DC32 1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for IM2>`:
   \   00000000   02000000           DC32 2

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_C>`:
   \   00000000   01000000           DC32 1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_N>`:
   \   00000000   02000000           DC32 2

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_PV>`:
   \   00000000   04000000           DC32 4

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_3>`:
   \   00000000   08000000           DC32 8

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_H>`:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_5>`:
   \   00000000   20000000           DC32 32

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_Z>`:
   \   00000000   40000000           DC32 64

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for F_S>`:
   \   00000000   80000000           DC32 128

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PF>`:
   \   00000000   04000000           DC32 4

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for _IFF1>`:
   \   00000000   01                 DC8 1

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for _IFF2>`:
   \   00000000   01                 DC8 1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for _IM>`:
   \   00000000   02000000           DC32 2

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for errors>`:
   \   00000000   ........           DC32 `?<Constant "">`
   \   00000004   ........           DC32 `?<Constant "\\331\\345\\353\\352\\355\\350\\362\\345 \\`
   \   00000008   ........           DC32 `?<Constant "\\324\\340\\351\\353 \\355\\340\\361\\362\\`
   \   0000000C   ........           DC32 `?<Constant "\\315\\345 \\354\\356\\343\\363 \\347\\340`
   \   00000010   ........           DC32 `?<Constant "\\316\\370\\350\\341\\352\\340 \\347\\340\\`
   \   00000014   ........           DC32 `?<Constant "128k Roms not supported!">`

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345 \\354\\356\\343\\363 \\347\\340`:
   \   00000000   CDE520ECEEE3       DC8 "\315\345 \354\356\343\363 \347\340\343\360\363\347\350\362\374 \360\356\354"
   \              F320E7E0E3F0
   \              F3E7E8F2FC20
   \              F0EEEC00    
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\324\\340\\351\\353 \\355\\340\\361\\362\\`:
   \   00000000   D4E0E9EB20ED       DC8 "\324\340\351\353 \355\340\361\362\360\356\345\352 .ini \355\345 \355\340\351\344\345\355!"
   \              E0F1F2F0EEE5
   \              EA202E696E69
   \              20EDE520EDE0
   \              E9E4E5ED2100
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\331\\345\\353\\352\\355\\350\\362\\345 \\`:
   \   00000000   D9E5EBEAEDE8       DC8 "\331\345\353\352\355\350\362\345 \355\340 .z80 \364\340\351\353"
   \              F2E520EDE020
   \              2E7A383020F4
   \              E0E9EB00    
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Z80 0.88 (c)bn">`:
   \   00000000   5A383020302E       DC8 "Z80 0.88 (c)bn"
   \              383820286329
   \              626E00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\316\\370\\350\\341\\352\\340 \\347\\340\\`:
   \   00000000   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340 \347\340\343\360\363\347\352\350"
   \              20E7E0E3F0F3
   \              E7EAE800    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "128k Roms not supported!">`:
   \   00000000   3132386B2052       DC8 "128k Roms not supported!"
   \              6F6D73206E6F
   \              742073757070
   \              6F7274656421
   \              00          
   \   00000019   000000             DC8 0, 0, 0
   5158          
   5159          //void debsave(){
   5160          //  char *ptr;
   5161          //  int f;
   5162          //  *(ptr=file)='l'; *++ptr='o'; *++ptr='g'; *++ptr=0;
   5163          //  f=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err);
   5164          //  if (f==-1) return;
   5165          //  fwrite(f,mem+0x10000,debpos-0x10000,&err);
   5166          //  fclose(f,&err);
   5167          //}

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     F                12
     adc16            20
     adc_a            24
     add16             8
     add_a            12
     and_a             0
     bit               8
     ccf               0
     cls               4
     cp_a              8
     cpl_a             0
     daa_a            16
     dec16             0
     dec8              4
     drawhelp         20
     drawsym           8
     ex_af_af         16
     execute          16
     execute_cb       12
     execute_ed       16
     execute_id       12
     execute_id_cb     8
     exx               4
     getkkk            8
     in_bc             4
     inb               0
     inc16             0
     inc8              8
     initparity        0
     interrupt        20
     key               0
     ld_a_i            0
     ld_a_r            0
     loadSNA          36
     loadZ80          36
     loadZ80_page     20
     loadini          16
     loadrom          36
     loadsave         24
     neg_a             4
     nxtpcw            0
     onclose           4
     oncreate          4
     onexit            4
     onkey            36
     onredraw         12
     onstart          20
     or_a              0
     outb             24
     popw              0
     pushw             0
     qdec8             0
     qinc8             0
     reg               0
     res               0
     reset            28
     resetKeyboard     0
     rl                8
     rl_a             12
     rlc               4
     rlc_a             8
     rld_a             0
     rotate           16
     rr                4
     rr_a              8
     rrc               0
     rrc_a             4
     rrd_a             0
     saveSNA          36
     saveZ80          32
     saveini          12
     sbc16            20
     sbc_a            24
     scf               0
     set               0
     sla               0
     sls               4
     sra               0
     srl               0
     start             4
     sub_a            12
     timer_proc        4
     xF                0
     xor_a             0
     z80load          24
     z80start         24
     z80zipload       16
     zxpaint          64
     zxpaintrotate    56
     zxpaintsmall     60


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Title                              4
     filename                         128
     file                               4
     paramlength                        4
     fpstab                            12
     param                            152
     menu                             256
     count                              1
     redkey                             1
     rrkey                              1
     timer                             16
     help                             160
     maxx                               4
     ldir                               1
     fz128                              1
     fsna                               1
     fneed128                           1
     frotate                            1
     fzxrotate                          1
     fzxsmall                           1
     mode                               4
     minx                               4
     miny                               4
     scrbuf                         49152
     maxy                               4
     scrrot                             4
     mem                                4
     zx                                 4
     newBorder                          4
     tm                                 4
     tmp                                4
     temp                               4
     zxpage                            32
     romstart                           4
     rompage                            4
     rombuf1                            4
     rombuf2                            4
     rom48size                          4
     rom128size                         4
     rom48                              4
     rom128                             4
     rombank                            4
     pport                              1
     trdos                              1
     keylines                          32
     colors                            16
     fps                                4
     tst                                4
     alternate                          4
     tape                               4
     tapeidx                            4
     tapecur                            4
     tapeptr                            4
     autostart                          1
     startape                           1
     zxfilesize                         4
     tstatesPerInterrupt                4
     drawsym                          160
     drawhelp                         228
     IM0                                4
     IM1                                4
     IM2                                4
     F_C                                4
     F_N                                4
     F_PV                               4
     F_3                                4
     F_H                                4
     F_5                                4
     F_Z                                4
     F_S                                4
     PF                                 4
     p_                                 4
     parity                           256
     initparity                        72
     _A                                 4
     _HL                                4
     _B                                 4
     _C                                 4
     _DE                                4
     fS                                 1
     fZ                                 1
     f5                                 1
     fH                                 1
     f3                                 1
     fPV                                1
     fN                                 1
     fC                                 1
     _AF_                               4
     _HL_                               4
     _BC_                               4
     _DE_                               4
     _IX                                4
     _IY                                4
     _ID                                4
     _SP                                4
     _PC                                4
     _I                                 4
     _R                                 4
     _R7                                4
     _IFF1                              1
     _IFF2                              1
     _IM                                4
     F                                204
     xF                               228
     nxtpcw                            56
     pushw                             72
     popw                              56
     interrupt                        168
     in_bc                            172
     adc_a                            268
     add_a                            248
     sbc_a                            260
     sub_a                            240
     rlc_a                            136
     rrc_a                            124
     rl_a                             140
     rr_a                             132
     cp_a                             236
     and_a                            172
     or_a                             168
     xor_a                            172
     neg_a                             20
     cpl_a                             96
     daa_a                            156
     ld_a_i                           160
     ld_a_r                           176
     rrd_a                            204
     rld_a                            200
     bit                              164
     scf                              100
     ccf                              100
     rlc                              188
     rrc                              168
     rl                               192
     rr                               180
     sla                              172
     sls                              184
     sra                              164
     srl                              160
     dec8                             192
     inc8                             192
     adc16                            272
     add16                            156
     sbc16                            264
     exx                              120
     ex_af_af                          56
     inc16                             16
     qinc8                             12
     dec16                             16
     qdec8                             12
     res                                8
     set                                8
     local_tstates                      4
     b                                  4
     hl                                 4
     haltsToInterrupt                   4
     t                                  4
     sp                                 4
     d                                  1
     execute                         8428
     execute_ed                      3132
     execute_cb                      5888
     execute_id                      3776
     execute_id_cb                   5924
     resetKeyboard                     32
     inb                               60
     outb                             208
     loadSNA                          752
     reg                               20
     saveSNA                          672
     loadZ80_page                     336
     loadZ80                         1196
     saveZ80                          628
     reset                            204
     zxpaintrotate                    300
     zxpaintsmall                     388
     zxpaint                          472
     rotate                           388
     onredraw                         216
     loadini                          308
     saveini                          252
     loadrom                          440
     z80start                         248
     z80zipload                       192
     z80load                          236
     cls                               24
     xx                                 4
     yy                                 4
     timer_proc                        48
     start                             36
     oncreate                          28
     key                               72
     getkkk                           168
     onkey                           1132
     onexit                            68
     onclose                           32
     loadsave                         304
     errors                            24
     onstart                          220
     ??DataTable0                       4
     ??DataTable3                       4
     ??DataTable4                       4
     ??DataTable5                       4
     ??DataTable6                       4
     ??DataTable7                       4
     ??DataTable8                       4
     ??DataTable9                       4
     ??DataTable29                      4
     ??DataTable37                      4
     ??DataTable39                      4
     ??DataTable41                      4
     ??DataTable43                      4
     ??DataTable44                      4
     ??DataTable45                      4
     ??DataTable48                      4
     ??DataTable49                      4
     ??DataTable50                      4
     ??DataTable156                     4
     ??DataTable186                     4
     ??DataTable187                     4
     ??DataTable191                     4
     ??DataTable193                     4
     ??DataTable194                     4
     ??DataTable195                     4
     ??DataTable197                     4
     ??DataTable200                     4
     ??DataTable201                     4
     ??DataTable202                     4
     ??DataTable204                     4
     ??DataTable205                     4
     ??DataTable212                     4
     ??DataTable220                     4
     ??DataTable225                     4
     ??DataTable226                     4
     ??DataTable241                     4
     ??DataTable253                     4
     ??DataTable254                     4
     ??DataTable263                     4
     ??DataTable285                     4
     ??DataTable383                     4
     ??DataTable387                     4
     ??DataTable399                     4
     ??DataTable400                     4
     ??DataTable401                     4
     ??DataTable405                     4
     ??DataTable407                     4
     ??DataTable408                     4
     ??DataTable409                     4
     ??DataTable413                     4
     ??DataTable414                     4
     ??DataTable415                     4
     ??DataTable419                     4
     ??DataTable428                     4
     ??DataTable429                     4
     ??DataTable430                     4
     ??DataTable431                     4
     ??DataTable432                     4
     ??DataTable433                     4
     ??DataTable434                     4
     ??DataTable435                     4
     ??DataTable436                     4
     ??DataTable437                     4
     ??DataTable438                     4
     ??DataTable439                     4
     ??DataTable440                     4
     ??DataTable441                     4
     ??DataTable442                     4
     ??DataTable443                     4
     ??DataTable494                     4
     ??DataTable495                     4
     ??DataTable496                     4
     ??DataTable499                     4
     ??DataTable501                     4
     ??DataTable502                     4
     ??DataTable503                     4
     ??DataTable505                     4
     ??DataTable506                     4
     ??DataTable508                     4
     ??DataTable559                     4
     ??DataTable562                     4
     ??DataTable571                     4
     ??DataTable588                     4
     ??DataTable594                     4
     ??DataTable595                     4
     ??DataTable602                     4
     ??DataTable603                     4
     ??DataTable604                     4
     ??DataTable605                     4
     ??DataTable606                     4
     ??DataTable607                     4
     ??DataTable704                     4
     ??DataTable705                     4
     ??DataTable707                     4
     ??DataTable710                     4
     ??DataTable711                     4
     ??DataTable712                     4
     ??DataTable717                     4
     ??DataTable771                     4
     ??DataTable780                     4
     ??DataTable816                     4
     ??DataTable820                     4
     ??DataTable828                     4
     ??DataTable836                     4
     ??DataTable848                     4
     ??DataTable897                     4
     ??DataTable900                     4
     ??DataTable983                     4
     ??DataTable1014                    4
     ??DataTable1015                    4
     ??DataTable1018                    4
     ??DataTable1030                    4
     ??DataTable1033                    4
     ??DataTable1038                    4
     ??DataTable1049                    4
     ??DataTable1059                    4
     ??DataTable1061                    4
     ??DataTable1062                    4
     ??DataTable1064                    4
     ??DataTable1065                    4
     ??DataTable1067                    4
     ??DataTable1068                    4
     ??DataTable1073                    4
     ??DataTable1075                    4
     ??DataTable1082                    4
     ??DataTable1084                    4
     ??DataTable1085                    4
     ??DataTable1086                    4
     ??DataTable1087                    4
     ??DataTable1088                    4
     ??DataTable1089                    4
     ??DataTable1090                    4
     ??DataTable1091                    4
     ??DataTable1092                    4
     ??DataTable1093                    4
     ??DataTable1094                    4
     ??DataTable1095                    4
     ??DataTable1096                    4
     ??DataTable1097                    4
     ??DataTable1098                    4
     ??DataTable1099                    4
     ??DataTable1100                    4
     ??DataTable1116                    4
     ??DataTable1120                    4
     ??DataTable1121                    4
     ??DataTable1125                    4
     ??DataTable1126                    4
     ??DataTable1148                    4
     ??DataTable1149                    4
     ??DataTable1150                    4
     ??DataTable1154                    4
     ??DataTable1156                    4
     ??DataTable1159                    4
     ??DataTable1162                    4
     ??DataTable1166                    4
     ??DataTable1167                    4
     ??DataTable1172                    4
     ??DataTable1181                    4
     ??DataTable1186                    4
     ??DataTable1187                    4
     ??DataTable1193                    4
     ??DataTable1197                    4
     ??DataTable1202                    4
     ??DataTable1203                    4
     ??DataTable1204                    4
     ??DataTable1205                    4
     ??DataTable1206                    4
     ??DataTable1207                    4
     ??DataTable1208                    4
     ??DataTable1209                    4
     ??DataTable1210                    4
     ??DataTable1217                    4
     ??DataTable1218                    4
     ??DataTable1219                    4
     ??DataTable1220                    4
     ??DataTable1221                    4
     ??DataTable1222                    4
     ??DataTable1223                    4
     ??DataTable1224                    4
     ??DataTable1226                    4
     ??DataTable1227                    4
     ??DataTable1228                    4
     ??DataTable1230                    4
     ??DataTable1233                    4
     ??DataTable1234                    4
     ??DataTable1235                    4
     ??DataTable1236                    4
     ??DataTable1237                    4
     ??DataTable1238                    4
     ??DataTable1239                    4
     ??DataTable1240                    4
     ?<Initializer for Title>           4
     ?<Initializer for help>          160
     ?<Initializer for maxx>            4
     ?<Initializer for fsna>            1
     ?<Initializer for mode>            4
     ?<Initializer for maxy>            4
     ?<Initializer for newBorder>       4
     ?<Initializer for colors>         16
     ?<Initializer for fps>             4
     ?<Initializer for tst>             4
     ?<Initializer for autostart>       1
     ?<Initializer for tstatesPerInterrupt>
                                        4
     ?<Initializer for IM1>             4
     ?<Initializer for IM2>             4
     ?<Initializer for F_C>             4
     ?<Initializer for F_N>             4
     ?<Initializer for F_PV>            4
     ?<Initializer for F_3>             4
     ?<Initializer for F_H>             4
     ?<Initializer for F_5>             4
     ?<Initializer for F_Z>             4
     ?<Initializer for F_S>             4
     ?<Initializer for PF>              4
     ?<Initializer for _IFF1>           1
     ?<Initializer for _IFF2>           1
     ?<Initializer for _IM>             4
     ?<Initializer for errors>         24
     ?<Constant "\315\345 \354\356\343\363 \347\340
                                       24
     ?<Constant "\324\340\351\353 \355\340\361\362\
                                       32
     ?<Constant "\331\345\353\352\355\350\362\345 \
                                       24
     ?<Constant "">                     1
     ?<Constant "Z80 0.88 (c)bn">      16
     ?<Constant "\316\370\350\341\352\340 \347\340\
                                       16
     ?<Constant "128k Roms not supported!">
                                       28
      Others                          540

 
 45 928 bytes in segment CODE
    225 bytes in segment DATA_C
    284 bytes in segment DATA_I
    284 bytes in segment DATA_ID
 50 181 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 45 228 bytes of CODE  memory (+ 724 bytes shared)
    509 bytes of CONST memory
 50 465 bytes of DATA  memory

Errors: none
Warnings: 2

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    31/Mar/2011  22:53:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CBN\Arc\UnZip.c                               #
#    Command line    =  C:\arm\CBN\Arc\UnZip.c -D NEWSGOLD -D UNPACK -lC     #
#                       C:\arm\CBN\Z80\Release\List\ -o                      #
#                       C:\arm\CBN\Z80\Release\Obj\ -s9 --no_unroll          #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --char_is_signed --fpu None -I "C:\arm2\Embedded     #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\CBN\Z80\Release\List\UnZip.lst                #
#    Object file     =  C:\arm\CBN\Z80\Release\Obj\UnZip.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CBN\Arc\UnZip.c
      1          #include "..\swilib.h"
      2          #include "zlib\zlib.h"
      3          
      4          #define byte unsigned char
      5          extern int loadfilesize;
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          int dounzip(Byte *compr, uLong comprLen, Byte *uncompr, uLong  uncomprLen){
   \                     dounzip:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   0350A0E1           MOV      R5,R3
      8              int err;
      9              z_stream d_stream; /* decompression stream */
     10              d_stream.zalloc = (alloc_func)0;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   20208DE5           STR      R2,[SP, #+32]
     11              d_stream.zfree = (free_func)0;
   \   00000018   24208DE5           STR      R2,[SP, #+36]
     12              d_stream.opaque = (voidpf)0;
   \   0000001C   28208DE5           STR      R2,[SP, #+40]
     13              d_stream.next_in  = compr;
     14              d_stream.avail_in = (uInt)comprLen;
     15              err = inflateInit2(&d_stream,-MAX_WBITS);
   \   00000020   50209FE5           LDR      R2,??dounzip_0   ;; `?<Constant "1.2.3">`
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   \   0000002C   3830A0E3           MOV      R3,#+56
   \   00000030   0E10E0E3           MVN      R1,#+14
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     inflateInit2_,??inflateInit2_??rA
     16              if(err!=Z_OK){ 
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0A00001A           BNE      ??dounzip_1
     17             unerr:
     18          //    if(!loadfilenomsg)
     19          //      MessageBox(NULL,"Ошибка распаковки файла!",0,MB_OK); 
     20                return err;
     21              }
     22              d_stream.next_out = uncompr;            /* discard the output */
   \   00000044   0C408DE5           STR      R4,[SP, #+12]
     23              d_stream.avail_out = (uInt)uncomprLen;
   \   00000048   10508DE5           STR      R5,[SP, #+16]
     24              err = inflate(&d_stream, 2);
   \   0000004C   0210A0E3           MOV      R1,#+2
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     inflate,??inflate??rA
     25              if(err<0) goto unerr;
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0300004A           BMI      ??dounzip_1
     26              err = inflateEnd(&d_stream);
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   ........           _BLF     inflateEnd,??inflateEnd??rA
     27              if(err<0) goto unerr;
   \   00000068   000050E3           CMP      R0,#+0
     28              return 0;
   \   0000006C   0000A053           MOVPL    R0,#+0
   \                     ??dounzip_1:
   \   00000070   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??dounzip_0:
   \   00000078   ........           DC32     `?<Constant "1.2.3">`
     29          }
     30          

   \                                 In segment CODE, align 4, keep-with-next
     31          int getint4(unsigned char *ptr){
     32            return ptr[0]|(ptr[1]<<8)|((ptr[2])<<16)|((ptr[3])<<24);
   \                     getint4:
   \   00000000   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000004   0120D0E5           LDRB     R2,[R0, #+1]
   \   00000008   021481E1           ORR      R1,R1,R2, LSL #+8
   \   0000000C   0220D0E5           LDRB     R2,[R0, #+2]
   \   00000010   0300D0E5           LDRB     R0,[R0, #+3]
   \   00000014   021881E1           ORR      R1,R1,R2, LSL #+16
   \   00000018   000C81E1           ORR      R0,R1,R0, LSL #+24
   \   0000001C   1EFF2FE1           BX       LR               ;; return
     33          }
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          char *unzip(char *buf){
   \                     unzip:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     36            int packsize=1, unpacksize=2, filenamesize=3;
     37            char *file=buf, *outbuf=0;
     38            do{
     39                if(loadfilesize<30) break;
   \   00000004   A8609FE5           LDR      R6,??unzip_0     ;; loadfilesize
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000096E5           LDR      R0,[R6, #+0]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   1E0050E3           CMP      R0,#+30
   \   00000018   1F0000BA           BLT      ??unzip_1
     40                packsize=getint4((byte*)file+18);
   \   0000001C   120084E2           ADD      R0,R4,#+18
   \   00000020   ........           BL       getint4
   \   00000024   0070A0E1           MOV      R7,R0
     41                unpacksize=getint4((byte*)file+22);
   \   00000028   160084E2           ADD      R0,R4,#+22
   \   0000002C   ........           BL       getint4
   \   00000030   0080A0E1           MOV      R8,R0
     42                filenamesize=getint4((byte*)file+26);
     43                //fread(in,file,filenamesize,&err);
     44                //file[filenamesize]=0;
     45                file+=30+filenamesize;
   \   00000034   1A0084E2           ADD      R0,R4,#+26
   \   00000038   ........           BL       getint4
   \   0000003C   040080E0           ADD      R0,R0,R4
   \   00000040   1E9080E2           ADD      R9,R0,#+30
     46                if(file[-1]!='/'){
   \   00000044   D10059E1           LDRSB    R0,[R9, #-1]
   \   00000048   2F0050E3           CMP      R0,#+47
   \   0000004C   1200000A           BEQ      ??unzip_1
     47                  if(packsize==unpacksize) memcpy(outbuf=buf,file,loadfilesize=unpacksize); 
   \   00000050   080057E1           CMP      R7,R8
   \   00000054   0600001A           BNE      ??unzip_2
   \   00000058   008086E5           STR      R8,[R6, #+0]
   \   0000005C   0450A0E1           MOV      R5,R4
   \   00000060   0820A0E1           MOV      R2,R8
   \   00000064   0910A0E1           MOV      R1,R9
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     memcpy,??memcpy??rA
   \   00000070   090000EA           B        ??unzip_1
     48                  else{
     49                    if(!(outbuf=(char*)malloc(unpacksize))) break;
   \                     ??unzip_2:
   \   00000074   0800A0E1           MOV      R0,R8
   \   00000078   140000EF           SWI      +20
   \   0000007C   0050B0E1           MOVS     R5,R0
   \   00000080   0500000A           BEQ      ??unzip_1
     50                    dounzip((Byte*)file,packsize,(Byte*)outbuf,loadfilesize=unpacksize);
   \   00000084   008086E5           STR      R8,[R6, #+0]
   \   00000088   0830A0E1           MOV      R3,R8
   \   0000008C   0520A0E1           MOV      R2,R5
   \   00000090   0710A0E1           MOV      R1,R7
   \   00000094   0900A0E1           MOV      R0,R9
   \   00000098   ........           BL       dounzip
     51                  }
     52                }
     53            }while(0);
     54            if(buf!=outbuf) mfree(buf);
   \                     ??unzip_1:
   \   0000009C   050054E1           CMP      R4,R5
   \   000000A0   0100000A           BEQ      ??unzip_3
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   150000EF           SWI      +21
     55            return outbuf;
   \                     ??unzip_3:
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??unzip_0:
   \   000000B4   ........           DC32     loadfilesize
     56          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.2.3">`:
   \   00000000   312E322E3300       DC8 "1.2.3"
   \   00000006   0000               DC8 0, 0
     57          

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     dounzip     68
     getint4      0
     unzip       28


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     dounzip              124
     getint4               32
     unzip                184
     ?<Constant "1.2.3">    8
      Others               60

 
 400 bytes in segment CODE
   8 bytes in segment DATA_C
 
 340 bytes of CODE  memory (+ 60 bytes shared)
   8 bytes of CONST memory

Errors: none
Warnings: none

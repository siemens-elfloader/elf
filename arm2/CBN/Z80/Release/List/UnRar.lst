##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    31/Mar/2011  22:53:54 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CBN\Arc\UnRar.c                               #
#    Command line    =  C:\arm\CBN\Arc\UnRar.c -D NEWSGOLD -D UNPACK -lC     #
#                       C:\arm\CBN\Z80\Release\List\ -o                      #
#                       C:\arm\CBN\Z80\Release\Obj\ -s9 --no_unroll          #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --char_is_signed --fpu None -I "C:\arm2\Embedded     #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\CBN\Z80\Release\List\UnRar.lst                #
#    Object file     =  C:\arm\CBN\Z80\Release\Obj\UnRar.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CBN\Arc\UnRar.c
      1          
      2          #include "..\swilib.h"
      3          
      4          #define bool int
      5          #define false 0
      6          #define true 1
      7          
      8          extern int loadfilesize;
      9          extern void *memset(void *buf, int val, int size);
     10          
     11          //char filename22[256];
     12          
     13          inline int abs(int a){ return (a<0)?-a:a;}
     14          //typedef unsigned char    byte;   //8 bits
     15          //typedef unsigned int     uint;   //32 bits or more
     16          

   \                                 In segment DATA_Z, align 4, align-sorted
     17          int in, outhandle; //my add
   \                     in:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     outhandle:
   \   00000000                      DS8 4
     18          //unsigned int err;
     19          
     20          //int loadfilesize=0, readoff=0;
     21          //unsigned long writebytes; //tmp
     22          //char *readdata; // Исходный rar
     23          
     24          //char filename2[100];

   \                                 In segment DATA_Z, align 4, align-sorted
     25          int HeadType, Flags, HeadSize, PackSize, UnpSize, Version, Method, NameSize, NextPos;
   \                     HeadType:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Flags:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     HeadSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PackSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Version:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Method:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NameSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NextPos:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     26          int Attrib, AllSize;
   \                     Attrib:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AllSize:
   \   00000000                      DS8 4
     27          

   \                                 In segment DATA_C, align 4, align-sorted
     28          const int MAX_SIZE = 0x0FFFFFF; //fake  0x8000;
   \                     MAX_SIZE:
   \   00000000   FFFFFF00           DC32 16777215

   \                                 In segment DATA_Z, align 4, align-sorted
     29          int MAXWINSIZE;// = 0x100000;  //80000=512kb
   \                     MAXWINSIZE:
   \   00000000                      DS8 4

   \                                 In segment DATA_C, align 4, align-sorted
     30          const int MAXWINMASK=0x0FFFFFFF;//fake = 0x0FFFFF;//(MAXWINSIZE-1);!!!!
   \                     MAXWINMASK:
   \   00000000   FFFFFF0F           DC32 268435455
     31          

   \                                 In segment DATA_C, align 4, align-sorted
     32          const  int SIZEOF_SHORTBLOCKHEAD =  7;
   \                     SIZEOF_SHORTBLOCKHEAD:
   \   00000000   07000000           DC32 7

   \                                 In segment DATA_C, align 4, align-sorted
     33          const  int LHD_SOLID  = 0x10;
   \                     LHD_SOLID:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_C, align 4, align-sorted
     34          const  int ATTR_SUB  = 0x10;
   \                     ATTR_SUB:
   \   00000000   10000000           DC32 16
     35          

   \                                 In segment DATA_C, align 4, align-sorted
     36          const int LOW_DIST_REP_COUNT = 16;
   \                     LOW_DIST_REP_COUNT:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_C, align 4, align-sorted
     37          const int BLOCK_LZ=0, BLOCK_PPM=1;
   \                     BLOCK_LZ:
   \   00000000   00000000           DC32 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     BLOCK_PPM:
   \   00000000   01000000           DC32 1
     38          

   \                                 In segment DATA_I, align 4, align-sorted
     39          char LDecode[]={0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,(char)128,(char)160,(char)192,(char)224};
   \                     LDecode:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for LDecode>`

   \                                 In segment DATA_I, align 4, align-sorted
     40          char LBits[]=  {0,0,0,0,0,0,0,0,1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,  4,  5,  5,  5,  5};
   \                     LBits:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for LBits>`
     41            

   \                                 In segment DATA_I, align 4, align-sorted
     42          int DDecode[]={0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576,32768U,49152U,65536,98304,131072,196608,262144,327680,393216,458752,524288,589824,655360,720896,786432,851968,917504,983040};
   \                     DDecode:
   \   00000000                      DS8 192
   \   000000C0                      REQUIRE `?<Initializer for DDecode>`

   \                                 In segment DATA_I, align 4, align-sorted
     43          char DBits[]=  {0,0,0,0,1,1,2, 2, 3, 3, 4, 4, 5, 5,  6,  6,  7,  7,  8,  8,   9,   9,  10,  10,  11,  11,  12,   12,   13,   13,    14,    14,   15,   15,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16};
   \                     DBits:
   \   00000000                      DS8 48
   \   00000030                      REQUIRE `?<Initializer for DBits>`
     44            

   \                                 In segment DATA_I, align 4, align-sorted
     45          int DBitLengthCounts[]= {4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,0,12};
   \                     DBitLengthCounts:
   \   00000000                      DS8 76
   \   0000004C                      REQUIRE `?<Initializer for DBitLengthCounts>`

   \                                 In segment DATA_I, align 4, align-sorted
     46          char SDDecode[]={0,4,8,16,32,64,(char)128,(char)192};
   \                     SDDecode:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for SDDecode>`

   \                                 In segment DATA_I, align 4, align-sorted
     47          char SDBits[]=  {2,2,3, 4, 5, 6,  6,  6};
   \                     SDBits:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for SDBits>`
     48          
     49          
     50          #define NC 299  
     51          #define DC  60
     52          #define LDC 17
     53          #define RC  28
     54          #define HUFF_TABLE_SIZE (NC+DC+RC+LDC)
     55          #define BC  20
     56          
     57          #define NC20 298
     58          #define DC20 48
     59          #define RC20 28
     60          #define BC20 19
     61          #define MC20 257
     62          

   \                                 In segment DATA_I, align 4, align-sorted
     63          int LLSize[]={NC,DC,RC,BC,LDC, NC20,DC20,RC20,BC20,MC20,MC20,MC20,MC20};
   \                     LLSize:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for LLSize>`

   \                                 In segment DATA_Z, align 4, align-sorted
     64          int DecodeN[NC+DC+RC+BC+LDC+ NC20+DC20+RC20+BC20+MC20*4];
   \                     DecodeN:
   \   00000000                      DS8 7380
     65          
     66          struct Decode{
     67            int MaxNum;
     68            int DecodeLen[16];
     69            int DecodePos[16];
     70            int DecodePtr;//add
     71            int DecodeCnt;//add

   \                                 In segment DATA_Z, align 4, align-sorted
     72          } LL[13];
   \                     LL:
   \   00000000                      DS8 1820
     73          

   \                                 In segment CODE, align 4, keep-with-next
     74          void InitLL(){
     75            int i,j;
     76            for(i=j=0;i<13;i++){
   \                     InitLL:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   0010A0E3           MOV      R1,#+0
     77              LL[i].DecodePtr=j;
   \                     ??InitLL_0:
   \   00000008   ........           LDR      R2,??DataTable20  ;; LL
   \   0000000C   8C30A0E3           MOV      R3,#+140
   \   00000010   932122E0           MLA      R2,R3,R1,R2
   \   00000014   1C309FE5           LDR      R3,??InitLL_1    ;; LLSize
   \   00000018   840082E5           STR      R0,[R2, #+132]
   \   0000001C   013193E7           LDR      R3,[R3, +R1, LSL #+2]
     78              LL[i].DecodeCnt=LLSize[i];
     79              j+=LLSize[i];
     80            }
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   883082E5           STR      R3,[R2, #+136]
   \   00000028   000083E0           ADD      R0,R3,R0
   \   0000002C   0D0051E3           CMP      R1,#+13
   \   00000030   F4FFFFBA           BLT      ??InitLL_0
     81          }
   \   00000034   1EFF2FE1           BX       LR               ;; return
   \                     ??InitLL_1:
   \   00000038   ........           DC32     LLSize
     82          
     83          struct AudioVariables
     84          {
     85            int K1,K2,K3,K4,K5;
     86            int D1,D2,D3,D4;
     87            int LastDelta;
     88            int Dif[11];
     89            int ByteCount;
     90            int LastChar;
     91          };
     92          /***************************** Unpack v 2.0 *********************************/
     93          
     94          
     95              int UnpRead(char *Window,int UnpPtr);
     96              void UnpWrite(char *Window,int UnpPtr);
     97              

   \                                 In segment DATA_Z, align 4, align-sorted
     98              char UnpOldTable[HUFF_TABLE_SIZE];
   \                     UnpOldTable:
   \   00000000                      DS8 404

   \                                 In segment DATA_Z, align 4, align-sorted
     99              char *Window=0;
   \                     Window:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    100              char *InBuf=0;
   \                     InBuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    101              int InAddr, InBit;
   \                     InAddr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     InBit:
   \   00000000                      DS8 4
    102          

   \                                 In segment CODE, align 4, keep-with-next
    103              void InitBitInput(){ 
    104                InAddr=InBit=0;
   \                     InitBitInput:
   \   00000000   ........           LDR      R1,??DataTable77  ;; InBit
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   000081E5           STR      R0,[R1, #+0]
   \   0000000C   ........           LDR      R1,??DataTable78  ;; InAddr
   \   00000010   000081E5           STR      R0,[R1, #+0]
    105              }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    106              void addbits(int Bits){
    107                Bits+=InBit;
   \                     addbits:
   \   00000000   ........           LDR      R1,??DataTable77  ;; InBit
   \   00000004   002091E5           LDR      R2,[R1, #+0]
   \   00000008   000082E0           ADD      R0,R2,R0
    108                InAddr+=Bits>>3;
   \   0000000C   ........           LDR      R2,??DataTable78  ;; InAddr
   \   00000010   003092E5           LDR      R3,[R2, #+0]
   \   00000014   C03183E0           ADD      R3,R3,R0, ASR #+3
   \   00000018   003082E5           STR      R3,[R2, #+0]
    109                InBit=Bits&7;
   \   0000001C   070000E2           AND      R0,R0,#0x7
   \   00000020   000081E5           STR      R0,[R1, #+0]
    110              }
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    111              int getbits(){
    112                int BitField=(InBuf[InAddr]&0xff) << 16;
    113                BitField|=(InBuf[InAddr+1]&0xff) << 8;
    114                BitField|=(InBuf[InAddr+2]&0xff);
    115                BitField >>= (8-InBit);
    116                return(BitField & 0xffff);
   \                     getbits:
   \   00000000   ........           LDR      R0,??DataTable78  ;; InAddr
   \   00000004   ........           LDR      R1,??DataTable50  ;; InBuf
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   010080E0           ADD      R0,R0,R1
   \   00000014   D010D0E1           LDRSB    R1,[R0, #+0]
   \   00000018   D120D0E1           LDRSB    R2,[R0, #+1]
   \   0000001C   D200D0E1           LDRSB    R0,[R0, #+2]
   \   00000020   FF1001E2           AND      R1,R1,#0xFF
   \   00000024   FF2002E2           AND      R2,R2,#0xFF
   \   00000028   0224A0E1           LSL      R2,R2,#+8
   \   0000002C   011882E1           ORR      R1,R2,R1, LSL #+16
   \   00000030   FF0000E2           AND      R0,R0,#0xFF
   \   00000034   010080E1           ORR      R0,R0,R1
   \   00000038   ........           LDR      R1,??DataTable77  ;; InBit
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   081061E2           RSB      R1,R1,#+8
   \   00000044   5001A0E1           ASR      R0,R0,R1
   \   00000048   0008A0E1           LSL      R0,R0,#+16
   \   0000004C   2008A0E1           LSR      R0,R0,#+16
   \   00000050   1EFF2FE1           BX       LR               ;; return
    117              }
    118          
    119              void Unpack29(bool Solid);
    120              bool UnpReadBuf();
    121              void UnpWriteBuf();
    122              void UnpWriteArea(int StartPtr,int EndPtr);
    123              void UnpWriteData(char *Data,int Size);
    124              bool ReadTables();
    125              void MakeDecodeTables(char *LenTab,int pos);
    126              int DecodeNumber(int pos);
    127              void UnpInitData(int Solid);
    128              void CopyString();
    129              bool ReadEndOfBlock();
    130              void CopyString(int Length,int Distance);
    131              inline void InsertOldDist(int Distance);
    132              inline void InsertLastMatch(int Length,int Distance);

   \                                 In segment DATA_Z, align 4, align-sorted
    133              int PPMEscChar;
   \                     PPMEscChar:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    134              int LastFilter;
   \                     LastFilter:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    135              bool TablesRead;
   \                     TablesRead:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    136              int OldDist[4],OldDistPtr;
   \                     OldDist:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     OldDistPtr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    137              int LastDist,LastLength;
   \                     LastDist:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     LastLength:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    138              int UnpPtr,WrPtr;
   \                     UnpPtr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     WrPtr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    139              int ReadTop;
   \                     ReadTop:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    140              int ReadBorder;
   \                     ReadBorder:
   \   00000000                      DS8 4
    141          

   \                                 In segment DATA_Z, align 4, align-sorted
    142              int UnpBlockType;
   \                     UnpBlockType:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    143              int DestUnpSize;
   \                     DestUnpSize:
   \   00000000                      DS8 4
    144          

   \                                 In segment DATA_Z, align 4, align-sorted
    145              bool Suspended;
   \                     Suspended:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    146              bool UnpAllBuf;
   \                     UnpAllBuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    147              bool UnpSomeRead;
   \                     UnpSomeRead:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    148              int WrittenFileSize;
   \                     WrittenFileSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    149              bool FileExtracted;
   \                     FileExtracted:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    150              bool PPMError;
   \                     PPMError:
   \   00000000                      DS8 4
    151          

   \                                 In segment DATA_Z, align 4, align-sorted
    152              int PrevLowDist,LowDistRepCount;
   \                     PrevLowDist:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     LowDistRepCount:
   \   00000000                      DS8 4
    153          
    154          /***************************** Unpack v 1.5 *********************************/
    155          
    156              void Unpack15(bool Solid);
    157              void ShortLZ();
    158              void LongLZ();
    159              void HuffDecode();
    160              void GetFlagsBuf();
    161              void OldUnpInitData(int Solid);
    162              void InitHuff();
    163              void CorrHuff(int *CharSet,int *NumToPlace);
    164              void OldCopyString(int Distance,int Length);
    165              int DecodeNum(int Num,int StartPos,
    166                int *DecTab,int *PosTab);
    167              void OldUnpWriteBuf();
    168          

   \                                 In segment DATA_Z, align 4, align-sorted
    169              int ChSet[256],ChSetA[256],ChSetB[256],ChSetC[256];
   \                     ChSet:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ChSetA:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ChSetB:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ChSetC:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    170              int Place[256],PlaceA[256],PlaceB[256],PlaceC[256];
   \                     Place:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PlaceA:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PlaceB:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PlaceC:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    171              int NToPl[256],NToPlB[256],NToPlC[256];
   \                     NToPl:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NToPlB:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NToPlC:
   \   00000000                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    172              int FlagBuf,AvrPlc,AvrPlcB,AvrLn1,AvrLn2,AvrLn3;
   \                     FlagBuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrPlc:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrPlcB:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrLn1:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrLn2:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     AvrLn3:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    173              int Buf60,NumHuf,StMode,LCount,FlagsCnt;
   \                     Buf60:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     NumHuf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     StMode:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     LCount:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     FlagsCnt:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    174              int Nhfb,Nlzb,MaxDist3;
   \                     Nhfb:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     Nlzb:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     MaxDist3:
   \   00000000                      DS8 4
    175          /***************************** Unpack v 2.0 *********************************/
    176              void Unpack20(bool Solid);

   \                                 In segment DATA_Z, align 4, align-sorted
    177              char UnpOldTable20[MC20*4];
   \                     UnpOldTable20:
   \   00000000                      DS8 1028

   \                                 In segment DATA_Z, align 4, align-sorted
    178              int UnpAudioBlock,UnpChannels,UnpCurChannel,UnpChannelDelta;
   \                     UnpAudioBlock:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpChannels:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpCurChannel:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     UnpChannelDelta:
   \   00000000                      DS8 4
    179              void CopyString20(int Length,int Distance);
    180              bool ReadTables20();
    181              void UnpInitData20(int Solid);
    182              void ReadLastTables();
    183              char DecodeAudio(int Delta);
    184          

   \                                 In segment DATA_Z, align 4, align-sorted
    185              struct AudioVariables AudV[4];
   \                     AudV:
   \   00000000                      DS8 368
    186          /***************************** Unpack v 2.0 *********************************/
    187              void DoUnpack(int Method,bool Solid);

   \                                 In segment CODE, align 4, keep-with-next
    188              bool IsFileExtracted() {return(FileExtracted);}
   \                     IsFileExtracted:
   \   00000000   ........           LDR      R0,??DataTable35  ;; FileExtracted
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    189              void SetDestSize(int DestSize) {DestUnpSize=DestSize;FileExtracted=false;}
   \                     SetDestSize:
   \   00000000   ........           LDR      R1,??DataTable58  ;; DestUnpSize
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   ........           LDR      R0,??DataTable35  ;; FileExtracted
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    190              void SetSuspended(bool Suspend) {Suspended=Suspend;}
   \                     SetSuspended:
   \   00000000   ........           LDR      R1,??DataTable34  ;; Suspended
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    191          /*
    192              unsigned int GetChar()
    193              {
    194                if (InAddr>MAX_SIZE-30)
    195                  UnpReadBuf();
    196                return(InBuf[InAddr++]);
    197              }
    198          */
    199          
    200          //#include "rar.hpp"
    201          //#include "unpack15.cpp"
    202          //#include "unpack20.cpp"
    203          

   \                                 In segment CODE, align 4, keep-with-next
    204          void UnpackInit()
    205          {
    206            InAddr=InBit=0;
   \                     UnpackInit:
   \   00000000   ........           LDR      R1,??DataTable77  ;; InBit
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   000081E5           STR      R0,[R1, #+0]
   \   00000010   ........           LDR      R1,??DataTable78  ;; InAddr
   \   00000014   000081E5           STR      R0,[R1, #+0]
    207            Suspended=false;
   \   00000018   ........           LDR      R1,??DataTable34  ;; Suspended
   \   0000001C   000081E5           STR      R0,[R1, #+0]
    208            UnpAllBuf=false;
   \   00000020   ........           LDR      R1,??DataTable15  ;; UnpAllBuf
   \   00000024   000081E5           STR      R0,[R1, #+0]
    209            UnpSomeRead=false;
   \   00000028   ........           LDR      R1,??DataTable54  ;; UnpSomeRead
   \   0000002C   000081E5           STR      R0,[R1, #+0]
    210          //  InBuf=malloc(MAX_SIZE);
    211          //  MAXWINSIZE = 0x400000; 
    212          //  if((Window=malloc(MAXWINSIZE))==0){
    213          //      MAXWINSIZE = 0x100000; 
    214          //      Window=malloc(MAXWINSIZE);
    215          //  }
    216          //  MAXWINMASK = MAXWINSIZE-1;
    217            InitLL();
   \   00000030   ........           BL       InitLL
    218            UnpInitData(false);
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   0040BDE8           POP      {LR}             ;; Pop
   \   0000003C   ........           B        UnpInitData      ;; tailcall
    219          }
    220          
    221          

   \                                 In segment CODE, align 4, keep-with-next
    222          void DoUnpack(int Method,bool Solid)
    223          {
   \                     DoUnpack:
   \   00000000   00402DE9           PUSH     {LR}
    224            switch(Method)
   \   00000004   0A0040E2           SUB      R0,R0,#+10
   \   00000008   1A0050E3           CMP      R0,#+26
   \   0000000C   0080BD88           POPHI    {PC}
   \   00000010   012F8FE2           ADR      R2,??DoUnpack_0
   \   00000014   0020D2E7           LDRB     R2,[R2, R0]
   \   00000018   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??DoUnpack_0:
   \   0000001C   06060606           DC8      +6,+6,+6,+6
   \   00000020   06060E0E           DC8      +6,+6,+14,+14
   \   00000024   0E0E090E           DC8      +14,+14,+9,+14
   \   00000028   0E0E0E0E           DC8      +14,+14,+14,+14
   \   0000002C   090E0E0C           DC8      +9,+14,+14,+12
   \   00000030   0E0E0E0E           DC8      +14,+14,+14,+14
   \   00000034   0E0E0C00           DC8      +14,+14,+12,+0
    225            {
    226              case 14: case 13: case 12: case 11: case 10://add
    227              case 15: // rar 1.5 compression
    228                Unpack15(Solid);
   \                     ??DoUnpack_1:
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   ........           BL       Unpack15
   \   00000040   0080BDE8           POP      {PC}
    229                break;
    230              case 20: // rar 2.x compression
    231              case 26: // files larger than 2GB
    232                Unpack20(Solid);
   \                     ??DoUnpack_2:
   \   00000044   0100A0E1           MOV      R0,R1
   \   00000048   ........           BL       Unpack20
   \   0000004C   0080BDE8           POP      {PC}
    233                break;
    234              case 29: // rar 3.x compression
    235              case 36: // alternative hash
    236                Unpack29(Solid);
   \                     ??DoUnpack_3:
   \   00000050   0100A0E1           MOV      R0,R1
   \   00000054   ........           BL       Unpack29
    237                break;
    238            }
    239          }
   \                     ??DoUnpack_4:
   \   00000058   0080BDE8           POP      {PC}             ;; return
    240          
    241          
    242          inline void InsertOldDist(int Distance)
    243          {
    244            OldDist[3]=OldDist[2];
    245            OldDist[2]=OldDist[1];
    246            OldDist[1]=OldDist[0];
    247            OldDist[0]=Distance;
    248          }
    249          
    250          
    251          inline void InsertLastMatch(int Length,int Distance)
    252          {
    253            LastDist=Distance;
    254            LastLength=Length;
    255          }
    256          
    257          

   \                                 In segment CODE, align 4, keep-with-next
    258          void CopyString(int Length,int Distance)
    259          {
    260            int DestPtr=UnpPtr-Distance;
   \                     CopyString:
   \   00000000   ........           LDR      R2,??DataTable88  ;; UnpPtr
    261            if (DestPtr<MAXWINSIZE-260 && UnpPtr<MAXWINSIZE-260)
   \   00000004   ........           LDR      R3,??DataTable72  ;; MAXWINSIZE
   \   00000008   70002DE9           PUSH     {R4-R6}
   \   0000000C   00C092E5           LDR      R12,[R2, #+0]
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   01104CE0           SUB      R1,R12,R1
   \   00000018   0340E0E3           MVN      R4,#+3
   \   0000001C   404FC4E3           BIC      R4,R4,#0x100
   \   00000020   034084E0           ADD      R4,R4,R3
   \   00000024   ........           LDR      R3,??DataTable73  ;; Window
   \   00000028   040051E1           CMP      R1,R4
   \   0000002C   04005CB1           CMPLT    R12,R4
   \   00000030   160000AA           BGE      ??CopyString_0
    262            {
    263              Window[UnpPtr++]=Window[DestPtr++];
   \                     ??CopyString_1:
   \   00000034   004093E5           LDR      R4,[R3, #+0]
   \   00000038   00C092E5           LDR      R12,[R2, #+0]
   \   0000003C   D45091E1           LDRSB    R5,[R1, +R4]
   \   00000040   011081E2           ADD      R1,R1,#+1
    264              while (--Length>0)
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   0450CCE7           STRB     R5,[R12, +R4]
   \   0000004C   004092E5           LDR      R4,[R2, #+0]
   \   00000050   010050E3           CMP      R0,#+1
   \   00000054   014084E2           ADD      R4,R4,#+1
   \   00000058   004082E5           STR      R4,[R2, #+0]
   \   0000005C   0F0000BA           BLT      ??CopyString_2
   \   00000060   F3FFFFEA           B        ??CopyString_1
    265                Window[UnpPtr++]=Window[DestPtr++];
    266            }
    267            else
    268              while (Length--)
    269              {
    270                Window[UnpPtr]=Window[DestPtr++ & MAXWINMASK];
   \                     ??CopyString_3:
   \   00000064   004093E5           LDR      R4,[R3, #+0]
   \   00000068   005092E5           LDR      R5,[R2, #+0]
   \   0000006C   F0C4E0E3           MVN      R12,#-268435456
   \   00000070   01600CE0           AND      R6,R12,R1
   \   00000074   D46096E1           LDRSB    R6,[R6, +R4]
   \   00000078   011081E2           ADD      R1,R1,#+1
   \   0000007C   0460C5E7           STRB     R6,[R5, +R4]
    271                UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   00000080   004092E5           LDR      R4,[R2, #+0]
   \   00000084   014084E2           ADD      R4,R4,#+1
   \   00000088   04400CE0           AND      R4,R12,R4
   \   0000008C   004082E5           STR      R4,[R2, #+0]
    272              }
   \                     ??CopyString_0:
   \   00000090   0040A0E1           MOV      R4,R0
   \   00000094   010044E2           SUB      R0,R4,#+1
   \   00000098   000054E3           CMP      R4,#+0
   \   0000009C   F0FFFF1A           BNE      ??CopyString_3
    273          }
   \                     ??CopyString_2:
   \   000000A0   7000BDE8           POP      {R4-R6}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
    274          
    275          

   \                                 In segment CODE, align 4, keep-with-next
    276          int DecodeNumber(int pos)
    277          {
   \                     DecodeNumber:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    278            int Bits;
    279            int BitField=getbits() & 0xfffe;
   \   00000008   ........           BL       getbits
   \   0000000C   FE10A0E3           MOV      R1,#+254
   \   00000010   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000014   004001E0           AND      R4,R1,R0
    280            if (BitField<LL[pos].DecodeLen[8])
   \   00000018   ........           LDR      R1,??DataTable20  ;; LL
   \   0000001C   8C00A0E3           MOV      R0,#+140
   \   00000020   901525E0           MLA      R5,R0,R5,R1
   \   00000024   240095E5           LDR      R0,[R5, #+36]
   \   00000028   000054E1           CMP      R4,R0
   \   0000002C   1C0000AA           BGE      ??DecodeNumber_0
    281              if (BitField<LL[pos].DecodeLen[4])
   \   00000030   140095E5           LDR      R0,[R5, #+20]
   \   00000034   000054E1           CMP      R4,R0
   \   00000038   0C0000AA           BGE      ??DecodeNumber_1
    282                if (BitField<LL[pos].DecodeLen[2])
   \   0000003C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000040   000054E1           CMP      R4,R0
   \   00000044   040000AA           BGE      ??DecodeNumber_2
    283                  if (BitField<LL[pos].DecodeLen[1])
   \   00000048   080095E5           LDR      R0,[R5, #+8]
   \   0000004C   000054E1           CMP      R4,R0
   \   00000050   0260A0A3           MOVGE    R6,#+2
    284                    Bits=1;
   \   00000054   0160A0B3           MOVLT    R6,#+1
   \   00000058   2A0000EA           B        ??DecodeNumber_3
    285                  else
    286                    Bits=2;
    287                else
    288                  if (BitField<LL[pos].DecodeLen[3])
   \                     ??DecodeNumber_2:
   \   0000005C   100095E5           LDR      R0,[R5, #+16]
   \   00000060   000054E1           CMP      R4,R0
   \   00000064   0460A0A3           MOVGE    R6,#+4
    289                    Bits=3;
   \   00000068   0360A0B3           MOVLT    R6,#+3
   \   0000006C   250000EA           B        ??DecodeNumber_3
    290                  else
    291                    Bits=4;
    292              else
    293                if (BitField<LL[pos].DecodeLen[6])
   \                     ??DecodeNumber_1:
   \   00000070   1C0095E5           LDR      R0,[R5, #+28]
   \   00000074   000054E1           CMP      R4,R0
   \   00000078   040000AA           BGE      ??DecodeNumber_4
    294                  if (BitField<LL[pos].DecodeLen[5])
   \   0000007C   180095E5           LDR      R0,[R5, #+24]
   \   00000080   000054E1           CMP      R4,R0
   \   00000084   0660A0A3           MOVGE    R6,#+6
    295                    Bits=5;
   \   00000088   0560A0B3           MOVLT    R6,#+5
   \   0000008C   1D0000EA           B        ??DecodeNumber_3
    296                  else
    297                    Bits=6;
    298                else
    299                  if (BitField<LL[pos].DecodeLen[7])
   \                     ??DecodeNumber_4:
   \   00000090   200095E5           LDR      R0,[R5, #+32]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0860A0A3           MOVGE    R6,#+8
    300                    Bits=7;
   \   0000009C   0760A0B3           MOVLT    R6,#+7
   \   000000A0   180000EA           B        ??DecodeNumber_3
    301                  else
    302                    Bits=8;
    303            else
    304              if (BitField<LL[pos].DecodeLen[12])
   \                     ??DecodeNumber_0:
   \   000000A4   340095E5           LDR      R0,[R5, #+52]
   \   000000A8   000054E1           CMP      R4,R0
   \   000000AC   0C0000AA           BGE      ??DecodeNumber_5
    305                if (BitField<LL[pos].DecodeLen[10])
   \   000000B0   2C0095E5           LDR      R0,[R5, #+44]
   \   000000B4   000054E1           CMP      R4,R0
   \   000000B8   040000AA           BGE      ??DecodeNumber_6
    306                  if (BitField<LL[pos].DecodeLen[9])
   \   000000BC   280095E5           LDR      R0,[R5, #+40]
   \   000000C0   000054E1           CMP      R4,R0
   \   000000C4   0A60A0A3           MOVGE    R6,#+10
    307                    Bits=9;
   \   000000C8   0960A0B3           MOVLT    R6,#+9
   \   000000CC   0D0000EA           B        ??DecodeNumber_3
    308                  else
    309                    Bits=10;
    310                else
    311                  if (BitField<LL[pos].DecodeLen[11])
   \                     ??DecodeNumber_6:
   \   000000D0   300095E5           LDR      R0,[R5, #+48]
   \   000000D4   000054E1           CMP      R4,R0
   \   000000D8   0C60A0A3           MOVGE    R6,#+12
    312                    Bits=11;
   \   000000DC   0B60A0B3           MOVLT    R6,#+11
   \   000000E0   080000EA           B        ??DecodeNumber_3
    313                  else
    314                    Bits=12;
    315              else
    316                if (BitField<LL[pos].DecodeLen[14])
   \                     ??DecodeNumber_5:
   \   000000E4   3C0095E5           LDR      R0,[R5, #+60]
   \   000000E8   000054E1           CMP      R4,R0
   \   000000EC   040000AA           BGE      ??DecodeNumber_7
    317                  if (BitField<LL[pos].DecodeLen[13])
   \   000000F0   380095E5           LDR      R0,[R5, #+56]
   \   000000F4   000054E1           CMP      R4,R0
   \   000000F8   0E60A0A3           MOVGE    R6,#+14
    318                    Bits=13;
   \   000000FC   0D60A0B3           MOVLT    R6,#+13
   \   00000100   000000EA           B        ??DecodeNumber_3
    319                  else
    320                    Bits=14;
    321                else
    322                  Bits=15;
   \                     ??DecodeNumber_7:
   \   00000104   0F60A0E3           MOV      R6,#+15
    323          
    324            addbits(Bits);
   \                     ??DecodeNumber_3:
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   ........           BL       addbits
    325            int N=LL[pos].DecodePos[Bits]+((BitField-LL[pos].DecodeLen[Bits-1])>>(16-Bits));
   \   00000110   060185E0           ADD      R0,R5,R6, LSL #+2
   \   00000114   441090E5           LDR      R1,[R0, #+68]
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   102066E2           RSB      R2,R6,#+16
   \   00000120   000044E0           SUB      R0,R4,R0
   \   00000124   500291E0           ADDS     R0,R1,R0, ASR R2
    326            if (N<0 || N>=LL[pos].MaxNum)
   \   00000128   0200004A           BMI      ??DecodeNumber_8
   \   0000012C   001095E5           LDR      R1,[R5, #+0]
   \   00000130   010050E1           CMP      R0,R1
   \   00000134   000000BA           BLT      ??DecodeNumber_9
    327              N=0;
   \                     ??DecodeNumber_8:
   \   00000138   0000A0E3           MOV      R0,#+0
    328            return(DecodeN[LL[pos].DecodePtr+N]);
   \                     ??DecodeNumber_9:
   \   0000013C   841095E5           LDR      R1,[R5, #+132]
   \   00000140   010080E0           ADD      R0,R0,R1
   \   00000144   ........           LDR      R1,??DataTable84  ;; DecodeN
   \   00000148   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   0000014C   7080BDE8           POP      {R4-R6,PC}       ;; return
    329          }
    330          
    331          

   \                                 In segment CODE, align 4, keep-with-next
    332          void Unpack29(bool Solid)
    333          {
   \                     Unpack29:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable35  ;; FileExtracted
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R0,??DataTable34  ;; Suspended
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0D00001A           BNE      ??Unpack29_0
    334            int Bits;  
    335            
    336            FileExtracted=true;
    337          
    338            if (!Suspended)
    339            {
    340              UnpInitData(Solid);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       UnpInitData
    341              if (!UnpReadBuf())
   \   0000002C   ........           BL       UnpReadBuf
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F08FBD08           POPEQ    {R4-R11,PC}
    342                return;
    343              if ((!Solid || !TablesRead) && !ReadTables())
   \   00000038   000054E3           CMP      R4,#+0
   \   0000003C   0300000A           BEQ      ??Unpack29_1
   \   00000040   ........           LDR      R0,??DataTable67  ;; TablesRead
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0200001A           BNE      ??Unpack29_0
   \                     ??Unpack29_1:
   \   00000050   ........           BL       ReadTables
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F08FBD08           POPEQ    {R4-R11,PC}
    344                return;
    345            }
    346          
    347            if (PPMError)
   \                     ??Unpack29_0:
   \   0000005C   ........           LDR      R0,??DataTable79  ;; PPMError
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   F08FBD18           POPNE    {R4-R11,PC}
   \   0000006C   ........           LDR      R11,??DataTable65  ;; LowDistRepCount
   \   00000070   050000EA           B        ??Unpack29_2
    348              return;
    349          
    350            while (true)
    351            {
    352              UnpPtr&=MAXWINMASK;
    353          
    354              if (InAddr>ReadBorder)
    355              {
    356                if (!UnpReadBuf())
    357                  break;
    358              }
    359              if (((WrPtr-UnpPtr) & MAXWINMASK)<260 && WrPtr!=UnpPtr)
    360              {
    361                UnpWriteBuf();
    362                if (WrittenFileSize>DestUnpSize)
    363                  return;
    364                if (Suspended)
    365                {
    366                  FileExtracted=false;
    367                  return;
    368                }
    369              }
    370          
    371              if (UnpBlockType==BLOCK_PPM)
    372                return;//add
    373          
    374              int Number=DecodeNumber(0);
    375              if (Number<256)
    376              {
    377                Window[UnpPtr++]=Number;
   \                     ??Unpack29_3:
   \   00000074   ........           LDR      R1,??DataTable73  ;; Window
   \   00000078   001091E5           LDR      R1,[R1, #+0]
   \   0000007C   0100C6E7           STRB     R0,[R6, +R1]
   \   00000080   000094E5           LDR      R0,[R4, #+0]
   \   00000084   010080E2           ADD      R0,R0,#+1
   \   00000088   000084E5           STR      R0,[R4, #+0]
    378                continue;
    379              }
   \                     ??Unpack29_2:
   \   0000008C   ........           LDR      R4,??DataTable88  ;; UnpPtr
   \   00000090   ........           LDR      R1,??DataTable78  ;; InAddr
   \   00000094   000094E5           LDR      R0,[R4, #+0]
   \   00000098   001091E5           LDR      R1,[R1, #+0]
   \   0000009C   F054E0E3           MVN      R5,#-268435456
   \   000000A0   000005E0           AND      R0,R5,R0
   \   000000A4   000084E5           STR      R0,[R4, #+0]
   \   000000A8   ........           LDR      R0,??DataTable82  ;; ReadBorder
   \   000000AC   000090E5           LDR      R0,[R0, #+0]
   \   000000B0   010050E1           CMP      R0,R1
   \   000000B4   020000AA           BGE      ??Unpack29_4
   \   000000B8   ........           BL       UnpReadBuf
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   7A00000A           BEQ      ??Unpack29_5
   \                     ??Unpack29_4:
   \   000000C4   ........           LDR      R0,??DataTable97  ;; WrPtr
   \   000000C8   006094E5           LDR      R6,[R4, #+0]
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   061040E0           SUB      R1,R0,R6
   \   000000D4   011005E0           AND      R1,R5,R1
   \   000000D8   410F51E3           CMP      R1,#+260
   \   000000DC   100000AA           BGE      ??Unpack29_6
   \   000000E0   060050E1           CMP      R0,R6
   \   000000E4   0E00000A           BEQ      ??Unpack29_6
   \   000000E8   ........           BL       UnpWriteBuf
   \   000000EC   ........           LDR      R0,??DataTable58  ;; DestUnpSize
   \   000000F0   ........           LDR      R1,??DataTable80  ;; WrittenFileSize
   \   000000F4   000090E5           LDR      R0,[R0, #+0]
   \   000000F8   001091E5           LDR      R1,[R1, #+0]
   \   000000FC   010050E1           CMP      R0,R1
   \   00000100   F08FBDB8           POPLT    {R4-R11,PC}
   \   00000104   ........           LDR      R0,??DataTable34  ;; Suspended
   \   00000108   000090E5           LDR      R0,[R0, #+0]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0300000A           BEQ      ??Unpack29_6
   \   00000114   ........           LDR      R0,??DataTable35  ;; FileExtracted
   \   00000118   0010A0E3           MOV      R1,#+0
   \   0000011C   001080E5           STR      R1,[R0, #+0]
   \   00000120   F08FBDE8           POP      {R4-R11,PC}
   \                     ??Unpack29_6:
   \   00000124   ........           LDR      R0,??DataTable62  ;; UnpBlockType
   \   00000128   000090E5           LDR      R0,[R0, #+0]
   \   0000012C   010050E3           CMP      R0,#+1
   \   00000130   F08FBD08           POPEQ    {R4-R11,PC}
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   ........           BL       DecodeNumber
   \   0000013C   400F50E3           CMP      R0,#+256
   \   00000140   CBFFFFBA           BLT      ??Unpack29_3
    380              if (Number>=271)
   \   00000144   ........           LDR      R4,??DataTable108  ;; OldDist
   \   00000148   ........           LDR      R8,??DataTable38  ;; LBits
   \   0000014C   ........           LDR      R9,??DataTable39  ;; LDecode
   \   00000150   ........           LDR      R5,??DataTable103  ;; LastLength
   \   00000154   ........           LDR      R6,??DataTable102  ;; LastDist
   \   00000158   0F10A0E3           MOV      R1,#+15
   \   0000015C   401F81E3           ORR      R1,R1,#0x100
   \   00000160   010050E1           CMP      R0,R1
   \   00000164   4C0000BA           BLT      ??Unpack29_7
    381              {
    382                int Length=(LDecode[Number-=271]&0xff)+3;
   \   00000168   001061E2           RSB      R1,R1,#+0
   \   0000016C   000081E0           ADD      R0,R1,R0
   \   00000170   D91090E1           LDRSB    R1,[R0, +R9]
    383                if ((Bits=(LBits[Number]&0xff))>0)
   \   00000174   D80090E1           LDRSB    R0,[R0, +R8]
   \   00000178   FF1001E2           AND      R1,R1,#0xFF
   \   0000017C   037081E2           ADD      R7,R1,#+3
   \   00000180   FF8000E2           AND      R8,R0,#0xFF
   \   00000184   010058E3           CMP      R8,#+1
   \   00000188   050000BA           BLT      ??Unpack29_8
    384                {
    385                  Length+=getbits()>>(16-Bits);
   \   0000018C   ........           BL       getbits
   \   00000190   0810A0E1           MOV      R1,R8
   \   00000194   101061E2           RSB      R1,R1,#+16
   \   00000198   507187E0           ADD      R7,R7,R0, ASR R1
    386                  addbits(Bits);
   \   0000019C   0800A0E1           MOV      R0,R8
   \   000001A0   ........           BL       addbits
    387                }
    388          
    389                int DistNumber=DecodeNumber(1);
   \                     ??Unpack29_8:
   \   000001A4   0100A0E3           MOV      R0,#+1
   \   000001A8   ........           BL       DecodeNumber
    390                int Distance=DDecode[DistNumber]+1;
   \   000001AC   ........           LDR      R1,??DataTable42  ;; DDecode
   \   000001B0   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   000001B4   018081E2           ADD      R8,R1,#+1
    391                if ((Bits=(DBits[DistNumber]&0xff))>0)
   \   000001B8   ........           LDR      R1,??DataTable43  ;; DBits
   \   000001BC   D11090E1           LDRSB    R1,[R0, +R1]
   \   000001C0   FF9001E2           AND      R9,R1,#0xFF
   \   000001C4   010059E3           CMP      R9,#+1
   \   000001C8   220000BA           BLT      ??Unpack29_9
    392                {
    393                  if (DistNumber>9)
   \   000001CC   0A0050E3           CMP      R0,#+10
   \   000001D0   1A0000BA           BLT      ??Unpack29_10
    394                  {
    395                    if (Bits>4)
   \   000001D4   050059E3           CMP      R9,#+5
   \   000001D8   060000BA           BLT      ??Unpack29_11
    396                    {
    397                      Distance+=((getbits()>>(20-Bits))<<4);
   \   000001DC   ........           BL       getbits
   \   000001E0   0910A0E1           MOV      R1,R9
   \   000001E4   141061E2           RSB      R1,R1,#+20
   \   000001E8   5001A0E1           ASR      R0,R0,R1
   \   000001EC   008288E0           ADD      R8,R8,R0, LSL #+4
    398                      addbits(Bits-4);
   \   000001F0   040049E2           SUB      R0,R9,#+4
   \   000001F4   ........           BL       addbits
    399                    }
    400                    if (LowDistRepCount>0)
   \                     ??Unpack29_11:
   \   000001F8   ........           LDR      R9,??DataTable64  ;; PrevLowDist
   \   000001FC   000099E5           LDR      R0,[R9, #+0]
   \   00000200   08A080E0           ADD      R10,R0,R8
   \   00000204   00009BE5           LDR      R0,[R11, #+0]
   \   00000208   010050E3           CMP      R0,#+1
   \   0000020C   030000BA           BLT      ??Unpack29_12
    401                    {
    402                      LowDistRepCount--;
   \   00000210   010040E2           SUB      R0,R0,#+1
   \                     ??Unpack29_13:
   \   00000214   00008BE5           STR      R0,[R11, #+0]
    403                      Distance+=PrevLowDist;
   \   00000218   0A80A0E1           MOV      R8,R10
   \   0000021C   0D0000EA           B        ??Unpack29_9
    404                    }
    405                    else
    406                    {
    407                      int LowDist=DecodeNumber(4);
   \                     ??Unpack29_12:
   \   00000220   0400A0E3           MOV      R0,#+4
   \   00000224   ........           BL       DecodeNumber
    408                      if (LowDist==16)
   \   00000228   100050E3           CMP      R0,#+16
    409                      {
    410                        LowDistRepCount=LOW_DIST_REP_COUNT-1;
   \   0000022C   0F00A003           MOVEQ    R0,#+15
   \   00000230   F7FFFF0A           BEQ      ??Unpack29_13
    411                        Distance+=PrevLowDist;
    412                      }
    413                      else
    414                      {
    415                        Distance+=LowDist;
   \   00000234   088080E0           ADD      R8,R0,R8
    416                        PrevLowDist=LowDist;
   \   00000238   000089E5           STR      R0,[R9, #+0]
   \   0000023C   050000EA           B        ??Unpack29_9
    417                      }
    418                    }
    419                  }
    420                  else
    421                  {
    422                    Distance+=getbits()>>(16-Bits);
   \                     ??Unpack29_10:
   \   00000240   ........           BL       getbits
   \   00000244   0910A0E1           MOV      R1,R9
   \   00000248   101061E2           RSB      R1,R1,#+16
   \   0000024C   508188E0           ADD      R8,R8,R0, ASR R1
    423                    addbits(Bits);
   \   00000250   0900A0E1           MOV      R0,R9
   \   00000254   ........           BL       addbits
    424                  }
    425                }
    426          
    427                if (Distance>=0x2000)
    428                {
    429                  Length++;
    430                  if (Distance>=0x40000L)
    431                    Length++;
    432                }
    433          
    434                InsertOldDist(Distance);
   \                     ??Unpack29_9:
   \   00000258   080094E5           LDR      R0,[R4, #+8]
   \   0000025C   800D58E3           CMP      R8,#+8192
   \   00000260   0C0084E5           STR      R0,[R4, #+12]
   \   00000264   040094E5           LDR      R0,[R4, #+4]
   \   00000268   017087A2           ADDGE    R7,R7,#+1
   \   0000026C   080084E5           STR      R0,[R4, #+8]
   \   00000270   000094E5           LDR      R0,[R4, #+0]
   \   00000274   400A58A3           CMPGE    R8,#+262144
   \   00000278   017087A2           ADDGE    R7,R7,#+1
   \   0000027C   040084E5           STR      R0,[R4, #+4]
   \   00000280   008084E5           STR      R8,[R4, #+0]
    435                InsertLastMatch(Length,Distance);
   \   00000284   008086E5           STR      R8,[R6, #+0]
   \   00000288   007085E5           STR      R7,[R5, #+0]
    436                CopyString(Length,Distance);
   \   0000028C   0810A0E1           MOV      R1,R8
   \   00000290   0700A0E1           MOV      R0,R7
   \                     ??Unpack29_14:
   \   00000294   ........           BL       CopyString
    437                continue;
   \   00000298   7BFFFFEA           B        ??Unpack29_2
    438              }
    439              if (Number==256)
   \                     ??Unpack29_7:
   \   0000029C   400F50E3           CMP      R0,#+256
   \   000002A0   0400001A           BNE      ??Unpack29_15
    440              {
    441                if (!ReadEndOfBlock())
   \   000002A4   ........           BL       ReadEndOfBlock
   \   000002A8   000050E3           CMP      R0,#+0
   \   000002AC   76FFFF1A           BNE      ??Unpack29_2
    442                  break;
    443                continue;
    444              }
    445              if (Number==257)
    446              {
    447                //if (!ReadVMCode())
    448                  break;
    449                //continue;
    450              }
    451              if (Number==258)
    452              {
    453                if (LastLength!=0)
    454                  CopyString(LastLength,LastDist);
    455                continue;
    456              }
    457              if (Number<263)
    458              {
    459                int DistNum=Number-259;
    460                int Distance=OldDist[DistNum];
    461                for (int I=DistNum;I>0;I--)
    462                  OldDist[I]=OldDist[I-1];
    463                OldDist[0]=Distance;
    464          
    465                int LengthNumber=DecodeNumber(2);
    466                int Length=(LDecode[LengthNumber]&0xff)+2;
    467                if ((Bits=(LBits[LengthNumber]&0xff))>0)
    468                {
    469                  Length+=getbits()>>(16-Bits);
    470                  addbits(Bits);
    471                }
    472                InsertLastMatch(Length,Distance);
    473                CopyString(Length,Distance);
    474                continue;
    475              }
    476              if (Number<272)
    477              {
    478                int Distance=(SDDecode[Number-=263]&0xff)+1;
    479                if ((Bits=(SDBits[Number]&0xff))>0)
    480                {
    481                  Distance+=getbits()>>(16-Bits);
    482                  addbits(Bits);
    483                }
    484                InsertOldDist(Distance);
    485                InsertLastMatch(2,Distance);
    486                CopyString(2,Distance);
    487                continue;
    488              }
    489            }
    490            UnpWriteBuf();
   \                     ??Unpack29_5:
   \   000002B0   ........           BL       UnpWriteBuf
    491          }
   \   000002B4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??Unpack29_15:
   \   000002B8   0E10C1E3           BIC      R1,R1,#0xE
   \   000002BC   010050E1           CMP      R0,R1
   \   000002C0   FAFFFF0A           BEQ      ??Unpack29_5
   \   000002C4   011081E2           ADD      R1,R1,#+1
   \   000002C8   010050E1           CMP      R0,R1
   \   000002CC   0400001A           BNE      ??Unpack29_16
   \   000002D0   000095E5           LDR      R0,[R5, #+0]
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   6BFFFF0A           BEQ      ??Unpack29_2
   \   000002DC   001096E5           LDR      R1,[R6, #+0]
   \   000002E0   EBFFFFEA           B        ??Unpack29_14
   \                     ??Unpack29_16:
   \   000002E4   051081E3           ORR      R1,R1,#0x5
   \   000002E8   010050E1           CMP      R0,R1
   \   000002EC   200000AA           BGE      ??Unpack29_17
   \   000002F0   0210E0E3           MVN      R1,#+2
   \   000002F4   401FC1E3           BIC      R1,R1,#0x100
   \   000002F8   000081E0           ADD      R0,R1,R0
   \   000002FC   007194E7           LDR      R7,[R4, +R0, LSL #+2]
   \   00000300   010050E3           CMP      R0,#+1
   \   00000304   050000BA           BLT      ??Unpack29_18
   \                     ??Unpack29_19:
   \   00000308   041044E2           SUB      R1,R4,#+4
   \   0000030C   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000310   001184E7           STR      R1,[R4, +R0, LSL #+2]
   \   00000314   010040E2           SUB      R0,R0,#+1
   \   00000318   010050E3           CMP      R0,#+1
   \   0000031C   F9FFFFAA           BGE      ??Unpack29_19
   \                     ??Unpack29_18:
   \   00000320   007084E5           STR      R7,[R4, #+0]
   \   00000324   0200A0E3           MOV      R0,#+2
   \   00000328   ........           BL       DecodeNumber
   \   0000032C   D91090E1           LDRSB    R1,[R0, +R9]
   \   00000330   D80090E1           LDRSB    R0,[R0, +R8]
   \   00000334   FF1001E2           AND      R1,R1,#0xFF
   \   00000338   024081E2           ADD      R4,R1,#+2
   \   0000033C   FF9000E2           AND      R9,R0,#0xFF
   \   00000340   010059E3           CMP      R9,#+1
   \   00000344   050000BA           BLT      ??Unpack29_20
   \   00000348   ........           BL       getbits
   \   0000034C   0910A0E1           MOV      R1,R9
   \   00000350   101061E2           RSB      R1,R1,#+16
   \   00000354   504184E0           ADD      R4,R4,R0, ASR R1
   \   00000358   0900A0E1           MOV      R0,R9
   \   0000035C   ........           BL       addbits
   \                     ??Unpack29_20:
   \   00000360   007086E5           STR      R7,[R6, #+0]
   \   00000364   004085E5           STR      R4,[R5, #+0]
   \   00000368   0710A0E1           MOV      R1,R7
   \   0000036C   0400A0E1           MOV      R0,R4
   \   00000370   C7FFFFEA           B        ??Unpack29_14
   \                     ??Unpack29_17:
   \   00000374   001061E2           RSB      R1,R1,#+0
   \   00000378   000081E0           ADD      R0,R1,R0
   \   0000037C   ........           LDR      R1,??DataTable45  ;; SDDecode
   \   00000380   D11090E1           LDRSB    R1,[R0, +R1]
   \   00000384   FF1001E2           AND      R1,R1,#0xFF
   \   00000388   017081E2           ADD      R7,R1,#+1
   \   0000038C   ........           LDR      R1,??DataTable46  ;; SDBits
   \   00000390   D10090E1           LDRSB    R0,[R0, +R1]
   \   00000394   FF9000E2           AND      R9,R0,#0xFF
   \   00000398   010059E3           CMP      R9,#+1
   \   0000039C   050000BA           BLT      ??Unpack29_21
   \   000003A0   ........           BL       getbits
   \   000003A4   0910A0E1           MOV      R1,R9
   \   000003A8   101061E2           RSB      R1,R1,#+16
   \   000003AC   507187E0           ADD      R7,R7,R0, ASR R1
   \   000003B0   0900A0E1           MOV      R0,R9
   \   000003B4   ........           BL       addbits
   \                     ??Unpack29_21:
   \   000003B8   080094E5           LDR      R0,[R4, #+8]
   \   000003BC   007086E5           STR      R7,[R6, #+0]
   \   000003C0   0C0084E5           STR      R0,[R4, #+12]
   \   000003C4   040094E5           LDR      R0,[R4, #+4]
   \   000003C8   0710A0E1           MOV      R1,R7
   \   000003CC   080084E5           STR      R0,[R4, #+8]
   \   000003D0   000094E5           LDR      R0,[R4, #+0]
   \   000003D4   007084E5           STR      R7,[R4, #+0]
   \   000003D8   040084E5           STR      R0,[R4, #+4]
   \   000003DC   0200A0E3           MOV      R0,#+2
   \   000003E0   000085E5           STR      R0,[R5, #+0]
   \   000003E4   AAFFFFEA           B        ??Unpack29_14
    492          
    493          

   \                                 In segment CODE, align 4, keep-with-next
    494          bool ReadEndOfBlock()
    495          {
   \                     ReadEndOfBlock:
   \   00000000   B0402DE9           PUSH     {R4,R5,R7,LR}
    496            int BitField=getbits();
    497            bool NewTable,NewFile=false;
   \   00000004   0040A0E3           MOV      R4,#+0
    498            if (BitField & 0x8000)
   \   00000008   0150A0E3           MOV      R5,#+1
   \   0000000C   ........           BL       getbits
   \   00000010   800C10E3           TST      R0,#0x8000
   \   00000014   0E00000A           BEQ      ??ReadEndOfBlock_0
    499            {
    500              NewTable=true;
    501              addbits(1);
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           BL       addbits
   \   00000020   0170A0E3           MOV      R7,#+1
   \                     ??ReadEndOfBlock_1:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     ??ReadEndOfBlock_2:
   \   00000028   ........           LDR      R1,??DataTable67  ;; TablesRead
    502            }
    503            else
    504            {
    505              NewFile=true;
    506              NewTable=(BitField & 0x4000);
    507              addbits(2);
    508            }
    509            TablesRead=!NewTable;
    510            return !(NewFile || NewTable && !ReadTables());
   \   0000002C   000054E3           CMP      R4,#+0
   \   00000030   000081E5           STR      R0,[R1, #+0]
   \   00000034   0E00001A           BNE      ??ReadEndOfBlock_3
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   0D00000A           BEQ      ??ReadEndOfBlock_4
   \   00000040   ........           BL       ReadTables
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0900000A           BEQ      ??ReadEndOfBlock_3
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   B080BDE8           POP      {R4,R5,R7,PC}
   \                     ??ReadEndOfBlock_0:
   \   00000054   0140A0E3           MOV      R4,#+1
   \   00000058   407C00E2           AND      R7,R0,#0x4000
   \   0000005C   0200A0E3           MOV      R0,#+2
   \   00000060   ........           BL       addbits
   \   00000064   000057E3           CMP      R7,#+0
   \   00000068   EDFFFF1A           BNE      ??ReadEndOfBlock_1
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   ECFFFFEA           B        ??ReadEndOfBlock_2
   \                     ??ReadEndOfBlock_3:
   \   00000074   0050A0E3           MOV      R5,#+0
   \                     ??ReadEndOfBlock_4:
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   B080BDE8           POP      {R4,R5,R7,PC}
    511          }
    512          

   \                                 In segment CODE, align 4, keep-with-next
    513          bool UnpReadBuf()
    514          {
   \                     UnpReadBuf:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    515            int DataSize=ReadTop-InAddr;
   \   00000004   ........           LDR      R4,??DataTable91  ;; ReadTop
   \   00000008   ........           LDR      R6,??DataTable78  ;; InAddr
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   001096E5           LDR      R1,[R6, #+0]
   \   00000014   017050E0           SUBS     R7,R0,R1
    516            if (DataSize<0)
    517              return(false);
   \   00000018   0000A043           MOVMI    R0,#+0
   \   0000001C   F080BD48           POPMI    {R4-R7,PC}
    518            if (InAddr>MAX_SIZE/2)
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   800851E3           CMP      R1,#+8388608
   \   00000028   090000BA           BLT      ??UnpReadBuf_0
    519            {
    520              if (DataSize>0)
   \   0000002C   010057E3           CMP      R7,#+1
   \   00000030   040000BA           BLT      ??UnpReadBuf_1
    521                //memmove(InBuf,InBuf+InAddr,DataSize);!!!!
    522                memcpy(InBuf,InBuf+InAddr,DataSize);
   \   00000034   ........           LDR      R0,??DataTable50  ;; InBuf
   \   00000038   0720A0E1           MOV      R2,R7
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   001081E0           ADD      R1,R1,R0
   \   00000044   ........           _BLF     memcpy,??memcpy??rA
    523              InAddr=0;
   \                     ??UnpReadBuf_1:
   \   00000048   005086E5           STR      R5,[R6, #+0]
    524              ReadTop=DataSize;
   \   0000004C   007084E5           STR      R7,[R4, #+0]
   \   00000050   000000EA           B        ??UnpReadBuf_2
    525            }
    526            else
    527              DataSize=ReadTop;
   \                     ??UnpReadBuf_0:
   \   00000054   0070A0E1           MOV      R7,R0
    528            int ReadCode=UnpRead(InBuf+DataSize,(MAX_SIZE-DataSize)&~0xf);
   \                     ??UnpReadBuf_2:
   \   00000058   FF04E0E3           MVN      R0,#-16777216
   \   0000005C   070040E0           SUB      R0,R0,R7
   \   00000060   0F00C0E3           BIC      R0,R0,#0xF
    529            if (ReadCode>0)
   \   00000064   010050E3           CMP      R0,#+1
    530              ReadTop+=ReadCode;
   \   00000068   001094A5           LDRGE    R1,[R4, #+0]
   \   0000006C   011080A0           ADDGE    R1,R0,R1
   \   00000070   001084A5           STRGE    R1,[R4, #+0]
    531            ReadBorder=ReadTop-30;
   \   00000074   ........           LDR      R1,??DataTable82  ;; ReadBorder
   \   00000078   002094E5           LDR      R2,[R4, #+0]
    532            return(ReadCode!=-1);
   \   0000007C   010070E3           CMN      R0,#+1
   \   00000080   1E2042E2           SUB      R2,R2,#+30
   \   00000084   002081E5           STR      R2,[R1, #+0]
   \   00000088   0100A013           MOVNE    R0,#+1
   \   0000008C   F080BD18           POPNE    {R4-R7,PC}
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   F080BDE8           POP      {R4-R7,PC}       ;; return
    533          }
    534          
    535          

   \                                 In segment CODE, align 4, keep-with-next
    536          void UnpWriteBuf()
    537          {
    538            int WrittenBorder=WrPtr;
    539            //int WriteSize=(UnpPtr-WrittenBorder)&MAXWINMASK;
    540            UnpWriteArea(WrittenBorder,UnpPtr);
   \                     UnpWriteBuf:
   \   00000000   ........           LDR      R0,??DataTable88  ;; UnpPtr
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   004090E5           LDR      R4,[R0, #+0]
   \   0000000C   ........           LDR      R5,??DataTable97  ;; WrPtr
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   000095E5           LDR      R0,[R5, #+0]
   \   00000018   ........           BL       UnpWriteArea
    541            WrPtr=UnpPtr;
   \   0000001C   004085E5           STR      R4,[R5, #+0]
    542          }
   \   00000020   3080BDE8           POP      {R4,R5,PC}       ;; return
    543          

   \                                 In segment CODE, align 4, keep-with-next
    544          void UnpWriteArea(int StartPtr,int EndPtr)
    545          {
    546            if (EndPtr!=StartPtr)
   \                     UnpWriteArea:
   \   00000000   000051E1           CMP      R1,R0
    547              UnpSomeRead=true;
   \   00000004   ........           LDRNE    R2,??DataTable54  ;; UnpSomeRead
   \   00000008   0130A013           MOVNE    R3,#+1
   \   0000000C   00308215           STRNE    R3,[R2, #+0]
    548          /*
    549            if (EndPtr<StartPtr)
    550            {
    551              UnpWriteData(&Window[StartPtr],-StartPtr & MAXWINMASK);
    552              UnpWriteData(Window,EndPtr);
    553              UnpAllBuf=true;
    554            }
    555            else*/
    556              UnpWriteData(&Window[StartPtr],EndPtr-StartPtr);
   \   00000010   ........           LDR      R3,??DataTable58  ;; DestUnpSize
   \   00000014   000041E0           SUB      R0,R1,R0
   \   00000018   ........           LDR      R1,??DataTable80  ;; WrittenFileSize
   \   0000001C   003093E5           LDR      R3,[R3, #+0]
   \   00000020   002091E5           LDR      R2,[R1, #+0]
   \   00000024   030052E1           CMP      R2,R3
   \   00000028   020080B0           ADDLT    R0,R0,R2
   \   0000002C   000081B5           STRLT    R0,[R1, #+0]
    557          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    558          
    559          

   \                                 In segment CODE, align 4, keep-with-next
    560          void UnpWriteData(char *Data,int Size)
    561          {
    562            if (WrittenFileSize>=DestUnpSize)
   \                     UnpWriteData:
   \   00000000   ........           LDR      R0,??DataTable80  ;; WrittenFileSize
   \   00000004   ........           LDR      R3,??DataTable58  ;; DestUnpSize
   \   00000008   002090E5           LDR      R2,[R0, #+0]
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \   00000010   030052E1           CMP      R2,R3
    563              return;
    564            int WriteSize=Size;
    565            int LeftToWrite=DestUnpSize-WrittenFileSize;
    566            if (WriteSize>LeftToWrite)
    567              WriteSize=LeftToWrite;
    568            UnpWrite(Data,WriteSize);
    569            WrittenFileSize+=Size;
   \   00000014   021081B0           ADDLT    R1,R1,R2
   \   00000018   001080B5           STRLT    R1,[R0, #+0]
    570          }
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    571          
    572          

   \                                 In segment CODE, align 4, keep-with-next
    573          bool ReadTables()
    574          {
   \                     ReadTables:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    575            int I;
    576            char BitLength[BC];
    577            char Table[HUFF_TABLE_SIZE];
    578            if (InAddr>ReadTop-25)
   \   00000004   ........           LDR      R4,??DataTable78  ;; InAddr
   \   00000008   ........           LDR      R5,??DataTable91  ;; ReadTop
   \   0000000C   6ADF4DE2           SUB      SP,SP,#+424
   \   00000010   000095E5           LDR      R0,[R5, #+0]
   \   00000014   001094E5           LDR      R1,[R4, #+0]
   \   00000018   190040E2           SUB      R0,R0,#+25
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   020000AA           BGE      ??ReadTables_0
    579              if (!UnpReadBuf())
   \   00000024   ........           BL       UnpReadBuf
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   A400000A           BEQ      ??ReadTables_1
    580                return(false);
    581            addbits((8-InBit)&7);
   \                     ??ReadTables_0:
   \   00000030   ........           LDR      R0,??DataTable77  ;; InBit
    582            int BitField=getbits();
    583            if (BitField & 0x8000)
   \   00000034   0160A0E3           MOV      R6,#+1
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   080060E2           RSB      R0,R0,#+8
   \   00000040   070000E2           AND      R0,R0,#0x7
   \   00000044   ........           BL       addbits
   \   00000048   ........           BL       getbits
   \   0000004C   ........           LDR      R1,??DataTable62  ;; UnpBlockType
   \   00000050   800C10E3           TST      R0,#0x8000
    584            {
    585              UnpBlockType=BLOCK_PPM;
   \   00000054   00608115           STRNE    R6,[R1, #+0]
    586              //return(PPM.DecodeInit(this,PPMEscChar));
    587              return false;//add
   \   00000058   0000A013           MOVNE    R0,#+0
   \   0000005C   9800001A           BNE      ??ReadTables_1
    588            }
    589            UnpBlockType=BLOCK_LZ;
    590            
    591            PrevLowDist=0;
    592            LowDistRepCount=0;
    593          
    594            if (!(BitField & 0x4000))
   \   00000060   ........           LDR      R8,??DataTable74  ;; UnpOldTable
   \   00000064   0070A0E3           MOV      R7,#+0
   \   00000068   007081E5           STR      R7,[R1, #+0]
   \   0000006C   ........           LDR      R1,??DataTable64  ;; PrevLowDist
   \   00000070   400C10E3           TST      R0,#0x4000
   \   00000074   007081E5           STR      R7,[R1, #+0]
   \   00000078   ........           LDR      R1,??DataTable65  ;; LowDistRepCount
   \   0000007C   007081E5           STR      R7,[R1, #+0]
   \   00000080   0300001A           BNE      ??ReadTables_2
    595              memset(UnpOldTable,0,sizeof(UnpOldTable));
   \   00000084   652FA0E3           MOV      R2,#+404
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   ........           _BLF     memset,??memset??rA
    596            addbits(2);
   \                     ??ReadTables_2:
   \   00000094   0200A0E3           MOV      R0,#+2
   \   00000098   ........           BL       addbits
    597          
    598            for (int I=0;I<BC;I++)
   \   0000009C   0090A0E3           MOV      R9,#+0
    599            {
    600              int Length=(getbits() >> 12);
   \                     ??ReadTables_3:
   \   000000A0   ........           BL       getbits
   \   000000A4   40B6A0E1           ASR      R11,R0,#+12
    601              addbits(4);
   \   000000A8   0400A0E3           MOV      R0,#+4
   \   000000AC   ........           BL       addbits
    602              if (Length==15)
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   00A089E0           ADD      R10,R9,R0
   \   000000B8   0F005BE3           CMP      R11,#+15
   \   000000BC   1400001A           BNE      ??ReadTables_4
    603              {
    604                int ZeroCount=(getbits() >> 12);
   \   000000C0   ........           BL       getbits
   \   000000C4   40B6A0E1           ASR      R11,R0,#+12
    605                addbits(4);
   \   000000C8   0400A0E3           MOV      R0,#+4
   \   000000CC   ........           BL       addbits
    606                if (ZeroCount==0)
   \   000000D0   00005BE3           CMP      R11,#+0
    607                  BitLength[I]=15;
   \   000000D4   0F00A003           MOVEQ    R0,#+15
   \   000000D8   0000CA05           STRBEQ   R0,[R10, #+0]
   \   000000DC   0D00000A           BEQ      ??ReadTables_5
    608                else
    609                {
    610                  ZeroCount+=2;
   \   000000E0   02B08BE2           ADD      R11,R11,#+2
   \   000000E4   020000EA           B        ??ReadTables_6
    611                  while (ZeroCount-- > 0 && I<sizeof(BitLength)/sizeof(BitLength[0]))
    612                    BitLength[I++]=0;
   \                     ??ReadTables_7:
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   0070C9E7           STRB     R7,[R9, +R0]
   \   000000F0   019089E2           ADD      R9,R9,#+1
   \                     ??ReadTables_6:
   \   000000F4   0B00A0E1           MOV      R0,R11
   \   000000F8   01B040E2           SUB      R11,R0,#+1
   \   000000FC   010050E3           CMP      R0,#+1
   \   00000100   010000BA           BLT      ??ReadTables_8
   \   00000104   140059E3           CMP      R9,#+20
   \   00000108   F6FFFF3A           BCC      ??ReadTables_7
    613                  I--;
   \                     ??ReadTables_8:
   \   0000010C   019049E2           SUB      R9,R9,#+1
   \   00000110   000000EA           B        ??ReadTables_5
    614                }
    615              }
    616              else
    617                BitLength[I]=Length;
   \                     ??ReadTables_4:
   \   00000114   00B0CAE5           STRB     R11,[R10, #+0]
    618            }
   \                     ??ReadTables_5:
   \   00000118   019089E2           ADD      R9,R9,#+1
   \   0000011C   140059E3           CMP      R9,#+20
   \   00000120   DEFFFFBA           BLT      ??ReadTables_3
    619            MakeDecodeTables((char*)BitLength,3);
   \   00000124   0310A0E3           MOV      R1,#+3
   \   00000128   0D00A0E1           MOV      R0,SP
   \   0000012C   ........           BL       MakeDecodeTables
    620          
    621            const int TableSize=HUFF_TABLE_SIZE;
    622            for (I=0;I<TableSize;)
   \   00000130   0090A0E3           MOV      R9,#+0
    623            {
    624              if (InAddr>ReadTop-5)
   \                     ??ReadTables_9:
   \   00000134   000095E5           LDR      R0,[R5, #+0]
   \   00000138   001094E5           LDR      R1,[R4, #+0]
   \   0000013C   050040E2           SUB      R0,R0,#+5
   \   00000140   010050E1           CMP      R0,R1
   \   00000144   020000AA           BGE      ??ReadTables_10
    625                if (!UnpReadBuf())
   \   00000148   ........           BL       UnpReadBuf
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   5B00000A           BEQ      ??ReadTables_1
    626                  return(false);
    627              int Number=DecodeNumber(3);
   \                     ??ReadTables_10:
   \   00000154   0300A0E3           MOV      R0,#+3
   \   00000158   ........           BL       DecodeNumber
    628              if (Number<16)
   \   0000015C   100050E3           CMP      R0,#+16
   \   00000160   060000AA           BGE      ??ReadTables_11
    629              {
    630                Table[I]=(Number+UnpOldTable[I]) & 0xf;
   \   00000164   D82099E1           LDRSB    R2,[R9, +R8]
   \   00000168   14108DE2           ADD      R1,SP,#+20
   \   0000016C   000082E0           ADD      R0,R2,R0
   \   00000170   0F0000E2           AND      R0,R0,#0xF
   \   00000174   0100C9E7           STRB     R0,[R9, +R1]
    631                I++;
   \   00000178   019089E2           ADD      R9,R9,#+1
   \   0000017C   2A0000EA           B        ??ReadTables_12
    632              }
    633              else
    634                if (Number<18)
   \                     ??ReadTables_11:
   \   00000180   120050E3           CMP      R0,#+18
   \   00000184   170000AA           BGE      ??ReadTables_13
    635                {
    636                  int N;
    637                  if (Number==16)
   \   00000188   100050E3           CMP      R0,#+16
   \   0000018C   0400001A           BNE      ??ReadTables_14
    638                  {
    639                    N=(getbits() >> 13)+3;
   \   00000190   ........           BL       getbits
   \   00000194   0310A0E3           MOV      R1,#+3
   \   00000198   C0A681E0           ADD      R10,R1,R0, ASR #+13
    640                    addbits(3);
   \   0000019C   0300A0E3           MOV      R0,#+3
   \   000001A0   030000EA           B        ??ReadTables_15
    641                  }
    642                  else
    643                  {
    644                    N=(getbits() >> 9)+11;
   \                     ??ReadTables_14:
   \   000001A4   ........           BL       getbits
   \   000001A8   0B10A0E3           MOV      R1,#+11
   \   000001AC   C0A481E0           ADD      R10,R1,R0, ASR #+9
    645                    addbits(7);
   \   000001B0   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables_15:
   \   000001B4   ........           BL       addbits
    646                  }
    647                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables_16:
   \   000001B8   0A00A0E1           MOV      R0,R10
   \   000001BC   01A040E2           SUB      R10,R0,#+1
   \   000001C0   010050E3           CMP      R0,#+1
   \   000001C4   180000BA           BLT      ??ReadTables_12
   \   000001C8   650F59E3           CMP      R9,#+404
   \   000001CC   160000AA           BGE      ??ReadTables_12
    648                  {
    649                    Table[I]=Table[I-1];
   \   000001D0   14008DE2           ADD      R0,SP,#+20
   \   000001D4   000089E0           ADD      R0,R9,R0
   \   000001D8   D11050E1           LDRSB    R1,[R0, #-1]
    650                    I++;
   \   000001DC   019089E2           ADD      R9,R9,#+1
   \   000001E0   0010C0E5           STRB     R1,[R0, #+0]
   \   000001E4   F3FFFFEA           B        ??ReadTables_16
    651                  }
    652                }
    653                else
    654                {
    655                  int N;
    656                  if (Number==18)
   \                     ??ReadTables_13:
   \   000001E8   0400001A           BNE      ??ReadTables_17
    657                  {
    658                    N=(getbits() >> 13)+3;
   \   000001EC   ........           BL       getbits
   \   000001F0   0310A0E3           MOV      R1,#+3
   \   000001F4   C0A681E0           ADD      R10,R1,R0, ASR #+13
    659                    addbits(3);
   \   000001F8   0300A0E3           MOV      R0,#+3
   \   000001FC   030000EA           B        ??ReadTables_18
    660                  }
    661                  else
    662                  {
    663                    N=(getbits() >> 9)+11;
   \                     ??ReadTables_17:
   \   00000200   ........           BL       getbits
   \   00000204   0B10A0E3           MOV      R1,#+11
   \   00000208   C0A481E0           ADD      R10,R1,R0, ASR #+9
    664                    addbits(7);
   \   0000020C   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables_18:
   \   00000210   ........           BL       addbits
    665                  }
    666                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables_19:
   \   00000214   0A00A0E1           MOV      R0,R10
   \   00000218   01A040E2           SUB      R10,R0,#+1
   \   0000021C   010050E3           CMP      R0,#+1
   \   00000220   010000BA           BLT      ??ReadTables_12
   \   00000224   650F59E3           CMP      R9,#+404
   \   00000228   0A0000BA           BLT      ??ReadTables_20
   \                     ??ReadTables_12:
   \   0000022C   650F59E3           CMP      R9,#+404
   \   00000230   BFFFFFBA           BLT      ??ReadTables_9
    667                    Table[I++]=0;
    668                }
    669            }
    670            TablesRead=true;
   \   00000234   ........           LDR      R0,??DataTable67  ;; TablesRead
    671            if (InAddr>ReadTop)
   \   00000238   001094E5           LDR      R1,[R4, #+0]
   \   0000023C   006080E5           STR      R6,[R0, #+0]
   \   00000240   000095E5           LDR      R0,[R5, #+0]
   \   00000244   010050E1           CMP      R0,R1
   \   00000248   060000AA           BGE      ??ReadTables_21
    672              return(false);
   \   0000024C   0000A0E3           MOV      R0,#+0
   \   00000250   6ADF8DE2           ADD      SP,SP,#+424
   \   00000254   F08FBDE8           POP      {R4-R11,PC}
   \                     ??ReadTables_20:
   \   00000258   14008DE2           ADD      R0,SP,#+20
   \   0000025C   0070C9E7           STRB     R7,[R9, +R0]
   \   00000260   019089E2           ADD      R9,R9,#+1
   \   00000264   EAFFFFEA           B        ??ReadTables_19
    673            MakeDecodeTables(&Table[0],0);
   \                     ??ReadTables_21:
   \   00000268   0010A0E3           MOV      R1,#+0
   \   0000026C   14008DE2           ADD      R0,SP,#+20
   \   00000270   ........           BL       MakeDecodeTables
    674            MakeDecodeTables(&Table[NC],1);
   \   00000274   0610A0E1           MOV      R1,R6
   \   00000278   2B00A0E3           MOV      R0,#+43
   \   0000027C   400F80E3           ORR      R0,R0,#0x100
   \   00000280   14208DE2           ADD      R2,SP,#+20
   \   00000284   020080E0           ADD      R0,R0,R2
   \   00000288   ........           BL       MakeDecodeTables
    675            MakeDecodeTables(&Table[NC+DC],4);
   \   0000028C   0410A0E3           MOV      R1,#+4
   \   00000290   6700A0E3           MOV      R0,#+103
   \   00000294   400F80E3           ORR      R0,R0,#0x100
   \   00000298   14208DE2           ADD      R2,SP,#+20
   \   0000029C   020080E0           ADD      R0,R0,R2
   \   000002A0   ........           BL       MakeDecodeTables
    676            MakeDecodeTables(&Table[NC+DC+LDC],2);
   \   000002A4   0210A0E3           MOV      R1,#+2
   \   000002A8   630F8DE2           ADD      R0,SP,#+396
   \   000002AC   ........           BL       MakeDecodeTables
    677            memcpy(UnpOldTable,Table,sizeof(UnpOldTable));
   \   000002B0   652FA0E3           MOV      R2,#+404
   \   000002B4   14108DE2           ADD      R1,SP,#+20
   \   000002B8   0800A0E1           MOV      R0,R8
   \   000002BC   ........           _BLF     memcpy,??memcpy??rA
    678            return(true);
   \   000002C0   0600A0E1           MOV      R0,R6
   \                     ??ReadTables_1:
   \   000002C4   6ADF8DE2           ADD      SP,SP,#+424      ;; stack cleaning
   \   000002C8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    679          }
    680          
    681          

   \                                 In segment CODE, align 4, keep-with-next
    682          void UnpInitData(int Solid)
    683          {
   \                     UnpInitData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    684            if (!Solid)
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   1C00001A           BNE      ??UnpInitData_0
    685            {
    686              TablesRead=false;
   \   00000010   ........           LDR      R0,??DataTable67  ;; TablesRead
    687              memset(OldDist,0,sizeof(OldDist));
   \   00000014   1020A0E3           MOV      R2,#+16
   \   00000018   005080E5           STR      R5,[R0, #+0]
   \   0000001C   ........           LDR      R0,??DataTable108  ;; OldDist
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   ........           _BLF     memset,??memset??rA
    688              OldDistPtr=0;
   \   00000028   ........           LDR      R0,??DataTable145  ;; OldDistPtr
    689              LastDist=LastLength=0;
    690              memset(Window,0,MAXWINSIZE);
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   005080E5           STR      R5,[R0, #+0]
   \   00000034   ........           LDR      R0,??DataTable103  ;; LastLength
   \   00000038   005080E5           STR      R5,[R0, #+0]
   \   0000003C   ........           LDR      R0,??DataTable102  ;; LastDist
   \   00000040   005080E5           STR      R5,[R0, #+0]
   \   00000044   ........           LDR      R0,??DataTable72  ;; MAXWINSIZE
   \   00000048   002090E5           LDR      R2,[R0, #+0]
   \   0000004C   ........           LDR      R0,??DataTable73  ;; Window
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   ........           _BLF     memset,??memset??rA
    691              memset(UnpOldTable,0,sizeof(UnpOldTable));
   \   00000058   ........           LDR      R0,??DataTable74  ;; UnpOldTable
   \   0000005C   652FA0E3           MOV      R2,#+404
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   ........           _BLF     memset,??memset??rA
    692              UnpPtr=WrPtr=0;
   \   00000068   ........           LDR      R0,??DataTable97  ;; WrPtr
    693              PPMEscChar=2;
   \   0000006C   0210A0E3           MOV      R1,#+2
   \   00000070   005080E5           STR      R5,[R0, #+0]
   \   00000074   ........           LDR      R0,??DataTable88  ;; UnpPtr
   \   00000078   005080E5           STR      R5,[R0, #+0]
   \   0000007C   3C009FE5           LDR      R0,??UnpInitData_1  ;; PPMEscChar
   \   00000080   001080E5           STR      R1,[R0, #+0]
    694          
    695              //InitFilters();
    696            }
    697            InitBitInput();
   \                     ??UnpInitData_0:
   \   00000084   ........           LDR      R0,??DataTable77  ;; InBit
   \   00000088   005080E5           STR      R5,[R0, #+0]
   \   0000008C   ........           LDR      R0,??DataTable78  ;; InAddr
   \   00000090   005080E5           STR      R5,[R0, #+0]
    698            PPMError=false;
   \   00000094   ........           LDR      R0,??DataTable79  ;; PPMError
   \   00000098   005080E5           STR      R5,[R0, #+0]
    699            WrittenFileSize=0;
   \   0000009C   ........           LDR      R0,??DataTable80  ;; WrittenFileSize
   \   000000A0   005080E5           STR      R5,[R0, #+0]
    700            ReadTop=0;
   \   000000A4   ........           LDR      R0,??DataTable91  ;; ReadTop
   \   000000A8   005080E5           STR      R5,[R0, #+0]
    701            ReadBorder=0;
   \   000000AC   ........           LDR      R0,??DataTable82  ;; ReadBorder
   \   000000B0   005080E5           STR      R5,[R0, #+0]
    702            UnpInitData20(Solid);
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       UnpInitData20
    703          }
   \   000000BC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??UnpInitData_1:
   \   000000C0   ........           DC32     PPMEscChar
    704          

   \                                 In segment CODE, align 4, keep-with-next
    705          void MakeDecodeTables(char *LenTab,int pos)
    706          {
    707            int LenCount[16],TmpPos[16],I,Size=LL[pos].DecodeCnt;
   \                     MakeDecodeTables:
   \   00000000   ........           LDR      R2,??DataTable83  ;; LL
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
    708            long M,N;
    709            memset(LenCount,0,sizeof(LenCount));
    710            memset(DecodeN+LL[pos].DecodePtr,0,Size*sizeof(int));
   \   00000008   ........           LDR      R7,??DataTable84  ;; DecodeN
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   8C00A0E3           MOV      R0,#+140
   \   00000014   902125E0           MLA      R5,R0,R1,R2
   \   00000018   80D04DE2           SUB      SP,SP,#+128
   \   0000001C   886095E5           LDR      R6,[R5, #+136]
   \   00000020   4020A0E3           MOV      R2,#+64
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     memset,??memset??rA
   \   00000030   840095E5           LDR      R0,[R5, #+132]
   \   00000034   0621A0E1           LSL      R2,R6,#+2
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   000187E0           ADD      R0,R7,R0, LSL #+2
   \   00000040   ........           _BLF     memset,??memset??rA
    711            for (I=0;I<Size;I++)
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   010056E3           CMP      R6,#+1
   \   0000004C   0A0000AA           BGE      ??MakeDecodeTables_0
   \   00000050   0B0000EA           B        ??MakeDecodeTables_1
    712              LenCount[LenTab[I] & 0xF]++;
   \                     ??MakeDecodeTables_2:
   \   00000054   D43090E1           LDRSB    R3,[R0, +R4]
   \   00000058   D41090E1           LDRSB    R1,[R0, +R4]
   \   0000005C   0DC0A0E1           MOV      R12,SP
   \   00000060   0F3003E2           AND      R3,R3,#0xF
   \   00000064   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   00000068   0F1001E2           AND      R1,R1,#0xF
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   013083E2           ADD      R3,R3,#+1
   \   00000074   013182E7           STR      R3,[R2, +R1, LSL #+2]
   \   00000078   010080E2           ADD      R0,R0,#+1
   \                     ??MakeDecodeTables_0:
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   F3FFFFBA           BLT      ??MakeDecodeTables_2
    713          
    714            LenCount[0]=TmpPos[0]=0;
   \                     ??MakeDecodeTables_1:
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   40108DE5           STR      R1,[SP, #+64]
   \   0000008C   00108DE5           STR      R1,[SP, #+0]
    715            LL[pos].DecodePos[0]=LL[pos].DecodeLen[0]=0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   040085E5           STR      R0,[R5, #+4]
   \   00000098   440085E5           STR      R0,[R5, #+68]
    716            for (N=0,I=1;I<16;I++)
   \   0000009C   0100A0E3           MOV      R0,#+1
    717            {
    718              N=2*(N+LenCount[I]);
   \                     ??MakeDecodeTables_3:
   \   000000A0   0D20A0E1           MOV      R2,SP
   \   000000A4   002182E0           ADD      R2,R2,R0, LSL #+2
   \   000000A8   003092E5           LDR      R3,[R2, #+0]
    719              M=N<<(15-I);
    720              if (M>0xFFFF)
    721                M=0xFFFF;
    722              LL[pos].DecodeLen[I]=(int)M;
   \   000000AC   00C185E0           ADD      R12,R5,R0, LSL #+2
   \   000000B0   011083E0           ADD      R1,R3,R1
   \   000000B4   8110A0E1           LSL      R1,R1,#+1
   \   000000B8   0030A0E1           MOV      R3,R0
   \   000000BC   0F3063E2           RSB      R3,R3,#+15
   \   000000C0   1133A0E1           LSL      R3,R1,R3
   \   000000C4   400B53E3           CMP      R3,#+65536
   \   000000C8   FF30A0A3           MOVGE    R3,#+255
   \   000000CC   FF3C83A3           ORRGE    R3,R3,#0xFF00
   \   000000D0   04308CE5           STR      R3,[R12, #+4]
    723              TmpPos[I]=LL[pos].DecodePos[I]=LL[pos].DecodePos[I-1]+LenCount[I-1];
   \   000000D4   042012E5           LDR      R2,[R2, #-4]
   \   000000D8   013040E2           SUB      R3,R0,#+1
   \   000000DC   033185E0           ADD      R3,R5,R3, LSL #+2
   \   000000E0   443093E5           LDR      R3,[R3, #+68]
   \   000000E4   032082E0           ADD      R2,R2,R3
   \   000000E8   44208CE5           STR      R2,[R12, #+68]
   \   000000EC   40308DE2           ADD      R3,SP,#+64
   \   000000F0   002183E7           STR      R2,[R3, +R0, LSL #+2]
    724            }
   \   000000F4   010080E2           ADD      R0,R0,#+1
   \   000000F8   100050E3           CMP      R0,#+16
   \   000000FC   E7FFFFBA           BLT      ??MakeDecodeTables_3
    725          
    726            for (I=0;I<Size;I++)
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   010056E3           CMP      R6,#+1
   \   00000108   40C08DE2           ADD      R12,SP,#+64
   \   0000010C   150000AA           BGE      ??MakeDecodeTables_4
   \   00000110   006085E5           STR      R6,[R5, #+0]
   \   00000114   80D08DE2           ADD      SP,SP,#+128
   \   00000118   F080BDE8           POP      {R4-R7,PC}
    727              if (LenTab[I]!=0)
   \                     ??MakeDecodeTables_5:
   \   0000011C   D41090E1           LDRSB    R1,[R0, +R4]
   \   00000120   000051E3           CMP      R1,#+0
   \   00000124   0E00000A           BEQ      ??MakeDecodeTables_6
    728                DecodeN[LL[pos].DecodePtr+(TmpPos[LenTab[I] & 0xF]++)]=I;
   \   00000128   D42090E1           LDRSB    R2,[R0, +R4]
   \   0000012C   841095E5           LDR      R1,[R5, #+132]
   \   00000130   40308DE2           ADD      R3,SP,#+64
   \   00000134   0F2002E2           AND      R2,R2,#0xF
   \   00000138   022193E7           LDR      R2,[R3, +R2, LSL #+2]
   \   0000013C   011082E0           ADD      R1,R2,R1
   \   00000140   010187E7           STR      R0,[R7, +R1, LSL #+2]
   \   00000144   D43090E1           LDRSB    R3,[R0, +R4]
   \   00000148   D41090E1           LDRSB    R1,[R0, +R4]
   \   0000014C   40208DE2           ADD      R2,SP,#+64
   \   00000150   0F3003E2           AND      R3,R3,#0xF
   \   00000154   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   00000158   0F1001E2           AND      R1,R1,#0xF
   \   0000015C   013083E2           ADD      R3,R3,#+1
   \   00000160   013182E7           STR      R3,[R2, +R1, LSL #+2]
   \                     ??MakeDecodeTables_6:
   \   00000164   010080E2           ADD      R0,R0,#+1
   \                     ??MakeDecodeTables_4:
   \   00000168   060050E1           CMP      R0,R6
   \   0000016C   EAFFFFBA           BLT      ??MakeDecodeTables_5
    729            LL[pos].MaxNum=Size;
   \   00000170   006085E5           STR      R6,[R5, #+0]
    730          }
   \   00000174   80D08DE2           ADD      SP,SP,#+128
   \   00000178   F080BDE8           POP      {R4-R7,PC}       ;; return
    731          
    732          
    733          /////////////////unpack15
    734          #define STARTL1  2

   \                                 In segment DATA_I, align 4, align-sorted
    735          static int DecL1[]={0x8000,0xa000,0xc000,0xd000,0xe000,0xea00,
   \                     DecL1:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for DecL1>`
    736                                       0xee00,0xf000,0xf200,0xf200,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    737          static int PosL1[]={0,0,0,2,3,5,7,11,16,20,24,32,32};
   \                     PosL1:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosL1>`
    738          
    739          #define STARTL2  3

   \                                 In segment DATA_I, align 4, align-sorted
    740          static int DecL2[]={0xa000,0xc000,0xd000,0xe000,0xea00,0xee00,
   \                     DecL2:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for DecL2>`
    741                                       0xf000,0xf200,0xf240,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    742          static int PosL2[]={0,0,0,0,5,7,9,13,18,22,26,34,36};
   \                     PosL2:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosL2>`
    743          
    744          #define STARTHF0  4

   \                                 In segment DATA_I, align 4, align-sorted
    745          static int DecHf0[]={0x8000,0xc000,0xe000,0xf200,0xf200,0xf200,
   \                     DecHf0:
   \   00000000                      DS8 36
   \   00000024                      REQUIRE `?<Initializer for DecHf0>`
    746                                        0xf200,0xf200,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    747          static int PosHf0[]={0,0,0,0,0,8,16,24,33,33,33,33,33};
   \                     PosHf0:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf0>`
    748          
    749          
    750          #define STARTHF1  5

   \                                 In segment DATA_I, align 4, align-sorted
    751          static int DecHf1[]={0x2000,0xc000,0xe000,0xf000,0xf200,0xf200,
   \                     DecHf1:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for DecHf1>`
    752                                        0xf7e0,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    753          static int PosHf1[]={0,0,0,0,0,0,4,44,60,76,80,80,127};
   \                     PosHf1:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf1>`
    754          
    755          
    756          #define STARTHF2  5

   \                                 In segment DATA_I, align 4, align-sorted
    757          static int DecHf2[]={0x1000,0x2400,0x8000,0xc000,0xfa00,0xffff,
   \                     DecHf2:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for DecHf2>`
    758                                        0xffff,0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    759          static int PosHf2[]={0,0,0,0,0,0,2,7,53,117,233,0,0};
   \                     PosHf2:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf2>`
    760          
    761          
    762          #define STARTHF3  6

   \                                 In segment DATA_I, align 4, align-sorted
    763          static int DecHf3[]={0x800,0x2400,0xee00,0xfe80,0xffff,0xffff,
   \                     DecHf3:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for DecHf3>`
    764                                        0xffff};

   \                                 In segment DATA_I, align 4, align-sorted
    765          static int PosHf3[]={0,0,0,0,0,0,0,2,16,218,251,0,0};
   \                     PosHf3:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf3>`
    766          
    767          
    768          #define STARTHF4  8

   \                                 In segment DATA_I, align 4, align-sorted
    769          static int DecHf4[]={0xff00,0xffff,0xffff,0xffff,0xffff,0xffff};
   \                     DecHf4:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for DecHf4>`

   \                                 In segment DATA_I, align 4, align-sorted
    770          static int PosHf4[]={0,0,0,0,0,0,0,0,0,255,0,0,0};
   \                     PosHf4:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for PosHf4>`
    771          
    772          

   \                                 In segment CODE, align 4, keep-with-next
    773          void Unpack15(bool Solid)
    774          {
   \                     Unpack15:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    775            if (Suspended)
   \   00000004   ........           LDR      R4,??DataTable200  ;; DestUnpSize
   \   00000008   ........           LDR      R5,??DataTable97  ;; WrPtr
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   ........           LDR      R0,??DataTable92  ;; Suspended
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   000050E3           CMP      R0,#+0
    776              UnpPtr=WrPtr;
   \   0000001C   00009515           LDRNE    R0,[R5, #+0]
   \   00000020   0D00001A           BNE      ??Unpack15_0
    777            else
    778            {
    779              UnpInitData(Solid);
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           BL       UnpInitData
    780              OldUnpInitData(Solid);
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           BL       OldUnpInitData
    781              UnpReadBuf();
   \   00000034   ........           BL       UnpReadBuf
    782              if (!Solid)
   \   00000038   000056E3           CMP      R6,#+0
   \   0000003C   0200001A           BNE      ??Unpack15_1
    783              {
    784                InitHuff();
   \   00000040   ........           BL       InitHuff
    785                UnpPtr=0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   000000EA           B        ??Unpack15_2
    786              }
    787              else
    788                UnpPtr=WrPtr;
   \                     ??Unpack15_1:
   \   0000004C   000095E5           LDR      R0,[R5, #+0]
    789              --DestUnpSize;
   \                     ??Unpack15_2:
   \   00000050   001094E5           LDR      R1,[R4, #+0]
   \   00000054   011041E2           SUB      R1,R1,#+1
   \   00000058   001084E5           STR      R1,[R4, #+0]
   \                     ??Unpack15_0:
   \   0000005C   ........           LDR      R6,??DataTable88  ;; UnpPtr
    790            }
    791            if (DestUnpSize>=0)
   \   00000060   ........           LDR      R7,??DataTable180  ;; FlagsCnt
   \   00000064   000086E5           STR      R0,[R6, #+0]
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0400004A           BMI      ??Unpack15_3
    792            {
    793              GetFlagsBuf();
   \   00000074   ........           BL       GetFlagsBuf
    794              FlagsCnt=8;
   \   00000078   0800A0E3           MOV      R0,#+8
   \   0000007C   000087E5           STR      R0,[R7, #+0]
   \   00000080   000000EA           B        ??Unpack15_3
    795            }
    796          
    797            while (DestUnpSize>=0)
    798            {
    799              UnpPtr&=MAXWINMASK;
    800          
    801              if (InAddr>ReadTop-30 && !UnpReadBuf())
    802                break;
    803              if (((WrPtr-UnpPtr) & MAXWINMASK)<270 && WrPtr!=UnpPtr)
    804              {
    805                OldUnpWriteBuf();
    806                if (Suspended)
    807                  return;
    808              }
    809              if (StMode)
    810              {
    811                HuffDecode();
   \                     ??Unpack15_4:
   \   00000084   ........           BL       HuffDecode
    812                continue;
    813              }
   \                     ??Unpack15_3:
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   4700004A           BMI      ??Unpack15_5
   \   00000094   000096E5           LDR      R0,[R6, #+0]
   \   00000098   ........           LDR      R1,??DataTable90  ;; InAddr
   \   0000009C   F084E0E3           MVN      R8,#-268435456
   \   000000A0   001091E5           LDR      R1,[R1, #+0]
   \   000000A4   000008E0           AND      R0,R8,R0
   \   000000A8   000086E5           STR      R0,[R6, #+0]
   \   000000AC   ........           LDR      R0,??DataTable91  ;; ReadTop
   \   000000B0   000090E5           LDR      R0,[R0, #+0]
   \   000000B4   1E0040E2           SUB      R0,R0,#+30
   \   000000B8   010050E1           CMP      R0,R1
   \   000000BC   020000AA           BGE      ??Unpack15_6
   \   000000C0   ........           BL       UnpReadBuf
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   3900000A           BEQ      ??Unpack15_5
   \                     ??Unpack15_6:
   \   000000CC   000096E5           LDR      R0,[R6, #+0]
   \   000000D0   001095E5           LDR      R1,[R5, #+0]
   \   000000D4   0E30A0E3           MOV      R3,#+14
   \   000000D8   002041E0           SUB      R2,R1,R0
   \   000000DC   022008E0           AND      R2,R8,R2
   \   000000E0   403F83E3           ORR      R3,R3,#0x100
   \   000000E4   030052E1           CMP      R2,R3
   \   000000E8   060000AA           BGE      ??Unpack15_7
   \   000000EC   000051E1           CMP      R1,R0
   \   000000F0   0400000A           BEQ      ??Unpack15_7
   \   000000F4   ........           BL       OldUnpWriteBuf
   \   000000F8   ........           LDR      R0,??DataTable92  ;; Suspended
   \   000000FC   000090E5           LDR      R0,[R0, #+0]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   F08FBD18           POPNE    {R4-R11,PC}
   \                     ??Unpack15_7:
   \   00000108   ........           LDR      R0,??DataTable182  ;; StMode
   \   0000010C   000090E5           LDR      R0,[R0, #+0]
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   DAFFFF1A           BNE      ??Unpack15_4
    814          
    815              if (--FlagsCnt < 0)
   \   00000118   000097E5           LDR      R0,[R7, #+0]
   \   0000011C   0780A0E3           MOV      R8,#+7
   \   00000120   010050E2           SUBS     R0,R0,#+1
   \   00000124   000087E5           STR      R0,[R7, #+0]
   \   00000128   0100005A           BPL      ??Unpack15_8
    816              {
    817                GetFlagsBuf();
   \   0000012C   ........           BL       GetFlagsBuf
    818                FlagsCnt=7;
   \   00000130   008087E5           STR      R8,[R7, #+0]
    819              }
    820          
    821              if (FlagBuf & 0x80)
   \                     ??Unpack15_8:
   \   00000134   ........           LDR      R9,??DataTable181  ;; FlagBuf
   \   00000138   ........           LDR      R10,??DataTable178  ;; Nlzb
   \   0000013C   000099E5           LDR      R0,[R9, #+0]
   \   00000140   ........           LDR      R11,??DataTable179  ;; Nhfb
   \   00000144   8010A0E1           LSL      R1,R0,#+1
   \   00000148   800010E3           TST      R0,#0x80
   \   0000014C   001089E5           STR      R1,[R9, #+0]
   \   00000150   0500000A           BEQ      ??Unpack15_9
    822              {
    823                FlagBuf<<=1;
    824                if (Nlzb > Nhfb)
   \   00000154   00009BE5           LDR      R0,[R11, #+0]
   \   00000158   00109AE5           LDR      R1,[R10, #+0]
   \   0000015C   010050E1           CMP      R0,R1
   \   00000160   C7FFFFAA           BGE      ??Unpack15_4
    825                  LongLZ();
   \                     ??Unpack15_10:
   \   00000164   ........           BL       LongLZ
   \   00000168   C6FFFFEA           B        ??Unpack15_3
    826                else
    827                  HuffDecode();
    828              }
    829              else
    830              {
    831                FlagBuf<<=1;
    832                if (--FlagsCnt < 0)
   \                     ??Unpack15_9:
   \   0000016C   000097E5           LDR      R0,[R7, #+0]
   \   00000170   010050E2           SUBS     R0,R0,#+1
   \   00000174   000087E5           STR      R0,[R7, #+0]
   \   00000178   0100005A           BPL      ??Unpack15_11
    833                {
    834                  GetFlagsBuf();
   \   0000017C   ........           BL       GetFlagsBuf
    835                  FlagsCnt=7;
   \   00000180   008087E5           STR      R8,[R7, #+0]
    836                }
    837                if (FlagBuf & 0x80)
   \                     ??Unpack15_11:
   \   00000184   000099E5           LDR      R0,[R9, #+0]
   \   00000188   8010A0E1           LSL      R1,R0,#+1
   \   0000018C   800010E3           TST      R0,#0x80
   \   00000190   001089E5           STR      R1,[R9, #+0]
   \   00000194   0400000A           BEQ      ??Unpack15_12
    838                {
    839                  FlagBuf<<=1;
    840                  if (Nlzb > Nhfb)
   \   00000198   00009BE5           LDR      R0,[R11, #+0]
   \   0000019C   00109AE5           LDR      R1,[R10, #+0]
   \   000001A0   010050E1           CMP      R0,R1
   \   000001A4   EEFFFFAA           BGE      ??Unpack15_10
    841                    HuffDecode();
   \   000001A8   B5FFFFEA           B        ??Unpack15_4
    842                  else
    843                    LongLZ();
    844                }
    845                else
    846                {
    847                  FlagBuf<<=1;
    848                  ShortLZ();
   \                     ??Unpack15_12:
   \   000001AC   ........           BL       ShortLZ
   \   000001B0   B4FFFFEA           B        ??Unpack15_3
    849                }
    850              }
    851            }
    852            OldUnpWriteBuf();
   \                     ??Unpack15_5:
   \   000001B4   ........           BL       OldUnpWriteBuf
    853          }
   \   000001B8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    854          
    855          

   \                                 In segment CODE, align 4, keep-with-next
    856          void OldUnpWriteBuf()
    857          {
    858            if (UnpPtr!=WrPtr)
   \                     OldUnpWriteBuf:
   \   00000000   ........           LDR      R0,??DataTable97  ;; WrPtr
   \   00000004   ........           LDR      R2,??DataTable201  ;; UnpPtr
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   0130A0E3           MOV      R3,#+1
   \   00000014   010052E1           CMP      R2,R1
    859              UnpSomeRead=true;
   \   00000018   ........           LDRNE    R12,??DataTable99  ;; UnpSomeRead
    860            if (UnpPtr<WrPtr)
    861            {
    862              UnpWrite(&Window[WrPtr],-WrPtr & MAXWINMASK);
    863              UnpWrite(Window,UnpPtr);
    864              UnpAllBuf=true;
    865            }
    866            else
    867              UnpWrite(&Window[WrPtr],UnpPtr-WrPtr);
    868            WrPtr=UnpPtr;
   \   0000001C   002080E5           STR      R2,[R0, #+0]
   \   00000020   00308C15           STRNE    R3,[R12, #+0]
   \   00000024   010052E1           CMP      R2,R1
   \   00000028   ........           LDRLT    R1,??DataTable100  ;; UnpAllBuf
   \   0000002C   003081B5           STRLT    R3,[R1, #+0]
    869          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
    870          
    871          

   \                                 In segment CODE, align 4, keep-with-next
    872          void ShortLZ()
    873          {
    874            static int ShortLen1[]={1,3,4,4,5,6,7,8,8,4,4,5,6,6,4,0};
    875            static int ShortXor1[]={0,0xa0,0xd0,0xe0,0xf0,0xf8,0xfc,0xfe,
    876                                             0xff,0xc0,0x80,0x90,0x98,0x9c,0xb0};
    877            static int ShortLen2[]={2,3,3,3,4,4,5,6,6,4,4,5,6,6,4,0};
    878            static int ShortXor2[]={0,0x40,0x60,0xa0,0xd0,0xe0,0xf0,0xf8,
    879                                             0xfc,0xc0,0x80,0x90,0x98,0x9c,0xb0};
    880          
    881          
    882            int Length,SaveLength;
    883            int LastDistance;
    884            int Distance;
    885            int DistancePlace;
    886            NumHuf=0;
   \                     ShortLZ:
   \   00000000   ........           LDR      R0,??DataTable171  ;; NumHuf
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
    887          
    888            int BitField=getbits();
    889            if (LCount==2)
   \   00000008   ........           LDR      R4,??DataTable102  ;; LastDist
   \   0000000C   ........           LDR      R5,??DataTable103  ;; LastLength
   \   00000010   ........           LDR      R11,??DataTable183  ;; LCount
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0080A0E3           MOV      R8,#+0
   \   0000001C   008080E5           STR      R8,[R0, #+0]
   \   00000020   ........           BL       getbits
   \   00000024   009094E5           LDR      R9,[R4, #+0]
   \   00000028   00A095E5           LDR      R10,[R5, #+0]
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   00009BE5           LDR      R0,[R11, #+0]
   \   00000034   020050E3           CMP      R0,#+2
   \   00000038   0600001A           BNE      ??ShortLZ_0
    890            {
    891              addbits(1);
   \   0000003C   0100A0E3           MOV      R0,#+1
   \   00000040   ........           BL       addbits
    892              if (BitField >= 0x8000)
   \   00000044   800C56E3           CMP      R6,#+32768
    893              {
    894                OldCopyString((int)LastDist,LastLength);
   \   00000048   0A10A0A1           MOVGE    R1,R10
   \   0000004C   640000AA           BGE      ??ShortLZ_1
    895                return;
    896              }
    897              BitField <<= 1;
   \   00000050   8660A0E1           LSL      R6,R6,#+1
    898              LCount=0;
   \   00000054   00808BE5           STR      R8,[R11, #+0]
    899            }
    900          
    901            BitField>>=8;
   \                     ??ShortLZ_0:
   \   00000058   ........           LDR      R0,??DataTable170  ;; Buf60
   \   0000005C   38229FE5           LDR      R2,??ShortLZ_2   ;; ??ShortLen2
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   34329FE5           LDR      R3,??ShortLZ_2+0x4  ;; ??ShortLen1
   \   00000068   030080E2           ADD      R0,R0,#+3
   \   0000006C   0C0082E5           STR      R0,[R2, #+12]
   \   00000070   040083E5           STR      R0,[R3, #+4]
   \   00000074   ........           LDR      R0,??DataTable174  ;; AvrLn1
   \   00000078   4664A0E1           ASR      R6,R6,#+8
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   FF10A0E3           MOV      R1,#+255
   \   00000084   250050E3           CMP      R0,#+37
   \   00000088   0070A0E3           MOV      R7,#+0
   \   0000008C   090000AA           BGE      ??ShortLZ_3
    902          
    903            ShortLen1[1]=ShortLen2[3]=Buf60+3;
    904          
    905            if (AvrLn1<37)
    906            {
    907              for (Length=0;;Length++)
   \   00000090   0C229FE5           LDR      R2,??ShortLZ_2+0x8  ;; ??ShortXor1
   \   00000094   000000EA           B        ??ShortLZ_4
   \                     ??ShortLZ_5:
   \   00000098   017087E2           ADD      R7,R7,#+1
    908                if (((BitField^ShortXor1[Length]) & (~(0xff>>ShortLen1[Length])))==0)
   \                     ??ShortLZ_4:
   \   0000009C   070193E7           LDR      R0,[R3, +R7, LSL #+2]
   \   000000A0   07C192E7           LDR      R12,[R2, +R7, LSL #+2]
   \   000000A4   06E02CE0           EOR      LR,R12,R6
   \   000000A8   51C0E0E1           MVN      R12,R1, ASR R0
   \   000000AC   0E001CE1           TST      R12,LR
   \   000000B0   F8FFFF1A           BNE      ??ShortLZ_5
    909                  break;
    910              addbits(ShortLen1[Length]);
   \   000000B4   080000EA           B        ??ShortLZ_6
    911            }
    912            else
    913            {
    914              for (Length=0;;Length++)
   \                     ??ShortLZ_3:
   \   000000B8   E8319FE5           LDR      R3,??ShortLZ_2+0xC  ;; ??ShortXor2
   \   000000BC   000000EA           B        ??ShortLZ_7
   \                     ??ShortLZ_8:
   \   000000C0   017087E2           ADD      R7,R7,#+1
    915                if (((BitField^ShortXor2[Length]) & (~(0xff>>ShortLen2[Length])))==0)
   \                     ??ShortLZ_7:
   \   000000C4   070192E7           LDR      R0,[R2, +R7, LSL #+2]
   \   000000C8   07C193E7           LDR      R12,[R3, +R7, LSL #+2]
   \   000000CC   06E02CE0           EOR      LR,R12,R6
   \   000000D0   51C0E0E1           MVN      R12,R1, ASR R0
   \   000000D4   0E001CE1           TST      R12,LR
   \   000000D8   F8FFFF1A           BNE      ??ShortLZ_8
    916                  break;
    917              addbits(ShortLen2[Length]);
   \                     ??ShortLZ_6:
   \   000000DC   ........           BL       addbits
   \   000000E0   ........           LDR      R0,??DataTable145  ;; OldDistPtr
   \   000000E4   ........           LDR      R1,??DataTable108  ;; OldDist
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   090057E3           CMP      R7,#+9
   \   000000F0   012080E2           ADD      R2,R0,#+1
   \   000000F4   032002E2           AND      R2,R2,#0x3
   \   000000F8   00208DE5           STR      R2,[SP, #+0]
   \   000000FC   006181E0           ADD      R6,R1,R0, LSL #+2
   \   00000100   3A0000BA           BLT      ??ShortLZ_9
    918            }
    919          
    920            if (Length >= 9)
    921            {
    922              if (Length == 9)
   \   00000104   0400001A           BNE      ??ShortLZ_10
    923              {
    924                LCount++;
   \   00000108   00009BE5           LDR      R0,[R11, #+0]
    925                OldCopyString((int)LastDist,LastLength);
   \   0000010C   0A10A0E1           MOV      R1,R10
   \   00000110   010080E2           ADD      R0,R0,#+1
   \   00000114   00008BE5           STR      R0,[R11, #+0]
   \   00000118   5C0000EA           B        ??ShortLZ_11
    926                return;
    927              }
    928              if (Length == 14)
   \                     ??ShortLZ_10:
   \   0000011C   0E0057E3           CMP      R7,#+14
   \   00000120   00808BE5           STR      R8,[R11, #+0]
   \   00000124   0B00001A           BNE      ??ShortLZ_12
    929              {
    930                LCount=0;
    931                Length=DecodeNum(getbits(),STARTL2,DecL2,PosL2)+5;
   \   00000128   ........           BL       getbits
   \   0000012C   ........           LDR      R3,??DataTable128  ;; PosL2
   \   00000130   ........           LDR      R2,??DataTable129  ;; DecL2
   \   00000134   0310A0E3           MOV      R1,#+3
   \   00000138   ........           BL       DecodeNum
   \   0000013C   057080E2           ADD      R7,R0,#+5
    932                Distance=(getbits()>>1) | 0x8000;
   \   00000140   ........           BL       getbits
   \   00000144   801CA0E3           MOV      R1,#+32768
   \   00000148   C09081E1           ORR      R9,R1,R0, ASR #+1
    933                addbits(15);
   \   0000014C   0F00A0E3           MOV      R0,#+15
   \   00000150   ........           BL       addbits
    934                LastLength=Length;
   \   00000154   1F0000EA           B        ??ShortLZ_13
    935                LastDist=Distance;
    936                OldCopyString(Distance,Length);
    937                return;
    938              }
    939          
    940              LCount=0;
    941              SaveLength=Length;
   \                     ??ShortLZ_12:
   \   00000158   0780A0E1           MOV      R8,R7
    942              Distance=OldDist[(OldDistPtr-(Length-9)) & 3];
   \   0000015C   070040E0           SUB      R0,R0,R7
   \   00000160   090080E2           ADD      R0,R0,#+9
   \   00000164   030000E2           AND      R0,R0,#0x3
   \   00000168   009191E7           LDR      R9,[R1, +R0, LSL #+2]
    943              Length=DecodeNum(getbits(),STARTL1,DecL1,PosL1)+2;
   \   0000016C   ........           BL       getbits
   \   00000170   ........           LDR      R3,??DataTable130  ;; PosL1
   \   00000174   ........           LDR      R2,??DataTable131  ;; DecL1
   \   00000178   0210A0E3           MOV      R1,#+2
   \   0000017C   ........           BL       DecodeNum
   \   00000180   027080E2           ADD      R7,R0,#+2
    944              if (Length==0x101 && SaveLength==10)
   \   00000184   0100A0E3           MOV      R0,#+1
   \   00000188   400F80E3           ORR      R0,R0,#0x100
   \   0000018C   000057E1           CMP      R7,R0
   \   00000190   0A005803           CMPEQ    R8,#+10
   \   00000194   0500001A           BNE      ??ShortLZ_14
    945              {
    946                Buf60 ^= 1;
   \   00000198   ........           LDR      R1,??DataTable170  ;; Buf60
   \   0000019C   ........           LDR      R0,??DataTable170  ;; Buf60
   \   000001A0   001091E5           LDR      R1,[R1, #+0]
   \   000001A4   011021E2           EOR      R1,R1,#0x1
   \   000001A8   001080E5           STR      R1,[R0, #+0]
    947                return;
   \   000001AC   F18FBDE8           POP      {R0,R4-R11,PC}
    948              }
    949              if (Distance > 256)
   \                     ??ShortLZ_14:
   \   000001B0   000059E1           CMP      R9,R0
    950                Length++;
    951              if (Distance >= MaxDist3)
   \   000001B4   ........           LDR      R0,??DataTable177  ;; MaxDist3
   \   000001B8   017087A2           ADDGE    R7,R7,#+1
   \   000001BC   000090E5           LDR      R0,[R0, #+0]
    952                Length++;
    953          
    954              OldDist[OldDistPtr++]=Distance;
   \   000001C0   009086E5           STR      R9,[R6, #+0]
    955              OldDistPtr = OldDistPtr & 3;
   \   000001C4   00109DE5           LDR      R1,[SP, #+0]
   \   000001C8   000059E1           CMP      R9,R0
   \   000001CC   ........           LDR      R0,??DataTable145  ;; OldDistPtr
   \   000001D0   017087A2           ADDGE    R7,R7,#+1
   \   000001D4   001080E5           STR      R1,[R0, #+0]
    956              LastLength=Length;
   \                     ??ShortLZ_13:
   \   000001D8   007085E5           STR      R7,[R5, #+0]
    957              LastDist=Distance;
   \   000001DC   009084E5           STR      R9,[R4, #+0]
    958              OldCopyString(Distance,Length);
   \   000001E0   0710A0E1           MOV      R1,R7
   \                     ??ShortLZ_1:
   \   000001E4   0900A0E1           MOV      R0,R9
   \   000001E8   ........           BL       OldCopyString
    959              return;
   \   000001EC   F18FBDE8           POP      {R0,R4-R11,PC}
    960            }
    961          
    962            LCount=0;
    963            AvrLn1 += Length;
   \                     ??ShortLZ_9:
   \   000001F0   ........           LDR      R0,??DataTable174  ;; AvrLn1
   \   000001F4   ........           LDR      R1,??DataTable174  ;; AvrLn1
   \   000001F8   000090E5           LDR      R0,[R0, #+0]
   \   000001FC   00808BE5           STR      R8,[R11, #+0]
   \   00000200   000087E0           ADD      R0,R7,R0
   \   00000204   000081E5           STR      R0,[R1, #+0]
    964            AvrLn1 -= AvrLn1 >> 4;
   \   00000208   400240E0           SUB      R0,R0,R0, ASR #+4
   \   0000020C   000081E5           STR      R0,[R1, #+0]
    965          
    966            DistancePlace=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2) & 0xff;
   \   00000210   ........           BL       getbits
   \   00000214   ........           LDR      R3,??DataTable168  ;; PosHf2
   \   00000218   ........           LDR      R2,??DataTable169  ;; DecHf2
   \   0000021C   0510A0E3           MOV      R1,#+5
   \   00000220   ........           BL       DecodeNum
    967            Distance=ChSetA[DistancePlace];
   \   00000224   ........           LDR      R2,??DataTable188  ;; ChSetA
   \   00000228   FF1000E2           AND      R1,R0,#0xFF
   \   0000022C   010192E7           LDR      R0,[R2, +R1, LSL #+2]
    968            if (--DistancePlace != -1)
   \   00000230   011041E2           SUB      R1,R1,#+1
   \   00000234   010071E3           CMN      R1,#+1
   \   00000238   0C00000A           BEQ      ??ShortLZ_15
    969            {
    970              PlaceA[Distance]--;
   \   0000023C   ........           LDR      R3,??DataTable187  ;; PlaceA
    971              LastDistance=ChSetA[DistancePlace];
   \   00000240   011182E0           ADD      R1,R2,R1, LSL #+2
   \   00000244   008183E0           ADD      R8,R3,R0, LSL #+2
   \   00000248   009098E5           LDR      R9,[R8, #+0]
   \   0000024C   019049E2           SUB      R9,R9,#+1
   \   00000250   009088E5           STR      R9,[R8, #+0]
   \   00000254   002091E5           LDR      R2,[R1, #+0]
    972              PlaceA[LastDistance]++;
   \   00000258   023183E0           ADD      R3,R3,R2, LSL #+2
   \   0000025C   008093E5           LDR      R8,[R3, #+0]
   \   00000260   018088E2           ADD      R8,R8,#+1
   \   00000264   008083E5           STR      R8,[R3, #+0]
    973              ChSetA[DistancePlace+1]=LastDistance;
   \   00000268   042081E5           STR      R2,[R1, #+4]
    974              ChSetA[DistancePlace]=Distance;
   \   0000026C   000081E5           STR      R0,[R1, #+0]
    975            }
    976            Length+=2;
    977            OldDist[OldDistPtr++] = ++Distance;
   \                     ??ShortLZ_15:
   \   00000270   019080E2           ADD      R9,R0,#+1
    978            OldDistPtr = OldDistPtr & 3;
   \   00000274   ........           LDR      R0,??DataTable145  ;; OldDistPtr
   \   00000278   009086E5           STR      R9,[R6, #+0]
   \   0000027C   00109DE5           LDR      R1,[SP, #+0]
    979            LastLength=Length;
    980            LastDist=Distance;
   \   00000280   009084E5           STR      R9,[R4, #+0]
   \   00000284   001080E5           STR      R1,[R0, #+0]
   \   00000288   021087E2           ADD      R1,R7,#+2
   \   0000028C   001085E5           STR      R1,[R5, #+0]
    981            OldCopyString(Distance,Length);
   \                     ??ShortLZ_11:
   \   00000290   0900A0E1           MOV      R0,R9
   \   00000294   ........           BL       OldCopyString
   \   00000298   F18FBDE8           POP      {R0,R4-R11,PC}
   \                     ??ShortLZ_2:
   \   0000029C   ........           DC32     ??ShortLen2
   \   000002A0   ........           DC32     ??ShortLen1
   \   000002A4   ........           DC32     ??ShortXor1
   \   000002A8   ........           DC32     ??ShortXor2
    982          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortLen1:
   \   00000000                      DS8 64
   \   00000040                      REQUIRE `?<Initializer for ShortLen1>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortXor1:
   \   00000000                      DS8 60
   \   0000003C                      REQUIRE `?<Initializer for ShortXor1>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortLen2:
   \   00000000                      DS8 64
   \   00000040                      REQUIRE `?<Initializer for ShortLen2>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??ShortXor2:
   \   00000000                      DS8 60
   \   0000003C                      REQUIRE `?<Initializer for ShortXor2>`
    983          
    984          

   \                                 In segment CODE, align 4, keep-with-next
    985          void LongLZ()
    986          {
    987            int Length;
    988            int Distance;
    989            int DistancePlace,NewDistancePlace;
    990            int OldAvr2,OldAvr3;
    991          
    992            NumHuf=0;
   \                     LongLZ:
   \   00000000   ........           LDR      R0,??DataTable171  ;; NumHuf
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
    993            Nlzb+=16;
   \   00000010   ........           LDR      R0,??DataTable178  ;; Nlzb
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   101081E2           ADD      R1,R1,#+16
    994            if (Nlzb > 0xff)
   \   0000001C   400F51E3           CMP      R1,#+256
   \   00000020   040000BA           BLT      ??LongLZ_0
    995            {
    996              Nlzb=0x90;
    997              Nhfb >>= 1;
   \   00000024   ........           LDR      R2,??DataTable179  ;; Nhfb
   \   00000028   9010A0E3           MOV      R1,#+144
   \   0000002C   003092E5           LDR      R3,[R2, #+0]
   \   00000030   C330A0E1           ASR      R3,R3,#+1
   \   00000034   003082E5           STR      R3,[R2, #+0]
    998            }
    999            OldAvr2=AvrLn2;
   \                     ??LongLZ_0:
   \   00000038   ........           LDR      R6,??DataTable173  ;; AvrLn2
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   \   00000040   008096E5           LDR      R8,[R6, #+0]
   1000          
   1001            int BitField=getbits();
   \   00000044   ........           BL       getbits
   \   00000048   0840A0E1           MOV      R4,R8
   1002            if (AvrLn2 >= 122)
   \   0000004C   7A0058E3           CMP      R8,#+122
   \   00000050   050000BA           BLT      ??LongLZ_1
   1003              Length=DecodeNum(BitField,STARTL2,DecL2,PosL2);
   \   00000054   ........           LDR      R3,??DataTable128  ;; PosL2
   \   00000058   ........           LDR      R2,??DataTable129  ;; DecL2
   \   0000005C   0310A0E3           MOV      R1,#+3
   \                     ??LongLZ_2:
   \   00000060   ........           BL       DecodeNum
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   130000EA           B        ??LongLZ_3
   1004            else
   1005              if (AvrLn2 >= 64)
   \                     ??LongLZ_1:
   \   0000006C   400058E3           CMP      R8,#+64
   \   00000070   030000BA           BLT      ??LongLZ_4
   1006                Length=DecodeNum(BitField,STARTL1,DecL1,PosL1);
   \   00000074   ........           LDR      R3,??DataTable130  ;; PosL1
   \   00000078   ........           LDR      R2,??DataTable131  ;; DecL1
   \   0000007C   0210A0E3           MOV      R1,#+2
   \   00000080   F6FFFFEA           B        ??LongLZ_2
   1007              else
   1008                if (BitField < 0x100)
   \                     ??LongLZ_4:
   \   00000084   400F50E3           CMP      R0,#+256
   1009                {
   1010                  Length=BitField;
   \   00000088   0050A0B1           MOVLT    R5,R0
   1011                  addbits(16);
   \   0000008C   1000A0B3           MOVLT    R0,#+16
   \   00000090   080000BA           BLT      ??LongLZ_5
   1012                }
   1013                else
   1014                {
   1015                  for (Length=0;((BitField<<Length)&0x8000)==0;Length++)
   \   00000094   0050A0E3           MOV      R5,#+0
   \   00000098   800C10E3           TST      R0,#0x8000
   \   0000009C   0100000A           BEQ      ??LongLZ_6
   \   000000A0   030000EA           B        ??LongLZ_7
   \                     ??LongLZ_8:
   \   000000A4   015085E2           ADD      R5,R5,#+1
   \                     ??LongLZ_6:
   \   000000A8   1015A0E1           LSL      R1,R0,R5
   \   000000AC   800C11E3           TST      R1,#0x8000
   \   000000B0   FBFFFF0A           BEQ      ??LongLZ_8
   1016                    ;
   1017                  addbits(Length+1);
   \                     ??LongLZ_7:
   \   000000B4   010085E2           ADD      R0,R5,#+1
   \                     ??LongLZ_5:
   \   000000B8   ........           BL       addbits
   1018                }
   1019          
   1020            AvrLn2 += Length;
   \                     ??LongLZ_3:
   \   000000BC   080085E0           ADD      R0,R5,R8
   1021            AvrLn2 -= AvrLn2 >> 5;
   1022          
   1023            BitField=getbits();
   1024            if (AvrPlcB > 0x28ff)
   \   000000C0   ........           LDR      R8,??DataTable175  ;; AvrPlcB
   \   000000C4   000086E5           STR      R0,[R6, #+0]
   \   000000C8   C00240E0           SUB      R0,R0,R0, ASR #+5
   \   000000CC   000086E5           STR      R0,[R6, #+0]
   \   000000D0   ........           BL       getbits
   \   000000D4   009098E5           LDR      R9,[R8, #+0]
   \   000000D8   A40D59E3           CMP      R9,#+10496
   \   000000DC   030000BA           BLT      ??LongLZ_9
   1025              DistancePlace=DecodeNum(BitField,STARTHF2,DecHf2,PosHf2);
   \   000000E0   ........           LDR      R3,??DataTable168  ;; PosHf2
   \   000000E4   ........           LDR      R2,??DataTable169  ;; DecHf2
   \                     ??LongLZ_10:
   \   000000E8   0510A0E3           MOV      R1,#+5
   \   000000EC   070000EA           B        ??LongLZ_11
   1026            else
   1027              if (AvrPlcB > 0x6ff)
   \                     ??LongLZ_9:
   \   000000F0   700E59E3           CMP      R9,#+1792
   \   000000F4   020000BA           BLT      ??LongLZ_12
   1028                DistancePlace=DecodeNum(BitField,STARTHF1,DecHf1,PosHf1);
   \   000000F8   ........           LDR      R3,??DataTable151  ;; PosHf1
   \   000000FC   ........           LDR      R2,??DataTable152  ;; DecHf1
   \   00000100   F8FFFFEA           B        ??LongLZ_10
   1029              else
   1030                DistancePlace=DecodeNum(BitField,STARTHF0,DecHf0,PosHf0);
   \                     ??LongLZ_12:
   \   00000104   ........           LDR      R3,??DataTable153  ;; PosHf0
   \   00000108   ........           LDR      R2,??DataTable154  ;; DecHf0
   \   0000010C   0410A0E3           MOV      R1,#+4
   \                     ??LongLZ_11:
   \   00000110   ........           BL       DecodeNum
   \   00000114   0060A0E1           MOV      R6,R0
   1031          
   1032            AvrPlcB += DistancePlace;
   \   00000118   090086E0           ADD      R0,R6,R9
   1033            AvrPlcB -= AvrPlcB >> 8;
   \   0000011C   ........           LDR      R9,??DataTable186  ;; ChSetB
   \   00000120   000088E5           STR      R0,[R8, #+0]
   \   00000124   400440E0           SUB      R0,R0,R0, ASR #+8
   \   00000128   000088E5           STR      R0,[R8, #+0]
   \   0000012C   ........           LDR      R8,??DataTable190  ;; NToPlB
   \   00000130   FF0007E2           AND      R0,R7,#0xFF
   \   00000134   007188E0           ADD      R7,R8,R0, LSL #+2
   \   00000138   FF0006E2           AND      R0,R6,#0xFF
   \   0000013C   00A189E0           ADD      R10,R9,R0, LSL #+2
   \   00000140   020000EA           B        ??LongLZ_13
   1034            while (1)
   1035            {
   1036              Distance = ChSetB[DistancePlace & 0xff];
   1037              NewDistancePlace = NToPlB[Distance++ & 0xff]++;
   1038              if (!(Distance & 0xff))
   1039                CorrHuff(ChSetB,NToPlB);
   \                     ??LongLZ_14:
   \   00000144   0810A0E1           MOV      R1,R8
   \   00000148   0900A0E1           MOV      R0,R9
   \   0000014C   ........           BL       CorrHuff
   \                     ??LongLZ_13:
   \   00000150   00009AE5           LDR      R0,[R10, #+0]
   \   00000154   002097E5           LDR      R2,[R7, #+0]
   \   00000158   FF1000E2           AND      R1,R0,#0xFF
   \   0000015C   011198E7           LDR      R1,[R8, +R1, LSL #+2]
   \   00000160   010080E2           ADD      R0,R0,#+1
   \   00000164   012082E2           ADD      R2,R2,#+1
   \   00000168   002087E5           STR      R2,[R7, #+0]
   \   0000016C   002CB0E1           LSLS     R2,R0,#+24
   \   00000170   F3FFFF0A           BEQ      ??LongLZ_14
   1040              else
   1041                break;
   1042            }
   1043          
   1044            ChSetB[DistancePlace]=ChSetB[NewDistancePlace];
   \   00000174   011189E0           ADD      R1,R9,R1, LSL #+2
   \   00000178   002091E5           LDR      R2,[R1, #+0]
   \   0000017C   062189E7           STR      R2,[R9, +R6, LSL #+2]
   1045            ChSetB[NewDistancePlace]=Distance;
   \   00000180   000081E5           STR      R0,[R1, #+0]
   1046          
   1047            Distance=((Distance & 0xff00) | (getbits() >> 8)) >> 1;
   \   00000184   FF6C00E2           AND      R6,R0,#0xFF00
   \   00000188   ........           BL       getbits
   \   0000018C   400486E1           ORR      R0,R6,R0, ASR #+8
   \   00000190   C060A0E1           ASR      R6,R0,#+1
   1048            addbits(7);
   \   00000194   0700A0E3           MOV      R0,#+7
   \   00000198   ........           BL       addbits
   1049          
   1050            OldAvr3=AvrLn3;
   \   0000019C   ........           LDR      R1,??DataTable172  ;; AvrLn3
   1051            if (Length!=1 && Length!=4)
   \   000001A0   ........           LDR      R0,??DataTable177  ;; MaxDist3
   \   000001A4   002091E5           LDR      R2,[R1, #+0]
   \   000001A8   007090E5           LDR      R7,[R0, #+0]
   \   000001AC   0230A0E1           MOV      R3,R2
   \   000001B0   010055E3           CMP      R5,#+1
   \   000001B4   04005513           CMPNE    R5,#+4
   \   000001B8   0B00000A           BEQ      ??LongLZ_15
   1052              if (Length==0 && Distance <= MaxDist3)
   \   000001BC   000055E3           CMP      R5,#+0
   \   000001C0   0500001A           BNE      ??LongLZ_16
   \   000001C4   060057E1           CMP      R7,R6
   \   000001C8   030000BA           BLT      ??LongLZ_16
   1053              {
   1054                AvrLn3++;
   \   000001CC   012082E2           ADD      R2,R2,#+1
   \   000001D0   002081E5           STR      R2,[R1, #+0]
   1055                AvrLn3 -= AvrLn3 >> 8;
   \   000001D4   422442E0           SUB      R2,R2,R2, ASR #+8
   \   000001D8   020000EA           B        ??LongLZ_17
   1056              }
   1057              else
   1058                if (AvrLn3 > 0)
   \                     ??LongLZ_16:
   \   000001DC   010052E3           CMP      R2,#+1
   \   000001E0   010000BA           BLT      ??LongLZ_15
   1059                  AvrLn3--;
   \   000001E4   012042E2           SUB      R2,R2,#+1
   \                     ??LongLZ_17:
   \   000001E8   002081E5           STR      R2,[R1, #+0]
   1060            Length+=3;
   \                     ??LongLZ_15:
   \   000001EC   031085E2           ADD      R1,R5,#+3
   1061            if (Distance >= MaxDist3)
   \   000001F0   070056E1           CMP      R6,R7
   1062              Length++;
   \   000001F4   011081A2           ADDGE    R1,R1,#+1
   1063            if (Distance <= 256)
   \   000001F8   0120A0E3           MOV      R2,#+1
   \   000001FC   402F82E3           ORR      R2,R2,#0x100
   \   00000200   020056E1           CMP      R6,R2
   1064              Length+=8;
   \   00000204   081081B2           ADDLT    R1,R1,#+8
   1065            if (OldAvr3 > 0xb0 || AvrPlc >= 0x2a00 && OldAvr2 < 0x40)
   \   00000208   B10053E3           CMP      R3,#+177
   \   0000020C   050000AA           BGE      ??LongLZ_18
   \   00000210   ........           LDR      R2,??DataTable176  ;; AvrPlc
   \   00000214   002092E5           LDR      R2,[R2, #+0]
   \   00000218   A80D52E3           CMP      R2,#+10752
   \   0000021C   030000BA           BLT      ??LongLZ_19
   \   00000220   400054E3           CMP      R4,#+64
   \   00000224   010000AA           BGE      ??LongLZ_19
   1066              MaxDist3=0x7f00;
   \                     ??LongLZ_18:
   \   00000228   7F2CA0E3           MOV      R2,#+32512
   \   0000022C   010000EA           B        ??LongLZ_20
   1067            else
   1068              MaxDist3=0x2001;
   \                     ??LongLZ_19:
   \   00000230   0120A0E3           MOV      R2,#+1
   \   00000234   802D82E3           ORR      R2,R2,#0x2000
   1069            OldDist[OldDistPtr++]=Distance;
   \                     ??LongLZ_20:
   \   00000238   ........           LDR      R3,??DataTable221  ;; OldDist
   \   0000023C   002080E5           STR      R2,[R0, #+0]
   \   00000240   ........           LDR      R0,??DataTable145  ;; OldDistPtr
   \   00000244   002090E5           LDR      R2,[R0, #+0]
   \   00000248   026183E7           STR      R6,[R3, +R2, LSL #+2]
   1070            OldDistPtr = OldDistPtr & 3;
   \   0000024C   012082E2           ADD      R2,R2,#+1
   \   00000250   032002E2           AND      R2,R2,#0x3
   \   00000254   002080E5           STR      R2,[R0, #+0]
   1071            LastLength=Length;
   \   00000258   ........           LDR      R0,??DataTable219  ;; LastLength
   \   0000025C   001080E5           STR      R1,[R0, #+0]
   1072            LastDist=Distance;
   \   00000260   ........           LDR      R0,??DataTable218  ;; LastDist
   \   00000264   006080E5           STR      R6,[R0, #+0]
   1073            OldCopyString(Distance,Length);
   \   00000268   0600A0E1           MOV      R0,R6
   \   0000026C   ........           BL       OldCopyString
   1074          }
   \   00000270   F087BDE8           POP      {R4-R10,PC}      ;; return
   1075          
   1076          

   \                                 In segment CODE, align 4, keep-with-next
   1077          void HuffDecode()
   1078          {
   \                     HuffDecode:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1079            int CurByte,NewBytePlace;
   1080            int Length;
   1081            int Distance;
   1082            int BytePlace;
   1083          
   1084            int BitField=getbits();
   1085          
   1086            if (AvrPlc > 0x75ff)
   \   00000004   ........           LDR      R9,??DataTable176  ;; AvrPlc
   \   00000008   ........           LDR      R4,??DataTable169  ;; DecHf2
   \   0000000C   ........           LDR      R5,??DataTable168  ;; PosHf2
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   ........           BL       getbits
   \   00000018   00A099E5           LDR      R10,[R9, #+0]
   \   0000001C   00B0A0E1           MOV      R11,R0
   \   00000020   760C5AE3           CMP      R10,#+30208
   \   00000024   030000BA           BLT      ??HuffDecode_0
   1087              BytePlace=DecodeNum(BitField,STARTHF4,DecHf4,PosHf4);
   \   00000028   04329FE5           LDR      R3,??HuffDecode_1  ;; PosHf4
   \   0000002C   04229FE5           LDR      R2,??HuffDecode_1+0x4  ;; DecHf4
   \   00000030   0810A0E3           MOV      R1,#+8
   \   00000034   130000EA           B        ??HuffDecode_2
   1088            else
   1089              if (AvrPlc > 0x5dff)
   \                     ??HuffDecode_0:
   \   00000038   5E0C5AE3           CMP      R10,#+24064
   \   0000003C   030000BA           BLT      ??HuffDecode_3
   1090                BytePlace=DecodeNum(BitField,STARTHF3,DecHf3,PosHf3);
   \   00000040   F4319FE5           LDR      R3,??HuffDecode_1+0x8  ;; PosHf3
   \   00000044   F4219FE5           LDR      R2,??HuffDecode_1+0xC  ;; DecHf3
   \   00000048   0610A0E3           MOV      R1,#+6
   \   0000004C   0D0000EA           B        ??HuffDecode_2
   1091              else
   1092                if (AvrPlc > 0x35ff)
   \                     ??HuffDecode_3:
   \   00000050   D80D5AE3           CMP      R10,#+13824
   \   00000054   030000BA           BLT      ??HuffDecode_4
   1093                  BytePlace=DecodeNum(BitField,STARTHF2,DecHf2,PosHf2);
   \   00000058   0530A0E1           MOV      R3,R5
   \   0000005C   0420A0E1           MOV      R2,R4
   \                     ??HuffDecode_5:
   \   00000060   0510A0E3           MOV      R1,#+5
   \   00000064   070000EA           B        ??HuffDecode_2
   1094                else
   1095                  if (AvrPlc > 0x0dff)
   \                     ??HuffDecode_4:
   \   00000068   E00E5AE3           CMP      R10,#+3584
   \   0000006C   020000BA           BLT      ??HuffDecode_6
   1096                    BytePlace=DecodeNum(BitField,STARTHF1,DecHf1,PosHf1);
   \   00000070   ........           LDR      R3,??DataTable151  ;; PosHf1
   \   00000074   ........           LDR      R2,??DataTable152  ;; DecHf1
   \   00000078   F8FFFFEA           B        ??HuffDecode_5
   1097                  else
   1098                    BytePlace=DecodeNum(BitField,STARTHF0,DecHf0,PosHf0);
   \                     ??HuffDecode_6:
   \   0000007C   ........           LDR      R3,??DataTable153  ;; PosHf0
   \   00000080   ........           LDR      R2,??DataTable154  ;; DecHf0
   \   00000084   0410A0E3           MOV      R1,#+4
   1099            BytePlace&=0xff;
   1100            if (StMode)
   \                     ??HuffDecode_2:
   \   00000088   ........           LDR      R8,??DataTable182  ;; StMode
   \   0000008C   ........           LDR      R7,??DataTable171  ;; NumHuf
   \   00000090   ........           BL       DecodeNum
   \   00000094   FF6000E2           AND      R6,R0,#0xFF
   \   00000098   000098E5           LDR      R0,[R8, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   2400000A           BEQ      ??HuffDecode_7
   1101            {
   1102              if (BytePlace==0 && BitField > 0xfff)
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0100001A           BNE      ??HuffDecode_8
   \   000000AC   400D5BE3           CMP      R11,#+4096
   1103                BytePlace=0x100;
   \   000000B0   406FA0A3           MOVGE    R6,#+256
   1104              if (--BytePlace==-1)
   \                     ??HuffDecode_8:
   \   000000B4   016046E2           SUB      R6,R6,#+1
   \   000000B8   010076E3           CMN      R6,#+1
   \   000000BC   2700001A           BNE      ??HuffDecode_9
   1105              {
   1106                BitField=getbits();
   \   000000C0   ........           BL       getbits
   \   000000C4   00B0A0E1           MOV      R11,R0
   1107                addbits(1);
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   ........           BL       addbits
   1108                if (BitField & 0x8000)
   \   000000D0   800C1BE3           TST      R11,#0x8000
   \   000000D4   0300000A           BEQ      ??HuffDecode_10
   1109                {
   1110                  NumHuf=StMode=0;
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   000088E5           STR      R0,[R8, #+0]
   \   000000E0   000087E5           STR      R0,[R7, #+0]
   1111                  return;
   \   000000E4   F18FBDE8           POP      {R0,R4-R11,PC}
   1112                }
   1113                else
   1114                {
   1115                  Length = (BitField & 0x4000) ? 4 : 3;
   \                     ??HuffDecode_10:
   \   000000E8   400C1BE3           TST      R11,#0x4000
   \   000000EC   0460A013           MOVNE    R6,#+4
   \   000000F0   0360A003           MOVEQ    R6,#+3
   1116                  addbits(1);
   \   000000F4   0100A0E3           MOV      R0,#+1
   \   000000F8   ........           BL       addbits
   1117                  Distance=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2);
   \   000000FC   ........           BL       getbits
   \   00000100   0530A0E1           MOV      R3,R5
   \   00000104   0420A0E1           MOV      R2,R4
   \   00000108   0510A0E3           MOV      R1,#+5
   \   0000010C   ........           BL       DecodeNum
   \   00000110   0040A0E1           MOV      R4,R0
   1118                  Distance = (Distance << 5) | (getbits() >> 11);
   \   00000114   ........           BL       getbits
   \   00000118   C005A0E1           ASR      R0,R0,#+11
   \   0000011C   844280E1           ORR      R4,R0,R4, LSL #+5
   1119                  addbits(5);
   \   00000120   0500A0E3           MOV      R0,#+5
   \   00000124   ........           BL       addbits
   1120                  OldCopyString(Distance,Length);
   \   00000128   0610A0E1           MOV      R1,R6
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           BL       OldCopyString
   1121                  return;
   \   00000134   F18FBDE8           POP      {R0,R4-R11,PC}
   1122                }
   1123              }
   1124            }
   1125            else
   1126              if (NumHuf++ >= 16 && FlagsCnt==0)
   \                     ??HuffDecode_7:
   \   00000138   000097E5           LDR      R0,[R7, #+0]
   \   0000013C   011080E2           ADD      R1,R0,#+1
   \   00000140   001087E5           STR      R1,[R7, #+0]
   \   00000144   100050E3           CMP      R0,#+16
   \   00000148   040000BA           BLT      ??HuffDecode_9
   \   0000014C   ........           LDR      R0,??DataTable180  ;; FlagsCnt
   \   00000150   000090E5           LDR      R0,[R0, #+0]
   \   00000154   000050E3           CMP      R0,#+0
   1127                StMode=1;
   \   00000158   0100A003           MOVEQ    R0,#+1
   \   0000015C   00008805           STREQ    R0,[R8, #+0]
   1128            AvrPlc += BytePlace;
   \                     ??HuffDecode_9:
   \   00000160   0A0086E0           ADD      R0,R6,R10
   \   00000164   000089E5           STR      R0,[R9, #+0]
   1129            AvrPlc -= AvrPlc >> 8;
   \   00000168   400440E0           SUB      R0,R0,R0, ASR #+8
   \   0000016C   000089E5           STR      R0,[R9, #+0]
   1130            Nhfb+=16;
   \   00000170   ........           LDR      R0,??DataTable179  ;; Nhfb
   \   00000174   001090E5           LDR      R1,[R0, #+0]
   \   00000178   101081E2           ADD      R1,R1,#+16
   \   0000017C   001080E5           STR      R1,[R0, #+0]
   1131            if (Nhfb > 0xff)
   \   00000180   400F51E3           CMP      R1,#+256
   \   00000184   050000BA           BLT      ??HuffDecode_11
   1132            {
   1133              Nhfb=0x90;
   \   00000188   9010A0E3           MOV      R1,#+144
   \   0000018C   001080E5           STR      R1,[R0, #+0]
   1134              Nlzb >>= 1;
   \   00000190   ........           LDR      R0,??DataTable178  ;; Nlzb
   \   00000194   001090E5           LDR      R1,[R0, #+0]
   \   00000198   C110A0E1           ASR      R1,R1,#+1
   \   0000019C   001080E5           STR      R1,[R0, #+0]
   1135            }
   1136          
   1137            Window[UnpPtr++]=(ChSet[BytePlace]>>8);
   \                     ??HuffDecode_11:
   \   000001A0   ........           LDR      R0,??DataTable201  ;; UnpPtr
   \   000001A4   ........           LDR      R4,??DataTable185  ;; ChSet
   \   000001A8   ........           LDR      R2,??DataTable210  ;; Window
   \   000001AC   001090E5           LDR      R1,[R0, #+0]
   \   000001B0   002092E5           LDR      R2,[R2, #+0]
   \   000001B4   063194E7           LDR      R3,[R4, +R6, LSL #+2]
   1138            --DestUnpSize;
   \   000001B8   ........           LDR      R5,??DataTable191  ;; NToPl
   \   000001BC   4334A0E1           ASR      R3,R3,#+8
   \   000001C0   0230C1E7           STRB     R3,[R1, +R2]
   \   000001C4   001090E5           LDR      R1,[R0, #+0]
   \   000001C8   011081E2           ADD      R1,R1,#+1
   \   000001CC   001080E5           STR      R1,[R0, #+0]
   \   000001D0   ........           LDR      R0,??DataTable200  ;; DestUnpSize
   \   000001D4   001090E5           LDR      R1,[R0, #+0]
   \   000001D8   011041E2           SUB      R1,R1,#+1
   \   000001DC   001080E5           STR      R1,[R0, #+0]
   \   000001E0   00009DE5           LDR      R0,[SP, #+0]
   \   000001E4   FF0000E2           AND      R0,R0,#0xFF
   \   000001E8   007185E0           ADD      R7,R5,R0, LSL #+2
   \   000001EC   020000EA           B        ??HuffDecode_12
   1139          
   1140            while (1)
   1141            {
   1142              CurByte=ChSet[BytePlace];
   1143              NewBytePlace=NToPl[CurByte++ & 0xff]++;
   1144              if ((CurByte & 0xff) > 0xa1)
   1145                CorrHuff(ChSet,NToPl);
   \                     ??HuffDecode_13:
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           BL       CorrHuff
   \                     ??HuffDecode_12:
   \   000001FC   060194E7           LDR      R0,[R4, +R6, LSL #+2]
   \   00000200   002097E5           LDR      R2,[R7, #+0]
   \   00000204   FF1000E2           AND      R1,R0,#0xFF
   \   00000208   011195E7           LDR      R1,[R5, +R1, LSL #+2]
   \   0000020C   010080E2           ADD      R0,R0,#+1
   \   00000210   012082E2           ADD      R2,R2,#+1
   \   00000214   002087E5           STR      R2,[R7, #+0]
   \   00000218   FF2000E2           AND      R2,R0,#0xFF
   \   0000021C   A20052E3           CMP      R2,#+162
   \   00000220   F2FFFFAA           BGE      ??HuffDecode_13
   1146              else
   1147                break;
   1148            }
   1149          
   1150            ChSet[BytePlace]=ChSet[NewBytePlace];
   \   00000224   012194E7           LDR      R2,[R4, +R1, LSL #+2]
   \   00000228   062184E7           STR      R2,[R4, +R6, LSL #+2]
   1151            ChSet[NewBytePlace]=CurByte;
   \   0000022C   010184E7           STR      R0,[R4, +R1, LSL #+2]
   1152          }
   \   00000230   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
   \                     ??HuffDecode_1:
   \   00000234   ........           DC32     PosHf4
   \   00000238   ........           DC32     DecHf4
   \   0000023C   ........           DC32     PosHf3
   \   00000240   ........           DC32     DecHf3
   1153          
   1154          

   \                                 In segment CODE, align 4, keep-with-next
   1155          void GetFlagsBuf()
   1156          {
   \                     GetFlagsBuf:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1157            int Flags,NewFlagsPlace;
   1158            int FlagsPlace=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2);
   \   00000004   ........           LDR      R5,??DataTable192  ;; NToPlC
   \   00000008   ........           LDR      R7,??DataTable181  ;; FlagBuf
   \   0000000C   ........           LDR      R8,??DataTable189  ;; ChSetC
   \   00000010   ........           BL       getbits
   \   00000014   ........           LDR      R3,??DataTable168  ;; PosHf2
   \   00000018   ........           LDR      R2,??DataTable169  ;; DecHf2
   \   0000001C   0510A0E3           MOV      R1,#+5
   \   00000020   ........           BL       DecodeNum
   \   00000024   0040A0E1           MOV      R4,R0
   \   00000028   FF0006E2           AND      R0,R6,#0xFF
   \   0000002C   006185E0           ADD      R6,R5,R0, LSL #+2
   \   00000030   020000EA           B        ??GetFlagsBuf_0
   1159          
   1160            while (1)
   1161            {
   1162              Flags=ChSetC[FlagsPlace];
   1163              FlagBuf=Flags>>8;
   1164              NewFlagsPlace=NToPlC[Flags++ & 0xff]++;
   1165              if ((Flags & 0xff) != 0)
   1166                break;
   1167              CorrHuff(ChSetC,NToPlC);
   \                     ??GetFlagsBuf_1:
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           BL       CorrHuff
   \                     ??GetFlagsBuf_0:
   \   00000040   040198E7           LDR      R0,[R8, +R4, LSL #+2]
   \   00000044   4014A0E1           ASR      R1,R0,#+8
   \   00000048   001087E5           STR      R1,[R7, #+0]
   \   0000004C   002096E5           LDR      R2,[R6, #+0]
   \   00000050   FF1000E2           AND      R1,R0,#0xFF
   \   00000054   011195E7           LDR      R1,[R5, +R1, LSL #+2]
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   012082E2           ADD      R2,R2,#+1
   \   00000060   002086E5           STR      R2,[R6, #+0]
   \   00000064   002CB0E1           LSLS     R2,R0,#+24
   \   00000068   F1FFFF0A           BEQ      ??GetFlagsBuf_1
   1168            }
   1169          
   1170            ChSetC[FlagsPlace]=ChSetC[NewFlagsPlace];
   \   0000006C   012198E7           LDR      R2,[R8, +R1, LSL #+2]
   \   00000070   042188E7           STR      R2,[R8, +R4, LSL #+2]
   1171            ChSetC[NewFlagsPlace]=Flags;
   \   00000074   010188E7           STR      R0,[R8, +R1, LSL #+2]
   1172          }
   \   00000078   F081BDE8           POP      {R4-R8,PC}       ;; return
   1173          
   1174          

   \                                 In segment CODE, align 4, keep-with-next
   1175          void OldUnpInitData(int Solid)
   1176          {
   1177            if (!Solid)
   \                     OldUnpInitData:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   1700001A           BNE      ??OldUnpInitData_0
   1178            {
   1179              AvrPlcB=AvrLn1=AvrLn2=AvrLn3=NumHuf=Buf60=0;
   \   0000000C   ........           LDR      R0,??DataTable170  ;; Buf60
   1180              AvrPlc=0x3500;
   \   00000010   D42DA0E3           MOV      R2,#+13568
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   ........           LDR      R0,??DataTable171  ;; NumHuf
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable172  ;; AvrLn3
   \   00000024   001080E5           STR      R1,[R0, #+0]
   \   00000028   ........           LDR      R0,??DataTable173  ;; AvrLn2
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable174  ;; AvrLn1
   \   00000034   001080E5           STR      R1,[R0, #+0]
   \   00000038   ........           LDR      R0,??DataTable175  ;; AvrPlcB
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   \   00000040   ........           LDR      R0,??DataTable176  ;; AvrPlc
   \   00000044   002080E5           STR      R2,[R0, #+0]
   1181              MaxDist3=0x2001;
   \   00000048   ........           LDR      R0,??DataTable177  ;; MaxDist3
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   802D82E3           ORR      R2,R2,#0x2000
   \   00000054   002080E5           STR      R2,[R0, #+0]
   1182              Nhfb=Nlzb=0x80;
   \   00000058   ........           LDR      R2,??DataTable178  ;; Nlzb
   \   0000005C   8000A0E3           MOV      R0,#+128
   \   00000060   000082E5           STR      R0,[R2, #+0]
   \   00000064   ........           LDR      R2,??DataTable179  ;; Nhfb
   \   00000068   000082E5           STR      R0,[R2, #+0]
   1183            }
   1184            FlagsCnt=0;
   \                     ??OldUnpInitData_0:
   \   0000006C   ........           LDR      R0,??DataTable180  ;; FlagsCnt
   \   00000070   001080E5           STR      R1,[R0, #+0]
   1185            FlagBuf=0;
   \   00000074   ........           LDR      R0,??DataTable181  ;; FlagBuf
   \   00000078   001080E5           STR      R1,[R0, #+0]
   1186            StMode=0;
   \   0000007C   ........           LDR      R0,??DataTable182  ;; StMode
   \   00000080   001080E5           STR      R1,[R0, #+0]
   1187            LCount=0;
   \   00000084   ........           LDR      R0,??DataTable183  ;; LCount
   \   00000088   001080E5           STR      R1,[R0, #+0]
   1188            ReadTop=0;
   \   0000008C   ........           LDR      R0,??DataTable232  ;; ReadTop
   \   00000090   001080E5           STR      R1,[R0, #+0]
   1189          }
   \   00000094   1EFF2FE1           BX       LR               ;; return
   1190          
   1191          

   \                                 In segment CODE, align 4, keep-with-next
   1192          void InitHuff()
   1193          {
   1194            for (int I=0;I<256;I++)
   \                     InitHuff:
   \   00000000   ........           LDR      R3,??DataTable185  ;; ChSet
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   ........           LDR      R4,??DataTable186  ;; ChSetB
   \   0000000C   0000A0E3           MOV      R0,#+0
   1195            {
   1196              Place[I]=PlaceA[I]=PlaceB[I]=I;
   \                     ??InitHuff_0:
   \   00000010   94109FE5           LDR      R1,??InitHuff_1  ;; PlaceB
   1197              PlaceC[I]=(~I+1) & 0xff;
   \   00000014   94209FE5           LDR      R2,??InitHuff_1+0x4  ;; PlaceC
   \   00000018   000181E7           STR      R0,[R1, +R0, LSL #+2]
   \   0000001C   ........           LDR      R1,??DataTable187  ;; PlaceA
   \   00000020   000181E7           STR      R0,[R1, +R0, LSL #+2]
   \   00000024   88109FE5           LDR      R1,??InitHuff_1+0x8  ;; Place
   \   00000028   000181E7           STR      R0,[R1, +R0, LSL #+2]
   \   0000002C   0010E0E1           MVN      R1,R0
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   FF1001E2           AND      R1,R1,#0xFF
   \   00000038   001182E7           STR      R1,[R2, +R0, LSL #+2]
   1198              ChSet[I]=ChSetB[I]=I<<8;
   \   0000003C   0024A0E1           LSL      R2,R0,#+8
   \   00000040   002184E7           STR      R2,[R4, +R0, LSL #+2]
   \   00000044   002183E7           STR      R2,[R3, +R0, LSL #+2]
   1199              ChSetA[I]=I;
   \   00000048   ........           LDR      R2,??DataTable188  ;; ChSetA
   1200              ChSetC[I]=((~I+1) & 0xff)<<8;
   \   0000004C   0114A0E1           LSL      R1,R1,#+8
   \   00000050   000182E7           STR      R0,[R2, +R0, LSL #+2]
   \   00000054   ........           LDR      R2,??DataTable189  ;; ChSetC
   \   00000058   001182E7           STR      R1,[R2, +R0, LSL #+2]
   1201            }
   \   0000005C   010080E2           ADD      R0,R0,#+1
   \   00000060   400F50E3           CMP      R0,#+256
   \   00000064   E9FFFFBA           BLT      ??InitHuff_0
   1202            memset(NToPl,0,sizeof(NToPl));
   1203            memset(NToPlB,0,sizeof(NToPlB));
   \   00000068   ........           LDR      R5,??DataTable190  ;; NToPlB
   \   0000006C   ........           LDR      R0,??DataTable191  ;; NToPl
   \   00000070   402EA0E3           MOV      R2,#+1024
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   ........           _BLF     memset,??memset??rA
   \   0000007C   402EA0E3           MOV      R2,#+1024
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           _BLF     memset,??memset??rA
   1204            memset(NToPlC,0,sizeof(NToPlC));
   \   0000008C   ........           LDR      R0,??DataTable192  ;; NToPlC
   \   00000090   402EA0E3           MOV      R2,#+1024
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   ........           _BLF     memset,??memset??rA
   1205            CorrHuff(ChSetB,NToPlB);
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       CorrHuff
   1206          }
   \   000000A8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??InitHuff_1:
   \   000000AC   ........           DC32     PlaceB
   \   000000B0   ........           DC32     PlaceC
   \   000000B4   ........           DC32     Place
   1207          
   1208          

   \                                 In segment CODE, align 4, keep-with-next
   1209          void CorrHuff(int *CharSet,int *NumToPlace)
   1210          {
   \                     CorrHuff:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   1211            int I,J;
   1212            for (I=7;I>=0;I--)
   \   00000008   0710A0E3           MOV      R1,#+7
   1213              for (J=0;J<32;J++,CharSet++)
   \                     ??CorrHuff_0:
   \   0000000C   0020A0E3           MOV      R2,#+0
   1214                *CharSet=(*CharSet & ~0xff) | I;
   \                     ??CorrHuff_1:
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   012082E2           ADD      R2,R2,#+1
   \   00000018   FF30C3E3           BIC      R3,R3,#0xFF
   \   0000001C   033081E1           ORR      R3,R1,R3
   \   00000020   ........           STR      R3,[R0], #+4
   \   00000024   200052E3           CMP      R2,#+32
   \   00000028   F8FFFFBA           BLT      ??CorrHuff_1
   \   0000002C   011051E2           SUBS     R1,R1,#+1
   \   00000030   F5FFFF5A           BPL      ??CorrHuff_0
   1215            memset(NumToPlace,0,sizeof(NToPl));
   \   00000034   402EA0E3           MOV      R2,#+1024
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     memset,??memset??rA
   1216            for (I=6;I>=0;I--)
   \   00000044   0600A0E3           MOV      R0,#+6
   1217              NumToPlace[I]=(7-I)*32;
   \                     ??CorrHuff_2:
   \   00000048   071060E2           RSB      R1,R0,#+7
   \   0000004C   8112A0E1           LSL      R1,R1,#+5
   \   00000050   001184E7           STR      R1,[R4, +R0, LSL #+2]
   \   00000054   010050E2           SUBS     R0,R0,#+1
   \   00000058   FAFFFF5A           BPL      ??CorrHuff_2
   1218          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   1219          
   1220          

   \                                 In segment CODE, align 4, keep-with-next
   1221          void OldCopyString(int Distance,int Length)
   1222          {
   1223            DestUnpSize-=Length;
   \                     OldCopyString:
   \   00000000   ........           LDR      R2,??DataTable200  ;; DestUnpSize
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   003092E5           LDR      R3,[R2, #+0]
   \   0000000C   013043E0           SUB      R3,R3,R1
   \   00000010   0B0000EA           B        ??OldCopyString_0
   1224            while (Length--)
   1225            {
   1226              Window[UnpPtr]=Window[(UnpPtr-Distance) & MAXWINMASK];
   \                     ??OldCopyString_1:
   \   00000014   ........           LDR      R2,??DataTable201  ;; UnpPtr
   \   00000018   ........           LDR      R4,??DataTable210  ;; Window
   \   0000001C   003092E5           LDR      R3,[R2, #+0]
   \   00000020   00C094E5           LDR      R12,[R4, #+0]
   \   00000024   F044E0E3           MVN      R4,#-268435456
   \   00000028   005043E0           SUB      R5,R3,R0
   \   0000002C   055004E0           AND      R5,R4,R5
   \   00000030   DC5095E1           LDRSB    R5,[R5, +R12]
   \   00000034   0C50C3E7           STRB     R5,[R3, +R12]
   1227              UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   00000038   003092E5           LDR      R3,[R2, #+0]
   \   0000003C   013083E2           ADD      R3,R3,#+1
   \   00000040   033004E0           AND      R3,R4,R3
   \                     ??OldCopyString_0:
   \   00000044   003082E5           STR      R3,[R2, #+0]
   1228            }
   \   00000048   0120A0E1           MOV      R2,R1
   \   0000004C   011042E2           SUB      R1,R2,#+1
   \   00000050   000052E3           CMP      R2,#+0
   \   00000054   EEFFFF1A           BNE      ??OldCopyString_1
   1229          }
   \   00000058   3000BDE8           POP      {R4,R5}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
   1230          
   1231          

   \                                 In segment CODE, align 4, keep-with-next
   1232          int DecodeNum(int Num,int StartPos,
   1233                                         int *DecTab,int *PosTab)
   1234          {
   \                     DecodeNum:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0270A0E1           MOV      R7,R2
   1235            int I;
   1236            for (Num&=0xfff0,I=0;DecTab[I]<=Num;I++)
   \   0000000C   F010A0E3           MOV      R1,#+240
   \   00000010   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000014   006001E0           AND      R6,R1,R0
   \   00000018   000097E5           LDR      R0,[R7, #+0]
   \   0000001C   0340A0E1           MOV      R4,R3
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   000056E1           CMP      R6,R0
   \   00000028   020000AA           BGE      ??DecodeNum_0
   \   0000002C   040000EA           B        ??DecodeNum_1
   1237              StartPos++;
   \                     ??DecodeNum_2:
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   018088E2           ADD      R8,R8,#+1
   \                     ??DecodeNum_0:
   \   00000038   080197E7           LDR      R0,[R7, +R8, LSL #+2]
   \   0000003C   000056E1           CMP      R6,R0
   \   00000040   FAFFFFAA           BGE      ??DecodeNum_2
   1238            addbits(StartPos);
   \                     ??DecodeNum_1:
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       addbits
   1239            return(((Num-(I ? DecTab[I-1]:0))>>(16-StartPos))+PosTab[StartPos]);
   \   0000004C   052194E7           LDR      R2,[R4, +R5, LSL #+2]
   \   00000050   000058E3           CMP      R8,#+0
   \   00000054   08018710           ADDNE    R0,R7,R8, LSL #+2
   \   00000058   04001015           LDRNE    R0,[R0, #-4]
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0000A003           MOVEQ    R0,#+0
   \   00000064   000046E0           SUB      R0,R6,R0
   \   00000068   101061E2           RSB      R1,R1,#+16
   \   0000006C   500182E0           ADD      R0,R2,R0, ASR R1
   \   00000070   F081BDE8           POP      {R4-R8,PC}       ;; return
   1240          }
   1241          
   1242          
   1243          
   1244          ///////////unpack20
   1245          

   \                                 In segment CODE, align 4, keep-with-next
   1246          void CopyString20(int Length,int Distance)
   1247          {
   1248            LastDist=OldDist[OldDistPtr++ & 3]=Distance;
   \                     CopyString20:
   \   00000000   ........           LDR      R2,??DataTable220  ;; OldDistPtr
   \   00000004   ........           LDR      R12,??DataTable221  ;; OldDist
   \   00000008   70002DE9           PUSH     {R4-R6}
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   034003E2           AND      R4,R3,#0x3
   \   00000014   04118CE7           STR      R1,[R12, +R4, LSL #+2]
   \   00000018   013083E2           ADD      R3,R3,#+1
   \   0000001C   003082E5           STR      R3,[R2, #+0]
   \   00000020   ........           LDR      R2,??DataTable218  ;; LastDist
   1249            LastLength=Length;
   1250            DestUnpSize-=Length;
   1251          
   1252            int DestPtr=UnpPtr-Distance;
   1253            if (DestPtr<MAXWINSIZE-300 && UnpPtr<MAXWINSIZE-300)
   \   00000024   2B40E0E3           MVN      R4,#+43
   \   00000028   001082E5           STR      R1,[R2, #+0]
   \   0000002C   ........           LDR      R2,??DataTable219  ;; LastLength
   \   00000030   404FC4E3           BIC      R4,R4,#0x100
   \   00000034   000082E5           STR      R0,[R2, #+0]
   \   00000038   ........           LDR      R2,??DataTable200  ;; DestUnpSize
   \   0000003C   003092E5           LDR      R3,[R2, #+0]
   \   00000040   003043E0           SUB      R3,R3,R0
   \   00000044   003082E5           STR      R3,[R2, #+0]
   \   00000048   ........           LDR      R2,??DataTable201  ;; UnpPtr
   \   0000004C   ........           LDR      R3,??DataTable245  ;; MAXWINSIZE
   \   00000050   00C092E5           LDR      R12,[R2, #+0]
   \   00000054   003093E5           LDR      R3,[R3, #+0]
   \   00000058   01104CE0           SUB      R1,R12,R1
   \   0000005C   034084E0           ADD      R4,R4,R3
   \   00000060   ........           LDR      R3,??DataTable210  ;; Window
   \   00000064   040051E1           CMP      R1,R4
   \   00000068   04005CB1           CMPLT    R12,R4
   \   0000006C   260000AA           BGE      ??CopyString20_0
   1254            {
   1255              Window[UnpPtr++]=Window[DestPtr++];
   \   00000070   004093E5           LDR      R4,[R3, #+0]
   1256              Window[UnpPtr++]=Window[DestPtr++];
   \   00000074   030050E3           CMP      R0,#+3
   \   00000078   D45091E1           LDRSB    R5,[R1, +R4]
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   0450CCE7           STRB     R5,[R12, +R4]
   \   00000084   004092E5           LDR      R4,[R2, #+0]
   \   00000088   00C093E5           LDR      R12,[R3, #+0]
   \   0000008C   014084E2           ADD      R4,R4,#+1
   \   00000090   004082E5           STR      R4,[R2, #+0]
   \   00000094   DC5091E1           LDRSB    R5,[R1, +R12]
   \   00000098   011081E2           ADD      R1,R1,#+1
   \   0000009C   0C50C4E7           STRB     R5,[R4, +R12]
   \   000000A0   004092E5           LDR      R4,[R2, #+0]
   \   000000A4   014084E2           ADD      R4,R4,#+1
   \   000000A8   004082E5           STR      R4,[R2, #+0]
   \   000000AC   1A0000BA           BLT      ??CopyString20_1
   1257              while (Length>2)
   1258              {
   1259                Length--;
   1260                Window[UnpPtr++]=Window[DestPtr++];
   \                     ??CopyString20_2:
   \   000000B0   004093E5           LDR      R4,[R3, #+0]
   \   000000B4   005092E5           LDR      R5,[R2, #+0]
   \   000000B8   D4C091E1           LDRSB    R12,[R1, +R4]
   \   000000BC   010040E2           SUB      R0,R0,#+1
   \   000000C0   011081E2           ADD      R1,R1,#+1
   \   000000C4   04C0C5E7           STRB     R12,[R5, +R4]
   \   000000C8   004092E5           LDR      R4,[R2, #+0]
   1261              }
   \   000000CC   030050E3           CMP      R0,#+3
   \   000000D0   014084E2           ADD      R4,R4,#+1
   \   000000D4   004082E5           STR      R4,[R2, #+0]
   \   000000D8   0F0000BA           BLT      ??CopyString20_1
   \   000000DC   F3FFFFEA           B        ??CopyString20_2
   1262            }
   1263            else
   1264              while (Length--)
   1265              {
   1266                Window[UnpPtr]=Window[DestPtr++ & MAXWINMASK];
   \                     ??CopyString20_3:
   \   000000E0   004093E5           LDR      R4,[R3, #+0]
   \   000000E4   005092E5           LDR      R5,[R2, #+0]
   \   000000E8   F0C4E0E3           MVN      R12,#-268435456
   \   000000EC   01600CE0           AND      R6,R12,R1
   \   000000F0   D46096E1           LDRSB    R6,[R6, +R4]
   \   000000F4   011081E2           ADD      R1,R1,#+1
   \   000000F8   0460C5E7           STRB     R6,[R5, +R4]
   1267                UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   000000FC   004092E5           LDR      R4,[R2, #+0]
   \   00000100   014084E2           ADD      R4,R4,#+1
   \   00000104   04400CE0           AND      R4,R12,R4
   \   00000108   004082E5           STR      R4,[R2, #+0]
   1268              }
   \                     ??CopyString20_0:
   \   0000010C   0040A0E1           MOV      R4,R0
   \   00000110   010044E2           SUB      R0,R4,#+1
   \   00000114   000054E3           CMP      R4,#+0
   \   00000118   F0FFFF1A           BNE      ??CopyString20_3
   1269          }
   \                     ??CopyString20_1:
   \   0000011C   7000BDE8           POP      {R4-R6}
   \   00000120   1EFF2FE1           BX       LR               ;; return
   1270          
   1271          

   \                                 In segment CODE, align 4, keep-with-next
   1272          void Unpack20(bool Solid)
   1273          {
   \                     Unpack20:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1274            int Bits;
   1275          
   1276            if (Suspended)
   \   00000004   ........           LDR      R7,??DataTable204  ;; Suspended
   \   00000008   ........           LDR      R6,??DataTable205  ;; WrPtr
   \   0000000C   ........           LDR      R4,??DataTable244  ;; DestUnpSize
   \   00000010   ........           LDR      R5,??DataTable207  ;; UnpPtr
   \   00000014   0080A0E1           MOV      R8,R0
   \   00000018   000097E5           LDR      R0,[R7, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   1277              UnpPtr=WrPtr;
   \   00000020   00009615           LDRNE    R0,[R6, #+0]
   \   00000024   00008515           STRNE    R0,[R5, #+0]
   \   00000028   1100001A           BNE      ??Unpack20_0
   1278            else
   1279            {
   1280              UnpInitData(Solid);
   \   0000002C   0800A0E1           MOV      R0,R8
   \   00000030   ........           BL       UnpInitData
   1281              if (!UnpReadBuf())
   \   00000034   ........           BL       UnpReadBuf
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F087BD08           POPEQ    {R4-R10,PC}
   1282                return;
   1283              if (!Solid)
   \   00000040   000058E3           CMP      R8,#+0
   \   00000044   0700001A           BNE      ??Unpack20_1
   1284                if (!ReadTables20())
   \   00000048   ........           BL       ReadTables20
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F087BD08           POPEQ    {R4-R10,PC}
   1285                  return;
   1286              --DestUnpSize;
   \   00000054   030000EA           B        ??Unpack20_1
   1287            }
   1288          
   1289            while (DestUnpSize>=0)
   1290            {
   1291              UnpPtr&=MAXWINMASK;
   1292          
   1293              if (InAddr>ReadTop-30)
   1294                if (!UnpReadBuf())
   1295                  break;
   1296              if (((WrPtr-UnpPtr) & MAXWINMASK)<270 && WrPtr!=UnpPtr)
   1297              {
   1298                OldUnpWriteBuf();
   1299                if (Suspended)
   1300                  return;
   1301              }
   1302              if (UnpAudioBlock)
   1303              {
   1304                int AudioNumber=DecodeNumber(9+UnpCurChannel);
   1305          
   1306                if (AudioNumber==256)
   1307                {
   1308                  if (!ReadTables20())
   1309                    break;
   1310                  continue;
   1311                }
   1312                Window[UnpPtr++]=DecodeAudio(AudioNumber);
   1313                if (++UnpCurChannel==UnpChannels)
   1314                  UnpCurChannel=0;
   1315                --DestUnpSize;
   1316                continue;
   1317              }
   1318          
   1319              int Number=DecodeNumber(5);
   1320              if (Number<256)
   1321              {
   1322                Window[UnpPtr++]=Number;
   \                     ??Unpack20_2:
   \   00000058   0000C8E5           STRB     R0,[R8, #+0]
   \   0000005C   000095E5           LDR      R0,[R5, #+0]
   \   00000060   010080E2           ADD      R0,R0,#+1
   \   00000064   000085E5           STR      R0,[R5, #+0]
   1323                --DestUnpSize;
   \                     ??Unpack20_1:
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   000084E5           STR      R0,[R4, #+0]
   1324                continue;
   1325              }
   \                     ??Unpack20_0:
   \   00000074   000094E5           LDR      R0,[R4, #+0]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   2B00004A           BMI      ??Unpack20_3
   \   00000080   000095E5           LDR      R0,[R5, #+0]
   \   00000084   ........           LDR      R1,??DataTable233  ;; InAddr
   \   00000088   F084E0E3           MVN      R8,#-268435456
   \   0000008C   001091E5           LDR      R1,[R1, #+0]
   \   00000090   000008E0           AND      R0,R8,R0
   \   00000094   000085E5           STR      R0,[R5, #+0]
   \   00000098   ........           LDR      R0,??DataTable232  ;; ReadTop
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   1E0040E2           SUB      R0,R0,#+30
   \   000000A4   010050E1           CMP      R0,R1
   \   000000A8   020000AA           BGE      ??Unpack20_4
   \   000000AC   ........           BL       UnpReadBuf
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   1D00000A           BEQ      ??Unpack20_3
   \                     ??Unpack20_4:
   \   000000B8   00A095E5           LDR      R10,[R5, #+0]
   \   000000BC   000096E5           LDR      R0,[R6, #+0]
   \   000000C0   0E90A0E3           MOV      R9,#+14
   \   000000C4   409F89E3           ORR      R9,R9,#0x100
   \   000000C8   0A1040E0           SUB      R1,R0,R10
   \   000000CC   011008E0           AND      R1,R8,R1
   \   000000D0   090051E1           CMP      R1,R9
   \   000000D4   050000AA           BGE      ??Unpack20_5
   \   000000D8   0A0050E1           CMP      R0,R10
   \   000000DC   0300000A           BEQ      ??Unpack20_5
   \   000000E0   ........           BL       OldUnpWriteBuf
   \   000000E4   000097E5           LDR      R0,[R7, #+0]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   F087BD18           POPNE    {R4-R10,PC}
   \                     ??Unpack20_5:
   \   000000F0   ........           LDR      R0,??DataTable210  ;; Window
   \   000000F4   000090E5           LDR      R0,[R0, #+0]
   \   000000F8   00808AE0           ADD      R8,R10,R0
   \   000000FC   ........           LDR      R0,??DataTable234  ;; UnpAudioBlock
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   1900000A           BEQ      ??Unpack20_6
   \   0000010C   ........           LDR      R9,??DataTable242  ;; UnpCurChannel
   \   00000110   000099E5           LDR      R0,[R9, #+0]
   \   00000114   090080E2           ADD      R0,R0,#+9
   \   00000118   ........           BL       DecodeNumber
   \   0000011C   400F50E3           CMP      R0,#+256
   \   00000120   0500001A           BNE      ??Unpack20_7
   \   00000124   ........           BL       ReadTables20
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   D0FFFF1A           BNE      ??Unpack20_0
   1326              if (Number>269)
   1327              {
   1328                int Length=(LDecode[Number-=270]&0xff)+3;
   1329                if ((Bits=(LBits[Number]&0xff))>0)
   1330                {
   1331                  Length+=getbits()>>(16-Bits);
   1332                  addbits(Bits);
   1333                }
   1334          
   1335                int DistNumber=DecodeNumber(6);
   1336                int Distance=DDecode[DistNumber]+1;
   1337                if ((Bits=(DBits[DistNumber]&0xff))>0)
   1338                {
   1339                  Distance+=getbits()>>(16-Bits);
   1340                  addbits(Bits);
   1341                }
   1342          
   1343                if (Distance>=0x2000)
   1344                {
   1345                  Length++;
   1346                  if (Distance>=0x40000L)
   1347                    Length++;
   1348                }
   1349          
   1350                CopyString20(Length,Distance);
   1351                continue;
   1352              }
   1353              if (Number==269)
   1354              {
   1355                if (!ReadTables20())
   1356                  break;
   1357                continue;
   1358              }
   1359              if (Number==256)
   1360              {
   1361                CopyString20(LastLength,LastDist);
   1362                continue;
   1363              }
   1364              if (Number<261)
   1365              {
   1366                int Distance=OldDist[(OldDistPtr-(Number-256)) & 3];
   1367                int LengthNumber=DecodeNumber(7);
   1368                int Length=(LDecode[LengthNumber]&0xff)+2;
   1369                if ((Bits=(LBits[LengthNumber]&0xff))>0)
   1370                {
   1371                  Length+=getbits()>>(16-Bits);
   1372                  addbits(Bits);
   1373                }
   1374                if (Distance>=0x101)
   1375                {
   1376                  Length++;
   1377                  if (Distance>=0x2000)
   1378                  {
   1379                    Length++;
   1380                    if (Distance>=0x40000)
   1381                      Length++;
   1382                  }
   1383                }
   1384                CopyString20(Length,Distance);
   1385                continue;
   1386              }
   1387              if (Number<270)
   1388              {
   1389                int Distance=(SDDecode[Number-=261]&0xff)+1;
   1390                if ((Bits=(SDBits[Number]&0xff))>0)
   1391                {
   1392                  Distance+=getbits()>>(16-Bits);
   1393                  addbits(Bits);
   1394                }
   1395                CopyString20(2,Distance);
   1396                continue;
   1397             }
   1398            }
   1399            ReadLastTables();
   \                     ??Unpack20_3:
   \   00000130   ........           BL       ReadLastTables
   1400            OldUnpWriteBuf();
   \   00000134   ........           BL       OldUnpWriteBuf
   1401          }
   \   00000138   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??Unpack20_7:
   \   0000013C   01108AE2           ADD      R1,R10,#+1
   \   00000140   001085E5           STR      R1,[R5, #+0]
   \   00000144   ........           BL       DecodeAudio
   \   00000148   ........           LDR      R1,??DataTable238  ;; UnpChannels
   \   0000014C   0000C8E5           STRB     R0,[R8, #+0]
   \   00000150   000099E5           LDR      R0,[R9, #+0]
   \   00000154   001091E5           LDR      R1,[R1, #+0]
   \   00000158   010080E2           ADD      R0,R0,#+1
   \   0000015C   000089E5           STR      R0,[R9, #+0]
   \   00000160   010050E1           CMP      R0,R1
   \   00000164   BFFFFF1A           BNE      ??Unpack20_1
   \   00000168   0000A0E3           MOV      R0,#+0
   \   0000016C   000089E5           STR      R0,[R9, #+0]
   \   00000170   BCFFFFEA           B        ??Unpack20_1
   \                     ??Unpack20_6:
   \   00000174   0500A0E3           MOV      R0,#+5
   \   00000178   ........           BL       DecodeNumber
   \   0000017C   400F50E3           CMP      R0,#+256
   \   00000180   B4FFFFBA           BLT      ??Unpack20_2
   \   00000184   ........           LDR      R8,??DataTable214  ;; LBits
   \   00000188   ........           LDR      R10,??DataTable215  ;; LDecode
   \   0000018C   090050E1           CMP      R0,R9
   \   00000190   260000BA           BLT      ??Unpack20_8
   \   00000194   001069E2           RSB      R1,R9,#+0
   \   00000198   000081E0           ADD      R0,R1,R0
   \   0000019C   DA1090E1           LDRSB    R1,[R0, +R10]
   \   000001A0   D80090E1           LDRSB    R0,[R0, +R8]
   \   000001A4   FF1001E2           AND      R1,R1,#0xFF
   \   000001A8   039081E2           ADD      R9,R1,#+3
   \   000001AC   FF8000E2           AND      R8,R0,#0xFF
   \   000001B0   010058E3           CMP      R8,#+1
   \   000001B4   050000BA           BLT      ??Unpack20_9
   \   000001B8   ........           BL       getbits
   \   000001BC   0810A0E1           MOV      R1,R8
   \   000001C0   101061E2           RSB      R1,R1,#+16
   \   000001C4   509189E0           ADD      R9,R9,R0, ASR R1
   \   000001C8   0800A0E1           MOV      R0,R8
   \   000001CC   ........           BL       addbits
   \                     ??Unpack20_9:
   \   000001D0   0600A0E3           MOV      R0,#+6
   \   000001D4   ........           BL       DecodeNumber
   \   000001D8   ........           LDR      R1,??DataTable216  ;; DDecode
   \   000001DC   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   000001E0   01A081E2           ADD      R10,R1,#+1
   \   000001E4   ........           LDR      R1,??DataTable217  ;; DBits
   \   000001E8   D10090E1           LDRSB    R0,[R0, +R1]
   \   000001EC   FF8000E2           AND      R8,R0,#0xFF
   \   000001F0   010058E3           CMP      R8,#+1
   \   000001F4   050000BA           BLT      ??Unpack20_10
   \   000001F8   ........           BL       getbits
   \   000001FC   0810A0E1           MOV      R1,R8
   \   00000200   101061E2           RSB      R1,R1,#+16
   \   00000204   50A18AE0           ADD      R10,R10,R0, ASR R1
   \   00000208   0800A0E1           MOV      R0,R8
   \   0000020C   ........           BL       addbits
   \                     ??Unpack20_10:
   \   00000210   800D5AE3           CMP      R10,#+8192
   \   00000214   019089A2           ADDGE    R9,R9,#+1
   \   00000218   400A5AA3           CMPGE    R10,#+262144
   \   0000021C   019089A2           ADDGE    R9,R9,#+1
   \   00000220   0A10A0E1           MOV      R1,R10
   \   00000224   0900A0E1           MOV      R0,R9
   \                     ??Unpack20_11:
   \   00000228   ........           BL       CopyString20
   \   0000022C   90FFFFEA           B        ??Unpack20_0
   \                     ??Unpack20_8:
   \   00000230   011049E2           SUB      R1,R9,#+1
   \   00000234   010050E1           CMP      R0,R1
   \   00000238   0500001A           BNE      ??Unpack20_12
   \   0000023C   ........           BL       ReadTables20
   \   00000240   000050E3           CMP      R0,#+0
   \   00000244   8AFFFF1A           BNE      ??Unpack20_0
   \   00000248   ........           BL       ReadLastTables
   \   0000024C   ........           BL       OldUnpWriteBuf
   \   00000250   F087BDE8           POP      {R4-R10,PC}
   \                     ??Unpack20_12:
   \   00000254   400F50E3           CMP      R0,#+256
   \   00000258   0400001A           BNE      ??Unpack20_13
   \   0000025C   ........           LDR      R0,??DataTable218  ;; LastDist
   \   00000260   001090E5           LDR      R1,[R0, #+0]
   \   00000264   ........           LDR      R0,??DataTable219  ;; LastLength
   \   00000268   000090E5           LDR      R0,[R0, #+0]
   \   0000026C   EDFFFFEA           B        ??Unpack20_11
   \                     ??Unpack20_13:
   \   00000270   0810C1E3           BIC      R1,R1,#0x8
   \   00000274   010050E1           CMP      R0,R1
   \   00000278   1F0000AA           BGE      ??Unpack20_14
   \   0000027C   ........           LDR      R1,??DataTable220  ;; OldDistPtr
   \   00000280   001091E5           LDR      R1,[R1, #+0]
   \   00000284   000041E0           SUB      R0,R1,R0
   \   00000288   ........           LDR      R1,??DataTable221  ;; OldDist
   \   0000028C   030000E2           AND      R0,R0,#0x3
   \   00000290   009191E7           LDR      R9,[R1, +R0, LSL #+2]
   \   00000294   0700A0E3           MOV      R0,#+7
   \   00000298   ........           BL       DecodeNumber
   \   0000029C   DA1090E1           LDRSB    R1,[R0, +R10]
   \   000002A0   D80090E1           LDRSB    R0,[R0, +R8]
   \   000002A4   FF1001E2           AND      R1,R1,#0xFF
   \   000002A8   02A081E2           ADD      R10,R1,#+2
   \   000002AC   FF8000E2           AND      R8,R0,#0xFF
   \   000002B0   010058E3           CMP      R8,#+1
   \   000002B4   050000BA           BLT      ??Unpack20_15
   \   000002B8   ........           BL       getbits
   \   000002BC   0810A0E1           MOV      R1,R8
   \   000002C0   101061E2           RSB      R1,R1,#+16
   \   000002C4   50A18AE0           ADD      R10,R10,R0, ASR R1
   \   000002C8   0800A0E1           MOV      R0,R8
   \   000002CC   ........           BL       addbits
   \                     ??Unpack20_15:
   \   000002D0   0100A0E3           MOV      R0,#+1
   \   000002D4   400F80E3           ORR      R0,R0,#0x100
   \   000002D8   000059E1           CMP      R9,R0
   \   000002DC   01A08AA2           ADDGE    R10,R10,#+1
   \   000002E0   800D59A3           CMPGE    R9,#+8192
   \   000002E4   01A08AA2           ADDGE    R10,R10,#+1
   \   000002E8   400A59A3           CMPGE    R9,#+262144
   \   000002EC   01A08AA2           ADDGE    R10,R10,#+1
   \   000002F0   0910A0E1           MOV      R1,R9
   \   000002F4   0A00A0E1           MOV      R0,R10
   \   000002F8   CAFFFFEA           B        ??Unpack20_11
   \                     ??Unpack20_14:
   \   000002FC   001061E2           RSB      R1,R1,#+0
   \   00000300   000081E0           ADD      R0,R1,R0
   \   00000304   ........           LDR      R1,??DataTable222  ;; SDDecode
   \   00000308   D11090E1           LDRSB    R1,[R0, +R1]
   \   0000030C   FF1001E2           AND      R1,R1,#0xFF
   \   00000310   019081E2           ADD      R9,R1,#+1
   \   00000314   ........           LDR      R1,??DataTable223  ;; SDBits
   \   00000318   D10090E1           LDRSB    R0,[R0, +R1]
   \   0000031C   FF8000E2           AND      R8,R0,#0xFF
   \   00000320   010058E3           CMP      R8,#+1
   \   00000324   050000BA           BLT      ??Unpack20_16
   \   00000328   ........           BL       getbits
   \   0000032C   0810A0E1           MOV      R1,R8
   \   00000330   101061E2           RSB      R1,R1,#+16
   \   00000334   509189E0           ADD      R9,R9,R0, ASR R1
   \   00000338   0800A0E1           MOV      R0,R8
   \   0000033C   ........           BL       addbits
   \                     ??Unpack20_16:
   \   00000340   0910A0E1           MOV      R1,R9
   \   00000344   0200A0E3           MOV      R0,#+2
   \   00000348   B6FFFFEA           B        ??Unpack20_11
   1402          
   1403          

   \                                 In segment CODE, align 4, keep-with-next
   1404          bool ReadTables20()
   1405          {
   \                     ReadTables20:
   \   00000000   ........           LDR      R0,??DataTable232  ;; ReadTop
   \   00000004   ........           LDR      R1,??DataTable233  ;; InAddr
   \   00000008   F04F2DE9           PUSH     {R4-R11,LR}
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   40DE4DE2           SUB      SP,SP,#+1024
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   190040E2           SUB      R0,R0,#+25
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   020000AA           BGE      ??ReadTables20_0
   1406            char BitLength[BC20];
   1407            char Table[MC20*4];
   1408            int TableSize,N,I;
   1409            if (InAddr>ReadTop-25)
   1410              if (!UnpReadBuf())
   \   00000028   ........           BL       UnpReadBuf
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   9500000A           BEQ      ??ReadTables20_1
   1411                return(false);
   1412            int BitField=getbits();
   1413            UnpAudioBlock=(BitField & 0x8000);
   \                     ??ReadTables20_0:
   \   00000034   ........           LDR      R4,??DataTable234  ;; UnpAudioBlock
   1414          
   1415            if (!(BitField & 0x4000))
   \   00000038   ........           LDR      R5,??DataTable240  ;; UnpOldTable20
   \   0000003C   ........           BL       getbits
   \   00000040   0090A0E1           MOV      R9,R0
   \   00000044   800C09E2           AND      R0,R9,#0x8000
   \   00000048   000084E5           STR      R0,[R4, #+0]
   \   0000004C   0460A0E3           MOV      R6,#+4
   \   00000050   406E86E3           ORR      R6,R6,#0x400
   \   00000054   400C19E3           TST      R9,#0x4000
   \   00000058   0300001A           BNE      ??ReadTables20_2
   1416              memset(UnpOldTable20,0,sizeof(UnpOldTable20));
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     memset,??memset??rA
   1417            addbits(2);
   1418          
   1419            if (UnpAudioBlock)
   \                     ??ReadTables20_2:
   \   0000006C   ........           LDR      R7,??DataTable238  ;; UnpChannels
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       addbits
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   0080A0E3           MOV      R8,#+0
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0B00000A           BEQ      ??ReadTables20_3
   1420            {
   1421              UnpChannels=((BitField>>12) & 3)+1;
   \   00000088   0300A0E3           MOV      R0,#+3
   \   0000008C   490600E0           AND      R0,R0,R9, ASR #+12
   \   00000090   019080E2           ADD      R9,R0,#+1
   1422              if (UnpCurChannel>=UnpChannels)
   \   00000094   ........           LDR      R0,??DataTable242  ;; UnpCurChannel
   \   00000098   009087E5           STR      R9,[R7, #+0]
   \   0000009C   001090E5           LDR      R1,[R0, #+0]
   \   000000A0   090051E1           CMP      R1,R9
   1423                UnpCurChannel=0;
   \   000000A4   008080A5           STRGE    R8,[R0, #+0]
   1424              addbits(2);
   \   000000A8   0200A0E3           MOV      R0,#+2
   \   000000AC   ........           BL       addbits
   1425              TableSize=MC20*UnpChannels;
   \   000000B0   099489E0           ADD      R9,R9,R9, LSL #+8
   \   000000B4   010000EA           B        ??ReadTables20_4
   1426            }
   1427            else
   1428              TableSize=NC20+DC20+RC20;
   \                     ??ReadTables20_3:
   \   000000B8   7690A0E3           MOV      R9,#+118
   \   000000BC   409F89E3           ORR      R9,R9,#0x100
   1429          
   1430            for (I=0;I<BC20;I++)
   \                     ??ReadTables20_4:
   \   000000C0   00A0A0E3           MOV      R10,#+0
   1431            {
   1432              BitLength[I]=(getbits() >> 12);
   \                     ??ReadTables20_5:
   \   000000C4   ........           BL       getbits
   \   000000C8   4006A0E1           ASR      R0,R0,#+12
   \   000000CC   0D10A0E1           MOV      R1,SP
   \   000000D0   0100CAE7           STRB     R0,[R10, +R1]
   1433              addbits(4);
   \   000000D4   0400A0E3           MOV      R0,#+4
   \   000000D8   ........           BL       addbits
   1434            }
   \   000000DC   01A08AE2           ADD      R10,R10,#+1
   \   000000E0   13005AE3           CMP      R10,#+19
   \   000000E4   F6FFFFBA           BLT      ??ReadTables20_5
   1435            MakeDecodeTables(BitLength,8);
   \   000000E8   0810A0E3           MOV      R1,#+8
   \   000000EC   0D00A0E1           MOV      R0,SP
   \   000000F0   ........           BL       MakeDecodeTables
   1436            I=0;
   \   000000F4   00A0A0E3           MOV      R10,#+0
   \   000000F8   050000EA           B        ??ReadTables20_6
   1437            while (I<TableSize)
   1438            {
   1439              if (InAddr>ReadTop-5)
   1440                if (!UnpReadBuf())
   1441                  return(false);
   1442              int Number=DecodeNumber(8);
   1443              if (Number<16)
   1444              {
   1445                Table[I]=(Number+UnpOldTable20[I]) & 0xf;
   \                     ??ReadTables20_7:
   \   000000FC   D5209AE1           LDRSB    R2,[R10, +R5]
   \   00000100   14108DE2           ADD      R1,SP,#+20
   \   00000104   000082E0           ADD      R0,R2,R0
   \   00000108   0F0000E2           AND      R0,R0,#0xF
   \   0000010C   0100CAE7           STRB     R0,[R10, +R1]
   1446                I++;
   \   00000110   01A08AE2           ADD      R10,R10,#+1
   1447              }
   \                     ??ReadTables20_6:
   \   00000114   ........           LDR      R0,??DataTable233  ;; InAddr
   \   00000118   ........           LDR      R1,??DataTable232  ;; ReadTop
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   001091E5           LDR      R1,[R1, #+0]
   \   00000124   09005AE1           CMP      R10,R9
   \   00000128   310000AA           BGE      ??ReadTables20_8
   \   0000012C   051041E2           SUB      R1,R1,#+5
   \   00000130   000051E1           CMP      R1,R0
   \   00000134   020000AA           BGE      ??ReadTables20_9
   \   00000138   ........           BL       UnpReadBuf
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   5100000A           BEQ      ??ReadTables20_1
   \                     ??ReadTables20_9:
   \   00000144   0800A0E3           MOV      R0,#+8
   \   00000148   ........           BL       DecodeNumber
   \   0000014C   100050E3           CMP      R0,#+16
   \   00000150   E9FFFFBA           BLT      ??ReadTables20_7
   1448              else
   1449                if (Number==16)
   \   00000154   1000001A           BNE      ??ReadTables20_10
   1450                {
   1451                  N=(getbits() >> 14)+3;
   \   00000158   ........           BL       getbits
   \   0000015C   0310A0E3           MOV      R1,#+3
   \   00000160   40B781E0           ADD      R11,R1,R0, ASR #+14
   1452                  addbits(2);
   \   00000164   0200A0E3           MOV      R0,#+2
   \   00000168   ........           BL       addbits
   1453                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables20_11:
   \   0000016C   0B00A0E1           MOV      R0,R11
   \   00000170   01B040E2           SUB      R11,R0,#+1
   \   00000174   010050E3           CMP      R0,#+1
   \   00000178   E5FFFFBA           BLT      ??ReadTables20_6
   \   0000017C   09005AE1           CMP      R10,R9
   \   00000180   E3FFFFAA           BGE      ??ReadTables20_6
   1454                  {
   1455                    Table[I]=Table[I-1];
   \   00000184   14008DE2           ADD      R0,SP,#+20
   \   00000188   00008AE0           ADD      R0,R10,R0
   \   0000018C   D11050E1           LDRSB    R1,[R0, #-1]
   1456                    I++;
   \   00000190   01A08AE2           ADD      R10,R10,#+1
   \   00000194   0010C0E5           STRB     R1,[R0, #+0]
   \   00000198   F3FFFFEA           B        ??ReadTables20_11
   1457                  }
   1458                }
   1459                else
   1460                {
   1461                  if (Number==17)
   \                     ??ReadTables20_10:
   \   0000019C   110050E3           CMP      R0,#+17
   \   000001A0   0400001A           BNE      ??ReadTables20_12
   1462                  {
   1463                    N=(getbits() >> 13)+3;
   \   000001A4   ........           BL       getbits
   \   000001A8   0310A0E3           MOV      R1,#+3
   \   000001AC   C0B681E0           ADD      R11,R1,R0, ASR #+13
   1464                    addbits(3);
   \   000001B0   0300A0E3           MOV      R0,#+3
   \   000001B4   030000EA           B        ??ReadTables20_13
   1465                  }
   1466                  else
   1467                  {
   1468                    N=(getbits() >> 9)+11;
   \                     ??ReadTables20_12:
   \   000001B8   ........           BL       getbits
   \   000001BC   0B10A0E3           MOV      R1,#+11
   \   000001C0   C0B481E0           ADD      R11,R1,R0, ASR #+9
   1469                    addbits(7);
   \   000001C4   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables20_13:
   \   000001C8   ........           BL       addbits
   1470                  }
   1471                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables20_14:
   \   000001CC   0B00A0E1           MOV      R0,R11
   \   000001D0   01B040E2           SUB      R11,R0,#+1
   \   000001D4   010050E3           CMP      R0,#+1
   \   000001D8   CDFFFFBA           BLT      ??ReadTables20_6
   \   000001DC   09005AE1           CMP      R10,R9
   \   000001E0   CBFFFFAA           BGE      ??ReadTables20_6
   1472                    Table[I++]=0;
   \   000001E4   14008DE2           ADD      R0,SP,#+20
   \   000001E8   0080CAE7           STRB     R8,[R10, +R0]
   \   000001EC   01A08AE2           ADD      R10,R10,#+1
   \   000001F0   F5FFFFEA           B        ??ReadTables20_14
   1473                }
   1474            }
   1475            if (InAddr>ReadTop)
   \                     ??ReadTables20_8:
   \   000001F4   000051E1           CMP      R1,R0
   \   000001F8   220000BA           BLT      ??ReadTables20_15
   1476              return(true);
   1477            if (UnpAudioBlock)
   \   000001FC   000094E5           LDR      R0,[R4, #+0]
   \   00000200   000050E3           CMP      R0,#+0
   \   00000204   0D00000A           BEQ      ??ReadTables20_16
   1478              for (I=0;I<UnpChannels;I++)
   \   00000208   000097E5           LDR      R0,[R7, #+0]
   \   0000020C   00A0A0E3           MOV      R10,#+0
   \   00000210   010050E3           CMP      R0,#+1
   \   00000214   170000BA           BLT      ??ReadTables20_17
   \                     ??ReadTables20_18:
   \   00000218   000097E5           LDR      R0,[R7, #+0]
   \   0000021C   00005AE1           CMP      R10,R0
   \   00000220   140000AA           BGE      ??ReadTables20_17
   1479                MakeDecodeTables(&Table[I*MC20],9+I);
   \   00000224   09108AE2           ADD      R1,R10,#+9
   \   00000228   0A048AE0           ADD      R0,R10,R10, LSL #+8
   \   0000022C   14208DE2           ADD      R2,SP,#+20
   \   00000230   020080E0           ADD      R0,R0,R2
   \   00000234   ........           BL       MakeDecodeTables
   \   00000238   01A08AE2           ADD      R10,R10,#+1
   \   0000023C   F5FFFFEA           B        ??ReadTables20_18
   1480            else
   1481            {
   1482              MakeDecodeTables(&Table[0],5);
   \                     ??ReadTables20_16:
   \   00000240   0510A0E3           MOV      R1,#+5
   \   00000244   14008DE2           ADD      R0,SP,#+20
   \   00000248   ........           BL       MakeDecodeTables
   1483              MakeDecodeTables(&Table[NC20],6);
   \   0000024C   0610A0E3           MOV      R1,#+6
   \   00000250   490F81E2           ADD      R0,R1,#+292
   \   00000254   14208DE2           ADD      R2,SP,#+20
   \   00000258   020080E0           ADD      R0,R0,R2
   \   0000025C   ........           BL       MakeDecodeTables
   1484              MakeDecodeTables(&Table[NC20+DC20],7);
   \   00000260   0710A0E3           MOV      R1,#+7
   \   00000264   5A00A0E3           MOV      R0,#+90
   \   00000268   400F80E3           ORR      R0,R0,#0x100
   \   0000026C   14208DE2           ADD      R2,SP,#+20
   \   00000270   020080E0           ADD      R0,R0,R2
   \   00000274   ........           BL       MakeDecodeTables
   1485            }
   1486            memcpy(UnpOldTable20,Table,sizeof(UnpOldTable20));
   \                     ??ReadTables20_17:
   \   00000278   0620A0E1           MOV      R2,R6
   \   0000027C   14108DE2           ADD      R1,SP,#+20
   \   00000280   0500A0E1           MOV      R0,R5
   \   00000284   ........           _BLF     memcpy,??memcpy??rA
   1487            return(true);
   \                     ??ReadTables20_15:
   \   00000288   0100A0E3           MOV      R0,#+1
   \                     ??ReadTables20_1:
   \   0000028C   18D08DE2           ADD      SP,SP,#+24
   \   00000290   40DE8DE2           ADD      SP,SP,#+1024
   \   00000294   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1488          }
   1489          
   1490          

   \                                 In segment CODE, align 4, keep-with-next
   1491          void ReadLastTables()
   1492          {
   1493            if (ReadTop>=InAddr+5)
   \                     ReadLastTables:
   \   00000000   ........           LDR      R0,??DataTable232  ;; ReadTop
   \   00000004   ........           LDR      R1,??DataTable233  ;; InAddr
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   051081E2           ADD      R1,R1,#+5
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   0080BDB8           POPLT    {PC}
   1494              if (UnpAudioBlock)
   \   00000020   ........           LDR      R0,??DataTable234  ;; UnpAudioBlock
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0500000A           BEQ      ??ReadLastTables_0
   1495              {
   1496                if (DecodeNumber(9+UnpCurChannel)==256)
   \   00000030   ........           LDR      R0,??DataTable242  ;; UnpCurChannel
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   090080E2           ADD      R0,R0,#+9
   \   0000003C   ........           BL       DecodeNumber
   \   00000040   400F50E3           CMP      R0,#+256
   \   00000044   040000EA           B        ??ReadLastTables_1
   1497                  ReadTables20();
   1498              }
   1499              else
   1500                if (DecodeNumber(5)==269)
   \                     ??ReadLastTables_0:
   \   00000048   0500A0E3           MOV      R0,#+5
   \   0000004C   ........           BL       DecodeNumber
   \   00000050   0D10A0E3           MOV      R1,#+13
   \   00000054   401F81E3           ORR      R1,R1,#0x100
   \   00000058   010050E1           CMP      R0,R1
   \                     ??ReadLastTables_1:
   \   0000005C   0080BD18           POPNE    {PC}
   1501                  ReadTables20();
   \   00000060   ........           BL       ReadTables20
   1502          }
   \   00000064   0080BDE8           POP      {PC}             ;; return
   1503          
   1504          

   \                                 In segment CODE, align 4, keep-with-next
   1505          void UnpInitData20(int Solid)
   1506          {
   \                     UnpInitData20:
   \   00000000   00402DE9           PUSH     {LR}
   1507            if (!Solid)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0080BD18           POPNE    {PC}
   1508            {
   1509              UnpChannelDelta=UnpCurChannel=0;
   \   0000000C   ........           LDR      R1,??DataTable242  ;; UnpCurChannel
   1510              UnpChannels=1;
   1511              memset(AudV,0,sizeof(AudV));
   \   00000010   5C2FA0E3           MOV      R2,#+368
   \   00000014   000081E5           STR      R0,[R1, #+0]
   \   00000018   ........           LDR      R1,??DataTable243  ;; UnpChannelDelta
   \   0000001C   000081E5           STR      R0,[R1, #+0]
   \   00000020   ........           LDR      R0,??DataTable238  ;; UnpChannels
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
   \   0000002C   ........           LDR      R0,??DataTable241  ;; AudV
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   ........           _BLF     memset,??memset??rA
   1512              memset(UnpOldTable20,0,sizeof(UnpOldTable20));
   \   00000038   ........           LDR      R0,??DataTable240  ;; UnpOldTable20
   \   0000003C   0420A0E3           MOV      R2,#+4
   \   00000040   402E82E3           ORR      R2,R2,#0x400
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           _BLF     memset,??memset??rA
   1513            }
   1514          }
   \   0000004C   0080BDE8           POP      {PC}             ;; return
   1515          
   1516          

   \                                 In segment CODE, align 4, keep-with-next
   1517          char DecodeAudio(int Delta)
   1518          {
   1519          //  struct AudioVariables *V=&AudV[UnpCurChannel];
   1520            AudV[UnpCurChannel].ByteCount++;
   \                     DecodeAudio:
   \   00000000   ........           LDR      R2,??DataTable241  ;; AudV
   \   00000004   0010A0E1           MOV      R1,R0
   \   00000008   ........           LDR      R0,??DataTable242  ;; UnpCurChannel
   \   0000000C   70002DE9           PUSH     {R4-R6}
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   5C30A0E3           MOV      R3,#+92
   \   00000018   932022E0           MLA      R2,R3,R0,R2
   \   0000001C   540092E5           LDR      R0,[R2, #+84]
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   540082E5           STR      R0,[R2, #+84]
   1521            AudV[UnpCurChannel].D4=AudV[UnpCurChannel].D3;
   \   00000028   1C0092E5           LDR      R0,[R2, #+28]
   \   0000002C   200082E5           STR      R0,[R2, #+32]
   1522            AudV[UnpCurChannel].D3=AudV[UnpCurChannel].D2;
   \   00000030   180092E5           LDR      R0,[R2, #+24]
   \   00000034   1C0082E5           STR      R0,[R2, #+28]
   1523            AudV[UnpCurChannel].D2=AudV[UnpCurChannel].LastDelta-AudV[UnpCurChannel].D1;
   \   00000038   240092E5           LDR      R0,[R2, #+36]
   \   0000003C   143092E5           LDR      R3,[R2, #+20]
   \   00000040   030040E0           SUB      R0,R0,R3
   1524            AudV[UnpCurChannel].D1=AudV[UnpCurChannel].LastDelta;
   1525            int PCh=8*AudV[UnpCurChannel].LastChar+AudV[UnpCurChannel].K1*AudV[UnpCurChannel].D1+AudV[UnpCurChannel].K2*AudV[UnpCurChannel].D2+AudV[UnpCurChannel].K3*AudV[UnpCurChannel].D3+AudV[UnpCurChannel].K4*AudV[UnpCurChannel].D4+AudV[UnpCurChannel].K5*UnpChannelDelta;
   1526            PCh=(PCh>>3) & 0xFF;
   1527          
   1528            int Ch=PCh-Delta;
   \   00000044   ........           LDR      R3,??DataTable243  ;; UnpChannelDelta
   \   00000048   180082E5           STR      R0,[R2, #+24]
   \   0000004C   240092E5           LDR      R0,[R2, #+36]
   \   00000050   140082E5           STR      R0,[R2, #+20]
   \   00000054   004092E5           LDR      R4,[R2, #+0]
   \   00000058   145092E5           LDR      R5,[R2, #+20]
   \   0000005C   580092E5           LDR      R0,[R2, #+88]
   \   00000060   00C093E5           LDR      R12,[R3, #+0]
   \   00000064   950404E0           MUL      R4,R5,R4
   \   00000068   185092E5           LDR      R5,[R2, #+24]
   \   0000006C   800184E0           ADD      R0,R4,R0, LSL #+3
   \   00000070   044092E5           LDR      R4,[R2, #+4]
   \   00000074   950420E0           MLA      R0,R5,R4,R0
   \   00000078   084092E5           LDR      R4,[R2, #+8]
   \   0000007C   1C5092E5           LDR      R5,[R2, #+28]
   \   00000080   950420E0           MLA      R0,R5,R4,R0
   \   00000084   0C4092E5           LDR      R4,[R2, #+12]
   \   00000088   205092E5           LDR      R5,[R2, #+32]
   \   0000008C   950420E0           MLA      R0,R5,R4,R0
   \   00000090   104092E5           LDR      R4,[R2, #+16]
   1529          
   1530            int D=((signed char)Delta)<<3;
   1531          
   1532            AudV[UnpCurChannel].Dif[0]+=abs(D);
   \   00000094   285092E5           LDR      R5,[R2, #+40]
   \   00000098   9C0420E0           MLA      R0,R12,R4,R0
   \   0000009C   FF40A0E3           MOV      R4,#+255
   \   000000A0   C00104E0           AND      R0,R4,R0, ASR #+3
   \   000000A4   010040E0           SUB      R0,R0,R1
   \   000000A8   011CA0E1           MOV      R1,R1, LSL #+24
   \   000000AC   411CA0E1           MOV      R1,R1, ASR #+24
   \   000000B0   8111B0E1           LSLS     R1,R1,#+3
   \   000000B4   0140A0E1           MOV      R4,R1
   \   000000B8   00406442           RSBMI    R4,R4,#+0
   \   000000BC   054084E0           ADD      R4,R4,R5
   \   000000C0   284082E5           STR      R4,[R2, #+40]
   1533            AudV[UnpCurChannel].Dif[1]+=abs(D-AudV[UnpCurChannel].D1);
   \   000000C4   144092E5           LDR      R4,[R2, #+20]
   \   000000C8   2C5092E5           LDR      R5,[R2, #+44]
   \   000000CC   044051E0           SUBS     R4,R1,R4
   \   000000D0   00406442           RSBMI    R4,R4,#+0
   \   000000D4   054084E0           ADD      R4,R4,R5
   \   000000D8   2C4082E5           STR      R4,[R2, #+44]
   1534            AudV[UnpCurChannel].Dif[2]+=abs(D+AudV[UnpCurChannel].D1);
   \   000000DC   144092E5           LDR      R4,[R2, #+20]
   \   000000E0   305092E5           LDR      R5,[R2, #+48]
   \   000000E4   014094E0           ADDS     R4,R4,R1
   \   000000E8   00406442           RSBMI    R4,R4,#+0
   \   000000EC   054084E0           ADD      R4,R4,R5
   \   000000F0   304082E5           STR      R4,[R2, #+48]
   1535            AudV[UnpCurChannel].Dif[3]+=abs(D-AudV[UnpCurChannel].D2);
   \   000000F4   184092E5           LDR      R4,[R2, #+24]
   \   000000F8   345092E5           LDR      R5,[R2, #+52]
   \   000000FC   044051E0           SUBS     R4,R1,R4
   \   00000100   00406442           RSBMI    R4,R4,#+0
   \   00000104   054084E0           ADD      R4,R4,R5
   \   00000108   344082E5           STR      R4,[R2, #+52]
   1536            AudV[UnpCurChannel].Dif[4]+=abs(D+AudV[UnpCurChannel].D2);
   \   0000010C   184092E5           LDR      R4,[R2, #+24]
   \   00000110   385092E5           LDR      R5,[R2, #+56]
   \   00000114   014094E0           ADDS     R4,R4,R1
   \   00000118   00406442           RSBMI    R4,R4,#+0
   \   0000011C   054084E0           ADD      R4,R4,R5
   \   00000120   384082E5           STR      R4,[R2, #+56]
   1537            AudV[UnpCurChannel].Dif[5]+=abs(D-AudV[UnpCurChannel].D3);
   \   00000124   1C4092E5           LDR      R4,[R2, #+28]
   \   00000128   3C5092E5           LDR      R5,[R2, #+60]
   \   0000012C   044051E0           SUBS     R4,R1,R4
   \   00000130   00406442           RSBMI    R4,R4,#+0
   \   00000134   054084E0           ADD      R4,R4,R5
   \   00000138   3C4082E5           STR      R4,[R2, #+60]
   1538            AudV[UnpCurChannel].Dif[6]+=abs(D+AudV[UnpCurChannel].D3);
   \   0000013C   1C4092E5           LDR      R4,[R2, #+28]
   \   00000140   405092E5           LDR      R5,[R2, #+64]
   \   00000144   014094E0           ADDS     R4,R4,R1
   \   00000148   00406442           RSBMI    R4,R4,#+0
   \   0000014C   054084E0           ADD      R4,R4,R5
   \   00000150   404082E5           STR      R4,[R2, #+64]
   1539            AudV[UnpCurChannel].Dif[7]+=abs(D-AudV[UnpCurChannel].D4);
   \   00000154   204092E5           LDR      R4,[R2, #+32]
   \   00000158   445092E5           LDR      R5,[R2, #+68]
   \   0000015C   044051E0           SUBS     R4,R1,R4
   \   00000160   00406442           RSBMI    R4,R4,#+0
   \   00000164   054084E0           ADD      R4,R4,R5
   \   00000168   444082E5           STR      R4,[R2, #+68]
   1540            AudV[UnpCurChannel].Dif[8]+=abs(D+AudV[UnpCurChannel].D4);
   \   0000016C   204092E5           LDR      R4,[R2, #+32]
   \   00000170   485092E5           LDR      R5,[R2, #+72]
   \   00000174   014094E0           ADDS     R4,R4,R1
   \   00000178   00406442           RSBMI    R4,R4,#+0
   \   0000017C   054084E0           ADD      R4,R4,R5
   \   00000180   484082E5           STR      R4,[R2, #+72]
   1541            AudV[UnpCurChannel].Dif[9]+=abs(D-UnpChannelDelta);
   \   00000184   4C5092E5           LDR      R5,[R2, #+76]
   \   00000188   0C4051E0           SUBS     R4,R1,R12
   \   0000018C   00406442           RSBMI    R4,R4,#+0
   \   00000190   054084E0           ADD      R4,R4,R5
   \   00000194   4C4082E5           STR      R4,[R2, #+76]
   1542            AudV[UnpCurChannel].Dif[10]+=abs(D+UnpChannelDelta);
   \   00000198   504092E5           LDR      R4,[R2, #+80]
   \   0000019C   01109CE0           ADDS     R1,R12,R1
   \   000001A0   00106142           RSBMI    R1,R1,#+0
   \   000001A4   041081E0           ADD      R1,R1,R4
   \   000001A8   501082E5           STR      R1,[R2, #+80]
   1543          
   1544            UnpChannelDelta=AudV[UnpCurChannel].LastDelta=(signed char)(Ch-AudV[UnpCurChannel].LastChar);
   \   000001AC   584092E5           LDR      R4,[R2, #+88]
   \   000001B0   041040E0           SUB      R1,R0,R4
   \   000001B4   011CA0E1           MOV      R1,R1, LSL #+24
   \   000001B8   411CA0E1           MOV      R1,R1, ASR #+24
   \   000001BC   241082E5           STR      R1,[R2, #+36]
   \   000001C0   001083E5           STR      R1,[R3, #+0]
   1545            AudV[UnpCurChannel].LastChar=Ch;
   \   000001C4   580082E5           STR      R0,[R2, #+88]
   1546          
   1547            if ((AudV[UnpCurChannel].ByteCount & 0x1F)==0)
   \   000001C8   541092E5           LDR      R1,[R2, #+84]
   \   000001CC   1F0011E3           TST      R1,#0x1F
   \   000001D0   4E00001A           BNE      ??DecodeAudio_1
   1548            {
   1549              int MinDif=AudV[UnpCurChannel].Dif[0],NumMinDif=0;
   \   000001D4   281092E5           LDR      R1,[R2, #+40]
   \   000001D8   0030A0E3           MOV      R3,#+0
   1550              AudV[UnpCurChannel].Dif[0]=0;
   \   000001DC   0040A0E3           MOV      R4,#+0
   \   000001E0   284082E5           STR      R4,[R2, #+40]
   1551              for (int I=1;I<sizeof(AudV[UnpCurChannel].Dif)/sizeof(AudV[UnpCurChannel].Dif[0]);I++)
   \   000001E4   01C0A0E3           MOV      R12,#+1
   \   000001E8   060000EA           B        ??DecodeAudio_2
   1552              {
   1553                if (AudV[UnpCurChannel].Dif[I]<MinDif)
   \                     ??DecodeAudio_3:
   \   000001EC   0C5182E0           ADD      R5,R2,R12, LSL #+2
   \   000001F0   286095E5           LDR      R6,[R5, #+40]
   1554                {
   1555                  MinDif=AudV[UnpCurChannel].Dif[I];
   1556                  NumMinDif=I;
   1557                }
   1558                AudV[UnpCurChannel].Dif[I]=0;
   \   000001F4   284085E5           STR      R4,[R5, #+40]
   \   000001F8   010056E1           CMP      R6,R1
   \   000001FC   0610A0B1           MOVLT    R1,R6
   \   00000200   0C30A0B1           MOVLT    R3,R12
   1559              }
   \   00000204   01C08CE2           ADD      R12,R12,#+1
   \                     ??DecodeAudio_2:
   \   00000208   0B005CE3           CMP      R12,#+11
   \   0000020C   F6FFFF3A           BCC      ??DecodeAudio_3
   1560              switch(NumMinDif)
   \   00000210   0F10E0E3           MVN      R1,#+15
   \   00000214   013043E2           SUB      R3,R3,#+1
   \   00000218   090053E3           CMP      R3,#+9
   \   0000021C   3B00008A           BHI      ??DecodeAudio_1
   \   00000220   014F8FE2           ADR      R4,??DecodeAudio_0
   \   00000224   0340D4E7           LDRB     R4,[R4, R3]
   \   00000228   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??DecodeAudio_0:
   \   0000022C   02080D13           DC8      +2,+8,+13,+19
   \   00000230   181E2329           DC8      +24,+30,+35,+41
   \   00000234   2E330000           DC8      +46,+51,+0,+0
   1561              {
   1562                case 1:
   1563                  if (AudV[UnpCurChannel].K1>=-16)
   \                     ??DecodeAudio_4:
   \   00000238   003092E5           LDR      R3,[R2, #+0]
   \   0000023C   010053E1           CMP      R3,R1
   \   00000240   320000BA           BLT      ??DecodeAudio_1
   1564                    AudV[UnpCurChannel].K1--;
   \   00000244   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_5:
   \   00000248   001082E5           STR      R1,[R2, #+0]
   \   0000024C   2F0000EA           B        ??DecodeAudio_1
   1565                  break;
   1566                case 2:
   1567                  if (AudV[UnpCurChannel].K1<16)
   \                     ??DecodeAudio_6:
   \   00000250   003092E5           LDR      R3,[R2, #+0]
   \   00000254   100053E3           CMP      R3,#+16
   \   00000258   2C0000AA           BGE      ??DecodeAudio_1
   1568                    AudV[UnpCurChannel].K1++;
   \   0000025C   011083E2           ADD      R1,R3,#+1
   \   00000260   F8FFFFEA           B        ??DecodeAudio_5
   1569                  break;
   1570                case 3:
   1571                  if (AudV[UnpCurChannel].K2>=-16)
   \                     ??DecodeAudio_7:
   \   00000264   043092E5           LDR      R3,[R2, #+4]
   \   00000268   010053E1           CMP      R3,R1
   \   0000026C   270000BA           BLT      ??DecodeAudio_1
   1572                    AudV[UnpCurChannel].K2--;
   \   00000270   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_8:
   \   00000274   041082E5           STR      R1,[R2, #+4]
   \   00000278   240000EA           B        ??DecodeAudio_1
   1573                  break;
   1574                case 4:
   1575                  if (AudV[UnpCurChannel].K2<16)
   \                     ??DecodeAudio_9:
   \   0000027C   043092E5           LDR      R3,[R2, #+4]
   \   00000280   100053E3           CMP      R3,#+16
   \   00000284   210000AA           BGE      ??DecodeAudio_1
   1576                    AudV[UnpCurChannel].K2++;
   \   00000288   011083E2           ADD      R1,R3,#+1
   \   0000028C   F8FFFFEA           B        ??DecodeAudio_8
   1577                  break;
   1578                case 5:
   1579                  if (AudV[UnpCurChannel].K3>=-16)
   \                     ??DecodeAudio_10:
   \   00000290   083092E5           LDR      R3,[R2, #+8]
   \   00000294   010053E1           CMP      R3,R1
   \   00000298   1C0000BA           BLT      ??DecodeAudio_1
   1580                    AudV[UnpCurChannel].K3--;
   \   0000029C   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_11:
   \   000002A0   081082E5           STR      R1,[R2, #+8]
   \   000002A4   190000EA           B        ??DecodeAudio_1
   1581                  break;
   1582                case 6:
   1583                  if (AudV[UnpCurChannel].K3<16)
   \                     ??DecodeAudio_12:
   \   000002A8   083092E5           LDR      R3,[R2, #+8]
   \   000002AC   100053E3           CMP      R3,#+16
   \   000002B0   160000AA           BGE      ??DecodeAudio_1
   1584                    AudV[UnpCurChannel].K3++;
   \   000002B4   011083E2           ADD      R1,R3,#+1
   \   000002B8   F8FFFFEA           B        ??DecodeAudio_11
   1585                  break;
   1586                case 7:
   1587                  if (AudV[UnpCurChannel].K4>=-16)
   \                     ??DecodeAudio_13:
   \   000002BC   0C3092E5           LDR      R3,[R2, #+12]
   \   000002C0   010053E1           CMP      R3,R1
   \   000002C4   110000BA           BLT      ??DecodeAudio_1
   1588                    AudV[UnpCurChannel].K4--;
   \   000002C8   011043E2           SUB      R1,R3,#+1
   \                     ??DecodeAudio_14:
   \   000002CC   0C1082E5           STR      R1,[R2, #+12]
   \   000002D0   0E0000EA           B        ??DecodeAudio_1
   1589                  break;
   1590                case 8:
   1591                  if (AudV[UnpCurChannel].K4<16)
   \                     ??DecodeAudio_15:
   \   000002D4   0C3092E5           LDR      R3,[R2, #+12]
   \   000002D8   100053E3           CMP      R3,#+16
   \   000002DC   0B0000AA           BGE      ??DecodeAudio_1
   1592                    AudV[UnpCurChannel].K4++;
   \   000002E0   011083E2           ADD      R1,R3,#+1
   \   000002E4   F8FFFFEA           B        ??DecodeAudio_14
   1593                  break;
   1594                case 9:
   1595                  if (AudV[UnpCurChannel].K5>=-16)
   \                     ??DecodeAudio_16:
   \   000002E8   103092E5           LDR      R3,[R2, #+16]
   \   000002EC   010053E1           CMP      R3,R1
   \   000002F0   060000BA           BLT      ??DecodeAudio_1
   1596                    AudV[UnpCurChannel].K5--;
   \   000002F4   011043E2           SUB      R1,R3,#+1
   \   000002F8   030000EA           B        ??DecodeAudio_17
   1597                  break;
   1598                case 10:
   1599                  if (AudV[UnpCurChannel].K5<16)
   \                     ??DecodeAudio_18:
   \   000002FC   103092E5           LDR      R3,[R2, #+16]
   \   00000300   100053E3           CMP      R3,#+16
   \   00000304   010000AA           BGE      ??DecodeAudio_1
   1600                    AudV[UnpCurChannel].K5++;
   \   00000308   011083E2           ADD      R1,R3,#+1
   \                     ??DecodeAudio_17:
   \   0000030C   101082E5           STR      R1,[R2, #+16]
   1601                  break;
   1602              }
   1603            }
   1604            return(Ch);
   \                     ??DecodeAudio_1:
   \   00000310   7000BDE8           POP      {R4-R6}
   \   00000314   000CA0E1           MOV      R0,R0, LSL #+24
   \   00000318   400CA0E1           MOV      R0,R0, ASR #+24
   \   0000031C   1EFF2FE1           BX       LR               ;; return
   1605          }
   1606          

   \                                 In segment CODE, align 4, keep-with-next
   1607          int UnpRead(char *Addr,int Count)
   1608          {
   \                     UnpRead:
   \   00000000   0100A0E1           MOV      R0,R1
   1609          //  int i;
   1610          //  i=fread32(in,Addr,Count,&err);
   1611          //  if(i<0) return -1;
   1612          //  return i;
   1613            return Count;
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1614          }
   1615          
   1616          

   \                                 In segment CODE, align 4, keep-with-next
   1617          void UnpWrite(char *Addr,int Count)
   1618          {
   1619          //  fwrite32(outhandle,Addr,Count,&err);
   1620          }
   \                     UnpWrite:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1621          
   1622          //int getint(unsigned char *ptr){
   1623          //  return ptr[0]|(ptr[1]<<8)|((ptr[2])<<16)|((ptr[3])<<24);
   1624          //}
   1625          //
   1626          //void prepname2(char *file){
   1627          //  unsigned int err;
   1628          //  do{
   1629          //    while(*++file && *file!='\\');
   1630          //    if(!*file) break;
   1631          //    *file=0;
   1632          //    mkdir(filename22,&err);
   1633          //    *file='\\';
   1634          //  }while(1);
   1635          //}
   1636          

   \                                 In segment CODE, align 4, keep-with-next
   1637          char *unrar(char *buf)
   1638          {
   \                     unrar:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1639            int startpos;
   1640            char *file, *outbuf=0;
   1641            NextPos=0x14;
   \   00000008   B8019FE5           LDR      R0,??unrar_0     ;; NextPos
   \   0000000C   1410A0E3           MOV      R1,#+20
   \   00000010   001080E5           STR      R1,[R0, #+0]
   1642          //  UnpackInit();
   1643          do{
   1644            if(loadfilesize<0x34) break;
   \   00000014   B0119FE5           LDR      R1,??unrar_0+0x4  ;; loadfilesize
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   002091E5           LDR      R2,[R1, #+0]
   \   00000020   340052E3           CMP      R2,#+52
   \   00000024   610000BA           BLT      ??unrar_1
   1645            file=buf+NextPos;
   1646           // lseek(in,NextPos,0,&err,&err);
   1647            //if(fread(in,file,0x20,&err)!=0x20) break;  
   1648            HeadType=file[2]&0xff;
   \   00000028   A0219FE5           LDR      R2,??unrar_0+0x8  ;; HeadType
   \   0000002C   143084E2           ADD      R3,R4,#+20
   \   00000030   D260D3E1           LDRSB    R6,[R3, #+2]
   \   00000034   FF6006E2           AND      R6,R6,#0xFF
   \   00000038   006082E5           STR      R6,[R2, #+0]
   1649            Flags=(file[3]&0xff)+((file[4]&0xff)<<8);
   \   0000003C   D320D3E1           LDRSB    R2,[R3, #+3]
   \   00000040   D470D3E1           LDRSB    R7,[R3, #+4]
   \   00000044   88619FE5           LDR      R6,??unrar_0+0xC  ;; Flags
   \   00000048   FF2002E2           AND      R2,R2,#0xFF
   \   0000004C   FF7007E2           AND      R7,R7,#0xFF
   \   00000050   072482E0           ADD      R2,R2,R7, LSL #+8
   \   00000054   002086E5           STR      R2,[R6, #+0]
   1650            HeadSize=(file[5]&0xff)+((file[6]&0xff)<<8);
   \   00000058   D520D3E1           LDRSB    R2,[R3, #+5]
   \   0000005C   D670D3E1           LDRSB    R7,[R3, #+6]
   \   00000060   FF2002E2           AND      R2,R2,#0xFF
   \   00000064   FF7007E2           AND      R7,R7,#0xFF
   \   00000068   07C482E0           ADD      R12,R2,R7, LSL #+8
   \   0000006C   64219FE5           LDR      R2,??unrar_0+0x10  ;; HeadSize
   \   00000070   00C082E5           STR      R12,[R2, #+0]
   1651            UnpSize=(file[7]&0xff)+((file[8]&0xff)<<8)
   1652              +((file[9]&0xff)<<16)+((file[10]&0xff)<<24);
   \   00000074   D720D3E1           LDRSB    R2,[R3, #+7]
   \   00000078   D870D3E1           LDRSB    R7,[R3, #+8]
   \   0000007C   FF2002E2           AND      R2,R2,#0xFF
   \   00000080   FF7007E2           AND      R7,R7,#0xFF
   \   00000084   072482E0           ADD      R2,R2,R7, LSL #+8
   \   00000088   D970D3E1           LDRSB    R7,[R3, #+9]
   \   0000008C   FF7007E2           AND      R7,R7,#0xFF
   \   00000090   072882E0           ADD      R2,R2,R7, LSL #+16
   \   00000094   DA70D3E1           LDRSB    R7,[R3, #+10]
   \   00000098   07EC82E0           ADD      LR,R2,R7, LSL #+24
   \   0000009C   38219FE5           LDR      R2,??unrar_0+0x14  ;; UnpSize
   \   000000A0   00E082E5           STR      LR,[R2, #+0]
   1653            PackSize=(file[11]&0xff)+((file[12]&0xff)<<8)
   1654              +((file[13]&0xff)<<16)+((file[14]&0xff)<<24);
   \   000000A4   DB20D3E1           LDRSB    R2,[R3, #+11]
   \   000000A8   DC70D3E1           LDRSB    R7,[R3, #+12]
   \   000000AC   FF2002E2           AND      R2,R2,#0xFF
   \   000000B0   FF7007E2           AND      R7,R7,#0xFF
   \   000000B4   072482E0           ADD      R2,R2,R7, LSL #+8
   \   000000B8   DD70D3E1           LDRSB    R7,[R3, #+13]
   \   000000BC   FF7007E2           AND      R7,R7,#0xFF
   \   000000C0   072882E0           ADD      R2,R2,R7, LSL #+16
   \   000000C4   DE70D3E1           LDRSB    R7,[R3, #+14]
   \   000000C8   072C82E0           ADD      R2,R2,R7, LSL #+24
   \   000000CC   0C719FE5           LDR      R7,??unrar_0+0x18  ;; PackSize
   \   000000D0   002087E5           STR      R2,[R7, #+0]
   1655            Version=file[24]&0xff;
   \   000000D4   D881D3E1           LDRSB    R8,[R3, #+24]
   \   000000D8   04719FE5           LDR      R7,??unrar_0+0x1C  ;; Version
   \   000000DC   FF8008E2           AND      R8,R8,#0xFF
   \   000000E0   008087E5           STR      R8,[R7, #+0]
   1656            Method=file[25]&0xff;
   \   000000E4   D991D3E1           LDRSB    R9,[R3, #+25]
   \   000000E8   F8809FE5           LDR      R8,??unrar_0+0x20  ;; Method
   \   000000EC   FF9009E2           AND      R9,R9,#0xFF
   \   000000F0   009088E5           STR      R9,[R8, #+0]
   1657            NameSize=(file[26]&0xff)+((file[27]&0xff)<<8);
   \   000000F4   DA91D3E1           LDRSB    R9,[R3, #+26]
   \   000000F8   DBA1D3E1           LDRSB    R10,[R3, #+27]
   \   000000FC   E8809FE5           LDR      R8,??unrar_0+0x24  ;; NameSize
   \   00000100   FF9009E2           AND      R9,R9,#0xFF
   \   00000104   FFA00AE2           AND      R10,R10,#0xFF
   \   00000108   0A9489E0           ADD      R9,R9,R10, LSL #+8
   \   0000010C   009088E5           STR      R9,[R8, #+0]
   1658            Attrib=file[28]&0xff;
   \   00000110   DC31D3E1           LDRSB    R3,[R3, #+28]
   \   00000114   D4809FE5           LDR      R8,??unrar_0+0x28  ;; Attrib
   \   00000118   FF3003E2           AND      R3,R3,#0xFF
   \   0000011C   003088E5           STR      R3,[R8, #+0]
   1659            if(Attrib & 0x10) //dir
   \   00000120   100013E3           TST      R3,#0x10
   \   00000124   2100001A           BNE      ??unrar_1
   1660              //NextPos+=HeadSize+UnpSize;
   1661              break;
   1662          //  else{
   1663              //if(fread(in,file,NameSize,&err)!=NameSize) break;  
   1664              //file[NameSize]=0;
   1665              //prepname2(file);
   1666              //if ((outhandle=fopen(filename22,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err))!=-1){
   1667              //lseek(in,NextPos+=HeadSize,0,&err,&err);
   1668               startpos=(NextPos+=HeadSize);
   1669               DestUnpSize=PackSize;
   \   00000128   ........           LDR      R8,??DataTable244  ;; DestUnpSize
   \   0000012C   14308CE2           ADD      R3,R12,#+20
   \   00000130   002088E5           STR      R2,[R8, #+0]
   1670               NextPos+=UnpSize;
   \   00000134   03808EE0           ADD      R8,LR,R3
   \   00000138   008080E5           STR      R8,[R0, #+0]
   1671               if(!PackSize) break;
   \   0000013C   000052E3           CMP      R2,#+0
   \   00000140   1A00000A           BEQ      ??unrar_1
   1672               if(PackSize!=UnpSize){// && PackSize>0)
   \   00000144   0E0052E1           CMP      R2,LR
   \   00000148   002081E5           STR      R2,[R1, #+0]
   \   0000014C   1300000A           BEQ      ??unrar_2
   1673                  MAXWINSIZE=(loadfilesize=PackSize)+300;//?????????????????????
   \   00000150   ........           LDR      R1,??DataTable245  ;; MAXWINSIZE
   1674                  InBuf=buf+startpos;
   1675                  if(!(Window=(char*)malloc(MAXWINSIZE))) break;
   \   00000154   ........           LDR      R8,??DataTable246  ;; Window
   \   00000158   4B0F82E2           ADD      R0,R2,#+300
   \   0000015C   000081E5           STR      R0,[R1, #+0]
   \   00000160   ........           LDR      R1,??DataTable247  ;; InBuf
   \   00000164   042083E0           ADD      R2,R3,R4
   \   00000168   002081E5           STR      R2,[R1, #+0]
   \   0000016C   140000EF           SWI      +20
   \   00000170   000088E5           STR      R0,[R8, #+0]
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   0C00000A           BEQ      ??unrar_1
   1676                  UnpackInit();/////
   \   0000017C   ........           BL       UnpackInit
   1677                  DoUnpack(Version,(Flags & 0x10)!=0);
   \   00000180   000096E5           LDR      R0,[R6, #+0]
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   FF0000E2           AND      R0,R0,#0xFF
   \   0000018C   201201E0           AND      R1,R1,R0, LSR #+4
   \   00000190   000097E5           LDR      R0,[R7, #+0]
   \   00000194   ........           BL       DoUnpack
   1678                  outbuf=Window;
   \   00000198   005098E5           LDR      R5,[R8, #+0]
   \   0000019C   030000EA           B        ??unrar_1
   1679               }else //store
   1680                  memcpy(outbuf=buf,buf+startpos,loadfilesize=PackSize);
   \                     ??unrar_2:
   \   000001A0   0450A0E1           MOV      R5,R4
   \   000001A4   041083E0           ADD      R1,R3,R4
   \   000001A8   0500A0E1           MOV      R0,R5
   \   000001AC   ........           _BLF     memcpy,??memcpy??rA
   1681          //       while(PackSize>0){
   1682          //         i=(PackSize<MAX_SIZE)?PackSize:MAX_SIZE;
   1683          //         fread32(in,InBuf,i,&err);
   1684          //         fwrite32(outhandle,InBuf,i,&err);
   1685          //         PackSize-=i;
   1686          //       }
   1687          //     fclose(outhandle,&err);
   1688          //    }
   1689          }while(0);//NextPos<AllSize-10);
   1690            if(outbuf!=buf) mfree(buf);
   \                     ??unrar_1:
   \   000001B0   040055E1           CMP      R5,R4
   \   000001B4   0100000A           BEQ      ??unrar_3
   \   000001B8   0400A0E1           MOV      R0,R4
   \   000001BC   150000EF           SWI      +21
   1691          //fclose(in,&err);
   1692          //  }
   1693           // SUBPROC((void *)ElfKiller);
   1694           return outbuf;
   \                     ??unrar_3:
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??unrar_0:
   \   000001C8   ........           DC32     NextPos
   \   000001CC   ........           DC32     loadfilesize
   \   000001D0   ........           DC32     HeadType
   \   000001D4   ........           DC32     Flags
   \   000001D8   ........           DC32     HeadSize
   \   000001DC   ........           DC32     UnpSize
   \   000001E0   ........           DC32     PackSize
   \   000001E4   ........           DC32     Version
   \   000001E8   ........           DC32     Method
   \   000001EC   ........           DC32     NameSize
   \   000001F0   ........           DC32     Attrib
   1695          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     UnpAllBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     LL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     Suspended

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     FileExtracted

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     LBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     LDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     DDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     DBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     SDDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     SDBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     InBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     UnpSomeRead

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   ........           DC32     DestUnpSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   ........           DC32     UnpBlockType

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   ........           DC32     PrevLowDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   ........           DC32     LowDistRepCount

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     TablesRead

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     MAXWINSIZE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   ........           DC32     Window

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     UnpOldTable

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   ........           DC32     InBit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     InAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     PPMError

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     WrittenFileSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   ........           DC32     ReadBorder

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   ........           DC32     LL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   ........           DC32     DecodeN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable88:
   \   00000000   ........           DC32     UnpPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     InAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable91:
   \   00000000   ........           DC32     ReadTop

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable92:
   \   00000000   ........           DC32     Suspended

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   ........           DC32     WrPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     UnpSomeRead

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   ........           DC32     UnpAllBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   ........           DC32     LastDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   ........           DC32     LastLength

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable128:
   \   00000000   ........           DC32     PosL2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable129:
   \   00000000   ........           DC32     DecL2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable130:
   \   00000000   ........           DC32     PosL1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable131:
   \   00000000   ........           DC32     DecL1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable145:
   \   00000000   ........           DC32     OldDistPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable151:
   \   00000000   ........           DC32     PosHf1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable152:
   \   00000000   ........           DC32     DecHf1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable153:
   \   00000000   ........           DC32     PosHf0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable154:
   \   00000000   ........           DC32     DecHf0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable168:
   \   00000000   ........           DC32     PosHf2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable169:
   \   00000000   ........           DC32     DecHf2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable170:
   \   00000000   ........           DC32     Buf60

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable171:
   \   00000000   ........           DC32     NumHuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable172:
   \   00000000   ........           DC32     AvrLn3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable173:
   \   00000000   ........           DC32     AvrLn2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable174:
   \   00000000   ........           DC32     AvrLn1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable175:
   \   00000000   ........           DC32     AvrPlcB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable176:
   \   00000000   ........           DC32     AvrPlc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable177:
   \   00000000   ........           DC32     MaxDist3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable178:
   \   00000000   ........           DC32     Nlzb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable179:
   \   00000000   ........           DC32     Nhfb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable180:
   \   00000000   ........           DC32     FlagsCnt

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable181:
   \   00000000   ........           DC32     FlagBuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable182:
   \   00000000   ........           DC32     StMode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable183:
   \   00000000   ........           DC32     LCount

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable185:
   \   00000000   ........           DC32     ChSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable186:
   \   00000000   ........           DC32     ChSetB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable187:
   \   00000000   ........           DC32     PlaceA

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable188:
   \   00000000   ........           DC32     ChSetA

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable189:
   \   00000000   ........           DC32     ChSetC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable190:
   \   00000000   ........           DC32     NToPlB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable191:
   \   00000000   ........           DC32     NToPl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable192:
   \   00000000   ........           DC32     NToPlC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable200:
   \   00000000   ........           DC32     DestUnpSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable201:
   \   00000000   ........           DC32     UnpPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable204:
   \   00000000   ........           DC32     Suspended

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable205:
   \   00000000   ........           DC32     WrPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable207:
   \   00000000   ........           DC32     UnpPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable210:
   \   00000000   ........           DC32     Window

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable214:
   \   00000000   ........           DC32     LBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable215:
   \   00000000   ........           DC32     LDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable216:
   \   00000000   ........           DC32     DDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable217:
   \   00000000   ........           DC32     DBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable218:
   \   00000000   ........           DC32     LastDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable219:
   \   00000000   ........           DC32     LastLength

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable220:
   \   00000000   ........           DC32     OldDistPtr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable221:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable222:
   \   00000000   ........           DC32     SDDecode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable223:
   \   00000000   ........           DC32     SDBits

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable232:
   \   00000000   ........           DC32     ReadTop

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable233:
   \   00000000   ........           DC32     InAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable234:
   \   00000000   ........           DC32     UnpAudioBlock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable238:
   \   00000000   ........           DC32     UnpChannels

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable240:
   \   00000000   ........           DC32     UnpOldTable20

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable241:
   \   00000000   ........           DC32     AudV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable242:
   \   00000000   ........           DC32     UnpCurChannel

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable243:
   \   00000000   ........           DC32     UnpChannelDelta

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable244:
   \   00000000   ........           DC32     DestUnpSize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable245:
   \   00000000   ........           DC32     MAXWINSIZE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable246:
   \   00000000   ........           DC32     Window

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable247:
   \   00000000   ........           DC32     InBuf

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LDecode>`:
   \   00000000   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48
   \              0607080A0C0E
   \              1014181C2028
   \              30          
   \   00000013   384050607080       DC8 56, 64, 80, 96, 112, -128, -96, -64, -32
   \              A0C0E0      

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LBits>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4
   \              000001010101
   \              020202020303
   \              0303040404  
   \   00000017   0405050505         DC8 4, 5, 5, 5, 5

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DDecode>`:
   \   00000000   000000000100       DC32 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256
   \              000002000000
   \              030000000400
   \              000006000000
   \              080000000C00
   \              000010000000
   \              180000002000
   \              000030000000
   \              400000006000
   \              000080000000
   \              C00000000001
   \              0000        
   \   00000044   800100000002       DC32 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288
   \              000000030000
   \              000400000006
   \              000000080000
   \              000C00000010
   \              000000180000
   \              002000000030
   \              0000        
   \   00000070   004000000060       DC32 16384, 24576, 32768, 49152, 65536, 98304, 131072, 196608, 262144
   \              000000800000
   \              00C000000000
   \              010000800100
   \              000002000000
   \              030000000400
   \   00000094   000005000000       DC32 327680, 393216, 458752, 524288, 589824, 655360, 720896, 786432
   \              060000000700
   \              000008000000
   \              090000000A00
   \              00000B000000
   \              0C00        
   \   000000B4   00000D000000       DC32 851968, 917504, 983040
   \              0E0000000F00

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DBits>`:
   \   00000000   000000000101       DC8 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
   \              020203030404
   \              050506060707
   \              08080909    
   \   00000016   0A0A0B0B0C0C       DC8 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16
   \              0D0D0E0E0F0F
   \              1010101010  
   \   00000027   101010101010       DC8 16, 16, 16, 16, 16, 16, 16, 16, 16
   \              101010      

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DBitLengthCounts>`:
   \   00000000   040000000200       DC32 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14, 0, 12
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000E00
   \              000000000000
   \              0C000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SDDecode>`:
   \   00000000   000408102040       DC8 0, 4, 8, 16, 32, 64, -128, -64
   \              80C0        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SDBits>`:
   \   00000000   020203040506       DC8 2, 2, 3, 4, 5, 6, 6, 6
   \              0606        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LLSize>`:
   \   00000000   2B0100003C00       DC32 299, 60, 28, 20, 17, 298, 48, 28, 19, 257, 257, 257, 257
   \              00001C000000
   \              140000001100
   \              00002A010000
   \              300000001C00
   \              000013000000
   \              010100000101
   \              000001010000
   \              01010000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecL1>`:
   \   00000000   0080000000A0       DC32 32768, 40960, 49152, 53248, 57344, 59904, 60928, 61440, 61952
   \              000000C00000
   \              00D0000000E0
   \              000000EA0000
   \              00EE000000F0
   \              000000F20000
   \   00000024   00F20000FFFF       DC32 61952, 65535
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosL1>`:
   \   00000000   000000000000       DC32 0, 0, 0, 2, 3, 5, 7, 11, 16, 20, 24, 32, 32
   \              000000000000
   \              020000000300
   \              000005000000
   \              070000000B00
   \              000010000000
   \              140000001800
   \              000020000000
   \              20000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecL2>`:
   \   00000000   00A0000000C0       DC32 40960, 49152, 53248, 57344, 59904, 60928, 61440, 61952, 62016
   \              000000D00000
   \              00E0000000EA
   \              000000EE0000
   \              00F0000000F2
   \              000040F20000
   \   00000024   FFFF0000           DC32 65535

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosL2>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 5, 7, 9, 13, 18, 22, 26, 34, 36
   \              000000000000
   \              000000000500
   \              000007000000
   \              090000000D00
   \              000012000000
   \              160000001A00
   \              000022000000
   \              24000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf0>`:
   \   00000000   0080000000C0       DC32 32768, 49152, 57344, 61952, 61952, 61952, 61952, 61952, 65535
   \              000000E00000
   \              00F2000000F2
   \              000000F20000
   \              00F2000000F2
   \              0000FFFF0000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf0>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 8, 16, 24, 33, 33, 33, 33, 33
   \              000000000000
   \              000000000000
   \              000008000000
   \              100000001800
   \              000021000000
   \              210000002100
   \              000021000000
   \              21000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf1>`:
   \   00000000   0020000000C0       DC32 8192, 49152, 57344, 61440, 61952, 61952, 63456, 65535
   \              000000E00000
   \              00F0000000F2
   \              000000F20000
   \              E0F70000FFFF
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf1>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 4, 44, 60, 76, 80, 80, 127
   \              000000000000
   \              000000000000
   \              000000000000
   \              040000002C00
   \              00003C000000
   \              4C0000005000
   \              000050000000
   \              7F000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf2>`:
   \   00000000   001000000024       DC32 4096, 9216, 32768, 49152, 64000, 65535, 65535, 65535
   \              000000800000
   \              00C0000000FA
   \              0000FFFF0000
   \              FFFF0000FFFF
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf2>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 2, 7, 53, 117, 233, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              020000000700
   \              000035000000
   \              75000000E900
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf3>`:
   \   00000000   000800000024       DC32 2048, 9216, 60928, 65152, 65535, 65535, 65535
   \              000000EE0000
   \              80FE0000FFFF
   \              0000FFFF0000
   \              FFFF0000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf3>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 2, 16, 218, 251, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000200
   \              000010000000
   \              DA000000FB00
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DecHf4>`:
   \   00000000   00FF0000FFFF       DC32 65280, 65535, 65535, 65535, 65535, 65535
   \              0000FFFF0000
   \              FFFF0000FFFF
   \              0000FFFF0000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PosHf4>`:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              FF0000000000
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortLen1>`:
   \   00000000   010000000300       DC32 1, 3, 4, 4, 5, 6, 7, 8, 8, 4, 4, 5, 6, 6, 4, 0
   \              000004000000
   \              040000000500
   \              000006000000
   \              070000000800
   \              000008000000
   \              040000000400
   \              000005000000
   \              060000000600
   \              000004000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortXor1>`:
   \   00000000   00000000A000       DC32 0, 160, 208, 224, 240, 248, 252, 254, 255, 192, 128, 144, 152, 156
   \              0000D0000000
   \              E0000000F000
   \              0000F8000000
   \              FC000000FE00
   \              0000FF000000
   \              C00000008000
   \              000090000000
   \              980000009C00
   \              0000        
   \   00000038   B0000000           DC32 176

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortLen2>`:
   \   00000000   020000000300       DC32 2, 3, 3, 3, 4, 4, 5, 6, 6, 4, 4, 5, 6, 6, 4, 0
   \              000003000000
   \              030000000400
   \              000004000000
   \              050000000600
   \              000006000000
   \              040000000400
   \              000005000000
   \              060000000600
   \              000004000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ShortXor2>`:
   \   00000000   000000004000       DC32 0, 64, 96, 160, 208, 224, 240, 248, 252, 192, 128, 144, 152, 156
   \              000060000000
   \              A0000000D000
   \              0000E0000000
   \              F0000000F800
   \              0000FC000000
   \              C00000008000
   \              000090000000
   \              980000009C00
   \              0000        
   \   00000038   B0000000           DC32 176
   1696          

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     CopyString          12
     CopyString20        12
     CorrHuff             8
     DecodeAudio         12
     DecodeNum           24
     DecodeNumber        16
     DoUnpack             4
     GetFlagsBuf         24
     HuffDecode          40
     InitBitInput         0
     InitHuff            12
     InitLL               0
     IsFileExtracted      0
     LongLZ              32
     MakeDecodeTables   148
     OldCopyString        8
     OldUnpInitData       0
     OldUnpWriteBuf       0
     ReadEndOfBlock      20
     ReadLastTables       4
     ReadTables         460
     ReadTables20      1084
     SetDestSize          0
     SetSuspended         0
     ShortLZ             40
     UnpInitData         12
     UnpInitData20        4
     UnpRead              0
     UnpReadBuf          20
     UnpWrite             0
     UnpWriteArea         0
     UnpWriteBuf         12
     UnpWriteData         0
     Unpack15            36
     Unpack20            32
     Unpack29            36
     UnpackInit           4
     addbits              0
     getbits              0
     unrar               32


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     in                                4
     outhandle                         4
     HeadType                          4
     Flags                             4
     HeadSize                          4
     PackSize                          4
     UnpSize                           4
     Version                           4
     Method                            4
     NameSize                          4
     NextPos                           4
     Attrib                            4
     AllSize                           4
     MAX_SIZE                          4
     MAXWINSIZE                        4
     MAXWINMASK                        4
     SIZEOF_SHORTBLOCKHEAD             4
     LHD_SOLID                         4
     ATTR_SUB                          4
     LOW_DIST_REP_COUNT                4
     BLOCK_LZ                          4
     BLOCK_PPM                         4
     LDecode                          28
     LBits                            28
     DDecode                         192
     DBits                            48
     DBitLengthCounts                 76
     SDDecode                          8
     SDBits                            8
     LLSize                           52
     DecodeN                        7380
     LL                             1820
     InitLL                           60
     UnpOldTable                     404
     Window                            4
     InBuf                             4
     InAddr                            4
     InBit                             4
     InitBitInput                     24
     addbits                          40
     getbits                          84
     PPMEscChar                        4
     LastFilter                        4
     TablesRead                        4
     OldDist                          16
     OldDistPtr                        4
     LastDist                          4
     LastLength                        4
     UnpPtr                            4
     WrPtr                             4
     ReadTop                           4
     ReadBorder                        4
     UnpBlockType                      4
     DestUnpSize                       4
     Suspended                         4
     UnpAllBuf                         4
     UnpSomeRead                       4
     WrittenFileSize                   4
     FileExtracted                     4
     PPMError                          4
     PrevLowDist                       4
     LowDistRepCount                   4
     ChSet                          1024
     ChSetA                         1024
     ChSetB                         1024
     ChSetC                         1024
     Place                          1024
     PlaceA                         1024
     PlaceB                         1024
     PlaceC                         1024
     NToPl                          1024
     NToPlB                         1024
     NToPlC                         1024
     FlagBuf                           4
     AvrPlc                            4
     AvrPlcB                           4
     AvrLn1                            4
     AvrLn2                            4
     AvrLn3                            4
     Buf60                             4
     NumHuf                            4
     StMode                            4
     LCount                            4
     FlagsCnt                          4
     Nhfb                              4
     Nlzb                              4
     MaxDist3                          4
     UnpOldTable20                  1028
     UnpAudioBlock                     4
     UnpChannels                       4
     UnpCurChannel                     4
     UnpChannelDelta                   4
     AudV                            368
     IsFileExtracted                  12
     SetDestSize                      24
     SetSuspended                     12
     UnpackInit                       64
     DoUnpack                         92
     CopyString                      168
     DecodeNumber                    336
     Unpack29                       1000
     ReadEndOfBlock                  128
     UnpReadBuf                      152
     UnpWriteBuf                      36
     UnpWriteArea                     52
     UnpWriteData                     32
     ReadTables                      716
     UnpInitData                     196
     MakeDecodeTables                380
     DecL1                            44
     PosL1                            52
     DecL2                            40
     PosL2                            52
     DecHf0                           36
     PosHf0                           52
     DecHf1                           32
     PosHf1                           52
     DecHf2                           32
     PosHf2                           52
     DecHf3                           28
     PosHf3                           52
     DecHf4                           24
     PosHf4                           52
     Unpack15                        444
     OldUnpWriteBuf                   52
     ShortLZ                         684
     ShortLen1                        64
     ShortXor1                        60
     ShortLen2                        64
     ShortXor2                        60
     LongLZ                          628
     HuffDecode                      580
     GetFlagsBuf                     124
     OldUnpInitData                  152
     InitHuff                        184
     CorrHuff                         96
     OldCopyString                    96
     DecodeNum                       116
     CopyString20                    292
     Unpack20                        844
     ReadTables20                    664
     ReadLastTables                  104
     UnpInitData20                    80
     DecodeAudio                     800
     UnpRead                           8
     UnpWrite                          4
     unrar                           500
     ??DataTable15                     4
     ??DataTable20                     4
     ??DataTable34                     4
     ??DataTable35                     4
     ??DataTable38                     4
     ??DataTable39                     4
     ??DataTable42                     4
     ??DataTable43                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable50                     4
     ??DataTable54                     4
     ??DataTable58                     4
     ??DataTable62                     4
     ??DataTable64                     4
     ??DataTable65                     4
     ??DataTable67                     4
     ??DataTable72                     4
     ??DataTable73                     4
     ??DataTable74                     4
     ??DataTable77                     4
     ??DataTable78                     4
     ??DataTable79                     4
     ??DataTable80                     4
     ??DataTable82                     4
     ??DataTable83                     4
     ??DataTable84                     4
     ??DataTable88                     4
     ??DataTable90                     4
     ??DataTable91                     4
     ??DataTable92                     4
     ??DataTable97                     4
     ??DataTable99                     4
     ??DataTable100                    4
     ??DataTable102                    4
     ??DataTable103                    4
     ??DataTable108                    4
     ??DataTable128                    4
     ??DataTable129                    4
     ??DataTable130                    4
     ??DataTable131                    4
     ??DataTable145                    4
     ??DataTable151                    4
     ??DataTable152                    4
     ??DataTable153                    4
     ??DataTable154                    4
     ??DataTable168                    4
     ??DataTable169                    4
     ??DataTable170                    4
     ??DataTable171                    4
     ??DataTable172                    4
     ??DataTable173                    4
     ??DataTable174                    4
     ??DataTable175                    4
     ??DataTable176                    4
     ??DataTable177                    4
     ??DataTable178                    4
     ??DataTable179                    4
     ??DataTable180                    4
     ??DataTable181                    4
     ??DataTable182                    4
     ??DataTable183                    4
     ??DataTable185                    4
     ??DataTable186                    4
     ??DataTable187                    4
     ??DataTable188                    4
     ??DataTable189                    4
     ??DataTable190                    4
     ??DataTable191                    4
     ??DataTable192                    4
     ??DataTable200                    4
     ??DataTable201                    4
     ??DataTable204                    4
     ??DataTable205                    4
     ??DataTable207                    4
     ??DataTable210                    4
     ??DataTable214                    4
     ??DataTable215                    4
     ??DataTable216                    4
     ??DataTable217                    4
     ??DataTable218                    4
     ??DataTable219                    4
     ??DataTable220                    4
     ??DataTable221                    4
     ??DataTable222                    4
     ??DataTable223                    4
     ??DataTable232                    4
     ??DataTable233                    4
     ??DataTable234                    4
     ??DataTable238                    4
     ??DataTable240                    4
     ??DataTable241                    4
     ??DataTable242                    4
     ??DataTable243                    4
     ??DataTable244                    4
     ??DataTable245                    4
     ??DataTable246                    4
     ??DataTable247                    4
     ?<Initializer for LDecode>       28
     ?<Initializer for LBits>         28
     ?<Initializer for DDecode>      192
     ?<Initializer for DBits>         48
     ?<Initializer for DBitLengthCounts>
                                      76
     ?<Initializer for SDDecode>       8
     ?<Initializer for SDBits>         8
     ?<Initializer for LLSize>        52
     ?<Initializer for DecL1>         44
     ?<Initializer for PosL1>         52
     ?<Initializer for DecL2>         40
     ?<Initializer for PosL2>         52
     ?<Initializer for DecHf0>        36
     ?<Initializer for PosHf0>        52
     ?<Initializer for DecHf1>        32
     ?<Initializer for PosHf1>        52
     ?<Initializer for DecHf2>        32
     ?<Initializer for PosHf2>        52
     ?<Initializer for DecHf3>        28
     ?<Initializer for PosHf3>        52
     ?<Initializer for DecHf4>        24
     ?<Initializer for PosHf4>        52
     ?<Initializer for ShortLen1>     64
     ?<Initializer for ShortXor1>     60
     ?<Initializer for ShortLen2>     64
     ?<Initializer for ShortXor2>     60
      Others                         208

 
 10 636 bytes in segment CODE
     32 bytes in segment DATA_C
  1 288 bytes in segment DATA_I
  1 288 bytes in segment DATA_ID
 22 504 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 10 452 bytes of CODE  memory (+ 208 bytes shared)
  1 320 bytes of CONST memory
 23 792 bytes of DATA  memory

Errors: none
Warnings: none

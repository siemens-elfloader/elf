##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    31/Mar/2011  22:56:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CBN\Z80\ZXPAINT.C                             #
#    Command line    =  C:\arm\CBN\Z80\ZXPAINT.C -D NEWSGOLD -D UNPACK -lC   #
#                       C:\arm\CBN\Z80\Release\List\ -o                      #
#                       C:\arm\CBN\Z80\Release\Obj\ -s9 --no_unroll          #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --char_is_signed --fpu None -I "C:\arm2\Embedded     #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\CBN\Z80\Release\List\ZXPAINT.lst              #
#    Object file     =  C:\arm\CBN\Z80\Release\Obj\ZXPAINT.r79               #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CBN\Z80\ZXPAINT.C
      1          
      2          //zxpaint
      3          #include "..\swilib.h"
      4          extern char colors[];
      5          

   \                                 In segment CODE, align 4, keep-with-next
      6          void zxrepaint(char *scrbuf, char *mem){ //экран с поворотом
   \                     zxrepaint:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
      7            const int width8=192<<3, maxx=32;
      8            int x,y,xx,yy,yyy, col1, col2, col3, pal=22528;
   \   00000008   586CA0E3           MOV      R6,#+22528
      9          	int b, off=16384, off2, off3, scr=192-1, scr2;
   \   0000000C   402CA0E3           MOV      R2,#+16384
   \   00000010   BF30A0E3           MOV      R3,#+191
     10          	for(yyy=0; yyy<3; yyy++){
   \   00000014   00C0A0E3           MOV      R12,#+0
     11          	  off3=off;
   \                     ??zxrepaint_0:
   \   00000018   08208DE5           STR      R2,[SP, #+8]
     12            	  for(yy=0; yy<8; yy++){
   \   0000001C   0040A0E3           MOV      R4,#+0
     13            	    off2=off; scr2=scr;
   \                     ??zxrepaint_1:
   \   00000020   00208DE5           STR      R2,[SP, #+0]
   \   00000024   04308DE5           STR      R3,[SP, #+4]
     14          	    for(xx=0;xx<32;xx++){
   \   00000028   0050A0E3           MOV      R5,#+0
     15          	      b=mem[pal++];
   \                     ??zxrepaint_2:
   \   0000002C   D18096E1           LDRSB    R8,[R6, +R1]
     16          	      col3=(b>>3)&0x08;
     17          	      col1=colors[(b & 0x07)|col3];
   \   00000030   C0B09FE5           LDR      R11,??zxrepaint_3  ;; colors
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   C891A0E1           ASR      R9,R8,#+3
   \   0000003C   08A009E2           AND      R10,R9,#0x8
   \   00000040   077008E2           AND      R7,R8,#0x7
   \   00000044   07708AE1           ORR      R7,R10,R7
   \   00000048   DB7097E1           LDRSB    R7,[R7, +R11]
     18          	      col2=colors[((b>>3)&0x07)|col3];
   \   0000004C   078009E2           AND      R8,R9,#0x7
   \   00000050   08808AE1           ORR      R8,R10,R8
   \   00000054   DB9098E1           LDRSB    R9,[R8, +R11]
     19                        for(y=0;y<8;y++){
   \   00000058   00A0A0E3           MOV      R10,#+0
     20                          b=mem[off];
   \                     ??zxrepaint_4:
   \   0000005C   D18092E1           LDRSB    R8,[R2, +R1]
     21          	        for(x=0;x<8;x++,scr+=192){
   \   00000060   00B0A0E3           MOV      R11,#+0
     22          	          scrbuf[scr]=((b & 0x80)!=0)?col1:col2;
     23          	          b<<=1;
   \                     ??zxrepaint_5:
   \   00000064   01B08BE2           ADD      R11,R11,#+1
   \   00000068   800018E3           TST      R8,#0x80
   \   0000006C   07E0A011           MOVNE    LR,R7
   \   00000070   09E0A001           MOVEQ    LR,R9
   \   00000074   00E0C3E7           STRB     LR,[R3, +R0]
   \   00000078   8880A0E1           LSL      R8,R8,#+1
   \   0000007C   C03083E2           ADD      R3,R3,#+192
   \   00000080   08005BE3           CMP      R11,#+8
   \   00000084   F6FFFFBA           BLT      ??zxrepaint_5
     24          	        } //x
     25          	        off+=256;
   \   00000088   402F82E2           ADD      R2,R2,#+256
     26          	        scr-=(width8)+1;
   \   0000008C   608EE0E3           MVN      R8,#+1536
   \   00000090   033088E0           ADD      R3,R8,R3
     27          	      } //y
   \   00000094   01A08AE2           ADD      R10,R10,#+1
   \   00000098   08005AE3           CMP      R10,#+8
   \   0000009C   EEFFFFBA           BLT      ??zxrepaint_4
     28          	      off-=2047;//(256*8-1);
   \   000000A0   FE70E0E3           MVN      R7,#+254
   \   000000A4   707EC7E3           BIC      R7,R7,#0x700
   \   000000A8   022087E0           ADD      R2,R7,R2
     29          	      scr+=(width8)+8;
   \   000000AC   0870A0E3           MOV      R7,#+8
   \   000000B0   607E87E3           ORR      R7,R7,#0x600
   \   000000B4   033087E0           ADD      R3,R7,R3
     30          	    } //xx
   \   000000B8   015085E2           ADD      R5,R5,#+1
   \   000000BC   200055E3           CMP      R5,#+32
   \   000000C0   D9FFFFBA           BLT      ??zxrepaint_2
     31          	    off=off2+32;
   \   000000C4   00209DE5           LDR      R2,[SP, #+0]
     32          	    pal+=32-maxx;
     33          	    scr=scr2-8;
   \   000000C8   04309DE5           LDR      R3,[SP, #+4]
   \   000000CC   202082E2           ADD      R2,R2,#+32
   \   000000D0   083043E2           SUB      R3,R3,#+8
     34          	  } //yy
   \   000000D4   014084E2           ADD      R4,R4,#+1
   \   000000D8   080054E3           CMP      R4,#+8
   \   000000DC   CFFFFFBA           BLT      ??zxrepaint_1
     35          	  //dminy=0;
     36          	  off=off3+2048;//256*8;
   \   000000E0   08209DE5           LDR      R2,[SP, #+8]
     37          	}
   \   000000E4   01C08CE2           ADD      R12,R12,#+1
   \   000000E8   802E82E2           ADD      R2,R2,#+2048
   \   000000EC   03005CE3           CMP      R12,#+3
   \   000000F0   C8FFFFBA           BLT      ??zxrepaint_0
     38           
     39          }
   \   000000F4   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??zxrepaint_3:
   \   000000F8   ........           DC32     colors
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          void zxelpaint(char *s, char *ss){ //for EL
   \                     zxelpaint:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
     42            int j;
     43            s+=22*240+24;
   \   00000008   B810A0E3           MOV      R1,#+184
   \   0000000C   501D81E3           ORR      R1,R1,#0x1400
   \   00000010   005081E0           ADD      R5,R1,R0
     44            for(j=0;j<256;j++){
   \   00000014   0060A0E3           MOV      R6,#+0
     45              memcpy(s,ss,192);
   \                     ??zxelpaint_0:
   \   00000018   C020A0E3           MOV      R2,#+192
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           _BLF     memcpy,??memcpy??rA
     46              s+=240;
   \   00000028   F05085E2           ADD      R5,R5,#+240
     47              ss+=192;
   \   0000002C   C04084E2           ADD      R4,R4,#+192
     48            }
   \   00000030   016086E2           ADD      R6,R6,#+1
   \   00000034   400F56E3           CMP      R6,#+256
   \   00000038   F6FFFFBA           BLT      ??zxelpaint_0
     49          }
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          void zx65paint(char *s, char *ss){
   \                     zx65paint:
   \   00000000   10002DE9           PUSH     {R4}
     52            int i,j,k=0;
   \   00000004   0020A0E3           MOV      R2,#+0
     53            s+=3*132+2;
   \   00000008   8E30A0E3           MOV      R3,#+142
   \   0000000C   403F83E3           ORR      R3,R3,#0x100
   \   00000010   000083E0           ADD      R0,R3,R0
     54            for(j=0;j<170;j++){
   \   00000014   0030A0E3           MOV      R3,#+0
     55              for(i=0;i<64;i++){
   \                     ??zx65paint_0:
   \   00000018   00C0A0E3           MOV      R12,#+0
     56                *s++=*ss++;
   \                     ??zx65paint_1:
   \   0000001C   ........           LDRSB    R4,[R1], #+1
     57                *s++=*ss;
     58                ss+=2;
     59              }
   \   00000020   01C08CE2           ADD      R12,R12,#+1
   \   00000024   40005CE3           CMP      R12,#+64
   \   00000028   ........           STRB     R4,[R0], #+1
   \   0000002C   ........           LDRSB    R4,[R1], #+2
   \   00000030   ........           STRB     R4,[R0], #+1
   \   00000034   F8FFFFBA           BLT      ??zx65paint_1
     60              s+=4;
   \   00000038   040080E2           ADD      R0,R0,#+4
     61              if(++k>2){ k=0; ss+=192;}
   \   0000003C   012082E2           ADD      R2,R2,#+1
   \   00000040   030052E3           CMP      R2,#+3
   \   00000044   0020A0A3           MOVGE    R2,#+0
   \   00000048   C01081A2           ADDGE    R1,R1,#+192
     62            }
   \   0000004C   013083E2           ADD      R3,R3,#+1
   \   00000050   AA0053E3           CMP      R3,#+170
   \   00000054   EFFFFFBA           BLT      ??zx65paint_0
     63          }
   \   00000058   1000BDE8           POP      {R4}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     zx65paint     4
     zxelpaint    16
     zxrepaint    48


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     zxrepaint       252
     zxelpaint        64
     zx65paint        96
      Others          24

 
 436 bytes in segment CODE
 
 412 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: none

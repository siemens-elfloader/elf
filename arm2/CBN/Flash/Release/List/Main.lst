##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Oct/2009  12:37:56 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CBN\Flash\Main.c                              #
#    Command line    =  C:\arm\CBN\Flash\Main.c -lC                          #
#                       C:\arm\CBN\Flash\Release\List\ -o                    #
#                       C:\arm\CBN\Flash\Release\Obj\ -s9 --no_unroll        #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\CBN\Flash\Release\List\Main.lst               #
#    Object file     =  C:\arm\CBN\Flash\Release\Obj\Main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CBN\Flash\Main.c
      1          #include "E:\ARM\swilib.h"
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          void Exit(void){
   \                     Exit:
   \   00000000   00402DE9           PUSH     {LR}
      4          extern void *ELF_BEGIN;
      5          ((void (*)(void *))(mfree_adr()))(&ELF_BEGIN);
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Exit_0      ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   01F0A0E1           MOV      PC,R1            ;; tailcall
   \                     ??Exit_0:
   \   00000018   ........           DC32     ELF_BEGIN
      6          }
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          int fwrite32(int fh, void *buf, int len, unsigned int *err){
   \                     fwrite:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
      9            int clen, rlen, total=0;
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   010000EA           B        ??fwrite_0
     10            while(len){
     11            if (len>16384) clen=16384; else clen=len;
     12            total+=(rlen=fwrite(fh, buf, clen, err));
     13            if (rlen!=clen) break;
     14            buf=(char*)buf+rlen;
   \                     ??fwrite_1:
   \   0000001C   055080E0           ADD      R5,R0,R5
     15            len-=clen;
   \   00000020   096046E0           SUB      R6,R6,R9
   \                     ??fwrite_0:
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   0C00000A           BEQ      ??fwrite_2
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   400C80E3           ORR      R0,R0,#0x4000
   \   00000034   000056E1           CMP      R6,R0
   \   00000038   409CA0A3           MOVGE    R9,#+16384
   \   0000003C   0690A0B1           MOVLT    R9,R6
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0920A0E1           MOV      R2,R9
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   EAFFFFEB           BL       fwrite
   \   00000054   088080E0           ADD      R8,R0,R8
   \   00000058   090050E1           CMP      R0,R9
   \   0000005C   EEFFFF0A           BEQ      ??fwrite_1
     16            }return(total);
   \                     ??fwrite_2:
   \   00000060   0800A0E1           MOV      R0,R8
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
     17          }
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          int getval(char *s){
     20            int val=0;
   \                     getval:
   \   00000000   0010A0E3           MOV      R1,#+0
     21            --s;
   \   00000004   010040E2           SUB      R0,R0,#+1
   \   00000008   010000EA           B        ??getval_0
     22            while(*++s && *s!='-'){
     23              if(*s>='0' && *s<='9') val=(val<<4)+*s-'0';
   \                     ??getval_1:
   \   0000000C   021083E0           ADD      R1,R3,R2
   \   00000010   301041E2           SUB      R1,R1,#+48
   \                     ??getval_0:
   \   00000014   0120F0E5           LDRB     R2,[R0, #+1]!
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   2D005213           CMPNE    R2,#+45
   \   00000020   0C00000A           BEQ      ??getval_2
   \   00000024   0132A0E1           LSL      R3,R1,#+4
   \   00000028   300052E3           CMP      R2,#+48
   \   0000002C   0100003A           BCC      ??getval_3
   \   00000030   3A0052E3           CMP      R2,#+58
   \   00000034   F4FFFF3A           BCC      ??getval_1
     24              else if((*s|=0x20)>='a' && *s<='f') val=(val<<4)+*s-'a'+10;
   \                     ??getval_3:
   \   00000038   202082E3           ORR      R2,R2,#0x20
   \   0000003C   0020C0E5           STRB     R2,[R0, #+0]
   \   00000040   610052E3           CMP      R2,#+97
   \   00000044   0300003A           BCC      ??getval_2
   \   00000048   670052E3           CMP      R2,#+103
   \   0000004C   02108330           ADDCC    R1,R3,R2
   \   00000050   57104132           SUBCC    R1,R1,#+87
   \   00000054   EEFFFF3A           BCC      ??getval_0
     25              else break;
     26            }
     27            return val;
   \                     ??getval_2:
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   1EFF2FE1           BX       LR               ;; return
     28          }
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          int main(char *exename, char *fname){
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   84D04DE2           SUB      SP,SP,#+132
   \   00000008   0140B0E1           MOVS     R4,R1
     31            unsigned int err;
     32            int f, from, size;
     33            char *s, tmp[128];
     34            if(fname && (f=fopen(fname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))!=-1){
   \   0000000C   2B00000A           BEQ      ??main_0
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   402FA0E3           MOV      R2,#+256
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   831C81E3           ORR      R1,R1,#0x8300
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   0A0000EF           SWI      +10
   \   00000028   0050A0E1           MOV      R5,R0
   \   0000002C   010075E3           CMN      R5,#+1
   \   00000030   2200000A           BEQ      ??main_0
     35              s=fname+strlen(fname);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   044080E0           ADD      R4,R0,R4
     36              while(*--s!='\\');
   \                     ??main_1:
   \   00000040   010074E5           LDRB     R0,[R4, #-1]!
   \   00000044   5C0050E3           CMP      R0,#+92
   \   00000048   FCFFFF1A           BNE      ??main_1
     37              from=getval(++s);
   \   0000004C   014084E2           ADD      R4,R4,#+1
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       getval
   \   00000058   0060A0E1           MOV      R6,R0
     38              while(*++s && *s!='-');
   \                     ??main_2:
   \   0000005C   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   1200000A           BEQ      ??main_3
   \   00000068   2D0050E3           CMP      R0,#+45
   \   0000006C   FAFFFF1A           BNE      ??main_2
   \   00000070   010084E2           ADD      R0,R4,#+1
   \   00000074   ........           BL       getval
   \   00000078   0040B0E1           MOVS     R4,R0
   \   0000007C   0C00000A           BEQ      ??main_3
     39              if(*s && (size=getval(s+1))){
     40                fwrite32(f,(char*)0xA0000000+from,size,&err);
   \   00000080   0D30A0E1           MOV      R3,SP
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   A01486E2           ADD      R1,R6,#-1610612736
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           BL       fwrite
     41                sprintf(tmp,"%X-%X\nсохранен в файл",from,size);
   \   00000094   30109FE5           LDR      R1,??main_4      ;; `?<Constant "%X-%X\\n\\361\\356\\365\\360\\340\\355\\34`
   \   00000098   0430A0E1           MOV      R3,R4
   \   0000009C   0620A0E1           MOV      R2,R6
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   160000EF           SWI      +22
     42                ShowMSG(1,(int)tmp);
   \   000000A8   04108DE2           ADD      R1,SP,#+4
   \   000000AC   0100A0E3           MOV      R0,#+1
   \   000000B0   480100EF           SWI      +328
     43              }fclose(f,&err);
   \                     ??main_3:
   \   000000B4   0D10A0E1           MOV      R1,SP
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   0D0000EF           SWI      +13
     44            }
     45            //SUBPROC((void *)Exit);
     46            return (0);
   \                     ??main_0:
   \   000000C0   0000A0E3           MOV      R0,#+0
   \   000000C4   84D08DE2           ADD      SP,SP,#+132
   \   000000C8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_4:
   \   000000CC   ........           DC32     `?<Constant "%X-%X\\n\\361\\356\\365\\360\\340\\355\\34`
     47          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%X-%X\\n\\361\\356\\365\\360\\340\\355\\34`:
   \   00000000   25582D25580A       DC8 "%X-%X\012\361\356\365\360\340\355\345\355 \342 \364\340\351\353"
   \              F1EEF5F0E0ED
   \              E5ED20E220F4
   \              E0E9EB00    
   \   00000016   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     Exit         4
     fwrite      28
     getval       0
     main       148


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Exit                             28
     fwrite                          104
     getval                           96
     main                            208
     ?<Constant "%X-%X\n\361\356\365\360\340\355\34
                                      24
      Others                          16

 
 452 bytes in segment CODE
  24 bytes in segment DATA_C
 
 436 bytes of CODE  memory (+ 16 bytes shared)
  24 bytes of CONST memory

Errors: none
Warnings: none

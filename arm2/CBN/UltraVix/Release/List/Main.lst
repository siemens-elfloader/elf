##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Aug/2009  15:39:57 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CBN\UltraVix\Main.c                           #
#    Command line    =  C:\arm\CBN\UltraVix\Main.c -D NEWSGOLD -D HIGHCOLOR  #
#                       -D GRAPH -D UNPACK -D NOZIP -D NORAR -lC             #
#                       C:\arm\CBN\UltraVix\Release\List\ -o                 #
#                       C:\arm\CBN\UltraVix\Release\Obj\ -s9 --no_unroll     #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --char_is_signed --fpu None -I "C:\arm2\Embedded     #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\CBN\UltraVix\Release\List\Main.lst            #
#    Object file     =  C:\arm\CBN\UltraVix\Release\Obj\Main.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CBN\UltraVix\Main.c
      1          
      2          // Игра UltraVix
      3          
      4          //#define HIGHCOLOR // 16-битный режим
      5          //#define GRAPH  // Графика
      6          #include "..\swilib.h" // Главная библ. - берем ее из др.примеров
      7          #include "..\random.h" // "Случайные" числа

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned int __data randseed
   \                     randseed:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int randint(int)
   \                     randint:
   \   00000000   ........           LDR      R1,??DataTable1  ;; randseed
   \   00000004   2C309FE5           LDR      R3,??randint_0   ;; 0x8088405
   \   00000008   10002DE9           PUSH     {R4}
   \   0000000C   002091E5           LDR      R2,[R1, #+0]
   \   00000010   930202E0           MUL      R2,R3,R2
   \   00000014   C03FA0E1           ASR      R3,R0,#+31
   \   00000018   014082E2           ADD      R4,R2,#+1
   \   0000001C   004081E5           STR      R4,[R1, #+0]
   \   00000020   0020A0E1           MOV      R2,R0
   \   00000024   940281E0           UMULL    R0,R1,R4,R2
   \   00000028   941321E0           MLA      R1,R4,R3,R1
   \   0000002C   1000BDE8           POP      {R4}
   \   00000030   0100A0E1           MOV      R0,R1
   \   00000034   1EFF2FE1           BX       LR               ;; return
   \                     ??randint_0:
   \   00000038   05840808           DC32     0x8088405

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int rand()
   \                     rand:
   \   00000000   4009A0E3           MOV      R0,#+1048576
   \   00000004   ........           B        randint          ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Randomize()
   \                     Randomize:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   08008DE2           ADD      R0,SP,#+8
   \   00000010   B40000EF           SWI      +180
   \   00000014   0110DDE5           LDRB     R1,[SP, #+1]
   \   00000018   0220DDE5           LDRB     R2,[SP, #+2]
   \   0000001C   ........           LDR      R0,??DataTable1  ;; randseed
   \   00000020   821281E1           ORR      R1,R1,R2, LSL #+5
   \   00000024   001080E5           STR      R1,[R0, #+0]
   \   00000028   0F80BDE8           POP      {R0-R3,PC}       ;; return
      8          

   \                                 In segment DATA_I, align 4, align-sorted
      9          char *Title="UltraVix 0.1 (c)bn";
   \                     Title:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for Title>`
     10          extern int width, height;
     11          typedef unsigned char byte;
     12          extern short *screen;//[132*176]; // Экран 132*176
     13          extern int screensize;
     14          extern void DrawScreen(); // Функция перерисовки экрана
     15          void enter(); // Нажат enter
     16          int newgame(); // Начать новую игру
     17          

   \                                 In segment DATA_I, align 4, align-sorted
     18          const char *errors[]={
   \                     errors:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for errors>`
     19            0,
     20          "Недостаточно памяти\0",
     21          "Неверный .bmp или font файл!\0",
     22          "Ошибка загрузки графики уровня\0",
     23          "Ошибка загрузки файла данных уровня\0",
     24          "Недостаточно памяти\0"
     25          };
     26          

   \                                 In segment DATA_C, align 4, align-sorted
     27          const char sini[]="save.ini", slev[]="level00.bmp";
   \                     sini:
   \   00000000   736176652E69       DC8 "save.ini"
   \              6E6900      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     slev:
   \   00000000   6C6576656C30       DC8 "level00.bmp"
   \              302E626D7000

   \                                 In segment DATA_Z, align 4, align-sorted
     28          char filename[128], *file; // Храним имя файла
   \                     filename:
   \   00000000                      DS8 128

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     file:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     29          char *msg=0;
   \                     msg:
   \   00000000                      DS8 4
     30          

   \                                 In segment DATA_Z, align 1, align-sorted
     31          byte level=0, exit=0; // текущий уровень и выход
   \                     level:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     exit:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 4, align-sorted
     32          char *back=0, *dev=0; // бэкбуфер с рисунком и предметы
   \                     back:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     dev:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     33          char *ini=0, *font=0;
   \                     ini:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     font:
   \   00000000                      DS8 4
     34          

   \                                 In segment DATA_Z, align 4, align-sorted
     35          int x=0, y=0; // курсор
   \                     x:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     y:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     36          int heat=0; // "прогрев" :)
   \                     heat:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     37          int seldev=0; // выбранный девайс
   \                     seldev:
   \   00000000                      DS8 4
     38          
     39          #define maxheat 1000
     40          #define step 10
     41          #define devsize 24
     42          

   \                                 In segment DATA_Z, align 4, align-sorted
     43          char ispred[256];
   \                     ispred:
   \   00000000                      DS8 256
     44          
     45          enum {enum_, efrom, eto, ex1, ey1, ex2, ey2, eplus, maxpr};
     46          struct prevst{
     47            int a[maxpr];
     48            char *name;

   \                                 In segment DATA_Z, align 4, align-sorted
     49          } *prev=0, *p, *pp, *prevend; 
   \                     prev:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     p:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     pp:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     prevend:
   \   00000000                      DS8 4
     50          
     51          #define maxdel 4
     52          /*
     53          level0.ini  (падение скорости от времени)
     54          0  от  до   -скорость  
     55          
     56          номер_предмета  от  до  x1  y1  x2  y2  +-  Что_говорит
     57          
     58          +-Nй_раз  МожноNраз  Что_говорит
     59          мишка, кольцо
     60          банан
     61          рюмка, водка
     62          рука, вода, язык, губы
     63          член, плетка
     64          */
     65          
     66          #define timedelay 262*200

   \                                 In segment DATA_Z, align 4, align-sorted
     67          GBSTMR timer;
   \                     timer:
   \   00000000                      DS8 16

   \                                 In segment CODE, align 4, keep-with-next
     68          void timer_proc(){ // Функция выполняется по таймеру
     69            for(pp=prev; pp<prevend; pp++){
   \                     timer_proc:
   \   00000000   ........           LDR      R0,??DataTable67  ;; prev
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   C0409FE5           LDR      R4,??timer_proc_0  ;; pp
   \   00000010   ........           LDR      R5,??DataTable68  ;; prevend
   \   00000014   000084E5           STR      R0,[R4, #+0]
   \   00000018   001095E5           LDR      R1,[R5, #+0]
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   2500002A           BCS      ??timer_proc_1
     70              if(pp->a[enum_]==0 && heat>=pp->a[efrom] && heat<p->a[eto]){
   \                     ??timer_proc_2:
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   1B00001A           BNE      ??timer_proc_3
   \   00000034   ........           LDR      R1,??DataTable70  ;; heat
   \   00000038   040090E5           LDR      R0,[R0, #+4]
   \   0000003C   002091E5           LDR      R2,[R1, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   160000BA           BLT      ??timer_proc_3
   \   00000048   ........           LDR      R0,??DataTable69  ;; p
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   083090E5           LDR      R3,[R0, #+8]
   \   00000054   030052E1           CMP      R2,R3
   \   00000058   110000AA           BGE      ??timer_proc_3
     71                if((heat-=p->a[ex1])<0) heat=0;
   \   0000005C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000060   000052E0           SUBS     R0,R2,R0
   \   00000064   000081E5           STR      R0,[R1, #+0]
   \   00000068   0000A043           MOVMI    R0,#+0
   \   0000006C   00008145           STRMI    R0,[R1, #+0]
   \   00000070   0A00004A           BMI      ??timer_proc_4
     72                else if(heat>=maxheat){
   \   00000074   FA0F50E3           CMP      R0,#+1000
   \   00000078   080000BA           BLT      ??timer_proc_4
     73                    ++level;
   \   0000007C   ........           LDR      R0,??DataTable75  ;; level
   \   00000080   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000084   011081E2           ADD      R1,R1,#+1
   \   00000088   0010C0E5           STRB     R1,[R0, #+0]
     74                    if(newgame()) exit=1;
   \   0000008C   ........           BL       newgame
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   ........           LDRNE    R0,??DataTable71  ;; exit
   \   00000098   0110A013           MOVNE    R1,#+1
   \   0000009C   0010C015           STRBNE   R1,[R0, #+0]
     75                }
     76                REDRAW();
   \                     ??timer_proc_4:
   \   000000A0   720100EF           SWI      +370
     77              }
     78            }
   \                     ??timer_proc_3:
   \   000000A4   000094E5           LDR      R0,[R4, #+0]
   \   000000A8   001095E5           LDR      R1,[R5, #+0]
   \   000000AC   240080E2           ADD      R0,R0,#+36
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \   000000B4   010050E1           CMP      R0,R1
   \   000000B8   D9FFFF3A           BCC      ??timer_proc_2
     79            GBS_StartTimerProc(&timer,timedelay,timer_proc); // Стартуем таймер с частотой N раз в секунду
   \                     ??timer_proc_1:
   \   000000BC   ........           LDR      R2,??DataTable41  ;; timer_proc
   \   000000C0   ........           LDR      R0,??DataTable42  ;; timer
   \   000000C4   B010A0E3           MOV      R1,#+176
   \   000000C8   CC1C81E3           ORR      R1,R1,#0xCC00
   \   000000CC   4D0000EF           SWI      +77
     80          }  
   \   000000D0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??timer_proc_0:
   \   000000D4   ........           DC32     pp
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          void onredraw(){ // Перерисовка экрана screen[132*176]
     83            int i=heat*height/maxheat, j;
   \                     onredraw:
   \   00000000   ........           LDR      R0,??DataTable70  ;; heat
   \   00000004   ........           LDR      R1,??DataTable29  ;; height
   \   00000008   F0472DE9           PUSH     {R4-R10,LR}
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   001091E5           LDR      R1,[R1, #+0]
     84            short *scr=screen+(screensize>>1)-4;
   \   00000014   B4519FE5           LDR      R5,??onredraw_0  ;; screen
   \   00000018   910000E0           MUL      R0,R1,R0
   \   0000001C   B0119FE5           LDR      R1,??onredraw_0+0x4  ;; 0x10624dd3
   \   00000020   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000024   4333A0E1           ASR      R3,R3,#+6
   \   00000028   A04F83E0           ADD      R4,R3,R0, LSR #+31
   \   0000002C   ........           LDR      R0,??DataTable60  ;; screensize
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   000095E5           LDR      R0,[R5, #+0]
   \   00000038   C120A0E1           ASR      R2,R1,#+1
   \   0000003C   822080E0           ADD      R2,R0,R2, LSL #+1
   \   00000040   086042E2           SUB      R6,R2,#+8
     85            byte *bb, b;
     86            int dx, dy;
     87            movsd(screen,back,screensize>>2);
   \   00000044   4121A0E1           ASR      R2,R1,#+2
   \   00000048   ........           LDR      R1,??DataTable55  ;; back
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   ........           _BLF     movsd,??movsd??rA
   \   00000054   0A0000EA           B        ??onredraw_1
     88            while(--i>=0){
     89              scr[0]=scr[1]=scr[2]=scr[3]=0xf800;
   \                     ??onredraw_2:
   \   00000058   FF00E0E3           MVN      R0,#+255
   \   0000005C   700EC0E3           BIC      R0,R0,#0x700
   \   00000060   B600C6E1           STRH     R0,[R6, #+6]
   \   00000064   B400C6E1           STRH     R0,[R6, #+4]
   \   00000068   B200C6E1           STRH     R0,[R6, #+2]
   \   0000006C   B000C6E1           STRH     R0,[R6, #+0]
     90              scr-=width;
   \   00000070   ........           LDR      R0,??DataTable28  ;; width
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   8000A0E1           LSL      R0,R0,#+1
   \   0000007C   000060E2           RSB      R0,R0,#+0
   \   00000080   066080E0           ADD      R6,R0,R6
     91            }
   \                     ??onredraw_1:
   \   00000084   014054E2           SUBS     R4,R4,#+1
   \   00000088   F2FFFF5A           BPL      ??onredraw_2
     92            if(msg){
   \   0000008C   ........           LDR      R0,??DataTable74  ;; msg
   \   00000090   001090E5           LDR      R1,[R0, #+0]
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   3000000A           BEQ      ??onredraw_3
     93              --msg;
   \   0000009C   011041E2           SUB      R1,R1,#+1
   \   000000A0   001080E5           STR      R1,[R0, #+0]
     94              dx=dy=0;
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   01C0A0E1           MOV      R12,R1
   \   000000B0   0B0000EA           B        ??onredraw_4
     95              while(*++msg){
     96                if(dx>=width-8){
     97                  dx=0; dy+=10;
     98                }
     99                scr=screen+dy*width+dx;
    100                bb=(byte*)font+*(byte*)msg * 8;
    101                for(j=0;j<8;j++){
    102                  b=*bb++;
    103                  for(i=0;i<8;i++){
    104                    *scr++=(b&0x80)?0:0xffff;
   \                     ??onredraw_5:
   \   000000B4   B0E0C7E1           STRH     LR,[R7, #+0]
    105                    //if(b&0x80) *scr=0xffff;
    106                    //scr++;
    107                    b<<=1;
   \   000000B8   888CA0E1           LSL      R8,R8,#+25
   \   000000BC   288CA0E1           LSR      R8,R8,#+24
   \   000000C0   014084E2           ADD      R4,R4,#+1
   \   000000C4   080054E3           CMP      R4,#+8
   \   000000C8   1D0000BA           BLT      ??onredraw_6
    108                  }
    109                  scr+=width-8;
   \   000000CC   834086E0           ADD      R4,R6,R3, LSL #+1
   \   000000D0   106044E2           SUB      R6,R4,#+16
   \   000000D4   019089E2           ADD      R9,R9,#+1
   \   000000D8   080059E3           CMP      R9,#+8
   \   000000DC   160000BA           BLT      ??onredraw_7
    110                }
    111                dx+=8;
   \   000000E0   082082E2           ADD      R2,R2,#+8
   \                     ??onredraw_4:
   \   000000E4   003090E5           LDR      R3,[R0, #+0]
   \   000000E8   013083E2           ADD      R3,R3,#+1
   \   000000EC   003080E5           STR      R3,[R0, #+0]
   \   000000F0   0340A0E1           MOV      R4,R3
   \   000000F4   D030D4E1           LDRSB    R3,[R4, #+0]
   \   000000F8   000053E3           CMP      R3,#+0
   \   000000FC   1600000A           BEQ      ??onredraw_8
   \   00000100   ........           LDR      R3,??DataTable28  ;; width
   \   00000104   007095E5           LDR      R7,[R5, #+0]
   \   00000108   003093E5           LDR      R3,[R3, #+0]
   \   0000010C   0040D4E5           LDRB     R4,[R4, #+0]
   \   00000110   086043E2           SUB      R6,R3,#+8
   \   00000114   060052E1           CMP      R2,R6
   \   00000118   0A1081A2           ADDGE    R1,R1,#+10
   \   0000011C   930106E0           MUL      R6,R3,R1
   \   00000120   0020A0A3           MOVGE    R2,#+0
   \   00000124   866087E0           ADD      R6,R7,R6, LSL #+1
   \   00000128   ........           LDR      R7,??DataTable51  ;; font
   \   0000012C   826086E0           ADD      R6,R6,R2, LSL #+1
   \   00000130   007097E5           LDR      R7,[R7, #+0]
   \   00000134   0090A0E3           MOV      R9,#+0
   \   00000138   84A187E0           ADD      R10,R7,R4, LSL #+3
   \                     ??onredraw_7:
   \   0000013C   ........           LDRB     R8,[R10], #+1
   \   00000140   0040A0E3           MOV      R4,#+0
   \                     ??onredraw_6:
   \   00000144   0670A0E1           MOV      R7,R6
   \   00000148   026087E2           ADD      R6,R7,#+2
   \   0000014C   800018E3           TST      R8,#0x80
   \   00000150   0CE0E001           MVNEQ    LR,R12
   \   00000154   00E0A013           MOVNE    LR,#+0
   \   00000158   D5FFFFEA           B        ??onredraw_5
    112              }
    113              msg=0;
   \                     ??onredraw_8:
   \   0000015C   00C080E5           STR      R12,[R0, #+0]
    114            }
    115            bitblt(screen,dev, x-devsize/2,y-devsize/2, devsize,devsize,  (seldev&3)*devsize, (seldev>>2)*devsize, 0x1f,0);
   \                     ??onredraw_3:
   \   00000160   ........           LDR      R0,??DataTable66  ;; seldev
   \   00000164   0010A0E3           MOV      R1,#+0
   \   00000168   000090E5           LDR      R0,[R0, #+0]
   \   0000016C   02002DE9           PUSH     {R1}
   \   00000170   1820A0E3           MOV      R2,#+24
   \   00000174   1F10A0E3           MOV      R1,#+31
   \   00000178   02002DE9           PUSH     {R1}
   \   0000017C   4011A0E1           ASR      R1,R0,#+2
   \   00000180   030000E2           AND      R0,R0,#0x3
   \   00000184   920101E0           MUL      R1,R2,R1
   \   00000188   920000E0           MUL      R0,R2,R0
   \   0000018C   02002DE9           PUSH     {R1}
   \   00000190   01002DE9           PUSH     {R0}
   \   00000194   1800A0E3           MOV      R0,#+24
   \   00000198   01002DE9           PUSH     {R0}
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   ........           LDR      R0,??DataTable73  ;; y
   \   000001A4   000090E5           LDR      R0,[R0, #+0]
   \   000001A8   0C3040E2           SUB      R3,R0,#+12
   \   000001AC   ........           LDR      R0,??DataTable72  ;; x
   \   000001B0   000090E5           LDR      R0,[R0, #+0]
   \   000001B4   0C2040E2           SUB      R2,R0,#+12
   \   000001B8   ........           LDR      R0,??DataTable46  ;; dev
   \   000001BC   001090E5           LDR      R1,[R0, #+0]
   \   000001C0   000095E5           LDR      R0,[R5, #+0]
   \   000001C4   ........           _BLF     bitblt,??bitblt??rA
    116          }
   \   000001C8   18D08DE2           ADD      SP,SP,#+24
   \   000001CC   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??onredraw_0:
   \   000001D0   ........           DC32     screen
   \   000001D4   D34D6210           DC32     0x10624dd3
    117          

   \                                 In segment CODE, align 4, keep-with-next
    118          int onkey(unsigned char keycode, int pressed){ //  Обработчик клавиш. Вернуть 0 или 1 для выхода
   \                     onkey:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    119            switch(pressed){      
   \   00000004   9320A0E3           MOV      R2,#+147
   \   00000008   402F82E3           ORR      R2,R2,#0x100
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   02208212           ADDNE    R2,R2,#+2
   \   00000014   02005111           CMPNE    R1,R2
   \   00000018   0100000A           BEQ      ??onkey_1
    120            case KEY_UP: return 0; // Клавиша отпущена
   \                     ??onkey_2:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   F080BDE8           POP      {R4-R7,PC}       ;; return
    121            case LONG_PRESS: // Клавиша удерживается долго (повтор)
    122            case KEY_DOWN: // Клавиша нажата
    123                if(exit) return 1;
   \                     ??onkey_1:
   \   00000024   ........           LDR      R1,??DataTable71  ;; exit
   \   00000028   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0100000A           BEQ      ??onkey_3
   \                     ??onkey_4:
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   F080BDE8           POP      {R4-R7,PC}
    124                switch(keycode){ // Код клавиши
   \                     ??onkey_3:
   \   0000003C   ........           LDR      R3,??DataTable72  ;; x
   \   00000040   ........           LDR      R4,??DataTable73  ;; y
   \   00000044   00C093E5           LDR      R12,[R3, #+0]
   \   00000048   005094E5           LDR      R5,[R4, #+0]
   \   0000004C   ........           LDR      R1,??DataTable54  ;; ispred
   \   00000050   ........           LDR      R2,??DataTable66  ;; seldev
   \   00000054   0060A0E3           MOV      R6,#+0
   \   00000058   010040E2           SUB      R0,R0,#+1
   \   0000005C   3D0050E3           CMP      R0,#+61
   \   00000060   EDFFFF8A           BHI      ??onkey_2
   \   00000064   017F8FE2           ADR      R7,??onkey_0
   \   00000068   D07097E1           LDRSB    R7,[R7, R0]
   \   0000006C   07F18FE0           ADD      PC,PC,R7, LSL #+2
   \                     ??onkey_0:
   \   00000070   0FEAEA17           DC8      +15,+234,+234,+23
   \   00000074   EAEAEAEA           DC8      +234,+234,+234,+234
   \   00000078   EAEA1FF0           DC8      +234,+234,+31,+240
   \   0000007C   EAEAEAEA           DC8      +234,+234,+234,+234
   \   00000080   EAEAEAEA           DC8      +234,+234,+234,+234
   \   00000084   EAEAEAEA           DC8      +234,+234,+234,+234
   \   00000088   EA40EAEA           DC8      +234,+64,+234,+234
   \   0000008C   EAEAEAEA           DC8      +234,+234,+234,+234
   \   00000090   EAEA17EA           DC8      +234,+234,+23,+234
   \   00000094   EAEAEAEA           DC8      +234,+234,+234,+234
   \   00000098   EA0FEAEA           DC8      +234,+15,+234,+234
   \   0000009C   EAEAEAEA           DC8      +234,+234,+234,+234
   \   000000A0   EA32EA24           DC8      +234,+50,+234,+36
   \   000000A4   4029EA37           DC8      +64,+41,+234,+55
   \   000000A8   EAEA3237           DC8      +234,+234,+50,+55
   \   000000AC   24290000           DC8      +36,+41,+0,+0
    125                case RED_BUTTON: return 1; // Выход
    126                case LEFT_SOFT: case '*': //+-предмет
    127                  while(!ispred[seldev=(seldev-1)&0xff]);
   \                     ??onkey_5:
   \   000000B0   000092E5           LDR      R0,[R2, #+0]
   \   000000B4   010040E2           SUB      R0,R0,#+1
   \   000000B8   FF0000E2           AND      R0,R0,#0xFF
   \   000000BC   000082E5           STR      R0,[R2, #+0]
   \   000000C0   D10090E1           LDRSB    R0,[R0, +R1]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   2A00001A           BNE      ??onkey_6
   \   000000CC   F7FFFFEA           B        ??onkey_5
    128                  break;
    129                case RIGHT_SOFT: case '#':
    130                  while(!ispred[seldev=(seldev+1)&0xff]);
   \                     ??onkey_7:
   \   000000D0   000092E5           LDR      R0,[R2, #+0]
   \   000000D4   010080E2           ADD      R0,R0,#+1
   \   000000D8   FF0000E2           AND      R0,R0,#0xFF
   \   000000DC   000082E5           STR      R0,[R2, #+0]
   \   000000E0   D10090E1           LDRSB    R0,[R0, +R1]
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   2200001A           BNE      ??onkey_6
   \   000000EC   F7FFFFEA           B        ??onkey_7
    131                  break;
    132                case GREEN_BUTTON: //test 
    133                  heat+=50; break;
   \                     ??onkey_8:
   \   000000F0   ........           LDR      R0,??DataTable70  ;; heat
   \   000000F4   001090E5           LDR      R1,[R0, #+0]
   \   000000F8   321081E2           ADD      R1,R1,#+50
   \   000000FC   001080E5           STR      R1,[R0, #+0]
   \   00000100   1C0000EA           B        ??onkey_6
    134                case LEFT_BUTTON: case '4':
    135                  if((x-=step)<0) x=0; break;
   \                     ??onkey_9:
   \   00000104   0A005CE2           SUBS     R0,R12,#+10
   \   00000108   000083E5           STR      R0,[R3, #+0]
   \   0000010C   1900005A           BPL      ??onkey_6
   \   00000110   006083E5           STR      R6,[R3, #+0]
   \   00000114   170000EA           B        ??onkey_6
    136                case RIGHT_BUTTON: case '6': 
    137                  if((x+=step)>=width) x=width-1; break;
   \                     ??onkey_10:
   \   00000118   ........           LDR      R1,??DataTable28  ;; width
   \   0000011C   0A008CE2           ADD      R0,R12,#+10
   \   00000120   001091E5           LDR      R1,[R1, #+0]
   \   00000124   000083E5           STR      R0,[R3, #+0]
   \   00000128   010050E1           CMP      R0,R1
   \   0000012C   110000BA           BLT      ??onkey_6
   \   00000130   010041E2           SUB      R0,R1,#+1
   \   00000134   000083E5           STR      R0,[R3, #+0]
   \   00000138   0E0000EA           B        ??onkey_6
    138                case UP_BUTTON: case '2': 
    139                  if((y-=step)<0) y=0; break;
   \                     ??onkey_11:
   \   0000013C   0A0055E2           SUBS     R0,R5,#+10
   \   00000140   000084E5           STR      R0,[R4, #+0]
   \   00000144   0B00005A           BPL      ??onkey_6
   \   00000148   006084E5           STR      R6,[R4, #+0]
   \   0000014C   090000EA           B        ??onkey_6
    140                case DOWN_BUTTON: case '8': 
    141                  if((y+=step)>=height) y=height-1; break;
   \                     ??onkey_12:
   \   00000150   ........           LDR      R1,??DataTable29  ;; height
   \   00000154   0A0085E2           ADD      R0,R5,#+10
   \   00000158   001091E5           LDR      R1,[R1, #+0]
   \   0000015C   000084E5           STR      R0,[R4, #+0]
   \   00000160   010050E1           CMP      R0,R1
   \   00000164   030000BA           BLT      ??onkey_6
   \   00000168   010041E2           SUB      R0,R1,#+1
   \   0000016C   000084E5           STR      R0,[R4, #+0]
   \   00000170   000000EA           B        ??onkey_6
    142                case ENTER_BUTTON: case '5': enter(); break;
   \                     ??onkey_13:
   \   00000174   ........           BL       enter
    143                default: return 0;
    144            }
    145            onredraw(); DrawScreen(); // Перерисовать экран
   \                     ??onkey_6:
   \   00000178   ........           BL       onredraw
   \   0000017C   ........           _BLF     DrawScreen,??DrawScreen??rA
   \   00000180   0000A0E3           MOV      R0,#+0
   \   00000184   F080BDE8           POP      {R4-R7,PC}
    146            }
    147            return 0;
    148          }
    149          
    150          inline void savegame(){ // Записать игру
    151            int f;
    152            strcpy(file,sini);
    153            if((f=fopen(filename,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))!=-1){
    154              fwrite(f,&level,1,&err); 
    155              fclose(f,&err);
    156          }}
    157          
    158          

   \                                 In segment CODE, align 4, keep-with-next
    159          void onclose(){ // Закрытие окна
    160            GBS_DelTimer(&timer); 
   \                     onclose:
   \   00000000   ........           LDR      R0,??DataTable42  ;; timer
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
    161            savegame();  // Сохраняем результаты
   \   00000008   ........           LDR      R4,??DataTable48  ;; err
   \   0000000C   8C0100EF           SWI      +396
   \   00000010   ........           LDR      R0,??DataTable56  ;; file
   \   00000014   ........           LDR      R1,??DataTable50  ;; sini
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   ........           _BLF     strcpy,??strcpy??rA
   \   00000020   ........           LDR      R0,??DataTable62  ;; filename
   \   00000024   0430A0E1           MOV      R3,R4
   \   00000028   402FA0E3           MOV      R2,#+256
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   831C81E3           ORR      R1,R1,#0x8300
   \   00000034   0A0000EF           SWI      +10
   \   00000038   0050A0E1           MOV      R5,R0
   \   0000003C   010075E3           CMN      R5,#+1
   \   00000040   3080BD08           POPEQ    {R4,R5,PC}
   \   00000044   ........           LDR      R1,??DataTable75  ;; level
   \   00000048   0430A0E1           MOV      R3,R4
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   0C0000EF           SWI      +12
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   0D0000EF           SWI      +13
    162          }
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
    163          

   \                                 In segment CODE, align 4, keep-with-next
    164          void onexit(){ // Выход
    165            if(back) mfree(back);
   \                     onexit:
   \   00000000   ........           LDR      R0,??DataTable55  ;; back
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??onexit_0
   \   00000014   150000EF           SWI      +21
    166            if(dev) mfree(dev);
   \                     ??onexit_0:
   \   00000018   ........           LDR      R0,??DataTable46  ;; dev
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??onexit_1
   \   00000028   150000EF           SWI      +21
    167            if(prev) mfree(prev);
   \                     ??onexit_1:
   \   0000002C   ........           LDR      R0,??DataTable67  ;; prev
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0000000A           BEQ      ??onexit_2
   \   0000003C   150000EF           SWI      +21
    168            if(ini) mfree(ini);
   \                     ??onexit_2:
   \   00000040   ........           LDR      R0,??DataTable63  ;; ini
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0000000A           BEQ      ??onexit_3
   \   00000050   150000EF           SWI      +21
    169            if(font) mfree(font);
   \                     ??onexit_3:
   \   00000054   ........           LDR      R0,??DataTable51  ;; font
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0080BD08           POPEQ    {PC}
   \   00000064   150000EF           SWI      +21
    170          }
   \   00000068   0080BDE8           POP      {PC}             ;; return
    171          

   \                                 In segment CODE, align 4, keep-with-next
    172          void oncreate(){ // Создание окна
    173            GBS_StartTimerProc(&timer,timedelay,timer_proc); // Стартуем таймер с частотой N раз в секунду
   \                     oncreate:
   \   00000000   ........           LDR      R2,??DataTable41  ;; timer_proc
   \   00000004   ........           LDR      R0,??DataTable42  ;; timer
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   B010A0E3           MOV      R1,#+176
   \   00000010   CC1C81E3           ORR      R1,R1,#0xCC00
   \   00000014   4D0000EF           SWI      +77
    174          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
    175          

   \                                 In segment CODE, align 4, keep-with-next
    176          int onstart(char *exename, char *fname){ // Старт приложения. Возвращает 0 или 1 для выхода.
   \                     onstart:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    177            int f;
    178            strcpy(filename,exename);
   \   00000004   ........           LDR      R4,??DataTable62  ;; filename
    179            strcpy(strrchr(filename,'.'),".bmp");
    180            if(!(back=malloc(screensize))) return 1;
   \   00000008   ........           LDR      R5,??DataTable55  ;; back
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     strcpy,??strcpy??rA
   \   00000018   2E10A0E3           MOV      R1,#+46
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     strrchr,??strrchr??rA
   \   00000024   EC109FE5           LDR      R1,??onstart_0   ;; `?<Constant ".bmp">`
   \   00000028   ........           _BLF     strcpy,??strcpy??rA
   \   0000002C   ........           LDR      R0,??DataTable60  ;; screensize
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   140000EF           SWI      +20
   \   00000038   000085E5           STR      R0,[R5, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100A003           MOVEQ    R0,#+1
   \   00000044   F081BD08           POPEQ    {R4-R8,PC}
    181            if(!(dev=loadgraph(filename))) return 2;
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     loadgraph,??loadgraph??rA
   \   00000050   ........           LDR      R1,??DataTable46  ;; dev
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   000081E5           STR      R0,[R1, #+0]
   \   0000005C   0100001A           BNE      ??onstart_1
   \                     ??onstart_2:
   \   00000060   0200A0E3           MOV      R0,#+2
   \   00000064   F081BDE8           POP      {R4-R8,PC}
    182            //loadini
    183            strcpy((file=strrchr(filename,'\\')+1),sini);
   \                     ??onstart_1:
   \   00000068   ........           LDR      R5,??DataTable56  ;; file
    184            if((f=fopen(filename,A_ReadOnly+A_BIN,P_READ,&err))!=-1){
   \   0000006C   ........           LDR      R6,??DataTable48  ;; err
   \   00000070   ........           LDR      R8,??DataTable75  ;; level
   \   00000074   5C10A0E3           MOV      R1,#+92
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     strrchr,??strrchr??rA
   \   00000080   ........           LDR      R1,??DataTable50  ;; sini
   \   00000084   010080E2           ADD      R0,R0,#+1
   \   00000088   000085E5           STR      R0,[R5, #+0]
   \   0000008C   ........           _BLF     strcpy,??strcpy??rA
   \   00000090   0630A0E1           MOV      R3,R6
   \   00000094   8020A0E3           MOV      R2,#+128
   \   00000098   801CA0E3           MOV      R1,#+32768
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   0A0000EF           SWI      +10
   \   000000A4   0070A0E1           MOV      R7,R0
   \   000000A8   010077E3           CMN      R7,#+1
   \   000000AC   0600000A           BEQ      ??onstart_3
    185              fread(f,&level,1,&err);
   \   000000B0   0630A0E1           MOV      R3,R6
   \   000000B4   0120A0E3           MOV      R2,#+1
   \   000000B8   0810A0E1           MOV      R1,R8
   \   000000BC   0B0000EF           SWI      +11
    186              fclose(f,&err);
   \   000000C0   0610A0E1           MOV      R1,R6
   \   000000C4   0700A0E1           MOV      R0,R7
   \   000000C8   0D0000EF           SWI      +13
    187            }
    188            strcpy(file,"font.bmp");
   \                     ??onstart_3:
   \   000000CC   48109FE5           LDR      R1,??onstart_0+0x4  ;; `?<Constant "font.bmp">`
   \   000000D0   000095E5           LDR      R0,[R5, #+0]
   \   000000D4   ........           _BLF     strcpy,??strcpy??rA
    189            if(!(font=loadfile(filename))) return 2;//2?
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           _BLF     loadfile,??loadfile??rA
   \   000000E0   ........           LDR      R1,??DataTable51  ;; font
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   000081E5           STR      R0,[R1, #+0]
   \   000000EC   DBFFFF0A           BEQ      ??onstart_2
    190            if(f=newgame()){
   \   000000F0   ........           BL       newgame
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   F081BD08           POPEQ    {R4-R8,PC}
    191              level=0; if(f=newgame()) return f;
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   0000C8E5           STRB     R0,[R8, #+0]
   \   00000104   ........           BL       newgame
   \   00000108   0070B0E1           MOVS     R7,R0
   \   0000010C   F081BD18           POPNE    {R4-R8,PC}
    192            }
    193            return 0;
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??onstart_0:
   \   00000118   ........           DC32     `?<Constant ".bmp">`
   \   0000011C   ........           DC32     `?<Constant "font.bmp">`
    194          }
    195          

   \                                 In segment CODE, align 4, keep-with-next
    196          int newgame(){ // Начать новую игру
    197            char *pic, *s;
    198            int i,j,jj,sign, maxprev=0;
    199            heat=exit=0;
   \                     newgame:
   \   00000000   ........           LDR      R0,??DataTable71  ;; exit
    200            x=y=100;
   \   00000004   ........           LDR      R1,??DataTable73  ;; y
   \   00000008   F0472DE9           PUSH     {R4-R10,LR}
    201            msg=0;
    202            memset(ispred,0,256);
   \   0000000C   ........           LDR      R5,??DataTable54  ;; ispred
    203            memset(back,0,screensize);
   \   00000010   ........           LDR      R7,??DataTable55  ;; back
    204            strcpy(file,slev);
   \   00000014   ........           LDR      R8,??DataTable56  ;; file
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   0040C0E5           STRB     R4,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable70  ;; heat
   \   00000024   402FA0E3           MOV      R2,#+256
   \   00000028   004080E5           STR      R4,[R0, #+0]
   \   0000002C   6400A0E3           MOV      R0,#+100
   \   00000030   000081E5           STR      R0,[R1, #+0]
   \   00000034   ........           LDR      R1,??DataTable72  ;; x
   \   00000038   0060A0E3           MOV      R6,#+0
   \   0000003C   000081E5           STR      R0,[R1, #+0]
   \   00000040   ........           LDR      R0,??DataTable74  ;; msg
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   004080E5           STR      R4,[R0, #+0]
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     memset,??memset??rA
   \   00000054   ........           LDR      R0,??DataTable60  ;; screensize
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   002090E5           LDR      R2,[R0, #+0]
   \   00000060   000097E5           LDR      R0,[R7, #+0]
   \   00000064   ........           _BLF     memset,??memset??rA
   \   00000068   90129FE5           LDR      R1,??newgame_1   ;; slev
   \   0000006C   000098E5           LDR      R0,[R8, #+0]
   \   00000070   ........           _BLF     strcpy,??strcpy??rA
    205            file[5]=level/10+'0';
   \   00000074   ........           LDR      R0,??DataTable75  ;; level
   \   00000078   84329FE5           LDR      R3,??newgame_1+0x4  ;; 0x66666667
   \   0000007C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000080   001098E5           LDR      R1,[R8, #+0]
   \   00000084   9392CAE0           SMULL    R9,R10,R3,R2
   \   00000088   4AA1A0E1           ASR      R10,R10,#+2
   \   0000008C   A22F8AE0           ADD      R2,R10,R2, LSR #+31
   \   00000090   302082E2           ADD      R2,R2,#+48
   \   00000094   0520C1E5           STRB     R2,[R1, #+5]
    206            file[6]=level%10+'0';
   \   00000098   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000009C   001098E5           LDR      R1,[R8, #+0]
   \   000000A0   0320A0E1           MOV      R2,R3
   \   000000A4   9032C9E0           SMULL    R3,R9,R0,R2
   \   000000A8   0A30A0E3           MOV      R3,#+10
   \   000000AC   4991A0E1           ASR      R9,R9,#+2
   \   000000B0   930909E0           MUL      R9,R3,R9
   \   000000B4   090040E0           SUB      R0,R0,R9
    207            if(!(pic=loadgraph(filename))) return 3;
   \   000000B8   ........           LDR      R9,??DataTable62  ;; filename
   \   000000BC   300080E2           ADD      R0,R0,#+48
   \   000000C0   0600C1E5           STRB     R0,[R1, #+6]
   \   000000C4   0900A0E1           MOV      R0,R9
   \   000000C8   ........           _BLF     loadgraph,??loadgraph??rA
   \   000000CC   00A0B0E1           MOVS     R10,R0
   \   000000D0   0300A003           MOVEQ    R0,#+3
   \   000000D4   F087BD08           POPEQ    {R4-R10,PC}
    208            bitblt(back,pic,0,0,0,0,0,0,0,0);
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   01002DE9           PUSH     {R0}
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   01002DE9           PUSH     {R0}
   \   000000F0   01002DE9           PUSH     {R0}
   \   000000F4   0030A0E1           MOV      R3,R0
   \   000000F8   0020A0E1           MOV      R2,R0
   \   000000FC   000097E5           LDR      R0,[R7, #+0]
    209            mfree(pic);
    210            // Загрузить конф. игры из текст. файла
    211            strcpy(file+7,".png");
    212            if(ini) mfree(ini);
   \   00000100   ........           LDR      R7,??DataTable63  ;; ini
   \   00000104   0A10A0E1           MOV      R1,R10
   \   00000108   ........           _BLF     bitblt,??bitblt??rA
   \   0000010C   0A00A0E1           MOV      R0,R10
   \   00000110   150000EF           SWI      +21
   \   00000114   000098E5           LDR      R0,[R8, #+0]
   \   00000118   E8119FE5           LDR      R1,??newgame_1+0x8  ;; `?<Constant ".png">`
   \   0000011C   070080E2           ADD      R0,R0,#+7
   \   00000120   ........           _BLF     strcpy,??strcpy??rA
   \   00000124   000097E5           LDR      R0,[R7, #+0]
   \   00000128   18D08DE2           ADD      SP,SP,#+24
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   0000000A           BEQ      ??newgame_2
   \   00000134   150000EF           SWI      +21
    213            if(!(s=ini=loadfile(filename))) return 4;
   \                     ??newgame_2:
   \   00000138   0900A0E1           MOV      R0,R9
   \   0000013C   ........           _BLF     loadfile,??loadfile??rA
   \   00000140   000087E5           STR      R0,[R7, #+0]
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   0400A003           MOVEQ    R0,#+4
   \   0000014C   F087BD08           POPEQ    {R4-R10,PC}
    214            ini[loadfilesize-2]=0;
   \   00000150   B4119FE5           LDR      R1,??newgame_1+0xC  ;; loadfilesize
   \   00000154   001091E5           LDR      R1,[R1, #+0]
   \   00000158   001081E0           ADD      R1,R1,R0
   \   0000015C   024041E5           STRB     R4,[R1, #-2]
    215            do{
    216              while(*++s && *s!=0xd);
   \                     ??newgame_3:
   \   00000160   D110F0E1           LDRSB    R1,[R0, #+1]!
   \   00000164   000051E3           CMP      R1,#+0
   \   00000168   0D005113           CMPNE    R1,#+13
    217              ++maxprev;
   \   0000016C   01608602           ADDEQ    R6,R6,#+1
    218            }while(*s);
   \   00000170   00005103           CMPEQ    R1,#+0
   \   00000174   F9FFFF1A           BNE      ??newgame_3
    219            if(prev) mfree(prev);
   \   00000178   ........           LDR      R8,??DataTable67  ;; prev
   \   0000017C   000098E5           LDR      R0,[R8, #+0]
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   0000000A           BEQ      ??newgame_4
   \   00000188   150000EF           SWI      +21
    220            if(!(prevend=prev=(struct prevst*)malloc((maxprev+3)*sizeof(struct prevst)))) return 5;
   \                     ??newgame_4:
   \   0000018C   030086E2           ADD      R0,R6,#+3
   \   00000190   2410A0E3           MOV      R1,#+36
   \   00000194   910000E0           MUL      R0,R1,R0
   \   00000198   140000EF           SWI      +20
   \   0000019C   ........           LDR      R1,??DataTable68  ;; prevend
   \   000001A0   000088E5           STR      R0,[R8, #+0]
   \   000001A4   000081E5           STR      R0,[R1, #+0]
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   0500A003           MOVEQ    R0,#+5
   \   000001B0   F087BD08           POPEQ    {R4-R10,PC}
    221            s=ini-1;
   \   000001B4   000097E5           LDR      R0,[R7, #+0]
   \   000001B8   0A90A0E3           MOV      R9,#+10
   \   000001BC   010040E2           SUB      R0,R0,#+1
    222            do{
    223              switch(*++s){
   \                     ??newgame_5:
   \   000001C0   D120F0E1           LDRSB    R2,[R0, #+1]!
   \   000001C4   3B0052E3           CMP      R2,#+59
   \   000001C8   1700008A           BHI      ??newgame_6
   \   000001CC   013F8FE2           ADR      R3,??newgame_0
   \   000001D0   0230D3E7           LDRB     R3,[R3, R2]
   \   000001D4   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??newgame_0:
   \   000001D8   44141414           DC8      +68,+20,+20,+20
   \   000001DC   14141414           DC8      +20,+20,+20,+20
   \   000001E0   14444414           DC8      +20,+68,+68,+20
   \   000001E4   14441414           DC8      +20,+68,+20,+20
   \   000001E8   14141414           DC8      +20,+20,+20,+20
   \   000001EC   14141414           DC8      +20,+20,+20,+20
   \   000001F0   14141414           DC8      +20,+20,+20,+20
   \   000001F4   14141414           DC8      +20,+20,+20,+20
   \   000001F8   44141414           DC8      +68,+20,+20,+20
   \   000001FC   14141414           DC8      +20,+20,+20,+20
   \   00000200   14141414           DC8      +20,+20,+20,+20
   \   00000204   1414140E           DC8      +20,+20,+20,+14
   \   00000208   14141414           DC8      +20,+20,+20,+20
   \   0000020C   14141414           DC8      +20,+20,+20,+20
   \   00000210   1414140E           DC8      +20,+20,+20,+14
    224              case ' ': case 9: case 0xd: case 0xa: case 0: break;
    225              case ';': case '/': while(*++s && *s!=0xd); break;
   \                     ??newgame_7:
   \   00000214   D120F0E1           LDRSB    R2,[R0, #+1]!
   \   00000218   000052E3           CMP      R2,#+0
   \   0000021C   3200000A           BEQ      ??newgame_8
   \   00000220   0D0052E3           CMP      R2,#+13
   \   00000224   FAFFFF1A           BNE      ??newgame_7
   \   00000228   2F0000EA           B        ??newgame_8
    226              default:
    227                jj=maxpr;
   \                     ??newgame_6:
   \   0000022C   0820A0E3           MOV      R2,#+8
    228                for(i=0;i<jj;i++){
   \   00000230   0030A0E3           MOV      R3,#+0
   \   00000234   000000EA           B        ??newgame_9
    229                  while(*s==' ') ++s;
   \                     ??newgame_10:
   \   00000238   010080E2           ADD      R0,R0,#+1
   \                     ??newgame_9:
   \   0000023C   D060D0E1           LDRSB    R6,[R0, #+0]
   \   00000240   200056E3           CMP      R6,#+32
   \   00000244   FBFFFF0A           BEQ      ??newgame_10
    230                  if(*s=='-'){ ++s; sign=1;} else sign=0;
   \   00000248   2D0056E3           CMP      R6,#+45
   \   0000024C   01008002           ADDEQ    R0,R0,#+1
   \   00000250   0170A003           MOVEQ    R7,#+1
   \   00000254   0070A013           MOVNE    R7,#+0
    231                  j=0;
   \   00000258   0060A0E3           MOV      R6,#+0
   \   0000025C   020000EA           B        ??newgame_11
    232                  while(*s>='0' && *s<='9'){ j=j*10+*s-'0'; ++s;}
   \                     ??newgame_12:
   \   00000260   ........           LDRSB    R8,[R0], #+1
   \   00000264   998626E0           MLA      R6,R9,R6,R8
   \   00000268   306046E2           SUB      R6,R6,#+48
   \                     ??newgame_11:
   \   0000026C   D080D0E1           LDRSB    R8,[R0, #+0]
   \   00000270   300058E3           CMP      R8,#+48
   \   00000274   010000BA           BLT      ??newgame_13
   \   00000278   3A0058E3           CMP      R8,#+58
   \   0000027C   F7FFFFBA           BLT      ??newgame_12
    233                  prevend->a[i]=(sign)?(-j):j;
   \                     ??newgame_13:
   \   00000280   008091E5           LDR      R8,[R1, #+0]
   \   00000284   000057E3           CMP      R7,#+0
   \   00000288   0670A0E1           MOV      R7,R6
   \   0000028C   00706712           RSBNE    R7,R7,#+0
   \   00000290   037188E7           STR      R7,[R8, +R3, LSL #+2]
    234                  if(i==0){ ispred[j]=1;
   \   00000294   000053E3           CMP      R3,#+0
   \   00000298   0300001A           BNE      ??newgame_14
   \   0000029C   0170A0E3           MOV      R7,#+1
   \   000002A0   0570C6E7           STRB     R7,[R6, +R5]
    235                    if(!j) jj=maxdel;
   \   000002A4   000056E3           CMP      R6,#+0
   \   000002A8   0420A003           MOVEQ    R2,#+4
    236                  }
    237                }
   \                     ??newgame_14:
   \   000002AC   013083E2           ADD      R3,R3,#+1
   \   000002B0   020053E1           CMP      R3,R2
   \   000002B4   E0FFFFBA           BLT      ??newgame_9
    238                if(*s==0xd) --s;
   \   000002B8   D020D0E1           LDRSB    R2,[R0, #+0]
   \   000002BC   0D0052E3           CMP      R2,#+13
   \   000002C0   01004002           SUBEQ    R0,R0,#+1
    239                prevend->name=s+1;
   \   000002C4   012080E2           ADD      R2,R0,#+1
   \   000002C8   202088E5           STR      R2,[R8, #+32]
    240                ++prevend;
   \   000002CC   242088E2           ADD      R2,R8,#+36
   \   000002D0   002081E5           STR      R2,[R1, #+0]
    241                while(*++s && *s!=0xd);
   \                     ??newgame_15:
   \   000002D4   D120F0E1           LDRSB    R2,[R0, #+1]!
   \   000002D8   000052E3           CMP      R2,#+0
   \   000002DC   0D005213           CMPNE    R2,#+13
   \   000002E0   FBFFFF1A           BNE      ??newgame_15
    242                if(*s==0xd) *s++=0;
   \   000002E4   0D0052E3           CMP      R2,#+13
   \   000002E8   ........           STRBEQ   R4,[R0], #+1
    243              }
    244            }while(*s);
   \                     ??newgame_8:
   \   000002EC   D020D0E1           LDRSB    R2,[R0, #+0]
   \   000002F0   000052E3           CMP      R2,#+0
   \   000002F4   B1FFFF1A           BNE      ??newgame_5
    245            return 0;
   \   000002F8   0000A0E3           MOV      R0,#+0
   \   000002FC   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??newgame_1:
   \   00000300   ........           DC32     slev
   \   00000304   67666666           DC32     0x66666667
   \   00000308   ........           DC32     `?<Constant ".png">`
   \   0000030C   ........           DC32     loadfilesize
    246          }
    247          
    248               

   \                                 In segment CODE, align 4, keep-with-next
    249          void enter(){ // Нажат enter
   \                     enter:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    250            if(!seldev) return;
   \   00000004   ........           LDR      R4,??DataTable66  ;; seldev
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   F083BD08           POPEQ    {R4-R9,PC}
    251            for(p=prev; p<prevend; p++){
   \   00000014   ........           LDR      R0,??DataTable67  ;; prev
   \   00000018   ........           LDR      R6,??DataTable68  ;; prevend
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   ........           LDR      R5,??DataTable69  ;; p
   \   00000024   001096E5           LDR      R1,[R6, #+0]
   \   00000028   ........           LDR      R7,??DataTable70  ;; heat
   \   0000002C   ........           LDR      R8,??DataTable71  ;; exit
   \   00000030   000085E5           STR      R0,[R5, #+0]
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   0190A0E3           MOV      R9,#+1
   \   0000003C   F083BD28           POPCS    {R4-R9,PC}
    252              if(p->a[enum_]==seldev && heat>=p->a[efrom] && heat< p->a[eto]){
   \                     ??enter_0:
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   002094E5           LDR      R2,[R4, #+0]
   \   00000048   001090E5           LDR      R1,[R0, #+0]
   \   0000004C   020051E1           CMP      R1,R2
   \   00000050   2E00001A           BNE      ??enter_1
   \   00000054   001097E5           LDR      R1,[R7, #+0]
   \   00000058   042090E5           LDR      R2,[R0, #+4]
   \   0000005C   020051E1           CMP      R1,R2
   \   00000060   2A0000BA           BLT      ??enter_1
   \   00000064   082090E5           LDR      R2,[R0, #+8]
   \   00000068   020051E1           CMP      R1,R2
   \   0000006C   270000AA           BGE      ??enter_1
    253                if(x>=p->a[ex1] && x<p->a[ex2] && y>=p->a[ey1] && y<p->a[ey2]){
   \   00000070   ........           LDR      R2,??DataTable72  ;; x
   \   00000074   0C3090E5           LDR      R3,[R0, #+12]
   \   00000078   002092E5           LDR      R2,[R2, #+0]
   \   0000007C   030052E1           CMP      R2,R3
   \   00000080   220000BA           BLT      ??enter_1
   \   00000084   143090E5           LDR      R3,[R0, #+20]
   \   00000088   030052E1           CMP      R2,R3
   \   0000008C   1F0000AA           BGE      ??enter_1
   \   00000090   ........           LDR      R2,??DataTable73  ;; y
   \   00000094   103090E5           LDR      R3,[R0, #+16]
   \   00000098   002092E5           LDR      R2,[R2, #+0]
   \   0000009C   030052E1           CMP      R2,R3
   \   000000A0   1A0000BA           BLT      ??enter_1
   \   000000A4   183090E5           LDR      R3,[R0, #+24]
   \   000000A8   030052E1           CMP      R2,R3
   \   000000AC   170000AA           BGE      ??enter_1
    254                  //ok, action!
    255                  msg=p->name;
   \   000000B0   ........           LDR      R2,??DataTable74  ;; msg
   \   000000B4   203090E5           LDR      R3,[R0, #+32]
   \   000000B8   003082E5           STR      R3,[R2, #+0]
    256                  if((heat+=p->a[eplus])>=maxheat){
   \   000000BC   1C0090E5           LDR      R0,[R0, #+28]
   \   000000C0   010080E0           ADD      R0,R0,R1
   \   000000C4   ........           LDR      R1,??DataTable75  ;; level
   \   000000C8   000087E5           STR      R0,[R7, #+0]
   \   000000CC   0020D1E5           LDRB     R2,[R1, #+0]
   \   000000D0   FA0F50E3           CMP      R0,#+1000
    257                    ++level;
   \   000000D4   010082A2           ADDGE    R0,R2,#+1
   \   000000D8   040000AA           BGE      ??enter_2
    258                    if(newgame()) exit=1;
    259                  }else
    260                    if(heat < -maxheat){
   \   000000DC   E730E0E3           MVN      R3,#+231
   \   000000E0   C03FC3E3           BIC      R3,R3,#0x300
   \   000000E4   030050E1           CMP      R0,R3
   \   000000E8   040000AA           BGE      ??enter_3
    261                      --level;
   \   000000EC   010042E2           SUB      R0,R2,#+1
   \                     ??enter_2:
   \   000000F0   0000C1E5           STRB     R0,[R1, #+0]
    262                      if(newgame()) exit=1;
   \   000000F4   ........           BL       newgame
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   0090C815           STRBNE   R9,[R8, #+0]
    263                    }  
    264                  if(heat<0) heat=0;
   \                     ??enter_3:
   \   00000100   000097E5           LDR      R0,[R7, #+0]
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0000A043           MOVMI    R0,#+0
   \   0000010C   00008745           STRMI    R0,[R7, #+0]
    265                }
    266              }
    267            }
   \                     ??enter_1:
   \   00000110   000095E5           LDR      R0,[R5, #+0]
   \   00000114   001096E5           LDR      R1,[R6, #+0]
   \   00000118   240080E2           ADD      R0,R0,#+36
   \   0000011C   000085E5           STR      R0,[R5, #+0]
   \   00000120   010050E1           CMP      R0,R1
   \   00000124   C5FFFF3A           BCC      ??enter_0
   \   00000128   F083BDE8           POP      {R4-R9,PC}       ;; return
    268          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     randseed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     height

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     timer_proc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     timer

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     dev

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     err

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     sini

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     font

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     ispred

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   ........           DC32     back

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   ........           DC32     file

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable60:
   \   00000000   ........           DC32     screensize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable63:
   \   00000000   ........           DC32     ini

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   ........           DC32     seldev

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     prev

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   ........           DC32     prevend

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   ........           DC32     p

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     heat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     exit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   ........           DC32     y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     msg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     level

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Title>`:
   \   00000000   ........           DC32 `?<Constant "UltraVix 0.1 (c)bn">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for errors>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "\\315\\345\\344\\356\\361\\362\\340\\362\\3`
   \              ....        
   \   00000008   ........           DC32 `?<Constant "\\315\\345\\342\\345\\360\\355\\373\\351 .`
   \   0000000C   ........           DC32 `?<Constant "\\316\\370\\350\\341\\352\\340 \\347\\340\\`
   \   00000010   ........           DC32 `?<Constant "\\316\\370\\350\\341\\352\\340 \\347\\340\\_1`
   \   00000014   ........           DC32 `?<Constant "\\315\\345\\344\\356\\361\\362\\340\\362\\3`

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "UltraVix 0.1 (c)bn">`:
   \   00000000   556C74726156       DC8 "UltraVix 0.1 (c)bn"
   \              697820302E31
   \              20286329626E
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345\\344\\356\\361\\362\\340\\362\\3`:
   \   00000000   CDE5E4EEF1F2       DC8 0CDH, 0E5H, 0E4H, 0EEH, 0F1H, 0F2H, 0E0H, 0F2H
   \              E0F2        
   \   00000008   EEF7EDEE20EF       DC8 0EEH, 0F7H, 0EDH, 0EEH, 20H, 0EFH, 0E0H, 0ECH
   \              E0EC        
   \   00000010   FFF2E80000         DC8 0FFH, 0F2H, 0E8H, 0, 0
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345\\342\\345\\360\\355\\373\\351 .`:
   \   00000000   CDE5E2E5F0ED       DC8 0CDH, 0E5H, 0E2H, 0E5H, 0F0H, 0EDH, 0FBH, 0E9H
   \              FBE9        
   \   00000008   202E626D7020       DC8 20H, 2EH, 62H, 6DH, 70H, 20H, 0E8H, 0EBH
   \              E8EB        
   \   00000010   E820666F6E74       DC8 0E8H, 20H, 66H, 6FH, 6EH, 74H, 20H, 0F4H
   \              20F4        
   \   00000018   E0E9EB210000       DC8 0E0H, 0E9H, 0EBH, 21H, 0, 0
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\316\\370\\350\\341\\352\\340 \\347\\340\\`:
   \   00000000   CEF8E8E1EAE0       DC8 0CEH, 0F8H, 0E8H, 0E1H, 0EAH, 0E0H, 20H, 0E7H
   \              20E7        
   \   00000008   E0E3F0F3E7EA       DC8 0E0H, 0E3H, 0F0H, 0F3H, 0E7H, 0EAH, 0E8H, 20H
   \              E820        
   \   00000010   E3F0E0F4E8EA       DC8 0E3H, 0F0H, 0E0H, 0F4H, 0E8H, 0EAH, 0E8H, 20H
   \              E820        
   \   00000018   F3F0EEE2EDFF       DC8 0F3H, 0F0H, 0EEH, 0E2H, 0EDH, 0FFH, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\316\\370\\350\\341\\352\\340 \\347\\340\\_1`:
   \   00000000   CEF8E8E1EAE0       DC8 0CEH, 0F8H, 0E8H, 0E1H, 0EAH, 0E0H, 20H, 0E7H
   \              20E7        
   \   00000008   E0E3F0F3E7EA       DC8 0E0H, 0E3H, 0F0H, 0F3H, 0E7H, 0EAH, 0E8H, 20H
   \              E820        
   \   00000010   F4E0E9EBE020       DC8 0F4H, 0E0H, 0E9H, 0EBH, 0E0H, 20H, 0E4H, 0E0H
   \              E4E0        
   \   00000018   EDEDFBF520F3       DC8 0EDH, 0EDH, 0FBH, 0F5H, 20H, 0F3H, 0F0H, 0EEH
   \              F0EE        
   \   00000020   E2EDFF0000         DC8 0E2H, 0EDH, 0FFH, 0, 0
   \   00000025   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".bmp">`:
   \   00000000   2E626D7000         DC8 ".bmp"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "font.bmp">`:
   \   00000000   666F6E742E62       DC8 "font.bmp"
   \              6D7000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".png">`:
   \   00000000   2E706E6700         DC8 ".png"
   \   00000005   000000             DC8 0, 0, 0
    269          
    270          

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     Randomize     20
     enter         28
     newgame       56
     onclose       12
     oncreate       4
     onexit         4
     onkey         20
     onredraw      56
     onstart       24
     rand           4
     randint        8
     timer_proc    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     randseed                          4
     randint                          60
     rand                              8
     Randomize                        44
     Title                             4
     errors                           24
     sini                             12
     slev                             12
     filename                        128
     file                              4
     msg                               4
     level                             1
     exit                              1
     back                              4
     dev                               4
     ini                               4
     font                              4
     x                                 4
     y                                 4
     heat                              4
     seldev                            4
     ispred                          256
     prev                              4
     p                                 4
     pp                                4
     prevend                           4
     timer                            16
     timer_proc                      216
     onredraw                        472
     onkey                           392
     onclose                         100
     onexit                          108
     oncreate                         28
     onstart                         288
     newgame                         784
     enter                           300
     ??DataTable1                      4
     ??DataTable28                     4
     ??DataTable29                     4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable46                     4
     ??DataTable48                     4
     ??DataTable50                     4
     ??DataTable51                     4
     ??DataTable54                     4
     ??DataTable55                     4
     ??DataTable56                     4
     ??DataTable60                     4
     ??DataTable62                     4
     ??DataTable63                     4
     ??DataTable66                     4
     ??DataTable67                     4
     ??DataTable68                     4
     ??DataTable69                     4
     ??DataTable70                     4
     ??DataTable71                     4
     ??DataTable72                     4
     ??DataTable73                     4
     ??DataTable74                     4
     ??DataTable75                     4
     ?<Initializer for Title>          4
     ?<Initializer for errors>        24
     ?<Constant "UltraVix 0.1 (c)bn">
                                      20
     ?<Constant "\315\345\344\356\361\362\340\362\3
                                      24
     ?<Constant "\315\345\342\345\360\355\373\351 .
                                      32
     ?<Constant "\316\370\350\341\352\340 \347\340\
                                      32
     ?<Constant "\316\370\350\341\352\340 \347\340\_1
                                      40
     ?<Constant ".bmp">                8
     ?<Constant "font.bmp">           12
     ?<Constant ".png">                8
      Others                         168

 
 3 044 bytes in segment CODE
   200 bytes in segment DATA_C
    28 bytes in segment DATA_I
    28 bytes in segment DATA_ID
   462 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 2 900 bytes of CODE  memory (+ 168 bytes shared)
   228 bytes of CONST memory
   490 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    11/Jul/2012  20:04:10 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\Cam\main.c                                    #
#    Command line    =  C:\arm\Cam\main.c -D NEWSGOLD -D ELKA -lC            #
#                       C:\arm\Cam\Release_ELKA\List\ -o                     #
#                       C:\arm\Cam\Release_ELKA\Obj\ -s9 --no_unroll         #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\Cam\Release_ELKA\List\main.lst                #
#    Object file     =  C:\arm\Cam\Release_ELKA\Obj\main.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\Cam\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"
      3          

   \                                 In segment DATA_C, align 4, align-sorted
      4          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
      5          
      6          typedef struct
      7          {
      8            CSM_RAM csm;
      9          }MAIN_CSM;
     10          typedef struct
     11          {
     12            GUI gui;
     13            WSHDR *ws1;
     14            WSHDR *ws2;
     15            int i1;
     16          }MAIN_GUI;
     17          

   \                                 In segment DATA_Z, align 4, align-sorted
     18          CSM_RAM *under_idle;
   \                     under_idle:
   \   00000000                      DS8 4
     19          extern void kill_data(void *p, void (*func_p)(void *));
     20          
     21          #pragma inline=forced
     22          
     23          int toupper(int c)
     24          {
     25            if ((c>='a')&&(c<='z')) c+='A'-'a';
     26            return(c);
     27          }
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          int strcmp_nocase(const char *s1,const char *s2)
     30          {
     31            int i;
     32            int c;
     33            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
     34            return(i);
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return
     35          }
     36          

   \                                 In segment DATA_Z, align 4, align-sorted
     37           int cam=0;
   \                     cam:
   \   00000000                      DS8 4
     38          
     39          void init();
     40          extern const RECT pos;

   \                                 In segment DATA_Z, align 4, align-sorted
     41          int state=0;
   \                     state:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
     42          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
     43          {
   \                     maincsm_onmessage:
   \   00000000   10402DE9           PUSH     {R4,LR}
     44            
     45          
     46            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   AF20A0E3           MOV      R2,#+175
   \   0000000C   DE2C82E3           ORR      R2,R2,#0xDE00
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0900001A           BNE      ??maincsm_onmessage_0
     47            {
     48              extern const char *successed_config_filename;
     49              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000018   60009FE5           LDR      R0,??maincsm_onmessage_1  ;; successed_config_filename
   \   0000001C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   ........           BL       strcmp_nocase
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0300001A           BNE      ??maincsm_onmessage_0
     50              {
     51                ShowMSG(1,(int)"Cam config updated!");
   \   00000030   4C109FE5           LDR      R1,??maincsm_onmessage_1+0x4  ;; `?<Constant "Cam config updated!">`
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   480100EF           SWI      +328
     52                InitConfig();
   \   0000003C   ........           _BLF     InitConfig,??InitConfig??rA
     53              }
     54            }
     55          cam=*RamExtendedCameraState();
   \                     ??maincsm_onmessage_0:
   \   00000040   ........           LDR      R4,??DataTable2  ;; cam
   \   00000044   998200EF           SWI      +33433
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   000084E5           STR      R0,[R4, #+0]
     56          if((cam==2||cam==4)&&state!=1){init();state=1;}
   \   00000050   020050E3           CMP      R0,#+2
   \   00000054   04005013           CMPNE    R0,#+4
   \   00000058   0600001A           BNE      ??maincsm_onmessage_2
   \   0000005C   ........           LDR      R4,??DataTable4  ;; state
   \   00000060   000094E5           LDR      R0,[R4, #+0]
   \   00000064   010050E3           CMP      R0,#+1
   \   00000068   1080BD08           POPEQ    {R4,PC}
   \   0000006C   ........           BL       init
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   000084E5           STR      R0,[R4, #+0]
     57            return (1);  
   \                     ??maincsm_onmessage_2:
   \   00000078   0100A0E3           MOV      R0,#+1
   \   0000007C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onmessage_1:
   \   00000080   ........           DC32     successed_config_filename
   \   00000084   ........           DC32     `?<Constant "Cam config updated!">`
     58          }
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          static void maincsm_oncreate(CSM_RAM *data)
     61          {
     62           
     63          }
   \                     maincsm_oncreate:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     64          
     65          
     66          
     67          

   \                                 In segment DATA_Z, align 4, align-sorted
     68          GBSTMR tmr;
   \                     tmr:
   \   00000000                      DS8 16

   \                                 In segment CODE, align 4, keep-with-next
     69          void init()
     70          {
   \                     init:
   \   00000000   10402DE9           PUSH     {R4,LR}
     71            cam=*RamExtendedCameraState();
   \   00000004   ........           LDR      R4,??DataTable2  ;; cam
   \   00000008   998200EF           SWI      +33433
   \   0000000C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000010   000084E5           STR      R0,[R4, #+0]
     72            if(cam!=2&&cam!=4){state=0;GBS_DelTimer(&tmr);return;}
   \   00000014   ........           LDR      R4,??DataTable5  ;; tmr
   \   00000018   020050E3           CMP      R0,#+2
   \   0000001C   0700000A           BEQ      ??init_0
   \   00000020   040050E3           CMP      R0,#+4
   \   00000024   0600000A           BEQ      ??init_1
   \   00000028   ........           LDR      R0,??DataTable4  ;; state
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   001080E5           STR      R1,[R0, #+0]
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   8C0100EF           SWI      +396
   \   0000003C   1080BDE8           POP      {R4,PC}
     73            DrawRectangle(pos.x , pos.y, pos.x2,pos.y2, 0,GetPaletteAdrByColorIndex(4), NULL);
   \                     ??init_0:
   \   00000040   0400A0E3           MOV      R0,#+4
   \                     ??init_1:
   \   00000044   2E0100EF           SWI      +302
   \   00000048   3CC09FE5           LDR      R12,??init_2     ;; pos
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   02002DE9           PUSH     {R1}
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   F210DCE1           LDRSH    R1,[R12, #+2]
   \   00000064   F630DCE1           LDRSH    R3,[R12, #+6]
   \   00000068   F420DCE1           LDRSH    R2,[R12, #+4]
   \   0000006C   F000DCE1           LDRSH    R0,[R12, #+0]
   \   00000070   B40100EF           SWI      +436
     74            GBS_StartTimerProc(&tmr, 20, init);
   \   00000074   14209FE5           LDR      R2,??init_2+0x4  ;; init
   \   00000078   1410A0E3           MOV      R1,#+20
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   4D0000EF           SWI      +77
     75            
     76          }
   \   00000084   0CD08DE2           ADD      SP,SP,#+12
   \   00000088   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??init_2:
   \   0000008C   ........           DC32     pos
   \   00000090   ........           DC32     init

   \                                 In segment CODE, align 4, keep-with-next
     77          static void Killer(void)
     78          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
     79            extern void *ELF_BEGIN;
     80            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
     81          }
     82          

   \                                 In segment CODE, align 4, keep-with-next
     83          static void maincsm_onclose(CSM_RAM *csm)
     84          {
     85            GBS_DelTimer(&tmr);
   \                     maincsm_onclose:
   \   00000000   ........           LDR      R0,??DataTable5  ;; tmr
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
     86            SUBPROC((void *)Killer);
   \   0000000C   04009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000010   710100EF           SWI      +369
     87          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000018   ........           DC32     Killer
     88          

   \                                 In segment DATA_Z, align 4, align-sorted
     89          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
     90          
     91          static const struct
     92          {
     93            CSM_DESC maincsm;
     94            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
     95          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
     96          {
     97            {
     98            maincsm_onmessage,
     99            maincsm_oncreate,
    100          #ifdef NEWSGOLD
    101            0,
    102            0,
    103            0,
    104            0,
    105          #endif
    106            maincsm_onclose,
    107            sizeof(MAIN_CSM),
    108            1,
    109            &minus11
    110            },
    111            {
    112              maincsm_name_body,
    113              NAMECSM_MAGIC1,
    114              NAMECSM_MAGIC2,
    115              0x0,
    116              139
    117            }
    118          };
    119          
    120          static void UpdateCSMname(void)
    121          {
    122            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Cam");
    123          }

   \                                 In segment CODE, align 4, keep-with-next
    124          int main()
    125          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    126            InitConfig();
    127            CSM_RAM *save_cmpc;
    128            char dummy[sizeof(MAIN_CSM)];
    129            UpdateCSMname();  
   \   00000004   6C409FE5           LDR      R4,??main_0+0x4  ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   171F8FE2           ADR      R1,??main_0      ;; "Cam"
   \   00000014   280084E2           ADD      R0,R4,#+40
   \   00000018   240100EF           SWI      +292
    130            LockSched();
   \   0000001C   460100EF           SWI      +326
    131            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    132            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    133            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   070100EF           SWI      +263
    134            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000058   068100EF           SWI      +33030
   \   0000005C   080090E5           LDR      R0,[R0, #+8]
   \   00000060   045080E5           STR      R5,[R0, #+4]
    135            UnlockSched();
   \   00000064   470100EF           SWI      +327
    136            return 0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   28D08DE2           ADD      SP,SP,#+40
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   00000074   43616D00           DC8      "Cam"
   \   00000078   ........           DC32     MAINCSM
    137          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     cam

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     state

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     tmr

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Cam config updated!">`:
   \   00000000   43616D20636F       DC8 "Cam config updated!"
   \              6E6669672075
   \              706461746564
   \              2100        

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   43616D00           DC8 "Cam"
    138          
    139          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Killer                4
     init                 20
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      0
     maincsm_onmessage     8
     strcmp_nocase         0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     under_idle                        4
     ??strcmp_nocase_0                76
     cam                               4
     state                             4
     maincsm_onmessage               136
     maincsm_oncreate                  4
     tmr                              16
     init                            148
     Killer                           28
     maincsm_onclose                  28
     maincsm_name_body               280
     MAINCSM                          60
     main                            124
     ??DataTable2                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ?<Constant "Cam config updated!">
                                      20
     ?<Constant "Cam">                 4
      Others                          64

 
 608 bytes in segment CODE
  88 bytes in segment DATA_C
 308 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 556 bytes of CODE  memory (+ 64 bytes shared)
  88 bytes of CONST memory
 308 bytes of DATA  memory

Errors: none
Warnings: none

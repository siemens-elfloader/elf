##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    28/Mar/2011  22:51:12 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\111111\main.c                                 #
#    Command line    =  C:\arm\111111\main.c -lC C:\arm\111111\Release_SGOLD #
#                       \List\ -o C:\arm\111111\Release_SGOLD\Obj\ -s9       #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "C:\arm2\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\111111\Release_SGOLD\List\main.lst            #
#    Object file     =  C:\arm\111111\Release_SGOLD\Obj\main.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\111111\main.c
      1          /*
      2          * PlayersControl
      3          * (c) Danil_e71
      4          * Идея Snoop-Cat
      5          * 2010-2011
      6          * http://team-sc.ru/viewtopic.php?t=6022
      7          */
      8          #include "conf_loader.h"//кфг
      9          #include "main.h"//константы

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Send_MPlayer_Command(unsigned short, short)
   \                     Send_MPlayer_Command:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   E18000EF           SWI      +32993
   \   00000010   10002DE9           PUSH     {R4}
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   053040E0           SUB      R3,R0,R5
   \   00000020   5310A0E3           MOV      R1,#+83
   \   00000024   801C81E3           ORR      R1,R1,#0x8000
   \   00000028   0900A0E3           MOV      R0,#+9
   \   0000002C   420C80E3           ORR      R0,R0,#0x4200
   \   00000030   000100EF           SWI      +256
   \   00000034   3180BDE8           POP      {R0,R4,R5,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void MPlayer_VolChange(short)
   \                     MPlayer_VolChange:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   010050E3           CMP      R0,#+1
   \   00000008   0210A0E3           MOV      R1,#+2
   \   0000000C   1540A003           MOVEQ    R4,#+21
   \   00000010   1640A013           MOVNE    R4,#+22
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       Send_MPlayer_Command
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000028   ........           B        Send_MPlayer_Command  ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int strcmp_nocase(char const *, char const *)
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data IsMaplayerOn
   \                     IsMaplayerOn:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data IsIvoOn
   \                     IsIvoOn:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data IsSPlayerOn
   \                     IsSPlayerOn:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data MAINCSM_ID
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   IPC_REQ __data ipc_send
   \                     ipc_send:
   \   00000000                      DS8 12

   \                                 In segment DATA_Z, align 4, align-sorted
   \   IPC_REQ *__data ipc_recv
   \                     ipc_recv:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   IPC_REQ __data gipc
   \                     gipc:
   \   00000000                      DS8 12

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned int *__data addr
   \                     addr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data timer
   \                     timer:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
   \   int __data key_timer
   \                     key_timer:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for key_timer>`

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data sec
   \                     sec:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data min
   \                     min:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data hour
   \                     hour:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data doublekey[15]
   \                     doublekey:
   \   00000000                      DS8 60

   \                                 In segment DATA_Z, align 4, align-sorted
   \   GBSTMR __data close_timer
   \                     close_timer:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \   GBSTMR __data KeyTmr
   \                     KeyTmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_C, align 4, align-sorted
   \   char const __data perc_ss[6]
   \                     perc_ss:
   \   00000000   257320257300       DC8 "%s %s"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   int const __data minus11
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static unsigned short __data maincsm_name_body[140]
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
   \   struct <unnamed> *__data ws
   \                     ws:
   \   00000000                      DS8 4
     10          #include "funcs.c"//основные функции

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void SendCmd(int, int)
   \                     SendCmd:
   \   00000000   64309FE5           LDR      R3,??SendCmd_0   ;; ipc_send
   \   00000004   010050E3           CMP      R0,#+1
   \   00000008   ........           LDREQ    R0,??DataTable0  ;; `?<Constant "IVOPLAY">`
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   00008305           STREQ    R0,[R3, #+0]
   \   00000014   0D00000A           BEQ      ??SendCmd_1
   \   00000018   50209FE5           LDR      R2,??SendCmd_0+0x4  ;; `?<Constant "Control">`
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   0300001A           BNE      ??SendCmd_2
   \   00000024   ........           LDR      R0,??DataTable1  ;; `?<Constant "MusicAPlayer">`
   \   00000028   042083E5           STR      R2,[R3, #+4]
   \   0000002C   000083E5           STR      R0,[R3, #+0]
   \   00000030   060000EA           B        ??SendCmd_1
   \                     ??SendCmd_2:
   \   00000034   030050E3           CMP      R0,#+3
   \   00000038   0400001A           BNE      ??SendCmd_1
   \   0000003C   ........           LDR      R0,??DataTable2  ;; `?<Constant "SPlayer">`
   \   00000040   042083E5           STR      R2,[R3, #+4]
   \   00000044   000083E5           STR      R0,[R3, #+0]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   080083E5           STR      R0,[R3, #+8]
   \                     ??SendCmd_1:
   \   00000050   0120A0E1           MOV      R2,R1
   \   00000054   F210A0E3           MOV      R1,#+242
   \   00000058   C01F81E3           ORR      R1,R1,#0x300
   \   0000005C   0900A0E3           MOV      R0,#+9
   \   00000060   420C80E3           ORR      R0,R0,#0x4200
   \   00000064   000100EF           SWI      +256
   \   00000068   0080BDE8           POP      {PC}             ;; return
   \                     ??SendCmd_0:
   \   0000006C   ........           DC32     ipc_send
   \   00000070   ........           DC32     `?<Constant "Control">`

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void PlayPause()
   \                     PlayPause:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??PlayPause_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??PlayPause_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   1100A0E3           MOV      R0,#+17
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??PlayPause_0:
   \   0000002C   ........           LDR      R0,??DataTable54  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??PlayPause_1
   \   0000003C   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??PlayPause_1
   \   0000004C   0310A0E3           MOV      R1,#+3
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??PlayPause_1:
   \   00000058   ........           LDR      R0,??DataTable51  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??PlayPause_2
   \   00000068   ........           LDR      R0,??DataTable52  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??PlayPause_2
   \   00000078   0510A0E3           MOV      R1,#+5
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??PlayPause_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0210A0E3           MOV      R1,#+2
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Stop()
   \                     Stop:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Stop_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Stop_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0F00A0E3           MOV      R0,#+15
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Stop_0:
   \   0000002C   ........           LDR      R0,??DataTable54  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Stop_1
   \   0000003C   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Stop_1
   \   0000004C   0710A0E3           MOV      R1,#+7
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Stop_1:
   \   00000058   ........           LDR      R0,??DataTable51  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Stop_2
   \   00000068   ........           LDR      R0,??DataTable52  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Stop_2
   \   00000078   0C10A0E3           MOV      R1,#+12
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Stop_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0310A0E3           MOV      R1,#+3
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Prev()
   \                     Prev:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Prev_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Prev_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Prev_0:
   \   0000002C   ........           LDR      R0,??DataTable54  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Prev_1
   \   0000003C   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Prev_1
   \   0000004C   0210A0E3           MOV      R1,#+2
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Prev_1:
   \   00000058   ........           LDR      R0,??DataTable51  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Prev_2
   \   00000068   ........           LDR      R0,??DataTable52  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Prev_2
   \   00000078   0410A0E3           MOV      R1,#+4
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Prev_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0510A0E3           MOV      R1,#+5
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Next()
   \                     Next:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Next_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Next_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Next_0:
   \   0000002C   ........           LDR      R0,??DataTable54  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Next_1
   \   0000003C   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Next_1
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Next_1:
   \   00000058   ........           LDR      R0,??DataTable51  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Next_2
   \   00000068   ........           LDR      R0,??DataTable52  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Next_2
   \   00000078   0610A0E3           MOV      R1,#+6
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Next_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0410A0E3           MOV      R1,#+4
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Start(int)
   \                     Start:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable53  ;; player0
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0800000A           BEQ      ??Start_0
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0600001A           BNE      ??Start_0
   \   00000020   ........           LDR      R5,??DataTable57  ;; addr
   \   00000024   D8009FE5           LDR      R0,??Start_1     ;; `?<Constant "MEDIA_PLAYLAST">`
   \   00000028   740000EF           SWI      +116
   \   0000002C   000085E5           STR      R0,[R5, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0000000A           BEQ      ??Start_0
   \   00000038   710100EF           SWI      +369
   \                     ??Start_0:
   \   0000003C   400FA0E3           MOV      R0,#+256
   \   00000040   250100EF           SWI      +293
   \   00000044   0050A0E1           MOV      R5,R0
   \   00000048   ........           LDR      R0,??DataTable54  ;; player1
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0800000A           BEQ      ??Start_2
   \   00000058   010054E3           CMP      R4,#+1
   \   0000005C   0600001A           BNE      ??Start_2
   \   00000060   A0109FE5           LDR      R1,??Start_1+0x4  ;; PATH_IVO
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   240100EF           SWI      +292
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   940000EF           SWI      +148
   \                     ??Start_2:
   \   0000007C   ........           LDR      R0,??DataTable51  ;; player2
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0800000A           BEQ      ??Start_3
   \   0000008C   020054E3           CMP      R4,#+2
   \   00000090   0600001A           BNE      ??Start_3
   \   00000094   70109FE5           LDR      R1,??Start_1+0x8  ;; PATH_MAPLAYER
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   240100EF           SWI      +292
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   940000EF           SWI      +148
   \                     ??Start_3:
   \   000000B0   ........           LDR      R0,??DataTable41  ;; player3
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0800000A           BEQ      ??Start_4
   \   000000C0   030054E3           CMP      R4,#+3
   \   000000C4   0600001A           BNE      ??Start_4
   \   000000C8   40109FE5           LDR      R1,??Start_1+0xC  ;; PATH_SPLAYER
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   240100EF           SWI      +292
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   940000EF           SWI      +148
   \                     ??Start_4:
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   290100EF           SWI      +297
   \   000000EC   20009FE5           LDR      R0,??Start_1+0x10  ;; ena_lock
   \   000000F0   000090E5           LDR      R0,[R0, #+0]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   3080BD08           POPEQ    {R4,R5,PC}
   \   000000FC   ........           BL       Lock
   \   00000100   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Start_1:
   \   00000104   ........           DC32     `?<Constant "MEDIA_PLAYLAST">`
   \   00000108   ........           DC32     PATH_IVO
   \   0000010C   ........           DC32     PATH_MAPLAYER
   \   00000110   ........           DC32     PATH_SPLAYER
   \   00000114   ........           DC32     ena_lock

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Close()
   \                     Close:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Close_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Close_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0C00A0E3           MOV      R0,#+12
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Close_0:
   \   0000002C   ........           LDR      R0,??DataTable54  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Close_1
   \   0000003C   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Close_1
   \   0000004C   1910A0E3           MOV      R1,#+25
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Close_1:
   \   00000058   ........           LDR      R0,??DataTable51  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Close_2
   \   00000068   ........           LDR      R0,??DataTable52  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Close_2
   \   00000078   0910A0E3           MOV      R1,#+9
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Close_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0310A0E3           MOV      R1,#+3
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void VolUP()
   \                     VolUP:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??VolUP_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??VolUP_0
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   ........           BL       MPlayer_VolChange
   \                     ??VolUP_0:
   \   00000028   ........           LDR      R0,??DataTable54  ;; player1
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0600000A           BEQ      ??VolUP_1
   \   00000038   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0200000A           BEQ      ??VolUP_1
   \   00000048   0410A0E3           MOV      R1,#+4
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??VolUP_1:
   \   00000054   ........           LDR      R0,??DataTable51  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0080BD08           POPEQ    {PC}
   \   00000064   ........           LDR      R0,??DataTable52  ;; IsMaplayerOn
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0080BD08           POPEQ    {PC}
   \   00000074   0A10A0E3           MOV      R1,#+10
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   ........           BL       SendCmd
   \   00000080   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void VolDOWN()
   \                     VolDOWN:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??VolDOWN_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??VolDOWN_0
   \   00000020   0000E0E3           MVN      R0,#+0
   \   00000024   ........           BL       MPlayer_VolChange
   \                     ??VolDOWN_0:
   \   00000028   ........           LDR      R0,??DataTable54  ;; player1
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0600000A           BEQ      ??VolDOWN_1
   \   00000038   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0200000A           BEQ      ??VolDOWN_1
   \   00000048   0510A0E3           MOV      R1,#+5
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??VolDOWN_1:
   \   00000054   ........           LDR      R0,??DataTable51  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0080BD08           POPEQ    {PC}
   \   00000064   ........           LDR      R0,??DataTable52  ;; IsMaplayerOn
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0080BD08           POPEQ    {PC}
   \   00000074   0B10A0E3           MOV      R1,#+11
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   ........           BL       SendCmd
   \   00000080   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Mute()
   \                     Mute:
   \   00000000   ........           LDR      R0,??DataTable53  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Mute_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Mute_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0A00A0E3           MOV      R0,#+10
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Mute_0:
   \   0000002C   ........           LDR      R0,??DataTable54  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0080BD08           POPEQ    {PC}
   \   0000003C   ........           LDR      R0,??DataTable55  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0080BD08           POPEQ    {PC}
   \   0000004C   0610A0E3           MOV      R1,#+6
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \   00000058   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int HeadsetDisconnect()
   \                     HeadsetDisconnect:
   \   00000000   0C019FE5           LDR      R0,??HeadsetDisconnect_1  ;; HeadsetDType
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   04419FE5           LDR      R4,??HeadsetDisconnect_1+0x4  ;; SHORCUT1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0700001A           BNE      ??HeadsetDisconnect_2
   \   00000018   ........           LDR      R5,??DataTable57  ;; addr
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   740000EF           SWI      +116
   \   00000024   000085E5           STR      R0,[R5, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0E00000A           BEQ      ??HeadsetDisconnect_3
   \   00000030   710100EF           SWI      +369
   \                     ??HeadsetDisconnect_4:
   \   00000034   1E0000EA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_2:
   \   00000038   010050E3           CMP      R0,#+1
   \   0000003C   0C00001A           BNE      ??HeadsetDisconnect_6
   \   00000040   400FA0E3           MOV      R0,#+256
   \   00000044   250100EF           SWI      +293
   \   00000048   0050A0E1           MOV      R5,R0
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   240100EF           SWI      +292
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   940000EF           SWI      +148
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   290100EF           SWI      +297
   \                     ??HeadsetDisconnect_3:
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_6:
   \   00000074   020050E3           CMP      R0,#+2
   \   00000078   2300001A           BNE      ??HeadsetDisconnect_7
   \   0000007C   98009FE5           LDR      R0,??HeadsetDisconnect_1+0x8  ;; HeadsetDD
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   0B0050E3           CMP      R0,#+11
   \   00000088   F7FFFF8A           BHI      ??HeadsetDisconnect_3
   \   0000008C   011F8FE2           ADR      R1,??HeadsetDisconnect_0
   \   00000090   0010D1E7           LDRB     R1,[R1, R0]
   \   00000094   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HeadsetDisconnect_0:
   \   00000098   0204080A           DC8      +2,+4,+8,+10
   \   0000009C   0C0E1012           DC8      +12,+14,+16,+18
   \   000000A0   1416181A           DC8      +20,+22,+24,+26
   \                     ??HeadsetDisconnect_8:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   000000EA           B        ??HeadsetDisconnect_9
   \                     ??HeadsetDisconnect_10:
   \   000000AC   0100A0E3           MOV      R0,#+1
   \                     ??HeadsetDisconnect_9:
   \   000000B0   ........           BL       Start
   \                     ??HeadsetDisconnect_5:
   \   000000B4   0100A0E3           MOV      R0,#+1
   \   000000B8   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_11:
   \   000000BC   0200A0E3           MOV      R0,#+2
   \   000000C0   FAFFFFEA           B        ??HeadsetDisconnect_9
   \                     ??HeadsetDisconnect_12:
   \   000000C4   0300A0E3           MOV      R0,#+3
   \   000000C8   F8FFFFEA           B        ??HeadsetDisconnect_9
   \                     ??HeadsetDisconnect_13:
   \   000000CC   ........           BL       Close
   \   000000D0   F7FFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_14:
   \   000000D4   ........           BL       PlayPause
   \   000000D8   F5FFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_15:
   \   000000DC   ........           BL       Stop
   \   000000E0   F3FFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_16:
   \   000000E4   ........           BL       Next
   \   000000E8   F1FFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_17:
   \   000000EC   ........           BL       Prev
   \   000000F0   EFFFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_18:
   \   000000F4   ........           BL       VolUP
   \   000000F8   EDFFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_19:
   \   000000FC   ........           BL       VolDOWN
   \   00000100   EBFFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_20:
   \   00000104   ........           BL       Mute
   \   00000108   E9FFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_7:
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??HeadsetDisconnect_1:
   \   00000114   ........           DC32     HeadsetDType
   \   00000118   ........           DC32     SHORCUT1
   \   0000011C   ........           DC32     HeadsetDD

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int HeadsetConnect()
   \                     HeadsetConnect:
   \   00000000   0C019FE5           LDR      R0,??HeadsetConnect_1  ;; HeadsetCType
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   04419FE5           LDR      R4,??HeadsetConnect_1+0x4  ;; SHORCUT2
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0700001A           BNE      ??HeadsetConnect_2
   \   00000018   ........           LDR      R5,??DataTable57  ;; addr
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   740000EF           SWI      +116
   \   00000024   000085E5           STR      R0,[R5, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0E00000A           BEQ      ??HeadsetConnect_3
   \   00000030   710100EF           SWI      +369
   \                     ??HeadsetConnect_4:
   \   00000034   1E0000EA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_2:
   \   00000038   010050E3           CMP      R0,#+1
   \   0000003C   0C00001A           BNE      ??HeadsetConnect_6
   \   00000040   400FA0E3           MOV      R0,#+256
   \   00000044   250100EF           SWI      +293
   \   00000048   0050A0E1           MOV      R5,R0
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   240100EF           SWI      +292
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   940000EF           SWI      +148
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   290100EF           SWI      +297
   \                     ??HeadsetConnect_3:
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_6:
   \   00000074   020050E3           CMP      R0,#+2
   \   00000078   2300001A           BNE      ??HeadsetConnect_7
   \   0000007C   98009FE5           LDR      R0,??HeadsetConnect_1+0x8  ;; HeadsetCD
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   0B0050E3           CMP      R0,#+11
   \   00000088   F7FFFF8A           BHI      ??HeadsetConnect_3
   \   0000008C   011F8FE2           ADR      R1,??HeadsetConnect_0
   \   00000090   0010D1E7           LDRB     R1,[R1, R0]
   \   00000094   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HeadsetConnect_0:
   \   00000098   0204080A           DC8      +2,+4,+8,+10
   \   0000009C   0C0E1012           DC8      +12,+14,+16,+18
   \   000000A0   1416181A           DC8      +20,+22,+24,+26
   \                     ??HeadsetConnect_8:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   000000EA           B        ??HeadsetConnect_9
   \                     ??HeadsetConnect_10:
   \   000000AC   0100A0E3           MOV      R0,#+1
   \                     ??HeadsetConnect_9:
   \   000000B0   ........           BL       Start
   \                     ??HeadsetConnect_5:
   \   000000B4   0100A0E3           MOV      R0,#+1
   \   000000B8   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_11:
   \   000000BC   0200A0E3           MOV      R0,#+2
   \   000000C0   FAFFFFEA           B        ??HeadsetConnect_9
   \                     ??HeadsetConnect_12:
   \   000000C4   0300A0E3           MOV      R0,#+3
   \   000000C8   F8FFFFEA           B        ??HeadsetConnect_9
   \                     ??HeadsetConnect_13:
   \   000000CC   ........           BL       Close
   \   000000D0   F7FFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_14:
   \   000000D4   ........           BL       PlayPause
   \   000000D8   F5FFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_15:
   \   000000DC   ........           BL       Stop
   \   000000E0   F3FFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_16:
   \   000000E4   ........           BL       Next
   \   000000E8   F1FFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_17:
   \   000000EC   ........           BL       Prev
   \   000000F0   EFFFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_18:
   \   000000F4   ........           BL       VolUP
   \   000000F8   EDFFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_19:
   \   000000FC   ........           BL       VolDOWN
   \   00000100   EBFFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_20:
   \   00000104   ........           BL       Mute
   \   00000108   E9FFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_7:
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??HeadsetConnect_1:
   \   00000114   ........           DC32     HeadsetCType
   \   00000118   ........           DC32     SHORCUT2
   \   0000011C   ........           DC32     HeadsetCD

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TmrSec(int)
   \                     TmrSec:
   \   00000000   50009FE5           LDR      R0,??TmrSec_0    ;; timer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   020051E3           CMP      R1,#+2
   \   00000010   070000AA           BGE      ??TmrSec_1
   \   00000014   40209FE5           LDR      R2,??TmrSec_0+0x4  ;; TmrSec
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   38009FE5           LDR      R0,??TmrSec_0+0x8  ;; key_timer
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   ........           LDR      R0,??DataTable83  ;; KeyTmr
   \   0000002C   4D0000EF           SWI      +77
   \   00000030   0080BDE8           POP      {PC}
   \                     ??TmrSec_1:
   \   00000034   ........           LDR      R3,??DataTable71  ;; doublekey
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0020A0E3           MOV      R2,#+0
   \                     ??TmrSec_2:
   \   00000040   012183E7           STR      R2,[R3, +R1, LSL #+2]
   \   00000044   011081E2           ADD      R1,R1,#+1
   \   00000048   0F0051E3           CMP      R1,#+15
   \   0000004C   FBFFFFBA           BLT      ??TmrSec_2
   \   00000050   002080E5           STR      R2,[R0, #+0]
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??TmrSec_0:
   \   00000058   ........           DC32     timer
   \   0000005C   ........           DC32     TmrSec
   \   00000060   ........           DC32     key_timer

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Lock()
   \                     Lock:
   \   00000000   3C309FE5           LDR      R3,??Lock_0      ;; gipc
   \   00000004   3C009FE5           LDR      R0,??Lock_0+0x4  ;; `?<Constant "XTask">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   000083E5           STR      R0,[R3, #+0]
   \   00000010   ........           LDR      R0,??DataTable77  ;; `?<Constant "IVOPLAY_PLUGIN">`
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   040083E5           STR      R0,[R3, #+4]
   \   0000001C   ........           LDR      R0,??DataTable86  ;; MAINCSM_ID
   \   00000020   F210A0E3           MOV      R1,#+242
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   C01F81E3           ORR      R1,R1,#0x300
   \   0000002C   080083E5           STR      R0,[R3, #+8]
   \   00000030   0900A0E3           MOV      R0,#+9
   \   00000034   420C80E3           ORR      R0,R0,#0x4200
   \   00000038   000100EF           SWI      +256
   \   0000003C   A90000EF           SWI      +169
   \   00000040   0080BDE8           POP      {PC}             ;; return
   \                     ??Lock_0:
   \   00000044   ........           DC32     gipc
   \   00000048   ........           DC32     `?<Constant "XTask">`

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void StartCloseTimer()
   \                     StartCloseTimer:
   \   00000000   ........           LDR      R1,??DataTable66  ;; sec
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   000081E5           STR      R0,[R1, #+0]
   \   0000000C   ........           LDR      R1,??DataTable67  ;; min
   \   00000010   000081E5           STR      R0,[R1, #+0]
   \   00000014   ........           LDR      R1,??DataTable68  ;; hour
   \   00000018   000081E5           STR      R0,[R1, #+0]
   \   0000001C   ........           B        CloseTimer       ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void StopCloseTimer()
   \                     StopCloseTimer:
   \   00000000   ........           LDR      R0,??DataTable84  ;; close_timer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   440100EF           SWI      +324
   \   0000000C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void CloseTimer()
   \                     CloseTimer:
   \   00000000   DC009FE5           LDR      R0,??CloseTimer_0  ;; TimerMin
   \   00000004   F0412DE9           PUSH     {R4-R8,LR}
   \   00000008   004090E5           LDR      R4,[R0, #+0]
   \   0000000C   D4009FE5           LDR      R0,??CloseTimer_0+0x4  ;; TimerHour
   \   00000010   005090E5           LDR      R5,[R0, #+0]
   \   00000014   010055E3           CMP      R5,#+1
   \   00000018   010054B3           CMPLT    R4,#+1
   \   0000001C   F081BDB8           POPLT    {R4-R8,PC}
   \   00000020   ........           LDR      R6,??DataTable66  ;; sec
   \   00000024   C0109FE5           LDR      R1,??CloseTimer_0+0x8  ;; TimerVibr
   \   00000028   000096E5           LDR      R0,[R6, #+0]
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   ........           LDR      R7,??DataTable67  ;; min
   \   00000034   ........           LDR      R8,??DataTable68  ;; hour
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   000086E5           STR      R0,[R6, #+0]
   \   00000040   000051E3           CMP      R1,#+0
   \   00000044   0700000A           BEQ      ??CloseTimer_1
   \   00000048   020050E3           CMP      R0,#+2
   \   0000004C   050000AA           BGE      ??CloseTimer_1
   \   00000050   000098E5           LDR      R0,[R8, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   00009705           LDREQ    R0,[R7, #+0]
   \   0000005C   00005003           CMPEQ    R0,#+0
   \   00000060   0A00A003           MOVEQ    R0,#+10
   \   00000064   0000000A           BEQ      ??CloseTimer_2
   \                     ??CloseTimer_1:
   \   00000068   0000A0E3           MOV      R0,#+0
   \                     ??CloseTimer_2:
   \   0000006C   7C0000EF           SWI      +124
   \   00000070   000097E5           LDR      R0,[R7, #+0]
   \   00000074   001096E5           LDR      R1,[R6, #+0]
   \   00000078   3C0051E3           CMP      R1,#+60
   \   0000007C   010080A2           ADDGE    R0,R0,#+1
   \   00000080   0010A0A3           MOVGE    R1,#+0
   \   00000084   001086A5           STRGE    R1,[R6, #+0]
   \   00000088   3C0050E3           CMP      R0,#+60
   \   0000008C   030000BA           BLT      ??CloseTimer_3
   \   00000090   000098E5           LDR      R0,[R8, #+0]
   \   00000094   010080E2           ADD      R0,R0,#+1
   \   00000098   000088E5           STR      R0,[R8, #+0]
   \   0000009C   0000A0E3           MOV      R0,#+0
   \                     ??CloseTimer_3:
   \   000000A0   ........           LDR      R6,??DataTable84  ;; close_timer
   \   000000A4   000087E5           STR      R0,[R7, #+0]
   \   000000A8   000098E5           LDR      R0,[R8, #+0]
   \   000000AC   050050E1           CMP      R0,R5
   \   000000B0   00009705           LDREQ    R0,[R7, #+0]
   \   000000B4   04005001           CMPEQ    R0,R4
   \   000000B8   0400001A           BNE      ??CloseTimer_4
   \   000000BC   ........           BL       Close
   \   000000C0   ........           BL       Lock
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   440100EF           SWI      +324
   \   000000CC   F081BDE8           POP      {R4-R8,PC}
   \                     ??CloseTimer_4:
   \   000000D0   18209FE5           LDR      R2,??CloseTimer_0+0xC  ;; CloseTimer
   \   000000D4   D810A0E3           MOV      R1,#+216
   \   000000D8   0600A0E1           MOV      R0,R6
   \   000000DC   4D0000EF           SWI      +77
   \   000000E0   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??CloseTimer_0:
   \   000000E4   ........           DC32     TimerMin
   \   000000E8   ........           DC32     TimerHour
   \   000000EC   ........           DC32     TimerVibr
   \   000000F0   ........           DC32     CloseTimer
     11          #include "funcs.h"//описание функций
     12          
     13          
     14          #define VERSION "1.0"
     15          
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          int MyFunc(int key1,int key2,int key1type,int key2type,int msg,int submsg,void ptr(),int number,int param0)
     18          {
   \                     MyFunc:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
   \   0000000C   24809DE5           LDR      R8,[SP, #+36]
   \   00000010   28609DE5           LDR      R6,[SP, #+40]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   18109DE5           LDR      R1,[SP, #+24]
     19            
     20            if((key1type!=KEY_NOT_USE||key2type!=KEY_NOT_USE)&&msg!=KEY_DOWN)
   \   00000020   040052E3           CMP      R2,#+4
   \   00000024   04005303           CMPEQ    R3,#+4
   \   00000028   4800000A           BEQ      ??MyFunc_0
   \   0000002C   9370A0E3           MOV      R7,#+147
   \   00000030   407F87E3           ORR      R7,R7,#0x100
   \   00000034   070051E1           CMP      R1,R7
   \   00000038   4400000A           BEQ      ??MyFunc_0
     21            {
     22            if((key1type==KEY_DOUBLE_CLICK&&msg==KEY_UP&&submsg==key1)||(key2type==KEY_DOUBLE_CLICK&&msg==KEY_UP&&submsg==key2))
   \   0000003C   0070E0E3           MVN      R7,#+0
   \   00000040   010052E3           CMP      R2,#+1
   \   00000044   650F5103           CMPEQ    R1,#+404
   \   00000048   04005C01           CMPEQ    R12,R4
   \   0000004C   0300000A           BEQ      ??MyFunc_1
   \   00000050   010053E3           CMP      R3,#+1
   \   00000054   650F5103           CMPEQ    R1,#+404
   \   00000058   00005C01           CMPEQ    R12,R0
   \   0000005C   1400001A           BNE      ??MyFunc_2
   \                     ??MyFunc_1:
   \   00000060   ........           LDR      R1,??DataTable71  ;; doublekey
     23            {
     24               doublekey[number]++;if(submsg==key1)TmrSec(key1);else TmrSec(key2);
   \   00000064   04005CE1           CMP      R12,R4
   \   00000068   088181E0           ADD      R8,R1,R8, LSL #+2
   \   0000006C   001098E5           LDR      R1,[R8, #+0]
   \   00000070   0400A001           MOVEQ    R0,R4
   \   00000074   011081E2           ADD      R1,R1,#+1
   \   00000078   001088E5           STR      R1,[R8, #+0]
   \   0000007C   ........           BL       TmrSec
     25               if(doublekey[number]==DOUBLE_SECOND){if(param0!=-1)ptr(param0); else ptr();doublekey[number]=DOUBLE_NULL;} 
   \   00000080   000098E5           LDR      R0,[R8, #+0]
   \   00000084   020050E3           CMP      R0,#+2
   \   00000088   0700001A           BNE      ??MyFunc_3
   \   0000008C   070056E1           CMP      R6,R7
   \   00000090   0200000A           BEQ      ??MyFunc_4
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   35FF2FE1           BLX      R5
   \   0000009C   000000EA           B        ??MyFunc_5
   \                     ??MyFunc_4:
   \   000000A0   35FF2FE1           BLX      R5
   \                     ??MyFunc_5:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   000088E5           STR      R0,[R8, #+0]
     26                return 1;  
   \                     ??MyFunc_3:
   \   000000AC   0100A0E3           MOV      R0,#+1
   \   000000B0   F081BDE8           POP      {R4-R8,PC}
     27            }
     28           if((key1type==KEY_TWO&&key2type==KEY_TWO&&msg==KEY_UP)&&(submsg==key1||submsg==key2))
   \                     ??MyFunc_2:
   \   000000B4   9580A0E3           MOV      R8,#+149
   \   000000B8   408F88E3           ORR      R8,R8,#0x100
   \   000000BC   030052E3           CMP      R2,#+3
   \   000000C0   03005303           CMPEQ    R3,#+3
   \   000000C4   650F5103           CMPEQ    R1,#+404
   \   000000C8   1000001A           BNE      ??MyFunc_6
   \   000000CC   04005CE1           CMP      R12,R4
   \   000000D0   00005C11           CMPNE    R12,R0
   \   000000D4   1700001A           BNE      ??MyFunc_7
     29            {    
     30              if(submsg==key2&&(int)*RamPressedKey()==key1)if(param0!=-1)ptr(param0); else ptr();
   \   000000D8   00005CE1           CMP      R12,R0
   \   000000DC   F2FFFF1A           BNE      ??MyFunc_3
   \   000000E0   DF8000EF           SWI      +32991
   \   000000E4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000E8   040050E1           CMP      R0,R4
   \   000000EC   EEFFFF1A           BNE      ??MyFunc_3
   \   000000F0   070056E1           CMP      R6,R7
   \   000000F4   0200000A           BEQ      ??MyFunc_8
   \                     ??MyFunc_9:
   \   000000F8   0600A0E1           MOV      R0,R6
   \   000000FC   35FF2FE1           BLX      R5
   \   00000100   000000EA           B        ??MyFunc_10
   \                     ??MyFunc_8:
   \   00000104   35FF2FE1           BLX      R5
   \                     ??MyFunc_10:
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   F081BDE8           POP      {R4-R8,PC}
     31              
     32            return 1;
     33            }
     34              if((submsg==key1&&((key1type==KEY_LONG_PRESS&&msg==LONG_PRESS)||(key1type==KEY_ONE_CLICK&&msg==KEY_UP)))||(submsg==key2&&((key2type==KEY_LONG_PRESS&&msg==LONG_PRESS)||(key2type==KEY_ONE_CLICK&&msg==KEY_UP))))
   \                     ??MyFunc_6:
   \   00000110   04005CE1           CMP      R12,R4
   \   00000114   0700001A           BNE      ??MyFunc_7
   \   00000118   020052E3           CMP      R2,#+2
   \   0000011C   0200001A           BNE      ??MyFunc_11
   \   00000120   080051E1           CMP      R1,R8
   \   00000124   0300001A           BNE      ??MyFunc_7
   \   00000128   0D0000EA           B        ??MyFunc_12
   \                     ??MyFunc_11:
   \   0000012C   000052E3           CMP      R2,#+0
   \   00000130   650F5103           CMPEQ    R1,#+404
   \   00000134   0A00000A           BEQ      ??MyFunc_12
   \                     ??MyFunc_7:
   \   00000138   00005CE1           CMP      R12,R0
   \   0000013C   0300001A           BNE      ??MyFunc_0
   \   00000140   020053E3           CMP      R3,#+2
   \   00000144   0300001A           BNE      ??MyFunc_13
   \   00000148   080051E1           CMP      R1,R8
   \   0000014C   0400000A           BEQ      ??MyFunc_12
     35            {
     36              if(param0!=-1)ptr(param0);
     37              else ptr();
     38              return 1;
     39            }
     40            return -1;
   \                     ??MyFunc_0:
   \   00000150   0000E0E3           MVN      R0,#+0
   \   00000154   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??MyFunc_13:
   \   00000158   000053E3           CMP      R3,#+0
   \   0000015C   650F5103           CMPEQ    R1,#+404
   \   00000160   FAFFFF1A           BNE      ??MyFunc_0
   \                     ??MyFunc_12:
   \   00000164   070056E1           CMP      R6,R7
   \   00000168   E5FFFF0A           BEQ      ??MyFunc_8
   \   0000016C   E1FFFFEA           B        ??MyFunc_9
     41            }
     42              return -1;
     43          }
     44          
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          int MyTmrFunc(int key,int keytype,int msg,int submsg,void ptr(),int number)
     47          {
   \                     MyTmrFunc:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10C09DE5           LDR      R12,[SP, #+16]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
     48            if(keytype!=3&&msg!=KEY_DOWN&&submsg==key)
   \   0000000C   030051E3           CMP      R1,#+3
   \   00000010   1C00000A           BEQ      ??MyTmrFunc_0
   \   00000014   9350A0E3           MOV      R5,#+147
   \   00000018   405F85E3           ORR      R5,R5,#0x100
   \   0000001C   050052E1           CMP      R2,R5
   \   00000020   1800000A           BEQ      ??MyTmrFunc_0
   \   00000024   000053E1           CMP      R3,R0
   \   00000028   1600001A           BNE      ??MyTmrFunc_0
     49            {  
     50            if((keytype==KEY_DOUBLE_CLICK&&msg==KEY_UP))
   \   0000002C   010051E3           CMP      R1,#+1
   \   00000030   0F00001A           BNE      ??MyTmrFunc_1
   \   00000034   650F52E3           CMP      R2,#+404
   \   00000038   1200001A           BNE      ??MyTmrFunc_0
   \   0000003C   ........           LDR      R1,??DataTable71  ;; doublekey
   \   00000040   0C5181E0           ADD      R5,R1,R12, LSL #+2
   \   00000044   001095E5           LDR      R1,[R5, #+0]
   \   00000048   011081E2           ADD      R1,R1,#+1
   \   0000004C   001085E5           STR      R1,[R5, #+0]
     51            {
     52              doublekey[number]++;TmrSec(key);
   \   00000050   ........           BL       TmrSec
     53              if(doublekey[number]==DOUBLE_SECOND)
   \   00000054   000095E5           LDR      R0,[R5, #+0]
   \   00000058   020050E3           CMP      R0,#+2
   \   0000005C   0200001A           BNE      ??MyTmrFunc_2
     54              {
     55                ptr();
   \   00000060   34FF2FE1           BLX      R4
     56                doublekey[number]=DOUBLE_NULL;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   000085E5           STR      R0,[R5, #+0]
     57                return 1;
     58            }   
     59            return 1;
   \                     ??MyTmrFunc_2:
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   3080BDE8           POP      {R4,R5,PC}
     60            } 
     61              if((keytype==KEY_LONG_PRESS&&msg==LONG_PRESS)||(keytype==KEY_ONE_CLICK&&msg==KEY_UP))
   \                     ??MyTmrFunc_1:
   \   00000074   020051E3           CMP      R1,#+2
   \   00000078   0400001A           BNE      ??MyTmrFunc_3
   \   0000007C   020085E2           ADD      R0,R5,#+2
   \   00000080   000052E1           CMP      R2,R0
   \   00000084   0400000A           BEQ      ??MyTmrFunc_4
     62            {
     63             ptr();
     64             return 1;
     65            }
     66            return -1;
   \                     ??MyTmrFunc_0:
   \   00000088   0000E0E3           MVN      R0,#+0
   \   0000008C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??MyTmrFunc_3:
   \   00000090   000051E3           CMP      R1,#+0
   \   00000094   650F5203           CMPEQ    R2,#+404
   \   00000098   FAFFFF1A           BNE      ??MyTmrFunc_0
   \                     ??MyTmrFunc_4:
   \   0000009C   34FF2FE1           BLX      R4
   \   000000A0   0100A0E3           MOV      R0,#+1
   \   000000A4   3080BDE8           POP      {R4,R5,PC}
     67              }
     68            return -1;
     69          }
     70          
     71          

   \                                 In segment CODE, align 4, keep-with-next
     72          int my_keyhook(int submsg, int msg)
     73          {
   \                     my_keyhook:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     74              
     75          if((MainType==TYPE_ONLY_UNLOCK&&!IsUnlocked())||(MainType==TYPE_ONLY_LOCK&&!IsUnlocked())||MainType==TYPE_BOTH) 
   \   00000008   64059FE5           LDR      R0,??my_keyhook_0  ;; MainType
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0300001A           BNE      ??my_keyhook_1
   \                     ??my_keyhook_2:
   \   0000001C   430000EF           SWI      +67
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   5001001A           BNE      ??my_keyhook_3
   \   00000028   030000EA           B        ??my_keyhook_4
   \                     ??my_keyhook_1:
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   F9FFFF0A           BEQ      ??my_keyhook_2
   \   00000034   020050E3           CMP      R0,#+2
   \   00000038   4B01001A           BNE      ??my_keyhook_3
     76            {
     77              if(!IsPlayerOn()&&!IsIvoOn&&!IsMaplayerOn&&!IsSPlayerOn)
   \                     ??my_keyhook_4:
   \   0000003C   ........           LDR      R8,??DataTable79  ;; IsIvoOn
   \   00000040   ........           LDR      R7,??DataTable76  ;; IsMaplayerOn
   \   00000044   ........           LDR      R6,??DataTable81  ;; IsSPlayerOn
   \   00000048   7F0000EF           SWI      +127
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   00009805           LDREQ    R0,[R8, #+0]
   \   00000054   00005003           CMPEQ    R0,#+0
   \   00000058   00009705           LDREQ    R0,[R7, #+0]
   \   0000005C   00005003           CMPEQ    R0,#+0
   \   00000060   00009605           LDREQ    R0,[R6, #+0]
   \   00000064   00005003           CMPEQ    R0,#+0
   \   00000068   5400001A           BNE      ??my_keyhook_5
     78              {
     79              if(MyFunc(StartKey1_1,StartKey1_2,StartKey1_1Type,StartKey1_2Type,msg,submsg,Start,0,STANDART)==1)return KEYHOOK_BREAK;
   \   0000006C   04959FE5           LDR      R9,??my_keyhook_0+0x4  ;; Start
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   0900A0E1           MOV      R0,R9
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   E4049FE5           LDR      R0,??my_keyhook_0+0x8  ;; StartKey1_2Type
   \   00000094   003090E5           LDR      R3,[R0, #+0]
   \   00000098   E0049FE5           LDR      R0,??my_keyhook_0+0xC  ;; StartKey1_1Type
   \   0000009C   002090E5           LDR      R2,[R0, #+0]
   \   000000A0   DC049FE5           LDR      R0,??my_keyhook_0+0x10  ;; StartKey1_2
   \   000000A4   001090E5           LDR      R1,[R0, #+0]
   \   000000A8   D8049FE5           LDR      R0,??my_keyhook_0+0x14  ;; StartKey1_1
   \   000000AC   000090E5           LDR      R0,[R0, #+0]
   \   000000B0   ........           BL       MyFunc
   \   000000B4   010050E3           CMP      R0,#+1
   \   000000B8   14D08DE2           ADD      SP,SP,#+20
   \   000000BC   0100001A           BNE      ??my_keyhook_6
   \                     ??my_keyhook_7:
   \   000000C0   0200A0E3           MOV      R0,#+2
   \   000000C4   F083BDE8           POP      {R4-R9,PC}
     80              if(MyFunc(StartKey2_1,StartKey2_2,StartKey2_1Type,StartKey2_2Type,msg,submsg,Start,1,IVOPLAY)==1)return KEYHOOK_BREAK;
   \                     ??my_keyhook_6:
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   0900A0E1           MOV      R0,R9
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   98049FE5           LDR      R0,??my_keyhook_0+0x18  ;; StartKey2_2Type
   \   000000F0   003090E5           LDR      R3,[R0, #+0]
   \   000000F4   94049FE5           LDR      R0,??my_keyhook_0+0x1C  ;; StartKey2_1Type
   \   000000F8   002090E5           LDR      R2,[R0, #+0]
   \   000000FC   90049FE5           LDR      R0,??my_keyhook_0+0x20  ;; StartKey2_2
   \   00000100   001090E5           LDR      R1,[R0, #+0]
   \   00000104   8C049FE5           LDR      R0,??my_keyhook_0+0x24  ;; StartKey2_1
   \   00000108   000090E5           LDR      R0,[R0, #+0]
   \   0000010C   ........           BL       MyFunc
   \   00000110   010050E3           CMP      R0,#+1
   \   00000114   14D08DE2           ADD      SP,SP,#+20
   \   00000118   E8FFFF0A           BEQ      ??my_keyhook_7
     81              if(MyFunc(StartKey3_1,StartKey3_2,StartKey3_1Type,StartKey3_2Type,msg,submsg,Start,2,MAPLAYER)==1)return KEYHOOK_BREAK;
   \   0000011C   0200A0E3           MOV      R0,#+2
   \   00000120   01002DE9           PUSH     {R0}
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0900A0E1           MOV      R0,R9
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   0500A0E1           MOV      R0,R5
   \   0000013C   01002DE9           PUSH     {R0}
   \   00000140   54049FE5           LDR      R0,??my_keyhook_0+0x28  ;; StartKey3_2Type
   \   00000144   003090E5           LDR      R3,[R0, #+0]
   \   00000148   50049FE5           LDR      R0,??my_keyhook_0+0x2C  ;; StartKey3_1Type
   \   0000014C   002090E5           LDR      R2,[R0, #+0]
   \   00000150   4C049FE5           LDR      R0,??my_keyhook_0+0x30  ;; StartKey3_2
   \   00000154   001090E5           LDR      R1,[R0, #+0]
   \   00000158   48049FE5           LDR      R0,??my_keyhook_0+0x34  ;; StartKey3_1
   \   0000015C   000090E5           LDR      R0,[R0, #+0]
   \   00000160   ........           BL       MyFunc
   \   00000164   010050E3           CMP      R0,#+1
   \   00000168   14D08DE2           ADD      SP,SP,#+20
   \   0000016C   D3FFFF0A           BEQ      ??my_keyhook_7
     82              if(MyFunc(StartKey4_1,StartKey4_2,StartKey4_1Type,StartKey4_2Type,msg,submsg,Start,3,SPLAYER)==1)return KEYHOOK_BREAK;
   \   00000170   0300A0E3           MOV      R0,#+3
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   01002DE9           PUSH     {R0}
   \   0000017C   00022DE9           PUSH     {R9}
   \   00000180   0400A0E1           MOV      R0,R4
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   0500A0E1           MOV      R0,R5
   \   0000018C   01002DE9           PUSH     {R0}
   \   00000190   14049FE5           LDR      R0,??my_keyhook_0+0x38  ;; StartKey4_2Type
   \   00000194   003090E5           LDR      R3,[R0, #+0]
   \   00000198   10049FE5           LDR      R0,??my_keyhook_0+0x3C  ;; StartKey4_1Type
   \   0000019C   002090E5           LDR      R2,[R0, #+0]
   \   000001A0   0C049FE5           LDR      R0,??my_keyhook_0+0x40  ;; StartKey4_2
   \   000001A4   001090E5           LDR      R1,[R0, #+0]
   \   000001A8   08049FE5           LDR      R0,??my_keyhook_0+0x44  ;; StartKey4_1
   \   000001AC   000090E5           LDR      R0,[R0, #+0]
   \   000001B0   ........           BL       MyFunc
   \   000001B4   010050E3           CMP      R0,#+1
   \   000001B8   14D08DE2           ADD      SP,SP,#+20
   \   000001BC   BFFFFF0A           BEQ      ??my_keyhook_7
     83              }
     84          
     85          
     86              
     87              
     88             if(IsPlayerOn()||IsIvoOn||IsMaplayerOn||IsSPlayerOn)
   \                     ??my_keyhook_5:
   \   000001C0   7F0000EF           SWI      +127
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   00009805           LDREQ    R0,[R8, #+0]
   \   000001CC   00005003           CMPEQ    R0,#+0
   \   000001D0   00009705           LDREQ    R0,[R7, #+0]
   \   000001D4   00005003           CMPEQ    R0,#+0
   \   000001D8   00009605           LDREQ    R0,[R6, #+0]
   \   000001DC   00005003           CMPEQ    R0,#+0
   \   000001E0   F083BD08           POPEQ    {R4-R9,PC}
     89            { 
     90            if(MyFunc(PlayPauseKey_1,PlayPauseKey_2,PlayPauseKey_1Type,PlayPauseKey_2Type,msg,submsg,PlayPause,4,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   000001E4   0000E0E3           MVN      R0,#+0
   \   000001E8   01002DE9           PUSH     {R0}
   \   000001EC   0400A0E3           MOV      R0,#+4
   \   000001F0   01002DE9           PUSH     {R0}
   \   000001F4   C0039FE5           LDR      R0,??my_keyhook_0+0x48  ;; PlayPause
   \   000001F8   01002DE9           PUSH     {R0}
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   01002DE9           PUSH     {R0}
   \   00000204   0500A0E1           MOV      R0,R5
   \   00000208   01002DE9           PUSH     {R0}
   \   0000020C   AC039FE5           LDR      R0,??my_keyhook_0+0x4C  ;; PlayPauseKey_2Type
   \   00000210   003090E5           LDR      R3,[R0, #+0]
   \   00000214   A8039FE5           LDR      R0,??my_keyhook_0+0x50  ;; PlayPauseKey_1Type
   \   00000218   002090E5           LDR      R2,[R0, #+0]
   \   0000021C   A4039FE5           LDR      R0,??my_keyhook_0+0x54  ;; PlayPauseKey_2
   \   00000220   001090E5           LDR      R1,[R0, #+0]
   \   00000224   A0039FE5           LDR      R0,??my_keyhook_0+0x58  ;; PlayPauseKey_1
   \   00000228   000090E5           LDR      R0,[R0, #+0]
   \   0000022C   ........           BL       MyFunc
   \   00000230   010050E3           CMP      R0,#+1
   \   00000234   14D08DE2           ADD      SP,SP,#+20
   \   00000238   A0FFFF0A           BEQ      ??my_keyhook_7
     91            if(MyFunc(CloseKey_1,CloseKey_2,CloseKey_1Type,CloseKey_2Type,msg,submsg,Close,5,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   0000023C   0000E0E3           MVN      R0,#+0
   \   00000240   01002DE9           PUSH     {R0}
   \   00000244   0500A0E3           MOV      R0,#+5
   \   00000248   01002DE9           PUSH     {R0}
   \   0000024C   7C039FE5           LDR      R0,??my_keyhook_0+0x5C  ;; Close
   \   00000250   01002DE9           PUSH     {R0}
   \   00000254   0400A0E1           MOV      R0,R4
   \   00000258   01002DE9           PUSH     {R0}
   \   0000025C   0500A0E1           MOV      R0,R5
   \   00000260   01002DE9           PUSH     {R0}
   \   00000264   68039FE5           LDR      R0,??my_keyhook_0+0x60  ;; CloseKey_2Type
   \   00000268   003090E5           LDR      R3,[R0, #+0]
   \   0000026C   64039FE5           LDR      R0,??my_keyhook_0+0x64  ;; CloseKey_1Type
   \   00000270   002090E5           LDR      R2,[R0, #+0]
   \   00000274   60039FE5           LDR      R0,??my_keyhook_0+0x68  ;; CloseKey_2
   \   00000278   001090E5           LDR      R1,[R0, #+0]
   \   0000027C   5C039FE5           LDR      R0,??my_keyhook_0+0x6C  ;; CloseKey_1
   \   00000280   000090E5           LDR      R0,[R0, #+0]
   \   00000284   ........           BL       MyFunc
   \   00000288   010050E3           CMP      R0,#+1
   \   0000028C   14D08DE2           ADD      SP,SP,#+20
   \   00000290   8AFFFF0A           BEQ      ??my_keyhook_7
     92            if(MyFunc(StopKey_1,StopKey_2,StopKey_1Type,StopKey_2Type,msg,submsg,Stop,6,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   00000294   0000E0E3           MVN      R0,#+0
   \   00000298   01002DE9           PUSH     {R0}
   \   0000029C   0600A0E3           MOV      R0,#+6
   \   000002A0   01002DE9           PUSH     {R0}
   \   000002A4   38039FE5           LDR      R0,??my_keyhook_0+0x70  ;; Stop
   \   000002A8   01002DE9           PUSH     {R0}
   \   000002AC   0400A0E1           MOV      R0,R4
   \   000002B0   01002DE9           PUSH     {R0}
   \   000002B4   0500A0E1           MOV      R0,R5
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   24039FE5           LDR      R0,??my_keyhook_0+0x74  ;; StopKey_2Type
   \   000002C0   003090E5           LDR      R3,[R0, #+0]
   \   000002C4   20039FE5           LDR      R0,??my_keyhook_0+0x78  ;; StopKey_1Type
   \   000002C8   002090E5           LDR      R2,[R0, #+0]
   \   000002CC   1C039FE5           LDR      R0,??my_keyhook_0+0x7C  ;; StopKey_2
   \   000002D0   001090E5           LDR      R1,[R0, #+0]
   \   000002D4   18039FE5           LDR      R0,??my_keyhook_0+0x80  ;; StopKey_1
   \   000002D8   000090E5           LDR      R0,[R0, #+0]
   \   000002DC   ........           BL       MyFunc
   \   000002E0   010050E3           CMP      R0,#+1
   \   000002E4   14D08DE2           ADD      SP,SP,#+20
   \   000002E8   74FFFF0A           BEQ      ??my_keyhook_7
     93            if(MyFunc(NextKey_1,NextKey_2,NextKey_1Type,NextKey_2Type,msg,submsg,Next,7,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   000002EC   0000E0E3           MVN      R0,#+0
   \   000002F0   01002DE9           PUSH     {R0}
   \   000002F4   0700A0E3           MOV      R0,#+7
   \   000002F8   01002DE9           PUSH     {R0}
   \   000002FC   F4029FE5           LDR      R0,??my_keyhook_0+0x84  ;; Next
   \   00000300   01002DE9           PUSH     {R0}
   \   00000304   0400A0E1           MOV      R0,R4
   \   00000308   01002DE9           PUSH     {R0}
   \   0000030C   0500A0E1           MOV      R0,R5
   \   00000310   01002DE9           PUSH     {R0}
   \   00000314   E0029FE5           LDR      R0,??my_keyhook_0+0x88  ;; NextKey_2Type
   \   00000318   003090E5           LDR      R3,[R0, #+0]
   \   0000031C   DC029FE5           LDR      R0,??my_keyhook_0+0x8C  ;; NextKey_1Type
   \   00000320   002090E5           LDR      R2,[R0, #+0]
   \   00000324   D8029FE5           LDR      R0,??my_keyhook_0+0x90  ;; NextKey_2
   \   00000328   001090E5           LDR      R1,[R0, #+0]
   \   0000032C   D4029FE5           LDR      R0,??my_keyhook_0+0x94  ;; NextKey_1
   \   00000330   000090E5           LDR      R0,[R0, #+0]
   \   00000334   ........           BL       MyFunc
   \   00000338   010050E3           CMP      R0,#+1
   \   0000033C   14D08DE2           ADD      SP,SP,#+20
   \   00000340   5EFFFF0A           BEQ      ??my_keyhook_7
     94            if(MyFunc(PrevKey_1,PrevKey_2,PrevKey_1Type,PrevKey_2Type,msg,submsg,Prev,8,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   00000344   0000E0E3           MVN      R0,#+0
   \   00000348   01002DE9           PUSH     {R0}
   \   0000034C   0800A0E3           MOV      R0,#+8
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   B0029FE5           LDR      R0,??my_keyhook_0+0x98  ;; Prev
   \   00000358   01002DE9           PUSH     {R0}
   \   0000035C   0400A0E1           MOV      R0,R4
   \   00000360   01002DE9           PUSH     {R0}
   \   00000364   0500A0E1           MOV      R0,R5
   \   00000368   01002DE9           PUSH     {R0}
   \   0000036C   9C029FE5           LDR      R0,??my_keyhook_0+0x9C  ;; PrevKey_2Type
   \   00000370   003090E5           LDR      R3,[R0, #+0]
   \   00000374   98029FE5           LDR      R0,??my_keyhook_0+0xA0  ;; PrevKey_1Type
   \   00000378   002090E5           LDR      R2,[R0, #+0]
   \   0000037C   94029FE5           LDR      R0,??my_keyhook_0+0xA4  ;; PrevKey_2
   \   00000380   001090E5           LDR      R1,[R0, #+0]
   \   00000384   90029FE5           LDR      R0,??my_keyhook_0+0xA8  ;; PrevKey_1
   \   00000388   000090E5           LDR      R0,[R0, #+0]
   \   0000038C   ........           BL       MyFunc
   \   00000390   010050E3           CMP      R0,#+1
   \   00000394   14D08DE2           ADD      SP,SP,#+20
   \   00000398   48FFFF0A           BEQ      ??my_keyhook_7
     95            if(MyFunc(VolUPKey_1,VolUPKey_2,VolUPKey_1Type,VolUPKey_2Type,msg,submsg,VolUP,9,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   0000039C   0000E0E3           MVN      R0,#+0
   \   000003A0   01002DE9           PUSH     {R0}
   \   000003A4   0900A0E3           MOV      R0,#+9
   \   000003A8   01002DE9           PUSH     {R0}
   \   000003AC   6C029FE5           LDR      R0,??my_keyhook_0+0xAC  ;; VolUP
   \   000003B0   01002DE9           PUSH     {R0}
   \   000003B4   0400A0E1           MOV      R0,R4
   \   000003B8   01002DE9           PUSH     {R0}
   \   000003BC   0500A0E1           MOV      R0,R5
   \   000003C0   01002DE9           PUSH     {R0}
   \   000003C4   58029FE5           LDR      R0,??my_keyhook_0+0xB0  ;; VolUPKey_2Type
   \   000003C8   003090E5           LDR      R3,[R0, #+0]
   \   000003CC   54029FE5           LDR      R0,??my_keyhook_0+0xB4  ;; VolUPKey_1Type
   \   000003D0   002090E5           LDR      R2,[R0, #+0]
   \   000003D4   50029FE5           LDR      R0,??my_keyhook_0+0xB8  ;; VolUPKey_2
   \   000003D8   001090E5           LDR      R1,[R0, #+0]
   \   000003DC   4C029FE5           LDR      R0,??my_keyhook_0+0xBC  ;; VolUPKey_1
   \   000003E0   000090E5           LDR      R0,[R0, #+0]
   \   000003E4   ........           BL       MyFunc
   \   000003E8   010050E3           CMP      R0,#+1
   \   000003EC   14D08DE2           ADD      SP,SP,#+20
   \   000003F0   32FFFF0A           BEQ      ??my_keyhook_7
     96            if(MyFunc(VolDOWNKey_1,VolDOWNKey_2,VolDOWNKey_1Type,VolDOWNKey_2Type,msg,submsg,VolDOWN,10,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   000003F4   0000E0E3           MVN      R0,#+0
   \   000003F8   01002DE9           PUSH     {R0}
   \   000003FC   0A00A0E3           MOV      R0,#+10
   \   00000400   01002DE9           PUSH     {R0}
   \   00000404   28029FE5           LDR      R0,??my_keyhook_0+0xC0  ;; VolDOWN
   \   00000408   01002DE9           PUSH     {R0}
   \   0000040C   0400A0E1           MOV      R0,R4
   \   00000410   01002DE9           PUSH     {R0}
   \   00000414   0500A0E1           MOV      R0,R5
   \   00000418   01002DE9           PUSH     {R0}
   \   0000041C   14029FE5           LDR      R0,??my_keyhook_0+0xC4  ;; VolDOWNKey_2Type
   \   00000420   003090E5           LDR      R3,[R0, #+0]
   \   00000424   10029FE5           LDR      R0,??my_keyhook_0+0xC8  ;; VolDOWNKey_1Type
   \   00000428   002090E5           LDR      R2,[R0, #+0]
   \   0000042C   0C029FE5           LDR      R0,??my_keyhook_0+0xCC  ;; VolDOWNKey_2
   \   00000430   001090E5           LDR      R1,[R0, #+0]
   \   00000434   08029FE5           LDR      R0,??my_keyhook_0+0xD0  ;; VolDOWNKey_1
   \   00000438   000090E5           LDR      R0,[R0, #+0]
   \   0000043C   ........           BL       MyFunc
   \   00000440   010050E3           CMP      R0,#+1
   \   00000444   14D08DE2           ADD      SP,SP,#+20
   \   00000448   1CFFFF0A           BEQ      ??my_keyhook_7
     97            if(MyFunc(MuteKey_1,MuteKey_2,MuteKey_1Type,MuteKey_2Type,msg,submsg,Mute,11,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   0000044C   0000E0E3           MVN      R0,#+0
   \   00000450   01002DE9           PUSH     {R0}
   \   00000454   0B00A0E3           MOV      R0,#+11
   \   00000458   01002DE9           PUSH     {R0}
   \   0000045C   E4019FE5           LDR      R0,??my_keyhook_0+0xD4  ;; Mute
   \   00000460   01002DE9           PUSH     {R0}
   \   00000464   0400A0E1           MOV      R0,R4
   \   00000468   01002DE9           PUSH     {R0}
   \   0000046C   0500A0E1           MOV      R0,R5
   \   00000470   01002DE9           PUSH     {R0}
   \   00000474   D0019FE5           LDR      R0,??my_keyhook_0+0xD8  ;; MuteKey_2Type
   \   00000478   003090E5           LDR      R3,[R0, #+0]
   \   0000047C   CC019FE5           LDR      R0,??my_keyhook_0+0xDC  ;; MuteKey_1Type
   \   00000480   002090E5           LDR      R2,[R0, #+0]
   \   00000484   C8019FE5           LDR      R0,??my_keyhook_0+0xE0  ;; MuteKey_2
   \   00000488   001090E5           LDR      R1,[R0, #+0]
   \   0000048C   C4019FE5           LDR      R0,??my_keyhook_0+0xE4  ;; MuteKey_1
   \   00000490   000090E5           LDR      R0,[R0, #+0]
   \   00000494   ........           BL       MyFunc
   \   00000498   010050E3           CMP      R0,#+1
   \   0000049C   14D08DE2           ADD      SP,SP,#+20
   \   000004A0   06FFFF0A           BEQ      ??my_keyhook_7
     98            if(MyFunc(LockKey_1,LockKey_2,LockKey_1Type,LockKey_2Type,msg,submsg,Lock,12,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   000004A4   0000E0E3           MVN      R0,#+0
   \   000004A8   01002DE9           PUSH     {R0}
   \   000004AC   0C00A0E3           MOV      R0,#+12
   \   000004B0   01002DE9           PUSH     {R0}
   \   000004B4   A0019FE5           LDR      R0,??my_keyhook_0+0xE8  ;; Lock
   \   000004B8   01002DE9           PUSH     {R0}
   \   000004BC   0400A0E1           MOV      R0,R4
   \   000004C0   01002DE9           PUSH     {R0}
   \   000004C4   0500A0E1           MOV      R0,R5
   \   000004C8   01002DE9           PUSH     {R0}
   \   000004CC   8C019FE5           LDR      R0,??my_keyhook_0+0xEC  ;; LockKey_2Type
   \   000004D0   003090E5           LDR      R3,[R0, #+0]
   \   000004D4   88019FE5           LDR      R0,??my_keyhook_0+0xF0  ;; LockKey_1Type
   \   000004D8   002090E5           LDR      R2,[R0, #+0]
   \   000004DC   84019FE5           LDR      R0,??my_keyhook_0+0xF4  ;; LockKey_2
   \   000004E0   001090E5           LDR      R1,[R0, #+0]
   \   000004E4   80019FE5           LDR      R0,??my_keyhook_0+0xF8  ;; LockKey_1
   \   000004E8   000090E5           LDR      R0,[R0, #+0]
   \   000004EC   ........           BL       MyFunc
   \   000004F0   010050E3           CMP      R0,#+1
   \   000004F4   14D08DE2           ADD      SP,SP,#+20
   \   000004F8   F0FEFF0A           BEQ      ??my_keyhook_7
     99            if(MyTmrFunc(TimerOnKey,TimerOnKeyType,msg,submsg,StartCloseTimer,13)==1)return KEYHOOK_BREAK;
   \   000004FC   0D00A0E3           MOV      R0,#+13
   \   00000500   01002DE9           PUSH     {R0}
   \   00000504   64019FE5           LDR      R0,??my_keyhook_0+0xFC  ;; StartCloseTimer
   \   00000508   0430A0E1           MOV      R3,R4
   \   0000050C   01002DE9           PUSH     {R0}
   \   00000510   5C019FE5           LDR      R0,??my_keyhook_0+0x100  ;; TimerOnKeyType
   \   00000514   0520A0E1           MOV      R2,R5
   \   00000518   001090E5           LDR      R1,[R0, #+0]
   \   0000051C   54019FE5           LDR      R0,??my_keyhook_0+0x104  ;; TimerOnKey
   \   00000520   000090E5           LDR      R0,[R0, #+0]
   \   00000524   ........           BL       MyTmrFunc
   \   00000528   010050E3           CMP      R0,#+1
   \   0000052C   08D08DE2           ADD      SP,SP,#+8
   \   00000530   E2FEFF0A           BEQ      ??my_keyhook_7
    100            if(MyTmrFunc(TimerOffKey,TimerOffKeyType,msg,submsg,StopCloseTimer,14)==1)return KEYHOOK_BREAK;
   \   00000534   0E00A0E3           MOV      R0,#+14
   \   00000538   01002DE9           PUSH     {R0}
   \   0000053C   38019FE5           LDR      R0,??my_keyhook_0+0x108  ;; StopCloseTimer
   \   00000540   0430A0E1           MOV      R3,R4
   \   00000544   01002DE9           PUSH     {R0}
   \   00000548   30019FE5           LDR      R0,??my_keyhook_0+0x10C  ;; TimerOffKeyType
   \   0000054C   0520A0E1           MOV      R2,R5
   \   00000550   001090E5           LDR      R1,[R0, #+0]
   \   00000554   28019FE5           LDR      R0,??my_keyhook_0+0x110  ;; TimerOffKey
   \   00000558   000090E5           LDR      R0,[R0, #+0]
   \   0000055C   ........           BL       MyTmrFunc
   \   00000560   010050E3           CMP      R0,#+1
   \   00000564   08D08DE2           ADD      SP,SP,#+8
   \   00000568   D4FEFF0A           BEQ      ??my_keyhook_7
    101          
    102          
    103              
    104            }
    105           
    106            }
    107           
    108            return KEYHOOK_NEXT;
   \                     ??my_keyhook_3:
   \   0000056C   0000A0E3           MOV      R0,#+0
   \   00000570   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??my_keyhook_0:
   \   00000574   ........           DC32     MainType
   \   00000578   ........           DC32     Start
   \   0000057C   ........           DC32     StartKey1_2Type
   \   00000580   ........           DC32     StartKey1_1Type
   \   00000584   ........           DC32     StartKey1_2
   \   00000588   ........           DC32     StartKey1_1
   \   0000058C   ........           DC32     StartKey2_2Type
   \   00000590   ........           DC32     StartKey2_1Type
   \   00000594   ........           DC32     StartKey2_2
   \   00000598   ........           DC32     StartKey2_1
   \   0000059C   ........           DC32     StartKey3_2Type
   \   000005A0   ........           DC32     StartKey3_1Type
   \   000005A4   ........           DC32     StartKey3_2
   \   000005A8   ........           DC32     StartKey3_1
   \   000005AC   ........           DC32     StartKey4_2Type
   \   000005B0   ........           DC32     StartKey4_1Type
   \   000005B4   ........           DC32     StartKey4_2
   \   000005B8   ........           DC32     StartKey4_1
   \   000005BC   ........           DC32     PlayPause
   \   000005C0   ........           DC32     PlayPauseKey_2Type
   \   000005C4   ........           DC32     PlayPauseKey_1Type
   \   000005C8   ........           DC32     PlayPauseKey_2
   \   000005CC   ........           DC32     PlayPauseKey_1
   \   000005D0   ........           DC32     Close
   \   000005D4   ........           DC32     CloseKey_2Type
   \   000005D8   ........           DC32     CloseKey_1Type
   \   000005DC   ........           DC32     CloseKey_2
   \   000005E0   ........           DC32     CloseKey_1
   \   000005E4   ........           DC32     Stop
   \   000005E8   ........           DC32     StopKey_2Type
   \   000005EC   ........           DC32     StopKey_1Type
   \   000005F0   ........           DC32     StopKey_2
   \   000005F4   ........           DC32     StopKey_1
   \   000005F8   ........           DC32     Next
   \   000005FC   ........           DC32     NextKey_2Type
   \   00000600   ........           DC32     NextKey_1Type
   \   00000604   ........           DC32     NextKey_2
   \   00000608   ........           DC32     NextKey_1
   \   0000060C   ........           DC32     Prev
   \   00000610   ........           DC32     PrevKey_2Type
   \   00000614   ........           DC32     PrevKey_1Type
   \   00000618   ........           DC32     PrevKey_2
   \   0000061C   ........           DC32     PrevKey_1
   \   00000620   ........           DC32     VolUP
   \   00000624   ........           DC32     VolUPKey_2Type
   \   00000628   ........           DC32     VolUPKey_1Type
   \   0000062C   ........           DC32     VolUPKey_2
   \   00000630   ........           DC32     VolUPKey_1
   \   00000634   ........           DC32     VolDOWN
   \   00000638   ........           DC32     VolDOWNKey_2Type
   \   0000063C   ........           DC32     VolDOWNKey_1Type
   \   00000640   ........           DC32     VolDOWNKey_2
   \   00000644   ........           DC32     VolDOWNKey_1
   \   00000648   ........           DC32     Mute
   \   0000064C   ........           DC32     MuteKey_2Type
   \   00000650   ........           DC32     MuteKey_1Type
   \   00000654   ........           DC32     MuteKey_2
   \   00000658   ........           DC32     MuteKey_1
   \   0000065C   ........           DC32     Lock
   \   00000660   ........           DC32     LockKey_2Type
   \   00000664   ........           DC32     LockKey_1Type
   \   00000668   ........           DC32     LockKey_2
   \   0000066C   ........           DC32     LockKey_1
   \   00000670   ........           DC32     StartCloseTimer
   \   00000674   ........           DC32     TimerOnKeyType
   \   00000678   ........           DC32     TimerOnKey
   \   0000067C   ........           DC32     StopCloseTimer
   \   00000680   ........           DC32     TimerOffKeyType
   \   00000684   ........           DC32     TimerOffKey
    109          }
    110          //-------------------------
    111          

   \                                 In segment CODE, align 4, keep-with-next
    112          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    113          {
   \                     maincsm_onmessage:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    114            
    115          
    116                if (msg->msg==MSG_RECONFIGURE_REQ&&strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000008   F200D4E1           LDRSH    R0,[R4, #+2]
   \   0000000C   F110A0E3           MOV      R1,#+241
   \   00000010   C01F81E3           ORR      R1,R1,#0x300
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0900001A           BNE      ??maincsm_onmessage_0
   \   0000001C   F8009FE5           LDR      R0,??maincsm_onmessage_1  ;; successed_config_filename
   \   00000020   081094E5           LDR      R1,[R4, #+8]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   3700001A           BNE      ??maincsm_onmessage_2
    117              {
    118                ShowMSG(1,(int)"Конфиг изменен!");
   \   00000034   E4109FE5           LDR      R1,??maincsm_onmessage_1+0x4  ;; `?<Constant "\\312\\356\\355\\364\\350\\343 \\350\\347\\`
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   480100EF           SWI      +328
    119                InitConfig();
   \   00000040   ........           _BLF     InitConfig,??InitConfig??rA
    120              }  
    121          
    122             if (msg->msg==MSG_IPC&&(ipc_recv=(IPC_REQ*)msg->data0))
   \                     ??maincsm_onmessage_0:
   \   00000044   F200D4E1           LDRSH    R0,[R4, #+2]
   \   00000048   F210A0E3           MOV      R1,#+242
   \   0000004C   C01F81E3           ORR      R1,R1,#0x300
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   2E00001A           BNE      ??maincsm_onmessage_2
   \   00000058   C4709FE5           LDR      R7,??maincsm_onmessage_1+0x8  ;; ipc_recv
   \   0000005C   080094E5           LDR      R0,[R4, #+8]
   \   00000060   000087E5           STR      R0,[R7, #+0]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   2900000A           BEQ      ??maincsm_onmessage_2
    123             {
    124               if(!strcmp_nocase(ipc_recv->name_from,IPC_MAPLYER))
   \   0000006C   040090E5           LDR      R0,[R0, #+4]
   \   00000070   ........           LDR      R1,??DataTable75  ;; `?<Constant "MusicAPlayer">`
   \   00000074   0150A0E3           MOV      R5,#+1
   \   00000078   0060A0E3           MOV      R6,#+0
   \   0000007C   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0A00001A           BNE      ??maincsm_onmessage_3
    125               {
    126                 if(msg->submess==IPC_OUT_PLAYER_START){IsMaplayerOn=1;SendCmd(MAPLAYER,IPC_GET_INFO);}
   \   00000088   040094E5           LDR      R0,[R4, #+4]
   \   0000008C   ........           LDR      R8,??DataTable76  ;; IsMaplayerOn
   \   00000090   070050E3           CMP      R0,#+7
   \   00000094   0300001A           BNE      ??maincsm_onmessage_4
   \   00000098   005088E5           STR      R5,[R8, #+0]
   \   0000009C   0D10A0E3           MOV      R1,#+13
   \   000000A0   0200A0E3           MOV      R0,#+2
   \   000000A4   ........           BL       SendCmd
    127                 if(msg->submess==IPC_OUT_PLAYER_CLOSE)IsMaplayerOn=0;
   \                     ??maincsm_onmessage_4:
   \   000000A8   040094E5           LDR      R0,[R4, #+4]
   \   000000AC   080050E3           CMP      R0,#+8
   \   000000B0   00608805           STREQ    R6,[R8, #+0]
    128                }
    129          
    130               if (!strcmp_nocase(ipc_recv->name_to,ipc_my_name)&&!strcmp_nocase(ipc_recv->name_from,IPC_IVO))
   \                     ??maincsm_onmessage_3:
   \   000000B4   000097E5           LDR      R0,[R7, #+0]
   \   000000B8   ........           LDR      R1,??DataTable77  ;; `?<Constant "IVOPLAY_PLUGIN">`
   \   000000BC   047090E5           LDR      R7,[R0, #+4]
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0500001A           BNE      ??maincsm_onmessage_5
   \   000000D0   ........           LDR      R1,??DataTable78  ;; `?<Constant "IVOPLAY">`
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000DC   000050E3           CMP      R0,#+0
    131               {
    132                 IsIvoOn=1;
   \   000000E0   ........           LDREQ    R0,??DataTable79  ;; IsIvoOn
   \   000000E4   00508005           STREQ    R5,[R0, #+0]
    133               }
    134                 if(!strcmp_nocase(ipc_recv->name_from,IPC_TO_SPLAYER))
   \                     ??maincsm_onmessage_5:
   \   000000E8   ........           LDR      R1,??DataTable80  ;; `?<Constant "SPlayer">`
   \   000000EC   0700A0E1           MOV      R0,R7
   \   000000F0   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   0500001A           BNE      ??maincsm_onmessage_2
    135                   {
    136                     if(msg->submess==IPC_SPLAYER_STARTED)IsSPlayerOn=1;
   \   000000FC   ........           LDR      R0,??DataTable81  ;; IsSPlayerOn
   \   00000100   041094E5           LDR      R1,[R4, #+4]
   \   00000104   010051E3           CMP      R1,#+1
   \   00000108   00508005           STREQ    R5,[R0, #+0]
    137                     if(msg->submess==IPC_SPLAYER_CLOSED)IsSPlayerOn=0;
   \   0000010C   000051E3           CMP      R1,#+0
   \   00000110   00608005           STREQ    R6,[R0, #+0]
    138                    }
    139            }
    140            //respect tridog:)
    141            #ifdef NEWSGOLD
    142          #ifdef ELKA
    143            if (msg->msg==0x15680)
    144          #else
    145            if (msg->msg==0x15682)
    146          #endif 
    147            {
    148              if ((   ((char *)(((int *)msg->data1)[6]))[0x11]  )==0)
    149              {
    150                //  Аксесуар подключен
    151                HeadsetConnect();  
    152              }
    153              if ((   ((char *)(((int *)msg->data1)[6]))[0x11]  )==1)
    154              {
    155                //  Аксесуар отключен
    156                HeadsetDisconnect();  
    157              }
    158            }
    159          #endif
    160            return (1);
   \                     ??maincsm_onmessage_2:
   \   00000114   0100A0E3           MOV      R0,#+1
   \   00000118   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??maincsm_onmessage_1:
   \   0000011C   ........           DC32     successed_config_filename
   \   00000120   ........           DC32     `?<Constant "\\312\\356\\355\\364\\350\\343 \\350\\347\\`
   \   00000124   ........           DC32     ipc_recv
    161          }
    162          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    163          static void maincsm_oncreate(CSM_RAM *data)
    164          {
    165            AddKeybMsgHook((void *)my_keyhook);
   \                     maincsm_oncreate:
   \   00000000   ........           LDR      R0,??DataTable85  ;; my_keyhook
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2B0100EF           SWI      +299
    166          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    167          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    168          static void Killer(void)
    169          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    170            extern void *ELF_BEGIN;
    171            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    172          }
    173          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    174          static void maincsm_onclose(CSM_RAM *csm)
    175          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    176            if(IsTimerProc(&KeyTmr))GBS_DelTimer(&KeyTmr);
   \   00000004   ........           LDR      R4,??DataTable83  ;; KeyTmr
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   A60100EF           SWI      +422
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      ??maincsm_onclose_0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   8C0100EF           SWI      +396
    177            if(IsTimerProc(&close_timer))GBS_DelTimer(&close_timer);
   \                     ??maincsm_onclose_0:
   \   00000020   ........           LDR      R4,??DataTable84  ;; close_timer
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   A60100EF           SWI      +422
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0100000A           BEQ      ??maincsm_onclose_1
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   8C0100EF           SWI      +396
    178            RemoveKeybMsgHook((void *)my_keyhook);
   \                     ??maincsm_onclose_1:
   \   0000003C   ........           LDR      R0,??DataTable85  ;; my_keyhook
   \   00000040   2D0100EF           SWI      +301
    179            SUBPROC((void *)Killer);
   \   00000044   04009FE5           LDR      R0,??maincsm_onclose_2  ;; Killer
   \   00000048   710100EF           SWI      +369
    180          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_2:
   \   00000050   ........           DC32     Killer
    181          
    182          //-------------------------
    183          static const struct
    184          {
    185            CSM_DESC maincsm;
    186            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    187          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 40, 1
   \              ............
   \              280000000100
   \              0000        
   \   00000014   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000028   8B00               DC16 139
   \   0000002A   0000               DC8 0, 0
    188          {
    189          {
    190            maincsm_onmessage,
    191            maincsm_oncreate,
    192          #ifdef NEWSGOLD
    193            0,
    194            0,
    195            0,
    196            0,
    197          #endif
    198            maincsm_onclose,
    199            sizeof(MAIN_CSM),
    200            1,
    201            &minus11
    202            },
    203            {
    204              maincsm_name_body,
    205              NAMECSM_MAGIC1,
    206              NAMECSM_MAGIC2,
    207              0x0,
    208              139
    209            },
    210          
    211          };
    212          
    213          //-------------------------
    214          static void UpdateCSMname(void)
    215          {
    216            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),perc_ss,"PlayersControl",VERSION);
    217          }
    218          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    219          int main()
    220          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
    221            InitConfig();
   \   00000008   ........           _BLF     InitConfig,??InitConfig??rA
    222            int acc=GetAccessoryType();
   \   0000000C   880000EF           SWI      +136
    223            if(!Head_On)if((acc==19||acc==18||acc==21))HeadsetConnect();
   \   00000010   98109FE5           LDR      R1,??main_0+0x4  ;; Head_On
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   0400001A           BNE      ??main_1
   \   00000020   130050E3           CMP      R0,#+19
   \   00000024   12005013           CMPNE    R0,#+18
   \   00000028   15005013           CMPNE    R0,#+21
   \   0000002C   0000001A           BNE      ??main_1
   \   00000030   ........           BL       HeadsetConnect
    224            CSM_RAM *save_cmpc;
    225            char dummy[sizeof(MAIN_CSM)];
    226            UpdateCSMname();
   \                     ??main_1:
   \   00000034   78409FE5           LDR      R4,??main_0+0x8  ;; MAINCSM
   \   00000038   78209FE5           LDR      R2,??main_0+0xC  ;; `?<Constant "PlayersControl">`
   \   0000003C   78109FE5           LDR      R1,??main_0+0x10  ;; perc_ss
   \   00000040   193F8FE2           ADR      R3,??main_0      ;; "1.0"
   \   00000044   180084E2           ADD      R0,R4,#+24
   \   00000048   240100EF           SWI      +292
    227            LockSched();
   \   0000004C   460100EF           SWI      +326
    228            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000050   068100EF           SWI      +33030
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   045090E5           LDR      R5,[R0, #+4]
    229            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000005C   068100EF           SWI      +33030
   \   00000060   0060A0E1           MOV      R6,R0
   \   00000064   068100EF           SWI      +33030
   \   00000068   080090E5           LDR      R0,[R0, #+8]
   \   0000006C   081096E5           LDR      R1,[R6, #+8]
   \   00000070   080090E5           LDR      R0,[R0, #+8]
    230            MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   040081E5           STR      R0,[R1, #+4]
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   070100EF           SWI      +263
   \   00000088   ........           LDR      R1,??DataTable86  ;; MAINCSM_ID
   \   0000008C   000081E5           STR      R0,[R1, #+0]
    231            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000090   068100EF           SWI      +33030
   \   00000094   080090E5           LDR      R0,[R0, #+8]
   \   00000098   045080E5           STR      R5,[R0, #+4]
    232            UnlockSched();
   \   0000009C   470100EF           SWI      +327
    233            return 0;
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   28D08DE2           ADD      SP,SP,#+40
   \   000000A8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   000000AC   312E3000           DC8      "1.0"
   \   000000B0   ........           DC32     Head_On
   \   000000B4   ........           DC32     MAINCSM
   \   000000B8   ........           DC32     `?<Constant "PlayersControl">`
   \   000000BC   ........           DC32     perc_ss
    234          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     `?<Constant "IVOPLAY">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     `?<Constant "MusicAPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     `?<Constant "SPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     player3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     IsSPlayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     player2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     IsMaplayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     player0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     player1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   ........           DC32     IsIvoOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   ........           DC32     addr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   ........           DC32     sec

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     min

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   ........           DC32     hour

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     doublekey

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     `?<Constant "MusicAPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   ........           DC32     IsMaplayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   ........           DC32     `?<Constant "IVOPLAY_PLUGIN">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     `?<Constant "IVOPLAY">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     IsIvoOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     `?<Constant "SPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   ........           DC32     IsSPlayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   ........           DC32     KeyTmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   ........           DC32     close_timer

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   ........           DC32     MAINCSM_ID

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for key_timer>`:
   \   00000000   6C000000           DC32 108

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "IVOPLAY">`:
   \   00000000   49564F504C41       DC8 "IVOPLAY"
   \              5900        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MusicAPlayer">`:
   \   00000000   4D7573696341       DC8 "MusicAPlayer"
   \              506C61796572
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Control">`:
   \   00000000   436F6E74726F       DC8 "Control"
   \              6C00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SPlayer">`:
   \   00000000   53506C617965       DC8 "SPlayer"
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MEDIA_PLAYLAST">`:
   \   00000000   4D454449415F       DC8 "MEDIA_PLAYLAST"
   \              504C41594C41
   \              535400      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "XTask">`:
   \   00000000   585461736B00       DC8 "XTask"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "IVOPLAY_PLUGIN">`:
   \   00000000   49564F504C41       DC8 "IVOPLAY_PLUGIN"
   \              595F504C5547
   \              494E00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\312\\356\\355\\364\\350\\343 \\350\\347\\`:
   \   00000000   CAEEEDF4E8E3       DC8 "\312\356\355\364\350\343 \350\347\354\345\355\345\355!"
   \              20E8E7ECE5ED
   \              E5ED2100    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PlayersControl">`:
   \   00000000   506C61796572       DC8 "PlayersControl"
   \              73436F6E7472
   \              6F6C00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   312E3000           DC8 "1.0"

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     Close                    4
     CloseTimer              24
     HeadsetConnect          12
     HeadsetDisconnect       12
     Killer                   4
     Lock                     4
     MPlayer_VolChange        8
     Mute                     4
     MyFunc                  24
     MyTmrFunc               12
     Next                     4
     PlayPause                4
     Prev                     4
     SendCmd                  4
     Send_MPlayer_Command    16
     Start                   12
     StartCloseTimer          4
     Stop                     4
     StopCloseTimer           4
     TmrSec                   4
     VolDOWN                  4
     VolUP                    4
     main                    56
     maincsm_onclose          8
     maincsm_oncreate         4
     maincsm_onmessage       24
     my_keyhook              48
     strcmp_nocase            0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Send_MPlayer_Command             56
     MPlayer_VolChange                44
     ??strcmp_nocase_0                76
     IsMaplayerOn                      4
     IsIvoOn                           4
     IsSPlayerOn                       4
     MAINCSM_ID                        4
     ipc_send                         12
     ipc_recv                          4
     gipc                             12
     addr                              4
     timer                             4
     key_timer                         4
     sec                               4
     min                               4
     hour                              4
     doublekey                        60
     close_timer                      16
     KeyTmr                           16
     perc_ss                           8
     minus11                           4
     maincsm_name_body               280
     ws                                4
     SendCmd                         116
     PlayPause                       180
     Stop                            180
     Prev                            180
     Next                            180
     Start                           280
     Close                           180
     VolUP                           132
     VolDOWN                         132
     Mute                             92
     HeadsetDisconnect               288
     HeadsetConnect                  288
     TmrSec                          100
     Lock                             76
     StartCloseTimer                  32
     StopCloseTimer                   16
     CloseTimer                      244
     MyFunc                          368
     MyTmrFunc                       168
     my_keyhook                     1672
     maincsm_onmessage               296
     maincsm_oncreate                 16
     Killer                           28
     maincsm_onclose                  84
     MAINCSM                          44
     main                            192
     ??DataTable0                      4
     ??DataTable1                      4
     ??DataTable2                      4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable51                     4
     ??DataTable52                     4
     ??DataTable53                     4
     ??DataTable54                     4
     ??DataTable55                     4
     ??DataTable57                     4
     ??DataTable66                     4
     ??DataTable67                     4
     ??DataTable68                     4
     ??DataTable71                     4
     ??DataTable75                     4
     ??DataTable76                     4
     ??DataTable77                     4
     ??DataTable78                     4
     ??DataTable79                     4
     ??DataTable80                     4
     ??DataTable81                     4
     ??DataTable83                     4
     ??DataTable84                     4
     ??DataTable85                     4
     ??DataTable86                     4
     ?<Initializer for key_timer>      4
     ?<Constant "IVOPLAY">             8
     ?<Constant "MusicAPlayer">       16
     ?<Constant "Control">             8
     ?<Constant "SPlayer">             8
     ?<Constant "MEDIA_PLAYLAST">     16
     ?<Constant "XTask">               8
     ?<Constant "IVOPLAY_PLUGIN">     16
     ?<Constant "\312\356\355\364\350\343 \350\347\
                                      16
     ?<Constant "PlayersControl">     16
     ?<Constant "1.0">                 4
      Others                         168

 
 5 944 bytes in segment CODE
   172 bytes in segment DATA_C
     4 bytes in segment DATA_I
     4 bytes in segment DATA_ID
   440 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 5 724 bytes of CODE  memory (+ 244 bytes shared)
   176 bytes of CONST memory
   444 bytes of DATA  memory

Errors: none
Warnings: none

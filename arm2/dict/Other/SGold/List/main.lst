##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    25/Jan/2011  17:29:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\dict\main.c                                   #
#    Command line    =  C:\arm\dict\main.c -D NEWSGOLD -lC                   #
#                       C:\arm\dict\Other\SGold\List\ -o                     #
#                       C:\arm\dict\Other\SGold\Obj\ -s9 --no_unroll         #
#                       --no_tbaa --cpu_mode arm --endian little --cpu       #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "C:\arm2\Embedded Workbench 4.0   #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\dict\Other\SGold\List\main.lst                #
#    Object file     =  C:\arm\dict\Other\SGold\Obj\main.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\dict\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"
      3          
      4          

   \                                 In segment DATA_C, align 4, align-sorted
      5          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
      6          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
      7          unsigned int MAINCSM_ID = 0;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
      8          unsigned int MAINGUI_ID = 0;
   \                     MAINGUI_ID:
   \   00000000                      DS8 4
      9          typedef struct
     10          {
     11            CSM_RAM csm;
     12            int gui_id;
     13          }MAIN_CSM;
     14          typedef struct
     15          {
     16            GUI gui;
     17            WSHDR *ws1;
     18            WSHDR *ws2;
     19            WSHDR *ws5;
     20            int i1;
     21          }MAIN_GUI;
     22          
     23          extern const char amr[128];
     24          extern const unsigned int size;
     25          extern const unsigned int buid;
     26          
     27          
     28          int uid=0;

   \                                 In segment DATA_Z, align 4, align-sorted
     29          int MSG_Report;
   \                     MSG_Report:
   \   00000000                      DS8 4
     30          WSHDR *ws_main;
     31          HObj object=0;
     32          GBSTMR Tmr;
     33          int filesize=0;
     34          char name[256];
     35          
     36          #define NOT_CREATED -1
     37          #define RECORDING 1
     38          #define PAUSED 2
     39          int mode=NOT_CREATED;
     40          void CreateFile();
     41          void StartRecord();
     42          void StopRecord();
     43          void PauseRecord();
     44          void ResumeRecord();
     45          void MyTmr();
     46          
     47          
     48          char pt[8] = "%t";

   \                                 In segment CODE, align 4, keep-with-next
     49          static void OnRedraw(MAIN_GUI *data)//Перерисовка во время загрузки
     50          {
   \                     OnRedraw:
   \   00000000   10402DE9           PUSH     {R4,LR}
     51            DrawRectangle(0,0,132,176,1,GetPaletteAdrByColorIndex (0),GetPaletteAdrByColorIndex (0));
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   2E0100EF           SWI      +302
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   2E0100EF           SWI      +302
   \   00000018   10002DE9           PUSH     {R4}
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   B030A0E3           MOV      R3,#+176
   \   00000024   8420A0E3           MOV      R2,#+132
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   B40100EF           SWI      +436
     52            WSHDR *ws=AllocWS(256);
   \   0000003C   400FA0E3           MOV      R0,#+256
   \   00000040   250100EF           SWI      +293
     53             switch(mode)
   \   00000044   ........           LDR      R1,??DataTable9  ;; fs
   \   00000048   0040A0E1           MOV      R4,R0
   \   0000004C   ........           LDR      R0,??DataTable5  ;; size
   \   00000050   382091E5           LDR      R2,[R1, #+56]
   \   00000054   003090E5           LDR      R3,[R0, #+0]
   \   00000058   AC009FE5           LDR      R0,??OnRedraw_0  ;; `?<Constant "\\315\\340\\346\\354\\350\\362\\345 5 \\35`
   \   0000005C   0CD08DE2           ADD      SP,SP,#+12
   \   00000060   010052E3           CMP      R2,#+1
   \   00000064   0800000A           BEQ      ??OnRedraw_1
   \   00000068   020052E3           CMP      R2,#+2
   \   0000006C   0900000A           BEQ      ??OnRedraw_2
   \   00000070   010072E3           CMN      R2,#+1
   \   00000074   1100001A           BNE      ??OnRedraw_3
     54              {
     55              case NOT_CREATED:wsprintf(ws, pt, "Нажмите 5 или enter для начала записи");break;
   \   00000078   0020A0E1           MOV      R2,R0
   \   0000007C   531F81E2           ADD      R1,R1,#+332
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   240100EF           SWI      +292
   \   00000088   0C0000EA           B        ??OnRedraw_3
     56              case RECORDING:wsprintf(ws,"%d/%d kb\n%t",filesize/1024,size, "Нажмите 5 или enter для паузы\nПравый софт для окончания записи");break;
   \                     ??OnRedraw_1:
   \   0000008C   341091E5           LDR      R1,[R1, #+52]
   \   00000090   342080E2           ADD      R2,R0,#+52
   \   00000094   010000EA           B        ??OnRedraw_4
     57              case PAUSED:wsprintf(ws,"%d/%d kb\n%t",filesize/1024,size, "Нажмите 5 или enter для продолжения записи\nПравый софт для окончания записи");break;
   \                     ??OnRedraw_2:
   \   00000098   341091E5           LDR      R1,[R1, #+52]
   \   0000009C   742080E2           ADD      R2,R0,#+116
   \                     ??OnRedraw_4:
   \   000000A0   04002DE9           PUSH     {R2}
   \   000000A4   C124A0E1           ASR      R2,R1,#+9
   \   000000A8   221B81E0           ADD      R1,R1,R2, LSR #+22
   \   000000AC   4125A0E1           ASR      R2,R1,#+10
   \   000000B0   281080E2           ADD      R1,R0,#+40
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   240100EF           SWI      +292
   \   000000BC   04D08DE2           ADD      SP,SP,#+4
     58              }
     59              DrawString (ws, 0, 0, 132, 176, 11, 2, GetPaletteAdrByColorIndex (1),0);
   \                     ??OnRedraw_3:
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   2E0100EF           SWI      +302
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   02002DE9           PUSH     {R1}
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   8430A0E3           MOV      R3,#+132
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0200A0E3           MOV      R0,#+2
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   0B00A0E3           MOV      R0,#+11
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   B000A0E3           MOV      R0,#+176
   \   000000F0   01002DE9           PUSH     {R0}
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   4C0100EF           SWI      +332
     60              FreeWS(ws);
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   290100EF           SWI      +297
     61          }
   \   00000104   14D08DE2           ADD      SP,SP,#+20
   \   00000108   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??OnRedraw_0:
   \   0000010C   ........           DC32     `?<Constant "\\315\\340\\346\\354\\350\\362\\345 5 \\35`

   \                                 In segment CODE, align 4, keep-with-next
     62          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))//Тут делаем что либо при создании гуи
     63          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     64            #ifdef ELKA//Если елка,то отключаем иконбар
     65            DisableIconBar(1);
     66            #endif
     67            data->ws1=AllocWS(256);//Выделяем память под строку
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
     68            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
     69          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
     70          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))//Сдесь делаем что нить при закрытии гуи:)
     71          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     72            data->gui.state=0;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0C00C4E5           STRB     R0,[R4, #+12]
     73            FreeWS(data->ws1);//например, освобождаем память
   \   00000010   340094E5           LDR      R0,[R4, #+52]
   \   00000014   290100EF           SWI      +297
     74            FreeWS(data->ws5);
   \   00000018   3C0094E5           LDR      R0,[R4, #+60]
   \   0000001C   290100EF           SWI      +297
     75          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
     78          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
     79              #ifdef ELKA//Если елка,то отключаем иконбар
     80            DisableIconBar(1);
     81            #endif
     82            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
     83            DisableIDLETMR();//отключаем таймер,иначе через 2 минуты эльф закроется
   \   0000000C   7F0100EF           SWI      +383
     84          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
     87          {
     88            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     89            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     90          }
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     91          int openconf()//Для чтения настроек с конфига
     92          {
   \                     openconf:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     93          extern const char *successed_config_filename;
     94          WSHDR *fws=AllocWS(strlen(successed_config_filename)+1);
   \   00000004   40409FE5           LDR      R4,??openconf_0+0x4  ;; successed_config_filename
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   1B0000EF           SWI      +27
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   250100EF           SWI      +293
     95          wsprintf(fws,"%t",successed_config_filename);
   \   00000018   002094E5           LDR      R2,[R4, #+0]
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   081F8FE2           ADR      R1,??openconf_0  ;; "%t"
   \   00000024   240100EF           SWI      +292
     96          ExecuteFile(fws,NULL,NULL);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   940000EF           SWI      +148
     97          FreeWS(fws);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   290100EF           SWI      +297
     98          return 0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??openconf_0:
   \   00000048   25740000           DC8      "%t",+0
   \   0000004C   ........           DC32     successed_config_filename
     99          }

   \                                 In segment CODE, align 4, keep-with-next
    100          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)//Ну это кей хук
    101          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    102          
    103            switch(msg->gbsmsg->msg)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   02208212           ADDNE    R2,R2,#+2
   \   0000001C   02005111           CMPNE    R1,R2
   \   00000020   2100001A           BNE      ??OnKey_0
   \   00000024   8C109FE5           LDR      R1,??OnKey_1     ;; fs + 56
   \   00000028   080090E5           LDR      R0,[R0, #+8]
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   010050E2           SUBS     R0,R0,#+1
   \   00000034   0500000A           BEQ      ??OnKey_2
   \   00000038   030050E2           SUBS     R0,R0,#+3
   \   0000003C   0700000A           BEQ      ??OnKey_3
   \   00000040   160050E2           SUBS     R0,R0,#+22
   \   00000044   1B005012           SUBSNE   R0,R0,#+27
   \   00000048   0B00000A           BEQ      ??OnKey_4
   \   0000004C   000000EA           B        ??OnKey_5
    104            {      
    105            case KEY_UP: break;
    106            case LONG_PRESS: // Клавиша удерживается долго (повтор)
    107            case KEY_DOWN: // Клавиша нажата
    108                
    109           switch(msg->gbsmsg->submess)
    110            {
    111             case GREEN_BUTTON:break;
    112            case LEFT_SOFT:openconf(); break;
   \                     ??OnKey_2:
   \   00000050   ........           BL       openconf
   \                     ??OnKey_5:
   \   00000054   3F0100EF           SWI      +319
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0080BDE8           POP      {PC}
    113             case RIGHT_SOFT: 
    114                  if(mode==RECORDING||mode==PAUSED)StopRecord();
   \                     ??OnKey_3:
   \   00000060   010051E3           CMP      R1,#+1
   \   00000064   02005113           CMPNE    R1,#+2
   \   00000068   0100001A           BNE      ??OnKey_6
   \   0000006C   ........           BL       StopRecord
   \   00000070   F7FFFFEA           B        ??OnKey_5
    115                  else return 1;
   \                     ??OnKey_6:
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   0080BDE8           POP      {PC}
    116                  break;
    117            case '5':case ENTER_BUTTON:
    118              switch(mode)
   \                     ??OnKey_4:
   \   0000007C   010051E3           CMP      R1,#+1
   \   00000080   0600000A           BEQ      ??OnKey_7
   \   00000084   020051E3           CMP      R1,#+2
   \   00000088   0600000A           BEQ      ??OnKey_8
   \   0000008C   010071E3           CMN      R1,#+1
   \   00000090   0500001A           BNE      ??OnKey_0
    119              {
    120              case NOT_CREATED:CreateFile();StartRecord();break;
   \   00000094   ........           BL       CreateFile
   \   00000098   ........           BL       StartRecord
   \   0000009C   ECFFFFEA           B        ??OnKey_5
    121              case RECORDING:PauseRecord();break;
   \                     ??OnKey_7:
   \   000000A0   ........           BL       PauseRecord
   \   000000A4   EAFFFFEA           B        ??OnKey_5
    122              case PAUSED:ResumeRecord();break;
   \                     ??OnKey_8:
   \   000000A8   ........           BL       ResumeRecord
    123              }
    124              
    125              break;
    126            }
    127            
    128          
    129            }
    130               DirectRedrawGUI();
   \                     ??OnKey_0:
   \   000000AC   3F0100EF           SWI      +319
    131                
    132            return(0);
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_1:
   \   000000B8   ........           DC32     fs + 56
    133          }
    134          
    135          
    136          
    137          
    138          
    139          
    140          
    141          
    142          
    143          
    144          
    145          extern void kill_data(void *p, void (*func_p)(void *));
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    148          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    149          
    150          const void * const gui_methods[11]={
    151            (void *)OnRedraw,
    152            (void *)onCreate,
    153            (void *)onClose,
    154            (void *)onFocus,
    155            (void *)onUnfocus,
    156            (void *)OnKey,
    157            0,
    158            (void *)kill_data,
    159            (void *)method8,
    160            (void *)method9,
    161            0
    162          };
    163          

   \                                 In segment CODE, align 4, keep-with-next
    164          static void maincsm_oncreate(CSM_RAM *data)
    165          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    166            
    167          static const RECT Canvas={0,0,239,319};
    168            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4400A0E3           MOV      R0,#+68
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    169            MAIN_CSM*csm=(MAIN_CSM*)data;
    170            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4410A0E3           MOV      R1,#+68
   \   00000018   1D0100EF           SWI      +285
    171            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   34009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    172            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   301085E5           STR      R1,[R5, #+48]
    173            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    174            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   200085E5           STR      R0,[R5, #+32]
    175            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    176            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    177            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    178          }
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000058   ........           DC32     gui_methods

   \                                 In segment DATA_C, align 4, align-sorted
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
   \   0000002C   00000000EF00       DC16 0, 0, 239, 319
   \              3F01        
    179          

   \                                 In segment CODE, align 4, keep-with-next
    180          void ElfKiller(void)
    181          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    182            extern void *ELF_BEGIN;
    183            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    184          }
    185          

   \                                 In segment CODE, align 4, keep-with-next
    186          static void maincsm_onclose(CSM_RAM *csm)
    187          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    188            FreeWS(ws_main);
   \   00000004   ........           LDR      R4,??DataTable9  ;; fs
   \   00000008   2C0094E5           LDR      R0,[R4, #+44]
   \   0000000C   290100EF           SWI      +297
    189            Obs_Stop(object);
   \   00000010   300094E5           LDR      R0,[R4, #+48]
   \   00000014   670200EF           SWI      +615
    190            if(IsTimerProc(&Tmr))GBS_DelTimer(&Tmr);
   \   00000018   3C0084E2           ADD      R0,R4,#+60
   \   0000001C   A60100EF           SWI      +422
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0100000A           BEQ      ??maincsm_onclose_0
   \   00000028   3C0084E2           ADD      R0,R4,#+60
   \   0000002C   8C0100EF           SWI      +396
    191            Obs_DestroyObject(object);
   \                     ??maincsm_onclose_0:
   \   00000030   300094E5           LDR      R0,[R4, #+48]
   \   00000034   5A0200EF           SWI      +602
    192            SUBPROC((void *)ElfKiller);
   \   00000038   04009FE5           LDR      R0,??maincsm_onclose_1  ;; ElfKiller
   \   0000003C   710100EF           SWI      +369
    193          }
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_1:
   \   00000044   ........           DC32     ElfKiller
    194          
    195          
    196          #pragma inline=forced
    197          int toupper(int c)
    198          {
    199            if ((c>='a')&&(c<='z')) c+='A'-'a';
    200            return(c);
    201          }
    202          #pragma inline
    203          int strcmp_nocase(const char *s1,const char *s2)
    204          {
    205            int i;
    206            int c;
    207            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    208            return(i);
    209          }
    210          

   \                                 In segment CODE, align 4, keep-with-next
    211          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    212          {
    213          
    214            MAIN_CSM *csm=(MAIN_CSM*)data;
    215            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0400001A           BNE      ??maincsm_onmessage_0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   282090E5           LDR      R2,[R0, #+40]
   \   0000001C   020051E1           CMP      R1,R2
    216            {
    217              csm->csm.state=-3;
   \   00000020   0210E003           MVNEQ    R1,#+2
   \   00000024   10108005           STREQ    R1,[R0, #+16]
    218            }
    219           if (msg->msg==MSG_RECONFIGURE_REQ)
    220            {
    221              
    222            }
    223            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    224          }
    225          
    226          
    227          static const struct
    228          {
    229            CSM_DESC maincsm;
    230            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Test">`:
   \   00000000   5465737400         DC8 "Test"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000024   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000040   8B00               DC16 139
   \   00000042   0000               DC8 0, 0
    231          }MAINCSM =
    232          {
    233            {
    234            maincsm_onmessage,
    235            maincsm_oncreate,
    236          #ifdef NEWSGOLD
    237            0,
    238            0,
    239            0,
    240            0,
    241          #endif
    242            maincsm_onclose,
    243            sizeof(MAIN_CSM),
    244            1,
    245            &minus11
    246            },
    247            {
    248              maincsm_name_body,
    249              NAMECSM_MAGIC1,
    250              NAMECSM_MAGIC2,
    251              0x0,
    252              139
    253            }
    254          };

   \                                 In segment CODE, align 4, keep-with-next
    255          void UpdateCSMname(void)
    256          {
    257            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Test");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Test">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   300080E2           ADD      R0,R0,#+48
   \   00000010   240100EF           SWI      +292
    258          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "Test">`

   \                                 In segment DATA_I, align 4, align-sorted
    259          
    260          FSTATS fs;
   \                     fs:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for fs>`
   \                     uid:
   \   00000028                      DS8 4
   \   0000002C                      REQUIRE `?<Initializer for uid>`
   \                     ws_main:
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for ws_main>`
   \                     object:
   \   00000030                      DS8 4
   \   00000034                      REQUIRE `?<Initializer for object>`
   \                     filesize:
   \   00000034                      DS8 4
   \   00000038                      REQUIRE `?<Initializer for filesize>`
   \                     mode:
   \   00000038                      DS8 4
   \   0000003C                      REQUIRE `?<Initializer for mode>`
   \                     Tmr:
   \   0000003C                      DS8 16
   \   0000004C                      REQUIRE `?<Initializer for Tmr>`
   \                     name:
   \   0000004C                      DS8 256
   \   0000014C                      REQUIRE `?<Initializer for name>`
   \                     pt:
   \   0000014C                      DS8 8
   \   00000154                      REQUIRE `?<Initializer for pt>`
    261          

   \                                 In segment CODE, align 4, keep-with-next
    262          void MyTmr()
    263          {
   \                     MyTmr:
   \   00000000   10402DE9           PUSH     {R4,LR}
    264                switch(mode)
   \   00000004   60409FE5           LDR      R4,??MyTmr_0     ;; fs
   \   00000008   380094E5           LDR      R0,[R4, #+56]
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   0400000A           BEQ      ??MyTmr_1
   \   00000014   010070E3           CMN      R0,#+1
   \   00000018   0E00001A           BNE      ??MyTmr_2
    265              {
    266              case NOT_CREATED:
    267                filesize=0;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   340084E5           STR      R0,[R4, #+52]
   \   00000024   0B0000EA           B        ??MyTmr_2
    268                break;
    269                
    270                
    271              case RECORDING:
    272                
    273                GetFileStats(name,&fs,0);
   \                     ??MyTmr_1:
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   4C0084E2           ADD      R0,R4,#+76
   \   00000034   840000EF           SWI      +132
    274                filesize=fs.size;
    275                if(filesize>=size*1024)StopRecord();
   \   00000038   ........           LDR      R1,??DataTable5  ;; size
   \   0000003C   040094E5           LDR      R0,[R4, #+4]
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   340084E5           STR      R0,[R4, #+52]
   \   00000048   010550E1           CMP      R0,R1, LSL #+10
   \   0000004C   0000003A           BCC      ??MyTmr_3
   \   00000050   ........           BL       StopRecord
    276                DirectRedrawGUI();
   \                     ??MyTmr_3:
   \   00000054   3F0100EF           SWI      +319
    277                break;
    278                
    279                
    280              case PAUSED:
    281                
    282                break;
    283              }
    284            
    285            GBS_StartTimerProc(&Tmr,100,MyTmr);
   \                     ??MyTmr_2:
   \   00000058   10209FE5           LDR      R2,??MyTmr_0+0x4  ;; MyTmr
   \   0000005C   6410A0E3           MOV      R1,#+100
   \   00000060   3C0084E2           ADD      R0,R4,#+60
   \   00000064   4D0000EF           SWI      +77
    286          }
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??MyTmr_0:
   \   0000006C   ........           DC32     fs
   \   00000070   ........           DC32     MyTmr
    287          
    288          
    289          
    290          
    291          
    292          

   \                                 In segment CODE, align 4, keep-with-next
    293          void CreateFile()
    294          {
   \                     CreateFile:
   \   00000000   10402DE9           PUSH     {R4,LR}
    295          
    296            wsprintf(ws_main,"amr");
   \   00000004   ........           LDR      R4,??DataTable9  ;; fs
   \   00000008   3C1F8FE2           ADR      R1,??CreateFile_0  ;; "amr"
   \   0000000C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000010   240100EF           SWI      +292
    297            uid=GetExtUid_ws(ws_main);
   \   00000014   2C0094E5           LDR      R0,[R4, #+44]
   \   00000018   D00100EF           SWI      +464
   \   0000001C   280084E5           STR      R0,[R4, #+40]
    298          #ifndef NEWSGOLD
    299            if (buid == 0)
    300            object=Obs_CreateObject(0x30,uid,2,MSG_Report,1,0,0);
    301            else 
    302            object=Obs_CreateObject(0x30,buid,2,MSG_Report,1,0,0);
    303          #else
    304            if (buid == 0)
   \   00000020   E0009FE5           LDR      R0,??CreateFile_0+0x8  ;; buid
   \   00000024   A330A0E3           MOV      R3,#+163
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   703C83E3           ORR      R3,R3,#0x7000
   \   00000040   000051E3           CMP      R1,#+0
    305            object=Obs_CreateObject(0x34,uid,2,0x70A3,0,0,0);
   \   00000044   28109405           LDREQ    R1,[R4, #+40]
   \   00000048   0220A0E3           MOV      R2,#+2
    306            else 
    307            object=Obs_CreateObject(0x34,buid,2,0x70A3,0,0,0);
   \   0000004C   3400A0E3           MOV      R0,#+52
   \   00000050   590200EF           SWI      +601
    308          #endif
    309            
    310            wsprintf(ws_main, "%s", amr);
   \   00000054   B0209FE5           LDR      R2,??CreateFile_0+0xC  ;; amr
   \   00000058   0CD08DE2           ADD      SP,SP,#+12
   \   0000005C   300084E5           STR      R0,[R4, #+48]
   \   00000060   2C0094E5           LDR      R0,[R4, #+44]
   \   00000064   261F8FE2           ADR      R1,??CreateFile_0+0x4  ;; "%s"
   \   00000068   240100EF           SWI      +292
    311            Obs_SetOutput_File(object, ws_main);
   \   0000006C   2C1094E5           LDR      R1,[R4, #+44]
   \   00000070   300094E5           LDR      R0,[R4, #+48]
   \   00000074   760200EF           SWI      +630
    312            
    313            Obs_Sound_SetMaxFileSize(object,size*1024);
   \   00000078   ........           LDR      R0,??DataTable5  ;; size
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   0015A0E1           LSL      R1,R0,#+10
   \   00000084   300094E5           LDR      R0,[R4, #+48]
   \   00000088   740200EF           SWI      +628
    314            Obs_Sound_SetNofChannels(object, 1);
   \   0000008C   300094E5           LDR      R0,[R4, #+48]
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   710200EF           SWI      +625
    315            Obs_Sound_SetFIsRecording(object, 1);
   \   00000098   300094E5           LDR      R0,[R4, #+48]
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   730200EF           SWI      +627
    316            Obs_Sound_SetAMRDTX(object, 0);
   \   000000A4   300094E5           LDR      R0,[R4, #+48]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   700200EF           SWI      +624
    317            Obs_Sound_SetBitrate(object, NORMAL_BITRATE);
   \   000000B0   300094E5           LDR      R0,[R4, #+48]
   \   000000B4   E810A0E3           MOV      R1,#+232
   \   000000B8   701D81E3           ORR      R1,R1,#0x1C00
   \   000000BC   780200EF           SWI      +632
    318            Obs_Sound_SetAMRMode(object, 0x4);
   \   000000C0   300094E5           LDR      R0,[R4, #+48]
   \   000000C4   0410A0E3           MOV      R1,#+4
   \   000000C8   720200EF           SWI      +626
    319            Obs_Sound_SetAMRFormat(object, 0);
   \   000000CC   300094E5           LDR      R0,[R4, #+48]
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   6F0200EF           SWI      +623
    320            Obs_Sound_SetAMRFrmPrBuf(object, 0xA0);
   \   000000D8   300094E5           LDR      R0,[R4, #+48]
   \   000000DC   A010A0E3           MOV      R1,#+160
   \   000000E0   6E0200EF           SWI      +622
    321            Obs_Sound_SetRecordingMode(object, 0);
   \   000000E4   300094E5           LDR      R0,[R4, #+48]
   \   000000E8   0010A0E3           MOV      R1,#+0
   \   000000EC   750200EF           SWI      +629
    322            Obs_Sound_SetPurpose(object, 0xC);
   \   000000F0   300094E5           LDR      R0,[R4, #+48]
   \   000000F4   0C10A0E3           MOV      R1,#+12
   \   000000F8   790200EF           SWI      +633
    323            
    324          }
   \   000000FC   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??CreateFile_0:
   \   00000100   616D7200           DC8      "amr"
   \   00000104   25730000           DC8      "%s",+0
   \   00000108   ........           DC32     buid
   \   0000010C   ........           DC32     amr
    325          
    326          

   \                                 In segment CODE, align 4, keep-with-next
    327          void StartRecord()
    328          {
   \                     StartRecord:
   \   00000000   10402DE9           PUSH     {R4,LR}
    329            Obs_Start(object);
   \   00000004   ........           LDR      R4,??DataTable9  ;; fs
   \   00000008   300094E5           LDR      R0,[R4, #+48]
   \   0000000C   5E0200EF           SWI      +606
    330            mode=RECORDING;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   380084E5           STR      R0,[R4, #+56]
    331          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
    332          

   \                                 In segment CODE, align 4, keep-with-next
    333          void StopRecord()
    334          {
   \                     StopRecord:
   \   00000000   10402DE9           PUSH     {R4,LR}
    335            Obs_Stop(object);
   \   00000004   ........           LDR      R4,??DataTable9  ;; fs
   \   00000008   300094E5           LDR      R0,[R4, #+48]
   \   0000000C   670200EF           SWI      +615
    336            mode=NOT_CREATED;
   \   00000010   0000E0E3           MVN      R0,#+0
   \   00000014   380084E5           STR      R0,[R4, #+56]
    337          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    338          void PauseRecord()
    339          {
   \                     PauseRecord:
   \   00000000   10402DE9           PUSH     {R4,LR}
    340            Obs_Pause(object);
   \   00000004   ........           LDR      R4,??DataTable9  ;; fs
   \   00000008   300094E5           LDR      R0,[R4, #+48]
   \   0000000C   650200EF           SWI      +613
    341            mode=PAUSED;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   380084E5           STR      R0,[R4, #+56]
    342          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    343          void ResumeRecord()
    344          {
   \                     ResumeRecord:
   \   00000000   10402DE9           PUSH     {R4,LR}
    345            Obs_Resume(object);
   \   00000004   ........           LDR      R4,??DataTable9  ;; fs
   \   00000008   300094E5           LDR      R0,[R4, #+48]
   \   0000000C   660200EF           SWI      +614
    346            mode=RECORDING;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   380084E5           STR      R0,[R4, #+56]
    347          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    348          int main(char *exename, char *fname)
    349          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    350             
    351            
    352            
    353            InitConfig();
   \   00000008   ........           _BLF     InitConfig,??InitConfig??rA
    354            ws_main=AllocWS(256);
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   250100EF           SWI      +293
   \   00000014   2C109FE5           LDR      R1,??main_0      ;; fs + 44
   \   00000018   000081E5           STR      R0,[R1, #+0]
    355            MAIN_CSM main_csm;
    356            LockSched();
   \   0000001C   460100EF           SWI      +326
    357            UpdateCSMname();
   \   00000020   ........           BL       UpdateCSMname
    358            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000024   20009FE5           LDR      R0,??main_0+0x4  ;; `?<Constant "Test">` + 8
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   070100EF           SWI      +263
    359            UnlockSched();
   \   00000034   470100EF           SWI      +327
    360            MyTmr();
   \   00000038   ........           BL       MyTmr
    361            return 0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   2CD08DE2           ADD      SP,SP,#+44
   \   00000044   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000048   ........           DC32     fs + 44
   \   0000004C   ........           DC32     `?<Constant "Test">` + 8
    362          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     size

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     fs

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fs>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for uid>`:
   \   00000028   00000000           DC32 0
   \                     `?<Initializer for ws_main>`:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for object>`:
   \   00000030   00000000           DC32 0
   \                     `?<Initializer for filesize>`:
   \   00000034   00000000           DC32 0
   \                     `?<Initializer for mode>`:
   \   00000038   FFFFFFFF           DC32 -1
   \                     `?<Initializer for Tmr>`:
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for name>`:
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for pt>`:
   \   0000014C   257400             DC8 "%t"
   \   0000014F   0000000000         DC8 0, 0, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\346\\354\\350\\362\\345 5 \\35`:
   \   00000000   CDE0E6ECE8F2       DC8 "\315\340\346\354\350\362\345 5 \350\353\350 enter \344\353\377 \355\340\367\340\353\340 \347\340\357\350\361\350"
   \              E5203520E8EB
   \              E820656E7465
   \              7220E4EBFF20
   \              EDE0F7E0EBE0
   \              20E7E0EFE8F1
   \              E800        
   \   00000026   0000               DC8 0, 0
   \   00000028   25642F256420       DC8 "%d/%d kb\012%t"
   \              6B620A257400
   \   00000034   CDE0E6ECE8F2       DC8 0CDH, 0E0H, 0E6H, 0ECH, 0E8H, 0F2H, 0E5H, 20H
   \              E520        
   \   0000003C   3520E8EBE820       DC8 35H, 20H, 0E8H, 0EBH, 0E8H, 20H, 65H, 6EH
   \              656E        
   \   00000044   74657220E4EB       DC8 74H, 65H, 72H, 20H, 0E4H, 0EBH, 0FFH, 20H
   \              FF20        
   \   0000004C   EFE0F3E7FB0A       DC8 0EFH, 0E0H, 0F3H, 0E7H, 0FBH, 0AH, 0CFH, 0F0H
   \              CFF0        
   \   00000054   E0E2FBE920F1       DC8 0E0H, 0E2H, 0FBH, 0E9H, 20H, 0F1H, 0EEH, 0F4H
   \              EEF4        
   \   0000005C   F220E4EBFF20       DC8 0F2H, 20H, 0E4H, 0EBH, 0FFH, 20H, 0EEH, 0EAH
   \              EEEA        
   \   00000064   EEEDF7E0EDE8       DC8 0EEH, 0EDH, 0F7H, 0E0H, 0EDH, 0E8H, 0FFH, 20H
   \              FF20        
   \   0000006C   E7E0EFE8F1E8       DC8 0E7H, 0E0H, 0EFH, 0E8H, 0F1H, 0E8H, 0
   \              00          
   \   00000073   00                 DC8 0
   \   00000074   CDE0E6ECE8F2       DC8 0CDH, 0E0H, 0E6H, 0ECH, 0E8H, 0F2H, 0E5H, 20H
   \              E520        
   \   0000007C   3520E8EBE820       DC8 35H, 20H, 0E8H, 0EBH, 0E8H, 20H, 65H, 6EH
   \              656E        
   \   00000084   74657220E4EB       DC8 74H, 65H, 72H, 20H, 0E4H, 0EBH, 0FFH, 20H
   \              FF20        
   \   0000008C   EFF0EEE4EEEB       DC8 0EFH, 0F0H, 0EEH, 0E4H, 0EEH, 0EBH, 0E6H, 0E5H
   \              E6E5        
   \   00000094   EDE8FF20E7E0       DC8 0EDH, 0E8H, 0FFH, 20H, 0E7H, 0E0H, 0EFH, 0E8H
   \              EFE8        
   \   0000009C   F1E80ACFF0E0       DC8 0F1H, 0E8H, 0AH, 0CFH, 0F0H, 0E0H, 0E2H, 0FBH
   \              E2FB        
   \   000000A4   E920F1EEF4F2       DC8 0E9H, 20H, 0F1H, 0EEH, 0F4H, 0F2H, 20H, 0E4H
   \              20E4        
   \   000000AC   EBFF20EEEAEE       DC8 0EBH, 0FFH, 20H, 0EEH, 0EAH, 0EEH, 0EDH, 0F7H
   \              EDF7        
   \   000000B4   E0EDE8FF20E7       DC8 0E0H, 0EDH, 0E8H, 0FFH, 20H, 0E7H, 0E0H, 0EFH
   \              E0EF        
   \   000000BC   E8F1E800           DC8 0E8H, 0F1H, 0E8H, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   616D7200           DC8 "amr"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"
    363          
    364          
    365          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     CreateFile           20
     ElfKiller             4
     MyTmr                 8
     OnKey                 4
     OnRedraw             28
     PauseRecord           8
     ResumeRecord          8
     StartRecord           8
     StopRecord            8
     UpdateCSMname         4
     main                 48
     maincsm_onclose       8
     maincsm_oncreate     12
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose               8
     onCreate              8
     onFocus               4
     onUnfocus             0
     openconf             12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     maincsm_name_body               280
     MAINCSM_ID                        4
     MAINGUI_ID                        4
     MSG_Report                        4
     OnRedraw                        272
     onCreate                         32
     onClose                          36
     onFocus                          20
     onUnfocus                        20
     openconf                         80
     OnKey                           188
     method8                           8
     method9                           8
     maincsm_oncreate                 92
     gui_methods                      52
     ElfKiller                        28
     maincsm_onclose                  72
     maincsm_onmessage                48
     ?<Constant "Test">               68
     UpdateCSMname                    28
     fs                              340
     MyTmr                           116
     CreateFile                      272
     StartRecord                      28
     StopRecord                       28
     PauseRecord                      28
     ResumeRecord                     28
     main                             80
     ??DataTable5                      4
     ??DataTable9                      4
     ?<Initializer for fs>           340
     ?<Constant "\315\340\346\354\350\362\345 5 \35
                                     192
     ?<Constant "%t">                  3
     ?<Constant "amr">                 4
     ?<Constant "%s">                  3
      Others                         132

 
 1 628 bytes in segment CODE
   326 bytes in segment DATA_C
   340 bytes in segment DATA_I
   340 bytes in segment DATA_ID
   292 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 520 bytes of CODE  memory (+ 132 bytes shared)
   666 bytes of CONST memory
   632 bytes of DATA  memory

Errors: none
Warnings: none

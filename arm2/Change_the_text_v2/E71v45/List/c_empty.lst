##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    01/Jul/2011  14:14:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\Change_the_text_v2\c_empty.c                  #
#    Command line    =  C:\arm\Change_the_text_v2\c_empty.c -D E71v45 -lC    #
#                       C:\arm\Change_the_text_v2\E71v45\List\ -la           #
#                       C:\arm\Change_the_text_v2\E71v45\List\ -o            #
#                       C:\arm\Change_the_text_v2\E71v45\Obj\ -z9            #
#                       --no_unroll --no_clustering --cpu_mode thumb         #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tptinl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\Change_the_text_v2\E71v45\List\c_empty.lst    #
#    Object file     =  C:\arm\Change_the_text_v2\E71v45\Obj\c_empty.r79     #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\Change_the_text_v2\c_empty.c
      1          #include "c:\arm\inc\swilib.h"
      2          
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          __arm char IsDisabledIconBar() 
      5          { 
      6          /*#ifdef EL71 
      7          return *(char*)( (*(int*)0xA8E94D88) + 0x18 ); 
      8          #else //E71 8*/
      9          return *(char*)( (*(int*)0xA8E9509C) + 0x18 ); 
   \                     IsDisabledIconBar:
   \   00000000   08009FE5           LDR      R0,??IsDisabledIconBar_0  ;; 0xffffffffa8e9509c
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1800D0E5           LDRB     R0,[R0, #+24]
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??IsDisabledIconBar_0:
   \   00000010   9C50E9A8           DC32     0xffffffffa8e9509c
     10          }

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     IsDisabledIconBar     0


   Segment part sizes:

     Function/Label    Bytes
     --------------    -----
     IsDisabledIconBar   20
      Others              4

 
 24 bytes in segment CODE
 
 20 bytes of CODE memory (+ 4 bytes shared)

Errors: none
Warnings: none

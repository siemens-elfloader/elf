##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Dec/2010  18:19:54 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\BalletMini\additems.c                         #
#    Command line    =  C:\arm\BalletMini\additems.c -D NEWSGOLD -D ELKA     #
#                       -lC C:\arm\BalletMini\Release_ELKA\List\ -o          #
#                       C:\arm\BalletMini\Release_ELKA\Obj\ -s9 --no_unroll  #
#                       --no_inline --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "C:\arm2\Embedded Workbench 4.0   #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\" #
#    List file       =  C:\arm\BalletMini\Release_ELKA\List\additems.lst     #
#    Object file     =  C:\arm\BalletMini\Release_ELKA\Obj\additems.r79      #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\BalletMini\additems.c
      1          #include "../inc/swilib.h"
      2          #include "view.h"
      3          #include "additems.h"
      4          #include "readimg.h"
      5          #include "string_works.h"
      6          #include "siemens_unicode.h"
      7          #include "file_works.h"
      8          #include "urlstack.h"
      9          
     10          #define DP_IS_FRAME (-2)
     11          #define DP_IS_NOINDEX (-1)
     12          #define RAWTEXTCHUNK (16384)
     13          #define REFCACHECHUNK (256)
     14          
     15          #define FIRST_UCS2_USER_BITMAP 0xE100
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          /*static*/ void RawInsertChar(VIEWDATA *vd, int wchar)
     18          {
   \                     RawInsertChar:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     19            if ((vd->rawtext_size%RAWTEXTCHUNK)==0)
   \   00000008   0C0094E5           LDR      R0,[R4, #+12]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   0119A0E1           LSL      R1,R1,#+18
   \   00000018   2119B0E1           LSRS     R1,R1,#+18
   \   0000001C   0400001A           BNE      ??RawInsertChar_0
     20            {
     21              //Дошли до конца куска, реаллоцируем еще кусок
     22              vd->rawtext=realloc(vd->rawtext,(vd->rawtext_size+RAWTEXTCHUNK)*2);
   \   00000020   400C80E2           ADD      R0,R0,#+16384
   \   00000024   8010A0E1           LSL      R1,R0,#+1
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   BA0000EF           SWI      +186
   \   00000030   080084E5           STR      R0,[R4, #+8]
     23            }
     24            //
     25            vd->rawtext[vd->rawtext_size++]=wchar;
   \                     ??RawInsertChar_0:
   \   00000034   0C0094E5           LDR      R0,[R4, #+12]
   \   00000038   011080E2           ADD      R1,R0,#+1
   \   0000003C   0C1084E5           STR      R1,[R4, #+12]
   \   00000040   081094E5           LDR      R1,[R4, #+8]
   \   00000044   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000048   B050C0E1           STRH     R5,[R0, #+0]
     26          }
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void AddNewStyle(VIEWDATA *vd)
     29          {
   \                     AddNewStyle:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     30            if (vd->current_tag_s.bold!=vd->prev_tag_s.bold)
   \   00000008   580094E5           LDR      R0,[R4, #+88]
   \   0000000C   5C2094E5           LDR      R2,[R4, #+92]
   \   00000010   801700E2           AND      R1,R0,#0x2000000
   \   00000014   A11CA0E1           LSR      R1,R1,#+25
   \   00000018   802702E2           AND      R2,R2,#0x2000000
   \   0000001C   A20C51E1           CMP      R1,R2, LSR #+25
   \   00000020   0500000A           BEQ      ??AddNewStyle_0
     31              RawInsertChar(vd,vd->current_tag_s.bold?UTF16_FONT_SMALL_BOLD:UTF16_FONT_SMALL);
   \   00000024   800710E3           TST      R0,#0x2000000
   \   00000028   1310A013           MOVNE    R1,#+19
   \   0000002C   1210A003           MOVEQ    R1,#+18
   \   00000030   E01C81E3           ORR      R1,R1,#0xE000
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       RawInsertChar
     32          //  if (vd->current_tag_s.underline!=vd->prev_tag_s.underline)
     33          //    RawInsertChar(vd,vd->current_tag_s.underline?UTF16_ENA_UNDERLINE:UTF16_DIS_UNDERLINE);
     34            RawInsertChar(vd,UTF16_INK_RGBA);
   \                     ??AddNewStyle_0:
   \   0000003C   0610A0E3           MOV      R1,#+6
   \   00000040   E01C81E3           ORR      R1,R1,#0xE000
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       RawInsertChar
     35            RawInsertChar(vd,(vd->current_tag_s.red<<11)+(vd->current_tag_s.green<<2));
   \   0000004C   580094E5           LDR      R0,[R4, #+88]
   \   00000050   7C1D00E2           AND      R1,R0,#0x1F00
   \   00000054   2114A0E1           LSR      R1,R1,#+8
   \   00000058   7E0A00E2           AND      R0,R0,#0x7E000
   \   0000005C   A006A0E1           LSR      R0,R0,#+13
   \   00000060   0001A0E1           LSL      R0,R0,#+2
   \   00000064   811580E0           ADD      R1,R0,R1, LSL #+11
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       RawInsertChar
     36            RawInsertChar(vd,(vd->current_tag_s.blue<<11)+100);
   \   00000070   580094E5           LDR      R0,[R4, #+88]
   \   00000074   6410A0E3           MOV      R1,#+100
   \   00000078   F80800E2           AND      R0,R0,#0xF80000
   \   0000007C   A009A0E1           LSR      R0,R0,#+19
   \   00000080   801581E0           ADD      R1,R1,R0, LSL #+11
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       RawInsertChar
     37            RawInsertChar(vd,UTF16_PAPER_RGBA);
   \   0000008C   0710A0E3           MOV      R1,#+7
   \   00000090   E01C81E3           ORR      R1,R1,#0xE000
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       RawInsertChar
     38            RawInsertChar(vd,(vd->current_tag_d.red<<11)+(vd->current_tag_d.green<<2));
   \   0000009C   B006D4E1           LDRH     R0,[R4, #+96]
   \   000000A0   1F1000E2           AND      R1,R0,#0x1F
   \   000000A4   7E0E00E2           AND      R0,R0,#0x7E0
   \   000000A8   A002A0E1           LSR      R0,R0,#+5
   \   000000AC   0001A0E1           LSL      R0,R0,#+2
   \   000000B0   811580E0           ADD      R1,R0,R1, LSL #+11
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       RawInsertChar
     39            RawInsertChar(vd,(vd->current_tag_d.blue<<11)+100);
   \   000000BC   B006D4E1           LDRH     R0,[R4, #+96]
   \   000000C0   6410A0E3           MOV      R1,#+100
   \   000000C4   A005A0E1           LSR      R0,R0,#+11
   \   000000C8   801581E0           ADD      R1,R1,R0, LSL #+11
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       RawInsertChar
     40            if (vd->current_tag_s.center!=vd->prev_tag_s.center)
   \   000000D4   580094E5           LDR      R0,[R4, #+88]
   \   000000D8   5C2094E5           LDR      R2,[R4, #+92]
   \   000000DC   401500E2           AND      R1,R0,#0x10000000
   \   000000E0   211EA0E1           LSR      R1,R1,#+28
   \   000000E4   402502E2           AND      R2,R2,#0x10000000
   \   000000E8   220E51E1           CMP      R1,R2, LSR #+28
   \   000000EC   0500000A           BEQ      ??AddNewStyle_1
     41              RawInsertChar(vd,vd->current_tag_s.center?UTF16_ENA_CENTER:UTF16_DIS_CENTER);
   \   000000F0   400510E3           TST      R0,#0x10000000
   \   000000F4   1E10A013           MOVNE    R1,#+30
   \   000000F8   1F10A003           MOVEQ    R1,#+31
   \   000000FC   E01C81E3           ORR      R1,R1,#0xE000
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       RawInsertChar
     42            if (vd->current_tag_s.right!=vd->prev_tag_s.right)
   \                     ??AddNewStyle_1:
   \   00000108   580094E5           LDR      R0,[R4, #+88]
   \   0000010C   5C2094E5           LDR      R2,[R4, #+92]
   \   00000110   801500E2           AND      R1,R0,#0x20000000
   \   00000114   A11EA0E1           LSR      R1,R1,#+29
   \   00000118   802502E2           AND      R2,R2,#0x20000000
   \   0000011C   A20E51E1           CMP      R1,R2, LSR #+29
   \   00000120   1080BD08           POPEQ    {R4,PC}
     43              RawInsertChar(vd,vd->current_tag_s.right?UTF16_ALIGN_RIGHT:UTF16_ALIGN_LEFT);
   \   00000124   800510E3           TST      R0,#0x20000000
   \   00000128   1D10A013           MOVNE    R1,#+29
   \   0000012C   1C10A003           MOVEQ    R1,#+28
   \   00000130   E01C81E3           ORR      R1,R1,#0xE000
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           BL       RawInsertChar
     44          }
   \   0000013C   1080BDE8           POP      {R4,PC}          ;; return
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          void AddBeginRef(VIEWDATA *vd)
     47          {
     48            vd->work_ref.begin=vd->rawtext_size;
   \                     AddBeginRef:
   \   00000000   0C1090E5           LDR      R1,[R0, #+12]
   \   00000004   7C1080E5           STR      R1,[R0, #+124]
     49            RawInsertChar(vd,UTF16_ENA_INVERT);
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   E01C81E3           ORR      R1,R1,#0xE000
   \   00000010   ........           B        RawInsertChar    ;; tailcall
     50          }
     51          

   \                                 In segment CODE, align 4, keep-with-next
     52          void AddBeginRefZ(VIEWDATA *vd)
     53          {
     54            vd->work_ref_Z.begin=vd->rawtext_size;
   \                     AddBeginRefZ:
   \   00000000   0C1090E5           LDR      R1,[R0, #+12]
   \   00000004   A41080E5           STR      R1,[R0, #+164]
     55            RawInsertChar(vd,UTF16_ENA_INVERT);
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   E01C81E3           ORR      R1,R1,#0xE000
   \   00000010   ........           B        RawInsertChar    ;; tailcall
     56          }
     57          

   \                                 In segment CODE, align 4, keep-with-next
     58          void AddToRefCache(VIEWDATA *vd)
     59          {
   \                     AddToRefCache:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     60            REFCACHE* p;
     61            if ((vd->ref_cache_size%REFCACHECHUNK)==0)
   \   00000008   D00094E5           LDR      R0,[R4, #+208]
   \   0000000C   C013A0E1           ASR      R1,R0,#+7
   \   00000010   211C80E0           ADD      R1,R0,R1, LSR #+24
   \   00000014   4114A0E1           ASR      R1,R1,#+8
   \   00000018   011450E0           SUBS     R1,R0,R1, LSL #+8
   \   0000001C   0500001A           BNE      ??AddToRefCache_0
     62            {
     63              vd->ref_cache=realloc(vd->ref_cache,(vd->ref_cache_size+REFCACHECHUNK)*sizeof(REFCACHE));
   \   00000020   400F80E2           ADD      R0,R0,#+256
   \   00000024   2820A0E3           MOV      R2,#+40
   \   00000028   920001E0           MUL      R1,R2,R0
   \   0000002C   CC0094E5           LDR      R0,[R4, #+204]
   \   00000030   BA0000EF           SWI      +186
   \   00000034   CC0084E5           STR      R0,[R4, #+204]
     64            }
     65            p=vd->ref_cache+vd->ref_cache_size;
     66            memcpy(p,&(vd->work_ref),sizeof(REFCACHE));
   \                     ??AddToRefCache_0:
   \   00000038   D00094E5           LDR      R0,[R4, #+208]
   \   0000003C   CCC094E5           LDR      R12,[R4, #+204]
   \   00000040   2820A0E3           MOV      R2,#+40
   \   00000044   7C1084E2           ADD      R1,R4,#+124
   \   00000048   92C020E0           MLA      R0,R2,R0,R12
   \   0000004C   1E0100EF           SWI      +286
     67            vd->ref_cache_size++;
   \   00000050   D00094E5           LDR      R0,[R4, #+208]
     68            memset(&(vd->work_ref),0xFF,sizeof(REFCACHE));
   \   00000054   2820A0E3           MOV      R2,#+40
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   D00084E5           STR      R0,[R4, #+208]
   \   00000060   FF10A0E3           MOV      R1,#+255
   \   00000064   7C0084E2           ADD      R0,R4,#+124
   \   00000068   BB0000EF           SWI      +187
     69          }
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
     70          

   \                                 In segment CODE, align 4, keep-with-next
     71          void AddEndRef(VIEWDATA *vd)
     72          {
   \                     AddEndRef:
   \   00000000   10402DE9           PUSH     {R4,LR}
     73            RawInsertChar(vd,UTF16_DIS_INVERT);
   \   00000004   0410A0E3           MOV      R1,#+4
   \   00000008   E01C81E3           ORR      R1,R1,#0xE000
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           BL       RawInsertChar
     74            if (vd->pos_cur_ref==0xFFFFFFFF)
   \   00000014   280094E5           LDR      R0,[R4, #+40]
   \   00000018   010070E3           CMN      R0,#+1
     75            {
     76              vd->pos_cur_ref=vd->work_ref.begin;
   \   0000001C   7C009405           LDREQ    R0,[R4, #+124]
   \   00000020   28008405           STREQ    R0,[R4, #+40]
     77            }
     78            vd->work_ref.end = vd->rawtext_size;
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   \   00000028   800084E5           STR      R0,[R4, #+128]
     79            AddToRefCache(vd);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000034   ........           B        AddToRefCache    ;; tailcall
     80          }
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          void AddTextItem(VIEWDATA *vd, const char *text, int len)
     83          {
   \                     AddTextItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0F0000EA           B        ??AddTextItem_0
     84            int c;
     85            while((len--)>0)
     86            {
     87              c=*text++;
     88              if ((c&0xE0)==0xC0)
     89              {
     90                if (len>0)
     91                {
     92                  c&=0x1F;
     93                  c<<=6;
     94                  c|=(*text++)&0x3F;
     95                  len-=1;
     96                }
     97              }
     98              else
     99                if ((c&0xF0)==0xE0)
   \                     ??AddTextItem_1:
   \   00000014   F00001E2           AND      R0,R1,#0xF0
   \   00000018   E00050E3           CMP      R0,#+224
   \   0000001C   0A00001A           BNE      ??AddTextItem_2
    100                {
    101                  if (len>1)
   \   00000020   020056E3           CMP      R6,#+2
   \   00000024   080000BA           BLT      ??AddTextItem_2
    102                  {
    103                    c&=0x0F;
    104                    c<<=12;
    105                    c|=((*text++)&0x3F)<<6;
   \   00000028   0F0001E2           AND      R0,R1,#0xF
   \   0000002C   ........           LDRB     R1,[R5], #+1
    106                    c|=((*text++)&0x3F)<<0;
    107                    len-=2;
   \   00000030   026046E2           SUB      R6,R6,#+2
   \   00000034   3F1001E2           AND      R1,R1,#0x3F
   \   00000038   0113A0E1           LSL      R1,R1,#+6
   \   0000003C   000681E1           ORR      R0,R1,R0, LSL #+12
   \   00000040   ........           LDRB     R1,[R5], #+1
   \   00000044   3F1001E2           AND      R1,R1,#0x3F
   \   00000048   001081E1           ORR      R1,R1,R0
    108                  }
    109                }
    110              RawInsertChar(vd,c);
   \                     ??AddTextItem_2:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       RawInsertChar
   \                     ??AddTextItem_0:
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   016040E2           SUB      R6,R0,#+1
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   7080BDB8           POPLT    {R4-R6,PC}
   \   00000064   ........           LDRB     R1,[R5], #+1
   \   00000068   E00001E2           AND      R0,R1,#0xE0
   \   0000006C   C00050E3           CMP      R0,#+192
   \   00000070   E7FFFF1A           BNE      ??AddTextItem_1
   \   00000074   010056E3           CMP      R6,#+1
   \   00000078   F3FFFFBA           BLT      ??AddTextItem_2
   \   0000007C   1F0001E2           AND      R0,R1,#0x1F
   \   00000080   ........           LDRB     R1,[R5], #+1
   \   00000084   016046E2           SUB      R6,R6,#+1
   \   00000088   3F1001E2           AND      R1,R1,#0x3F
   \   0000008C   001381E1           ORR      R1,R1,R0, LSL #+6
   \   00000090   EDFFFFEA           B        ??AddTextItem_2
    111            }
    112          }
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          void AddBrItem(VIEWDATA *vd)
    115          {
    116            AddTextItem(vd,"\n",1);
   \                     AddBrItem:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   00108FE2           ADR      R1,??AddBrItem_0  ;; "\n"
   \   00000008   ........           B        AddTextItem      ;; tailcall
   \                     ??AddBrItem_0:
   \   0000000C   0A000000           DC8      "\n",+0,+0
    117          }
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          void AddPItem(VIEWDATA *vd)
    120          {
    121            AddTextItem(vd," ",1);
   \                     AddPItem:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   00108FE2           ADR      R1,??AddPItem_0  ;; " "
   \   00000008   ........           B        AddTextItem      ;; tailcall
   \                     ??AddPItem_0:
   \   0000000C   20000000           DC8      " ",+0,+0
    122          }
    123          

   \                                 In segment CODE, align 4, keep-with-next
    124          void AddPictureItemIndex(VIEWDATA *vd, int index)
    125          {
    126            int w_char=FIRST_UCS2_USER_BITMAP;
    127            OMS_DYNPNGLIST *dpl=vd->dynpng_list;
   \                     AddPictureItemIndex:
   \   00000000   783090E5           LDR      R3,[R0, #+120]
   \   00000004   E12CA0E3           MOV      R2,#+57600
   \   00000008   000000EA           B        ??AddPictureItemIndex_0
    128            while(dpl)
    129            {
    130              if (dpl->index==index) 
    131              {
    132                w_char=dpl->w_char;
    133                break;
    134              }
    135              dpl=dpl->dp.next;
   \                     ??AddPictureItemIndex_1:
   \   0000000C   003093E5           LDR      R3,[R3, #+0]
   \                     ??AddPictureItemIndex_0:
   \   00000010   000053E3           CMP      R3,#+0
   \   00000014   0300000A           BEQ      ??AddPictureItemIndex_2
   \   00000018   10C093E5           LDR      R12,[R3, #+16]
   \   0000001C   01005CE1           CMP      R12,R1
   \   00000020   F9FFFF1A           BNE      ??AddPictureItemIndex_1
   \   00000024   0C2093E5           LDR      R2,[R3, #+12]
    136            }
    137            RawInsertChar(vd,w_char);
   \                     ??AddPictureItemIndex_2:
   \   00000028   0210A0E1           MOV      R1,R2
   \   0000002C   ........           B        RawInsertChar    ;; tailcall
    138          }
    139          
    140          
    141          //is_index >= 0 использовать последний
    142          //is_index <0 - задать  принудительно

   \                                 In segment CODE, align 4, keep-with-next
    143          OMS_DYNPNGLIST *AddToDPngQueue(VIEWDATA *vd, IMGHDR *img, int is_index)
    144          {
   \                     AddToDPngQueue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0250A0E1           MOV      R5,R2
    145            if (img->w > ScreenW()-MARGIN)
   \   00000010   888100EF           SWI      +33160
   \   00000014   B010D7E1           LDRH     R1,[R7, #+0]
   \   00000018   040040E2           SUB      R0,R0,#+4
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   040000AA           BGE      ??AddToDPngQueue_0
    146              img->w = ScreenW()-MARGIN;
   \   00000024   888100EF           SWI      +33160
   \   00000028   FC10A0E3           MOV      R1,#+252
   \   0000002C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000030   000081E0           ADD      R0,R1,R0
   \   00000034   B000C7E1           STRH     R0,[R7, #+0]
    147            int wchar, i, index, icon;
    148            OMS_DYNPNGLIST *dpl;
    149            OMS_DYNPNGLIST *odp=malloc(sizeof(OMS_DYNPNGLIST));
   \                     ??AddToDPngQueue_0:
   \   00000038   1400A0E3           MOV      R0,#+20
   \   0000003C   140000EF           SWI      +20
   \   00000040   0060A0E1           MOV      R6,R0
    150            odp->dp.next=0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   000086E5           STR      R0,[R6, #+0]
    151            odp->dp.img=img;
   \   0000004C   087086E5           STR      R7,[R6, #+8]
    152            dpl=vd->dynpng_list;
   \   00000050   781094E5           LDR      R1,[R4, #+120]
    153            if (!dpl)
   \   00000054   0190A0E3           MOV      R9,#+1
   \   00000058   E19C89E3           ORR      R9,R9,#0xE100
   \   0000005C   000051E3           CMP      R1,#+0
   \   00000060   0C00001A           BNE      ??AddToDPngQueue_1
    154            {
    155              wchar=FIRST_UCS2_USER_BITMAP+1;
    156              odp->dp.icon=GetPicNByUnicodeSymbol(wchar);
   \   00000064   0900A0E1           MOV      R0,R9
   \   00000068   E40100EF           SWI      +484
   \   0000006C   040086E5           STR      R0,[R6, #+4]
    157              odp->w_char=wchar;
   \   00000070   0C9086E5           STR      R9,[R6, #+12]
    158              if (is_index>=0) odp->index=0;
   \   00000074   000055E3           CMP      R5,#+0
   \   00000078   0050A053           MOVPL    R5,#+0
    159              else odp->index=is_index;
   \   0000007C   105086E5           STR      R5,[R6, #+16]
    160              LockSched();
   \   00000080   460100EF           SWI      +326
    161              vd->dynpng_list=odp;
   \   00000084   786084E5           STR      R6,[R4, #+120]
    162              UnlockSched();
   \   00000088   470100EF           SWI      +327
    163              RefreshGUI();
   \   0000008C   960100EF           SWI      +406
   \   00000090   0600A0E1           MOV      R0,R6
   \   00000094   F083BDE8           POP      {R4-R9,PC}
    164            }
    165            else
    166            {
    167              i=0;
    168              index=0;
   \                     ??AddToDPngQueue_1:
   \   00000098   0080A0E3           MOV      R8,#+0
    169              OMS_DYNPNGLIST *d;
    170              do
    171              {
    172                d=dpl;
   \                     ??AddToDPngQueue_2:
   \   0000009C   0170A0E1           MOV      R7,R1
    173                if (is_index>=0 && d->index>=0) index++;
    174                i++;
    175              }
    176              while((dpl=dpl->dp.next));
   \   000000A0   001091E5           LDR      R1,[R1, #+0]
   \   000000A4   000055E3           CMP      R5,#+0
   \   000000A8   10209755           LDRPL    R2,[R7, #+16]
   \   000000AC   010080E2           ADD      R0,R0,#+1
   \   000000B0   00005253           CMPPL    R2,#+0
   \   000000B4   01808852           ADDPL    R8,R8,#+1
   \   000000B8   000051E3           CMP      R1,#+0
   \   000000BC   F6FFFF1A           BNE      ??AddToDPngQueue_2
    177              if (d->dp.icon != 0xFFFF)
   \   000000C0   041097E5           LDR      R1,[R7, #+4]
   \   000000C4   FF20A0E3           MOV      R2,#+255
   \   000000C8   FF2C82E3           ORR      R2,R2,#0xFF00
   \   000000CC   020051E1           CMP      R1,R2
   \   000000D0   0F00000A           BEQ      ??AddToDPngQueue_3
    178              {
    179                wchar=FIRST_UCS2_USER_BITMAP+1+i;
   \   000000D4   009089E0           ADD      R9,R9,R0
    180                icon = GetPicNByUnicodeSymbol(wchar);
   \   000000D8   0900A0E1           MOV      R0,R9
   \   000000DC   E40100EF           SWI      +484
    181                dpl=vd->dynpng_list;
   \   000000E0   781094E5           LDR      R1,[R4, #+120]
   \   000000E4   020000EA           B        ??AddToDPngQueue_4
    182                do
    183                {
    184                  if (icon == dpl->dp.icon)
    185                  {
    186                    icon = GetPicNByUnicodeSymbol(++wchar);
    187                    dpl = vd->dynpng_list;
    188                  } 
    189                  else
    190                    dpl = dpl->dp.next;
   \                     ??AddToDPngQueue_5:
   \   000000E8   001091E5           LDR      R1,[R1, #+0]
    191                }
    192                while(dpl);
   \                     ??AddToDPngQueue_6:
   \   000000EC   000051E3           CMP      R1,#+0
   \   000000F0   1000000A           BEQ      ??AddToDPngQueue_7
   \                     ??AddToDPngQueue_4:
   \   000000F4   042091E5           LDR      R2,[R1, #+4]
   \   000000F8   020050E1           CMP      R0,R2
   \   000000FC   F9FFFF1A           BNE      ??AddToDPngQueue_5
   \   00000100   019089E2           ADD      R9,R9,#+1
   \   00000104   0900A0E1           MOV      R0,R9
   \   00000108   E40100EF           SWI      +484
   \   0000010C   781094E5           LDR      R1,[R4, #+120]
   \   00000110   F5FFFFEA           B        ??AddToDPngQueue_6
    193              }
    194              else
    195              {
    196                mfree(odp->dp.img->bitmap);
   \                     ??AddToDPngQueue_3:
   \   00000114   080096E5           LDR      R0,[R6, #+8]
   \   00000118   080090E5           LDR      R0,[R0, #+8]
   \   0000011C   150000EF           SWI      +21
    197                mfree(odp->dp.img);
   \   00000120   080096E5           LDR      R0,[R6, #+8]
   \   00000124   150000EF           SWI      +21
    198                mfree(odp);
   \   00000128   0600A0E1           MOV      R0,R6
   \   0000012C   150000EF           SWI      +21
    199                return 0;
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   F083BDE8           POP      {R4-R9,PC}
    200              }
    201              odp->dp.icon=icon;
   \                     ??AddToDPngQueue_7:
   \   00000138   040086E5           STR      R0,[R6, #+4]
    202              odp->w_char=wchar;
   \   0000013C   0C9086E5           STR      R9,[R6, #+12]
    203              if (is_index>=0)  odp->index=index;
   \   00000140   000055E3           CMP      R5,#+0
    204              else odp->index=is_index;
   \   00000144   0580A041           MOVMI    R8,R5
   \   00000148   108086E5           STR      R8,[R6, #+16]
    205              LockSched();
   \   0000014C   460100EF           SWI      +326
    206              d->dp.next=odp;
   \   00000150   006087E5           STR      R6,[R7, #+0]
    207              UnlockSched();
   \   00000154   470100EF           SWI      +327
    208            }
    209            return odp;
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   F083BDE8           POP      {R4-R9,PC}       ;; return
    210          }
    211          

   \                                 In segment CODE, align 4, keep-with-next
    212          void AddPictureItem(VIEWDATA *vd, void *picture)
    213          {
   \                     AddPictureItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    214            int wchar=FIRST_UCS2_USER_BITMAP;
   \   0000000C   E16CA0E3           MOV      R6,#+57600
    215            IMGHDR *img;
    216            OMS_DYNPNGLIST *dpl;
    217            if (picture)
   \   00000010   0D00000A           BEQ      ??AddPictureItem_0
    218            {
    219              if ((img=read_pngimg(picture)))
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     read_pngimg,??read_pngimg??rA
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0300001A           BNE      ??AddPictureItem_1
    220              {
    221                dpl=AddToDPngQueue(vd, img, 0);
    222                if (dpl)
    223                  wchar=dpl->w_char;
    224              }
    225              else  if ((img=read_jpgimg(picture)))
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     read_jpgimg,??read_jpgimg??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0500000A           BEQ      ??AddPictureItem_0
    226              {
    227                dpl=AddToDPngQueue(vd, img, 0);
   \                     ??AddPictureItem_1:
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       AddToDPngQueue
    228                if (dpl)
   \   00000044   000050E3           CMP      R0,#+0
    229                  wchar=dpl->w_char;
   \   00000048   0C609015           LDRNE    R6,[R0, #+12]
    230              }
    231            }
    232            RawInsertChar(vd,wchar);
   \                     ??AddPictureItem_0:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   7040BDE8           POP      {R4-R6,LR}       ;; Pop
   \   00000058   ........           B        RawInsertChar    ;; tailcall
    233          }
    234          

   \                                 In segment CODE, align 4, keep-with-next
    235          void AddPictureItemRGBA(VIEWDATA *vd, void *picture, int width, int height)
    236          {
   \                     AddPictureItemRGBA:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
   \   0000000C   0210A0E1           MOV      R1,R2
   \   00000010   0320A0E1           MOV      R2,R3
    237            int wchar=FIRST_UCS2_USER_BITMAP;
   \   00000014   E15CA0E3           MOV      R5,#+57600
    238            IMGHDR *img;
    239            OMS_DYNPNGLIST *dpl;
    240            if (picture)
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0800000A           BEQ      ??AddPictureItemRGBA_0
    241            {
    242              img=ConvertRGBAToRGB8(picture,width,height);
   \   00000020   ........           _BLF     ConvertRGBAToRGB8,??ConvertRGBAToRGB8??rA
    243              if (img)
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??AddPictureItemRGBA_0
    244              {
    245                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
   \   0000002C   0020E0E3           MVN      R2,#+0
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       AddToDPngQueue
    246                if (dpl)
   \   0000003C   000050E3           CMP      R0,#+0
    247                  wchar=dpl->w_char;
   \   00000040   0C509015           LDRNE    R5,[R0, #+12]
    248              }
    249            }
    250            //Prepare Wide String
    251            RawInsertChar(vd,wchar);  
   \                     ??AddPictureItemRGBA_0:
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000050   ........           B        RawInsertChar    ;; tailcall
    252          }
    253          

   \                                 In segment CODE, align 4, keep-with-next
    254          OMS_DYNPNGLIST *FindOmsFrameBySize(VIEWDATA *vd,int width,int height)
    255          {
    256            IMGHDR *img;
    257            OMS_DYNPNGLIST *dpl=vd->dynpng_list;
   \                     FindOmsFrameBySize:
   \   00000000   780090E5           LDR      R0,[R0, #+120]
   \   00000004   000000EA           B        ??FindOmsFrameBySize_0
    258            while(dpl)
    259            {
    260              if (dpl->index==DP_IS_FRAME)
    261              {
    262                if ((img=dpl->dp.img))
    263                {
    264                  if (img->w==width && img->h==height) return (dpl);
    265                }
    266              }
    267              dpl=dpl->dp.next;
   \                     ??FindOmsFrameBySize_1:
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \                     ??FindOmsFrameBySize_0:
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1EFF2F01           BXEQ     LR
   \   00000014   103090E5           LDR      R3,[R0, #+16]
   \   00000018   020073E3           CMN      R3,#+2
   \   0000001C   F9FFFF1A           BNE      ??FindOmsFrameBySize_1
   \   00000020   083090E5           LDR      R3,[R0, #+8]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   F6FFFF0A           BEQ      ??FindOmsFrameBySize_1
   \   0000002C   B0C0D3E1           LDRH     R12,[R3, #+0]
   \   00000030   01005CE1           CMP      R12,R1
   \   00000034   B230D301           LDRHEQ   R3,[R3, #+2]
   \   00000038   02005301           CMPEQ    R3,R2
   \   0000003C   F1FFFF1A           BNE      ??FindOmsFrameBySize_1
    268            }
    269            return (dpl);
   \   00000040   1EFF2FE1           BX       LR               ;; return
    270          }
    271          

   \                                 In segment CODE, align 4, keep-with-next
    272          void AddPictureItemFrame(VIEWDATA *vd,int width,int height)
    273          {
   \                     AddPictureItemFrame:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    274            int wchar=FIRST_UCS2_USER_BITMAP;
   \   00000010   E17CA0E3           MOV      R7,#+57600
    275            IMGHDR *img;
    276            OMS_DYNPNGLIST *dpl;
    277            dpl=FindOmsFrameBySize(vd,width,height);
   \   00000014   ........           BL       FindOmsFrameBySize
    278            if (dpl) wchar=dpl->w_char;
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0C00001A           BNE      ??AddPictureItemFrame_0
    279            else
    280            {
    281              img=CreateFrame(width,height,GetPaletteAdrByColorIndex(3));
   \   00000020   0300A0E3           MOV      R0,#+3
   \   00000024   2E0100EF           SWI      +302
   \   00000028   0020A0E1           MOV      R2,R0
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     CreateFrame,??CreateFrame??rA
   \   00000038   0010B0E1           MOVS     R1,R0
    282              if (img)
   \   0000003C   0500000A           BEQ      ??AddPictureItemFrame_1
    283              {
    284                dpl=AddToDPngQueue(vd, img, DP_IS_FRAME);
   \   00000040   0120E0E3           MVN      R2,#+1
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       AddToDPngQueue
    285                if (dpl)
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0000000A           BEQ      ??AddPictureItemFrame_1
    286                  wchar=dpl->w_char;
   \                     ??AddPictureItemFrame_0:
   \   00000054   0C7090E5           LDR      R7,[R0, #+12]
    287              }
    288            }
    289            RawInsertChar(vd,wchar);  
   \                     ??AddPictureItemFrame_1:
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   0710A0E1           MOV      R1,R7
   \   00000060   ........           BL       RawInsertChar
    290          }
   \   00000064   F080BDE8           POP      {R4-R7,PC}       ;; return
    291          

   \                                 In segment CODE, align 4, keep-with-next
    292          void AddPictureItemHr(VIEWDATA *vd)
    293          {
   \                     AddPictureItemHr:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    294            int wchar=FIRST_UCS2_USER_BITMAP;
    295            IMGHDR *img;
    296            OMS_DYNPNGLIST *dpl;
    297            if (!vd->wchar_hr)
   \   00000008   BC0DD4E1           LDRH     R0,[R4, #+220]
   \   0000000C   E15CA0E3           MOV      R5,#+57600
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1100001A           BNE      ??AddPictureItemHr_0
    298            {
    299              img=CreateDelimiter(ScreenW()-MARGIN,3,GetPaletteAdrByColorIndex(1));
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   2E0100EF           SWI      +302
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   0620A0E1           MOV      R2,R6
   \   0000002C   0310A0E3           MOV      R1,#+3
   \   00000030   040040E2           SUB      R0,R0,#+4
   \   00000034   ........           _BLF     CreateDelimiter,??CreateDelimiter??rA
   \   00000038   0010B0E1           MOVS     R1,R0
    300              if (img)
   \   0000003C   0800000A           BEQ      ??AddPictureItemHr_1
    301              {
    302                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
   \   00000040   0020E0E3           MVN      R2,#+0
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       AddToDPngQueue
    303                if (dpl)
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0300000A           BEQ      ??AddPictureItemHr_1
    304                  vd->wchar_hr=wchar=dpl->w_char;
   \   00000054   0C5090E5           LDR      R5,[R0, #+12]
   \   00000058   BC5DC4E1           STRH     R5,[R4, #+220]
   \   0000005C   000000EA           B        ??AddPictureItemHr_1
    305              }
    306            }
    307            else wchar=vd->wchar_hr;
   \                     ??AddPictureItemHr_0:
   \   00000060   0050A0E1           MOV      R5,R0
    308            RawInsertChar(vd,wchar);
   \                     ??AddPictureItemHr_1:
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       RawInsertChar
    309          }
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    310          

   \                                 In segment CODE, align 4, keep-with-next
    311          int AddPictureItemFile(VIEWDATA *vd, const char *file)
    312          {
   \                     AddPictureItemFile:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    313            int wchar=FIRST_UCS2_USER_BITMAP;
   \   00000010   E16CA0E3           MOV      R6,#+57600
    314            IMGHDR *img;
    315            OMS_DYNPNGLIST *dpl;
    316          	FSTATS fs;
    317            unsigned int err;
    318            if (GetFileStats(file,&fs,&err)!=-1)
   \   00000014   0D20A0E1           MOV      R2,SP
   \   00000018   04108DE2           ADD      R1,SP,#+4
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   840000EF           SWI      +132
   \   00000024   010070E3           CMN      R0,#+1
   \   00000028   0A00000A           BEQ      ??AddPictureItemFile_0
    319            {
    320              if (img=CreateIMGHDRFromPngFile(file, 0))
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   E90100EF           SWI      +489
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0500000A           BEQ      ??AddPictureItemFile_0
    321              {
    322                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
   \   00000040   0020E0E3           MVN      R2,#+0
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       AddToDPngQueue
    323                if (dpl)
   \   00000050   000050E3           CMP      R0,#+0
    324                  wchar=dpl->w_char;
   \   00000054   0C609015           LDRNE    R6,[R0, #+12]
    325              }
    326            }
    327            return wchar;
   \                     ??AddPictureItemFile_0:
   \   00000058   2CD08DE2           ADD      SP,SP,#+44
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
    328          }
    329          

   \                                 In segment CODE, align 4, keep-with-next
    330          void AddRadioButton(VIEWDATA *vd, int checked)
    331          {
   \                     AddRadioButton:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    332            if (!vd->WCHAR_RADIO_ON)
   \   00000008   F80094E5           LDR      R0,[R4, #+248]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1200001A           BNE      ??AddRadioButton_0
    333            {
    334              char * radio_bttn_clkd = getSymbolicPath("$resources\\radio_bttn_clkd.png");
   \   00000018   5C609FE5           LDR      R6,??AddRadioButton_1  ;; `?<Constant "$resources\\\\radio_bttn...">`
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000024   0070A0E1           MOV      R7,R0
    335              vd->WCHAR_RADIO_ON=AddPictureItemFile(vd, radio_bttn_clkd);
   \   00000028   0710A0E1           MOV      R1,R7
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       AddPictureItemFile
   \   00000034   F80084E5           STR      R0,[R4, #+248]
    336              mfree(radio_bttn_clkd);
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   150000EF           SWI      +21
    337              char * radio_bttn = getSymbolicPath("$resources\\radio_bttn.png");
   \   00000040   200086E2           ADD      R0,R6,#+32
   \   00000044   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000048   0060A0E1           MOV      R6,R0
    338              vd->WCHAR_RADIO_OFF=AddPictureItemFile(vd, radio_bttn);
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       AddPictureItemFile
   \   00000058   F40084E5           STR      R0,[R4, #+244]
    339              mfree(radio_bttn);
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   150000EF           SWI      +21
    340            }
    341            RawInsertChar(vd,checked?vd->WCHAR_RADIO_ON:vd->WCHAR_RADIO_OFF);
   \                     ??AddRadioButton_0:
   \   00000064   000055E3           CMP      R5,#+0
   \   00000068   F8109415           LDRNE    R1,[R4, #+248]
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   F4109405           LDREQ    R1,[R4, #+244]
   \   00000074   ........           BL       RawInsertChar
    342          }
   \   00000078   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??AddRadioButton_1:
   \   0000007C   ........           DC32     `?<Constant "$resources\\\\radio_bttn...">`
    343          

   \                                 In segment CODE, align 4, keep-with-next
    344          void AddCheckBoxItem(VIEWDATA *vd, int checked)
    345          {
   \                     AddCheckBoxItem:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    346            if (!vd->WCHAR_BUTTON_ON)
   \   00000008   F00094E5           LDR      R0,[R4, #+240]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1200001A           BNE      ??AddCheckBoxItem_0
    347            {
    348              char * button_clkd = getSymbolicPath("$resources\\button_clkd.png");
   \   00000018   5C609FE5           LDR      R6,??AddCheckBoxItem_1  ;; `?<Constant "$resources\\\\button_clk...">`
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000024   0070A0E1           MOV      R7,R0
    349              vd->WCHAR_BUTTON_ON=AddPictureItemFile(vd, button_clkd);
   \   00000028   0710A0E1           MOV      R1,R7
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       AddPictureItemFile
   \   00000034   F00084E5           STR      R0,[R4, #+240]
    350              mfree(button_clkd);
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   150000EF           SWI      +21
    351              char * button = getSymbolicPath("$resources\\button.png");
   \   00000040   1C0086E2           ADD      R0,R6,#+28
   \   00000044   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000048   0060A0E1           MOV      R6,R0
    352              vd->WCHAR_BUTTON_OFF=AddPictureItemFile(vd, button);
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       AddPictureItemFile
   \   00000058   EC0084E5           STR      R0,[R4, #+236]
    353              mfree(button);
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   150000EF           SWI      +21
    354            }
    355            RawInsertChar(vd,checked?vd->WCHAR_BUTTON_ON:vd->WCHAR_BUTTON_OFF);
   \                     ??AddCheckBoxItem_0:
   \   00000064   000055E3           CMP      R5,#+0
   \   00000068   F0109415           LDRNE    R1,[R4, #+240]
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   EC109405           LDREQ    R1,[R4, #+236]
   \   00000074   ........           BL       RawInsertChar
    356          }
   \   00000078   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??AddCheckBoxItem_1:
   \   0000007C   ........           DC32     `?<Constant "$resources\\\\button_clk...">`
    357          

   \                                 In segment CODE, align 4, keep-with-next
    358          void AddInputItem(VIEWDATA *vd, unsigned int pos)
    359          {
   \                     AddInputItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    360            if (!vd->WCHAR_TEXT_FORM)
   \   00000008   FC0094E5           LDR      R0,[R4, #+252]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0800001A           BNE      ??AddInputItem_0
    361            {
    362              char * text_form = getSymbolicPath("$resources\\text_form.png");
   \   00000018   94009FE5           LDR      R0,??AddInputItem_1  ;; `?<Constant "$resources\\\\text_form.png">`
   \   0000001C   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000020   0060A0E1           MOV      R6,R0
    363              vd->WCHAR_TEXT_FORM=AddPictureItemFile(vd, text_form);
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       AddPictureItemFile
   \   00000030   FC0084E5           STR      R0,[R4, #+252]
    364              mfree(text_form);
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   150000EF           SWI      +21
    365            }
    366            RawInsertChar(vd,vd->WCHAR_TEXT_FORM);
   \                     ??AddInputItem_0:
   \   0000003C   FC1094E5           LDR      R1,[R4, #+252]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       RawInsertChar
    367            WSHDR* saved_text = getUserTextByRefId(vd->work_ref.id);
   \   00000048   880094E5           LDR      R0,[R4, #+136]
   \   0000004C   ........           _BLF     getUserTextByRefId,??getUserTextByRefId??rA
   \   00000050   0060B0E1           MOVS     R6,R0
    368            if (saved_text)
   \   00000054   0500000A           BEQ      ??AddInputItem_2
    369            {
    370              vd->work_ref.data=(void *)AllocWS(wstrlen(saved_text));
   \   00000058   230100EF           SWI      +291
   \   0000005C   250100EF           SWI      +293
   \   00000060   940084E5           STR      R0,[R4, #+148]
    371              wstrcpy((WSHDR *)vd->work_ref.data, saved_text);
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   1F0100EF           SWI      +287
   \   0000006C   7080BDE8           POP      {R4-R6,PC}
    372            }
    373            else
    374            {
    375              int len=_rshort2(vd->oms+pos);
   \                     ??AddInputItem_2:
   \   00000070   3C0094E5           LDR      R0,[R4, #+60]
   \   00000074   000085E0           ADD      R0,R5,R0
   \   00000078   ........           _BLF     _rshort2,??_rshort2??rA
   \   0000007C   0060A0E1           MOV      R6,R0
    376              vd->work_ref.data=(void *)AllocWS(len);
   \   00000080   250100EF           SWI      +293
   \   00000084   940084E5           STR      R0,[R4, #+148]
    377              char *c=extract_omstr(vd,pos);
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     extract_omstr,??extract_omstr??rA
   \   00000094   0050A0E1           MOV      R5,R0
    378              oms2ws(((WSHDR *)vd->work_ref.data),c,len);
   \   00000098   940094E5           LDR      R0,[R4, #+148]
   \   0000009C   0620A0E1           MOV      R2,R6
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   ........           _BLF     oms2ws,??oms2ws??rA
    379              mfree(c);
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   150000EF           SWI      +21
    380            }
    381          }
   \   000000B0   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??AddInputItem_1:
   \   000000B4   ........           DC32     `?<Constant "$resources\\\\text_form.png">`
    382          

   \                                 In segment CODE, align 4, keep-with-next
    383          void AddButtonItem(VIEWDATA *vd, const char *text, int len)
    384          {
   \                     AddButtonItem:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0280A0E1           MOV      R8,R2
    385            int wchar=FIRST_UCS2_USER_BITMAP;
    386            IMGHDR *img;
    387            OMS_DYNPNGLIST *dpl;
    388            int cw = 0;
    389            vd->work_ref.data=(void *)AllocWS(len);
   \   00000010   0800A0E1           MOV      R0,R8
   \   00000014   250100EF           SWI      +293
   \   00000018   940084E5           STR      R0,[R4, #+148]
    390            oms2ws(((WSHDR *)vd->work_ref.data),text,len);
   \   0000001C   0820A0E1           MOV      R2,R8
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   ........           _BLF     oms2ws,??oms2ws??rA
    391            int datalen = ((WSHDR *)vd->work_ref.data)->wsbody[0];
   \   00000028   940094E5           LDR      R0,[R4, #+148]
   \   0000002C   E15CA0E3           MOV      R5,#+57600
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   0070A0E3           MOV      R7,#+0
   \   00000038   B060D0E1           LDRH     R6,[R0, #+0]
    392            for (int i = 1; i <= datalen; i++)
   \   0000003C   0180A0E3           MOV      R8,#+1
   \   00000040   010056E3           CMP      R6,#+1
   \   00000044   090000BA           BLT      ??AddButtonItem_0
    393              cw+=GetSymbolWidth(((WSHDR *)vd->work_ref.data)->wsbody[i],FONT_SMALL);
   \                     ??AddButtonItem_1:
   \   00000048   940094E5           LDR      R0,[R4, #+148]
   \   0000004C   0810A0E3           MOV      R1,#+8
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   880080E0           ADD      R0,R0,R8, LSL #+1
   \   00000058   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000005C   018088E2           ADD      R8,R8,#+1
   \   00000060   E10100EF           SWI      +481
   \   00000064   077080E0           ADD      R7,R0,R7
   \   00000068   080056E1           CMP      R6,R8
   \   0000006C   F5FFFFAA           BGE      ??AddButtonItem_1
    394            cw+=8;
   \                     ??AddButtonItem_0:
   \   00000070   087087E2           ADD      R7,R7,#+8
    395            if (cw > ScreenW() - MARGIN)
   \   00000074   888100EF           SWI      +33160
   \   00000078   040040E2           SUB      R0,R0,#+4
   \   0000007C   070050E1           CMP      R0,R7
   \   00000080   1A0000AA           BGE      ??AddButtonItem_2
   \   00000084   070000EA           B        ??AddButtonItem_3
    396            {
    397              while (cw > ScreenW() - MARGIN)
    398              {
    399                cw -= GetSymbolWidth(((WSHDR *)vd->work_ref.data)->wsbody[datalen--],FONT_SMALL);
   \                     ??AddButtonItem_4:
   \   00000088   940094E5           LDR      R0,[R4, #+148]
   \   0000008C   0810A0E3           MOV      R1,#+8
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   860080E0           ADD      R0,R0,R6, LSL #+1
   \   00000098   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000009C   0860A0E1           MOV      R6,R8
   \   000000A0   E10100EF           SWI      +481
   \   000000A4   007047E0           SUB      R7,R7,R0
    400              }
   \                     ??AddButtonItem_3:
   \   000000A8   018046E2           SUB      R8,R6,#+1
   \   000000AC   888100EF           SWI      +33160
   \   000000B0   040040E2           SUB      R0,R0,#+4
   \   000000B4   070050E1           CMP      R0,R7
   \   000000B8   F2FFFFBA           BLT      ??AddButtonItem_4
    401              ((WSHDR *)vd->work_ref.data)->wsbody[0] = datalen;
   \   000000BC   940094E5           LDR      R0,[R4, #+148]
   \   000000C0   001090E5           LDR      R1,[R0, #+0]
   \   000000C4   B060C1E1           STRH     R6,[R1, #+0]
    402              ((WSHDR *)vd->work_ref.data)->wsbody[datalen--] = 0x002E; // "."
   \   000000C8   002090E5           LDR      R2,[R0, #+0]
   \   000000CC   2E10A0E3           MOV      R1,#+46
   \   000000D0   862082E0           ADD      R2,R2,R6, LSL #+1
   \   000000D4   B010C2E1           STRH     R1,[R2, #+0]
    403              ((WSHDR *)vd->work_ref.data)->wsbody[datalen--] = 0x002E;
   \   000000D8   002090E5           LDR      R2,[R0, #+0]
   \   000000DC   882082E0           ADD      R2,R2,R8, LSL #+1
   \   000000E0   B010C2E1           STRH     R1,[R2, #+0]
    404              ((WSHDR *)vd->work_ref.data)->wsbody[datalen--] = 0x002E;
   \   000000E4   000090E5           LDR      R0,[R0, #+0]
   \   000000E8   880080E0           ADD      R0,R0,R8, LSL #+1
   \   000000EC   B21040E1           STRH     R1,[R0, #-2]
    405            }
    406            
    407            img=CreateButton(cw,GetFontYSIZE(FONT_SMALL)+6);
   \                     ??AddButtonItem_2:
   \   000000F0   0800A0E3           MOV      R0,#+8
   \   000000F4   C50100EF           SWI      +453
   \   000000F8   061080E2           ADD      R1,R0,#+6
   \   000000FC   0700A0E1           MOV      R0,R7
   \   00000100   ........           _BLF     CreateButton,??CreateButton??rA
   \   00000104   0010B0E1           MOVS     R1,R0
    408            if (img)
   \   00000108   0400000A           BEQ      ??AddButtonItem_5
    409            {
    410              dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
   \   0000010C   0020E0E3           MVN      R2,#+0
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           BL       AddToDPngQueue
    411              if (dpl)
   \   00000118   000050E3           CMP      R0,#+0
    412                wchar=dpl->w_char;
   \   0000011C   0C509015           LDRNE    R5,[R0, #+12]
    413            }
    414            RawInsertChar(vd,wchar);
   \                     ??AddButtonItem_5:
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   0510A0E1           MOV      R1,R5
   \   00000128   ........           BL       RawInsertChar
    415          }
   \   0000012C   F081BDE8           POP      {R4-R8,PC}       ;; return
    416          

   \                                 In segment CODE, align 4, keep-with-next
    417          void AddDropDownList(VIEWDATA *vd)
    418          {
   \                     AddDropDownList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    419            if (!vd->WCHAR_LIST_FORM)
   \   00000008   000194E5           LDR      R0,[R4, #+256]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0800001A           BNE      ??AddDropDownList_0
    420            {
    421              char * fname = getSymbolicPath("$resources\\list.png");
   \   00000014   3C009FE5           LDR      R0,??AddDropDownList_1  ;; `?<Constant "$resources\\\\list.png">`
   \   00000018   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   0000001C   0050A0E1           MOV      R5,R0
    422              vd->WCHAR_LIST_FORM=AddPictureItemFile(vd, fname);
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       AddPictureItemFile
   \   0000002C   000184E5           STR      R0,[R4, #+256]
    423              mfree(fname);
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   150000EF           SWI      +21
    424            }
    425            getUserListByRefId(vd->work_ref.id, &(vd->work_ref.value), &(vd->work_ref.id2));
   \                     ??AddDropDownList_0:
   \   00000038   880094E5           LDR      R0,[R4, #+136]
   \   0000003C   902084E2           ADD      R2,R4,#+144
   \   00000040   8C1084E2           ADD      R1,R4,#+140
   \   00000044   ........           _BLF     getUserListByRefId,??getUserListByRefId??rA
    426            RawInsertChar(vd,vd->WCHAR_LIST_FORM);
   \   00000048   001194E5           LDR      R1,[R4, #+256]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000054   ........           B        RawInsertChar    ;; tailcall
   \                     ??AddDropDownList_1:
   \   00000058   ........           DC32     `?<Constant "$resources\\\\list.png">`
    427          }

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0A00               DC8 "\012"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\radio_bttn...">`:
   \   00000000   247265736F75       DC8 "$resources\\radio_bttn_clkd.png"
   \              726365735C72
   \              6164696F5F62
   \              74746E5F636C
   \              6B642E706E67
   \              00          
   \   0000001F   00                 DC8 0
   \   00000020   247265736F75       DC8 "$resources\\radio_bttn.png"
   \              726365735C72
   \              6164696F5F62
   \              74746E2E706E
   \              6700        
   \   0000003A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\button_clk...">`:
   \   00000000   247265736F75       DC8 "$resources\\button_clkd.png"
   \              726365735C62
   \              7574746F6E5F
   \              636C6B642E70
   \              6E6700      
   \   0000001B   00                 DC8 0
   \   0000001C   247265736F75       DC8 "$resources\\button.png"
   \              726365735C62
   \              7574746F6E2E
   \              706E6700    
   \   00000032   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\text_form.png">`:
   \   00000000   247265736F75       DC8 "$resources\\text_form.png"
   \              726365735C74
   \              6578745F666F
   \              726D2E706E67
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\list.png">`:
   \   00000000   247265736F75       DC8 "$resources\\list.png"
   \              726365735C6C
   \              6973742E706E
   \              6700        

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     AddBeginRef             4
     AddBeginRefZ            4
     AddBrItem               4
     AddButtonItem          24
     AddCheckBoxItem        20
     AddDropDownList        12
     AddEndRef               8
     AddInputItem           16
     AddNewStyle             8
     AddPItem                4
     AddPictureItem         16
     AddPictureItemFile     60
     AddPictureItemFrame    20
     AddPictureItemHr       16
     AddPictureItemIndex     4
     AddPictureItemRGBA     12
     AddRadioButton         20
     AddTextItem            16
     AddToDPngQueue         28
     AddToRefCache           8
     FindOmsFrameBySize      0
     RawInsertChar          12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RawInsertChar                    80
     AddNewStyle                     320
     AddBeginRef                      20
     AddBeginRefZ                     20
     AddToRefCache                   112
     AddEndRef                        56
     AddTextItem                     148
     AddBrItem                        16
     AddPItem                         16
     AddPictureItemIndex              48
     AddToDPngQueue                  352
     AddPictureItem                   92
     AddPictureItemRGBA               84
     FindOmsFrameBySize               68
     AddPictureItemFrame             104
     AddPictureItemHr                116
     AddPictureItemFile              100
     AddRadioButton                  128
     AddCheckBoxItem                 128
     AddInputItem                    184
     AddButtonItem                   304
     AddDropDownList                  92
     ?<Constant "\n">                  2
     ?<Constant " ">                   2
     ?<Constant "$resources\\radio_bttn...">
                                      60
     ?<Constant "$resources\\button_clk...">
                                      52
     ?<Constant "$resources\\text_form.png">
                                      28
     ?<Constant "$resources\\list.png">
                                      20
      Others                         232

 
 2 820 bytes in segment CODE
   164 bytes in segment DATA_C
 
 2 588 bytes of CODE  memory (+ 232 bytes shared)
   164 bytes of CONST memory

Errors: none
Warnings: none

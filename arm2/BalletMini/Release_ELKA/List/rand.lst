##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    11/Oct/2010  13:00:04 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\BalletMini\rand.c                             #
#    Command line    =  C:\arm\BalletMini\rand.c -D NEWSGOLD -D ELKA -lC     #
#                       C:\arm\BalletMini\Release_ELKA\List\ -o              #
#                       C:\arm\BalletMini\Release_ELKA\Obj\ -s9 --no_unroll  #
#                       --no_inline --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "C:\arm2\Embedded Workbench 4.0   #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\" #
#    List file       =  C:\arm\BalletMini\Release_ELKA\List\rand.lst         #
#    Object file     =  C:\arm\BalletMini\Release_ELKA\Obj\rand.r79          #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\BalletMini\rand.c
      1          #define MULTIPLIER      0x015a4e35L
      2          #define INCREMENT       1
      3          
      4          
      5          typedef struct
      6          {
      7          	unsigned lo;
      8          	unsigned hi;
      9          } __seed_t;
     10          

   \                                 In segment DATA_I, align 4, align-sorted
     11          static  __seed_t  Seed = { 1, 0 };
   \                     Seed:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for Seed>`
     12          
     13          int mrand(void);
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          void msrand(unsigned seed)
     16          {
     17                  Seed.lo = seed;
   \                     msrand:
   \   00000000   ........           LDR      R1,??DataTable1  ;; Seed
   \   00000004   000081E5           STR      R0,[R1, #+0]
     18                  Seed.hi = 0;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   040081E5           STR      R0,[R1, #+4]
     19                  mrand();    // primes the seed by using the first number which
   \   00000010   ........           B        mrand            ;; tailcall
     20                             // is usually not as random as the subsequent numbers
     21                             // are.
     22          }
     23          
     24          
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          int mrand(void)
     27          {
     28                  Seed.lo = MULTIPLIER * Seed.lo + INCREMENT;
   \                     mrand:
   \   00000000   ........           LDR      R0,??DataTable1  ;; Seed
   \   00000004   18209FE5           LDR      R2,??mrand_0     ;; 0x15a4e35
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   920101E0           MUL      R1,R2,R1
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   001080E5           STR      R1,[R0, #+0]
     29                  return((int)(Seed.lo >> 16) & 0x7fff);
   \   00000018   8100A0E1           LSL      R0,R1,#+1
   \   0000001C   A008A0E1           LSR      R0,R0,#+17
   \   00000020   1EFF2FE1           BX       LR               ;; return
   \                     ??mrand_0:
   \   00000024   354E5A01           DC32     0x15a4e35
     30          }
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          int mrandom(int max)
     33          {
   \                     mrandom:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     34            return mrand()%(max+1);
   \   00000008   ........           BL       mrand
   \   0000000C   011084E2           ADD      R1,R4,#+1
   \   00000010   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000014   ........           _BF      ??div32_a,??rA??div32_a
     35          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     Seed

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Seed>`:
   \   00000000   010000000000       DC32 1, 0
   \              0000        

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     mrand        0
     mrandom      8
     msrand       4


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     Seed                       8
     msrand                    20
     mrand                     40
     mrandom                   24
     ??DataTable1               4
     ?<Initializer for Seed>    8
      Others                   36

 
 112 bytes in segment CODE
   8 bytes in segment DATA_I
   8 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 88 bytes of CODE  memory (+ 36 bytes shared)
  8 bytes of CONST memory
  8 bytes of DATA  memory

Errors: none
Warnings: none

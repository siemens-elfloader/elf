##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Mar/2011  00:09:04 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CfgEdit\keycodes.c                            #
#    Command line    =  C:\arm\CfgEdit\keycodes.c -D NEWSGOLD -lC            #
#                       C:\arm\CfgEdit\Release\List\ -o                      #
#                       C:\arm\CfgEdit\Release\Obj\ -s9 --no_unroll          #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\CfgEdit\Release\List\keycodes.lst             #
#    Object file     =  C:\arm\CfgEdit\Release\Obj\keycodes.r79              #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CfgEdit\keycodes.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          extern void ascii2ws(WSHDR *ws, const char *s);
      4          #define UTF16_FONT_SMALL_BOLD (0xE013)
      5          
      6          typedef struct
      7          {
      8            GUI gui;
      9            WSHDR *ws1;
     10            unsigned int keyscancode;
     11            unsigned int *keymodecode;
     12            char needexit;
     13          }KEY_GUI;
     14          
     15          extern const char *key_names[63];
     16          
     17          

   \                                 In segment DATA_Z, align 4, align-sorted
     18          char str[10];
     19          int code=0;
   \                     code:
   \   00000000                      DS8 4
   \                     `str`:
   \   00000004                      DS8 12

   \                                 In segment CODE, align 4, keep-with-next
     20          void OnReadraw_key(KEY_GUI *data)
     21          {
   \                     OnReadraw_key:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     22          
     23            char black[4]={0x00,0x00,0x00,0x64};
   \   00000004   04629FE5           LDR      R6,??OnReadraw_key_0+0x4  ;; `?<Constant {0, 0, 0, 100}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   001096E5           LDR      R1,[R6, #0]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   001080E5           STR      R1,[R0, #+0]
     24            char white[4]={0xFF,0xFF,0xFF,0x64};
   \   0000001C   F0119FE5           LDR      R1,??OnReadraw_key_0+0x8  ;; `?<Constant {255, 255, 255, 100}>`
   \   00000020   08008DE2           ADD      R0,SP,#+8
   \   00000024   002091E5           LDR      R2,[R1, #0]
     25            char transparent[4]={0x00,0x00,0x00,0x00};
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   002080E5           STR      R2,[R0, #+0]
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   001080E5           STR      R1,[R0, #+0]
     26          
     27            int scr_w=ScreenW();
   \   00000038   888100EF           SWI      +33160
   \   0000003C   0070A0E1           MOV      R7,R0
     28            int scr_h=ScreenH();
   \   00000040   898100EF           SWI      +33161
   \   00000044   0080A0E1           MOV      R8,R0
     29            int fsize=GetFontYSIZE(FONT_SMALL)+1;
   \   00000048   0B00A0E3           MOV      R0,#+11
   \   0000004C   C50100EF           SWI      +453
   \   00000050   015080E2           ADD      R5,R0,#+1
     30              DrawRectangle(0,YDISP,scr_w-1,scr_h-1,0,white,white);
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   013048E2           SUB      R3,R8,#+1
   \   00000064   012047E2           SUB      R2,R7,#+1
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   01002DE9           PUSH     {R0}
     31              ////////////////////////////////////////////////////////////////////////////
     32              // tridog, 05.08.09 ////////////////////////////////////////////////////////
     33              // Точим окошко выбора CFG_KEY на елках ////////////////////////////////////
     34              ////////////////////////////////////////////////////////////////////////////
     35              if(data->needexit)
     36              {
     37              //  wsprintf(data->ws1,"Нажмите <Enter> для подтверждения.\nНажмите  <Red> или <Left> для выхода.");
     38                ascii2ws(data->ws1,"Нажмите <Enter> для подтверждения.\nНажмите  <Red> или <Left> для выхода.");
     39                DrawString(data->ws1,3,YDISP + 1 + fsize,scr_w-4,YDISP + fsize*5,FONT_SMALL,1,black,transparent);
     40              }
     41              else
     42              {
     43              //  wsprintf(data->ws1,"Нажмите любую клавишу\nДлинный левый нав. для обнуления");
     44                ascii2ws(data->ws1,"Нажмите любую клавишу\nДлинный левый нав. для обнуления");
     45                
     46                DrawString(data->ws1,3,YDISP + 1 + fsize,scr_w-4,YDISP + fsize*5,FONT_SMALL,1,black,transparent);
     47              }   
     48              wsprintf(data->ws1,"HEX: %c%02X",UTF16_FONT_SMALL_BOLD,data->keyscancode);
   \   00000074   1390A0E3           MOV      R9,#+19
   \   00000078   E09C89E3           ORR      R9,R9,#0xE000
     49              DrawString(data->ws1,3,YDISP + 1 + fsize*7,scr_w-4,YDISP + fsize*8,FONT_SMALL,1,black,transparent);    
   \   0000007C   8581A0E1           LSL      R8,R5,#+3
   \   00000080   B40100EF           SWI      +436
   \   00000084   4000D4E5           LDRB     R0,[R4, #+64]
   \   00000088   0CD08DE2           ADD      SP,SP,#+12
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   340094E5           LDR      R0,[R4, #+52]
   \   00000094   04108612           ADDNE    R1,R6,#+4
   \   00000098   50108602           ADDEQ    R1,R6,#+80
   \   0000009C   ........           _BLF     ascii2ws,??ascii2ws??rA
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   043047E2           SUB      R3,R7,#+4
   \   000000AC   012085E2           ADD      R2,R5,#+1
   \   000000B0   0310A0E3           MOV      R1,#+3
   \   000000B4   04008DE2           ADD      R0,SP,#+4
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   047047E2           SUB      R7,R7,#+4
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   0B00A0E3           MOV      R0,#+11
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   050185E0           ADD      R0,R5,R5, LSL #+2
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   340094E5           LDR      R0,[R4, #+52]
   \   000000DC   4C0100EF           SWI      +332
   \   000000E0   14D08DE2           ADD      SP,SP,#+20
   \   000000E4   383094E5           LDR      R3,[R4, #+56]
   \   000000E8   340094E5           LDR      R0,[R4, #+52]
   \   000000EC   0920A0E1           MOV      R2,R9
   \   000000F0   881086E2           ADD      R1,R6,#+136
   \   000000F4   240100EF           SWI      +292
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   0730A0E1           MOV      R3,R7
   \   00000104   0310A0E3           MOV      R1,#+3
   \   00000108   04008DE2           ADD      R0,SP,#+4
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   0B00A0E3           MOV      R0,#+11
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   0800A0E1           MOV      R0,R8
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   850165E0           RSB      R0,R5,R5, LSL #+3
   \   0000012C   012080E2           ADD      R2,R0,#+1
   \   00000130   340094E5           LDR      R0,[R4, #+52]
   \   00000134   4C0100EF           SWI      +332
     50              wsprintf(data->ws1,"DEC: %c%u",UTF16_FONT_SMALL_BOLD,data->keyscancode);
   \   00000138   383094E5           LDR      R3,[R4, #+56]
   \   0000013C   340094E5           LDR      R0,[R4, #+52]
   \   00000140   0920A0E1           MOV      R2,R9
   \   00000144   941086E2           ADD      R1,R6,#+148
   \   00000148   240100EF           SWI      +292
     51              DrawString(data->ws1,3,YDISP + 1 + fsize*8,scr_w-4,YDISP + fsize*9,FONT_SMALL,1,black,transparent); 
   \   0000014C   18008DE2           ADD      R0,SP,#+24
   \   00000150   01002DE9           PUSH     {R0}
   \   00000154   856185E0           ADD      R6,R5,R5, LSL #+3
   \   00000158   012088E2           ADD      R2,R8,#+1
     52              sprintf(str,"%u",data->keyscancode);
   \   0000015C   B4809FE5           LDR      R8,??OnReadraw_key_0+0xC  ;; code
   \   00000160   18008DE2           ADD      R0,SP,#+24
   \   00000164   01002DE9           PUSH     {R0}
   \   00000168   0730A0E1           MOV      R3,R7
   \   0000016C   0310A0E3           MOV      R1,#+3
   \   00000170   0100A0E3           MOV      R0,#+1
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   0B00A0E3           MOV      R0,#+11
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   0600A0E1           MOV      R0,R6
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   340094E5           LDR      R0,[R4, #+52]
   \   0000018C   4C0100EF           SWI      +332
   \   00000190   28D08DE2           ADD      SP,SP,#+40
   \   00000194   382094E5           LDR      R2,[R4, #+56]
   \   00000198   1B1F8FE2           ADR      R1,??OnReadraw_key_0  ;; "%u"
   \   0000019C   040088E2           ADD      R0,R8,#+4
   \   000001A0   160000EF           SWI      +22
     53              code=StrToInt(str,0);
   \   000001A4   0010A0E3           MOV      R1,#+0
   \   000001A8   040088E2           ADD      R0,R8,#+4
   \   000001AC   540000EF           SWI      +84
     54              //wsprintf(data->ws1,"%c%s",UTF16_FONT_SMALL_BOLD,key_names[code]);
     55              ascii2ws(data->ws1,key_names[code]);
   \   000001B0   64109FE5           LDR      R1,??OnReadraw_key_0+0x10  ;; key_names
   \   000001B4   000088E5           STR      R0,[R8, #+0]
   \   000001B8   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   000001BC   340094E5           LDR      R0,[R4, #+52]
   \   000001C0   ........           _BLF     ascii2ws,??ascii2ws??rA
     56              DrawString(data->ws1,3,YDISP + 1 + fsize*9,scr_w-4,YDISP + fsize*10,FONT_SMALL,1,black,transparent); 
   \   000001C4   04008DE2           ADD      R0,SP,#+4
   \   000001C8   01002DE9           PUSH     {R0}
   \   000001CC   0730A0E1           MOV      R3,R7
   \   000001D0   012086E2           ADD      R2,R6,#+1
   \   000001D4   04008DE2           ADD      R0,SP,#+4
   \   000001D8   01002DE9           PUSH     {R0}
   \   000001DC   0100A0E3           MOV      R0,#+1
   \   000001E0   01002DE9           PUSH     {R0}
   \   000001E4   0B00A0E3           MOV      R0,#+11
   \   000001E8   01002DE9           PUSH     {R0}
   \   000001EC   0A00A0E3           MOV      R0,#+10
   \   000001F0   900501E0           MUL      R1,R0,R5
   \   000001F4   02002DE9           PUSH     {R1}
   \   000001F8   340094E5           LDR      R0,[R4, #+52]
   \   000001FC   0310A0E3           MOV      R1,#+3
   \   00000200   4C0100EF           SWI      +332
     57              ////////////////////////////////////////////////////////////////////////////
     58          }
   \   00000204   20D08DE2           ADD      SP,SP,#+32
   \   00000208   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??OnReadraw_key_0:
   \   0000020C   25750000           DC8      "%u",+0
   \   00000210   ........           DC32     `?<Constant {0, 0, 0, 100}>`
   \   00000214   ........           DC32     `?<Constant {255, 255, 255, 100}>`
   \   00000218   ........           DC32     code
   \   0000021C   ........           DC32     key_names
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          void OnCreate_key(KEY_GUI *data, void *(*malloc_adr)(int))
     61          {
   \                     OnCreate_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     62            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
     63            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
     64          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          void method2_key(KEY_GUI *data, void (*mfree_adr)(void *))
     67          {
   \                     method2_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     68            FreeWS(data->ws1);
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   290100EF           SWI      +297
     69            data->gui.state=0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     70          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     71          

   \                                 In segment CODE, align 4, keep-with-next
     72          void OnFocus_key(KEY_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     73          {
     74          #ifdef ELKA  
     75            DisableIconBar(1);
     76          #endif  
     77            data->gui.state=2;
   \                     OnFocus_key:
   \   00000000   0210A0E3           MOV      R1,#+2
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
     78          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          void method4_key(KEY_GUI *data, void (*mfree_adr)(void *))
     81          {
     82            if (data->gui.state!=2) return;
   \                     method4_key:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     83            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     84          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          int method5_key(KEY_GUI *data, GUI_MSG *msg)
     87          {
   \                     method5_key:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     88            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \   00000004   042091E5           LDR      R2,[R1, #+4]
   \   00000008   9530A0E3           MOV      R3,#+149
   \   0000000C   044092E5           LDR      R4,[R2, #+4]
   \   00000010   403F83E3           ORR      R3,R3,#0x100
   \   00000014   02C043E2           SUB      R12,R3,#+2
   \   00000018   0C0054E1           CMP      R4,R12
   \   0000001C   03005411           CMPNE    R4,R3
   \   00000020   1E00001A           BNE      ??method5_key_0
     89            {
     90              if(msg->gbsmsg->msg==LONG_PRESS&&msg->gbsmsg->submess==LEFT_BUTTON)
   \   00000024   045092E5           LDR      R5,[R2, #+4]
   \   00000028   0040A0E3           MOV      R4,#+0
   \   0000002C   030055E1           CMP      R5,R3
   \   00000030   08309205           LDREQ    R3,[R2, #+8]
   \   00000034   3D005303           CMPEQ    R3,#+61
     91              {
     92                data->keyscancode=0;
   \   00000038   38408005           STREQ    R4,[R0, #+56]
     93                DirectRedrawGUI();
   \   0000003C   1600000A           BEQ      ??method5_key_1
     94                
     95              }
     96              else
     97              {
     98              if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000040   0C0055E1           CMP      R5,R12
   \   00000044   1100001A           BNE      ??method5_key_2
     99              {
    100                if(data->needexit)
   \   00000048   4030D0E5           LDRB     R3,[R0, #+64]
   \   0000004C   000053E3           CMP      R3,#+0
   \   00000050   0C00000A           BEQ      ??method5_key_3
    101                {
    102                 switch(msg->gbsmsg->submess)
   \   00000054   082092E5           LDR      R2,[R2, #+8]
   \   00000058   012052E2           SUBS     R2,R2,#+1
   \   0000005C   0B205212           SUBSNE   R2,R2,#+11
   \   00000060   0400000A           BEQ      ??method5_key_4
   \   00000064   0E2052E2           SUBS     R2,R2,#+14
   \   00000068   0400001A           BNE      ??method5_key_5
    103                 {
    104                 case RED_BUTTON:
    105                 case LEFT_SOFT:
    106                   return (1);
    107                 case ENTER_BUTTON:
    108                   data->keymodecode[0] = data->keyscancode;
   \   0000006C   3C1090E5           LDR      R1,[R0, #+60]
   \   00000070   380090E5           LDR      R0,[R0, #+56]
   \   00000074   000081E5           STR      R0,[R1, #+0]
    109                   return(1);
   \                     ??method5_key_4:
   \   00000078   0100A0E3           MOV      R0,#+1
   \   0000007C   3080BDE8           POP      {R4,R5,PC}
    110                 }
    111                 data->needexit = 0;
   \                     ??method5_key_5:
   \   00000080   4040C0E5           STRB     R4,[R0, #+64]
   \   00000084   010000EA           B        ??method5_key_2
    112                } else
    113                data->needexit = 1;
   \                     ??method5_key_3:
   \   00000088   0120A0E3           MOV      R2,#+1
   \   0000008C   4020C0E5           STRB     R2,[R0, #+64]
    114              }
    115             
    116            data->keyscancode = msg->gbsmsg->submess;
   \                     ??method5_key_2:
   \   00000090   041091E5           LDR      R1,[R1, #+4]
   \   00000094   081091E5           LDR      R1,[R1, #+8]
   \   00000098   381080E5           STR      R1,[R0, #+56]
    117            DirectRedrawGUI();
   \                     ??method5_key_1:
   \   0000009C   3F0100EF           SWI      +319
    118              }
    119            }
    120            return(0);
   \                     ??method5_key_0:
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   3080BDE8           POP      {R4,R5,PC}       ;; return
    121          }
    122          

   \                                 In segment CODE, align 4, keep-with-next
    123          void method7_key(KEY_GUI *data, void (*mfree_adr)(void *))
    124          {
    125            extern void kill_data(void *p, void (*func_p)(void *));
    126            kill_data(data,mfree_adr);
   \                     method7_key:
   \   00000000   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
    127          }
    128          

   \                                 In segment CODE, align 4, keep-with-next
    129          int method8_key(void){return(0);}
   \                     method8_key:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    130          

   \                                 In segment CODE, align 4, keep-with-next
    131          int method9_key(void){return(0);}
   \                     method9_key:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    132          

   \                                 In segment DATA_C, align 4, align-sorted
    133          const void * const gui_methods_key[11]={
    134            (void *)OnReadraw_key,//Redraw
    135            (void *)OnCreate_key,	//Create
    136            (void *)method2_key,	//Close
    137            (void *)OnFocus_key,	//Focus
    138            (void *)method4_key,	//Unfocus
    139            (void *)method5_key,	//OnKey
    140            0,
    141            (void *)method7_key,	//Destroy
    142            (void *)method8_key,
    143            (void *)method9_key,
    144            0
    145          };
    146          
    147          const RECT Canvas_key={0,0,0,0};
   \                     Canvas_key:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods_key:
   \   00000008   ............       DC32 OnReadraw_key, OnCreate_key, method2_key, OnFocus_key, method4_key
   \              ............
   \              ............
   \              ....        
   \   0000001C   ........0000       DC32 method5_key, 0H, method7_key, method8_key, method9_key, 0H
   \              0000........
   \              ............
   \              ....00000000
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          void GetKeyCodes(void *key)
    150          {
   \                     GetKeyCodes:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    151            KEY_GUI *keygui=malloc(sizeof(KEY_GUI));
   \   00000008   4400A0E3           MOV      R0,#+68
   \   0000000C   140000EF           SWI      +20
   \   00000010   0040A0E1           MOV      R4,R0
    152            zeromem(keygui,sizeof(KEY_GUI));
   \   00000014   4410A0E3           MOV      R1,#+68
   \   00000018   1D0100EF           SWI      +285
    153            unsigned int *modekode=key;
    154              keygui->keymodecode=key;
   \   0000001C   3C5084E5           STR      R5,[R4, #+60]
    155              keygui->keyscancode=modekode[0];
   \   00000020   000095E5           LDR      R0,[R5, #+0]
    156              keygui->needexit=0;
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   380084E5           STR      R0,[R4, #+56]
   \   0000002C   4050C4E5           STRB     R5,[R4, #+64]
    157            patch_rect((RECT*)&Canvas_key,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   00000030   898100EF           SWI      +33161
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   888100EF           SWI      +33160
   \   0000003C   38209FE5           LDR      R2,??GetKeyCodes_0  ;; Canvas_key
   \   00000040   011046E2           SUB      R1,R6,#+1
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   005082E5           STR      R5,[R2, #+0]
   \   0000004C   B400C2E1           STRH     R0,[R2, #+4]
   \   00000050   B610C2E1           STRH     R1,[R2, #+6]
    158            keygui->gui.canvas=(void *)(&Canvas_key);
   \   00000054   002084E5           STR      R2,[R4, #+0]
    159            keygui->gui.flag30=2;
   \   00000058   0200A0E3           MOV      R0,#+2
   \   0000005C   300084E5           STR      R0,[R4, #+48]
    160            keygui->gui.methods=(void *)gui_methods_key;
   \   00000060   080082E2           ADD      R0,R2,#+8
   \   00000064   040084E5           STR      R0,[R4, #+4]
    161            keygui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000068   158000EF           SWI      +32789
   \   0000006C   200084E5           STR      R0,[R4, #+32]
    162            CreateGUI(keygui);
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   370100EF           SWI      +311
    163          }
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??GetKeyCodes_0:
   \   0000007C   ........           DC32     Canvas_key

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {0, 0, 0, 100}>`:
   \   00000000   00000064           DC8 0, 0, 0, 100
   \   00000004   CDE0E6ECE8F2       DC8 0CDH, 0E0H, 0E6H, 0ECH, 0E8H, 0F2H, 0E5H, 20H
   \              E520        
   \   0000000C   3C456E746572       DC8 3CH, 45H, 6EH, 74H, 65H, 72H, 3EH, 20H
   \              3E20        
   \   00000014   E4EBFF20EFEE       DC8 0E4H, 0EBH, 0FFH, 20H, 0EFH, 0EEH, 0E4H, 0F2H
   \              E4F2        
   \   0000001C   E2E5F0E6E4E5       DC8 0E2H, 0E5H, 0F0H, 0E6H, 0E4H, 0E5H, 0EDH, 0E8H
   \              EDE8        
   \   00000024   FF2E0ACDE0E6       DC8 0FFH, 2EH, 0AH, 0CDH, 0E0H, 0E6H, 0ECH, 0E8H
   \              ECE8        
   \   0000002C   F2E520203C52       DC8 0F2H, 0E5H, 20H, 20H, 3CH, 52H, 65H, 64H
   \              6564        
   \   00000034   3E20E8EBE820       DC8 3EH, 20H, 0E8H, 0EBH, 0E8H, 20H, 3CH, 4CH
   \              3C4C        
   \   0000003C   6566743E20E4       DC8 65H, 66H, 74H, 3EH, 20H, 0E4H, 0EBH, 0FFH
   \              EBFF        
   \   00000044   20E2FBF5EEE4       DC8 20H, 0E2H, 0FBH, 0F5H, 0EEH, 0E4H, 0E0H, 2EH
   \              E02E        
   \   0000004C   00                 DC8 0
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   CDE0E6ECE8F2       DC8 0CDH, 0E0H, 0E6H, 0ECH, 0E8H, 0F2H, 0E5H, 20H
   \              E520        
   \   00000058   EBFEE1F3FE20       DC8 0EBH, 0FEH, 0E1H, 0F3H, 0FEH, 20H, 0EAH, 0EBH
   \              EAEB        
   \   00000060   E0E2E8F8F30A       DC8 0E0H, 0E2H, 0E8H, 0F8H, 0F3H, 0AH, 0C4H, 0EBH
   \              C4EB        
   \   00000068   E8EDEDFBE920       DC8 0E8H, 0EDH, 0EDH, 0FBH, 0E9H, 20H, 0EBH, 0E5H
   \              EBE5        
   \   00000070   E2FBE920EDE0       DC8 0E2H, 0FBH, 0E9H, 20H, 0EDH, 0E0H, 0E2H, 2EH
   \              E22E        
   \   00000078   20E4EBFF20EE       DC8 20H, 0E4H, 0EBH, 0FFH, 20H, 0EEH, 0E1H, 0EDH
   \              E1ED        
   \   00000080   F3EBE5EDE8FF       DC8 0F3H, 0EBH, 0E5H, 0EDH, 0E8H, 0FFH, 0
   \              00          
   \   00000087   00                 DC8 0
   \   00000088   4845583A2025       DC8 "HEX: %c%02X"
   \              632530325800
   \   00000094   4445433A2025       DC8 "DEC: %c%u"
   \              63257500    
   \   0000009E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {255, 255, 255, 100}>`:
   \   00000000   FFFFFF64           DC8 255, 255, 255, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00000000           DC8 0, 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257500             DC8 "%u"
    164          

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     GetKeyCodes      16
     OnCreate_key      8
     OnFocus_key       0
     OnReadraw_key    80
     method2_key       8
     method4_key       0
     method5_key      12
     method7_key       4
     method8_key       0
     method9_key       0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     code                             16
     OnReadraw_key                   544
     OnCreate_key                     32
     method2_key                      28
     OnFocus_key                      12
     method4_key                      20
     method5_key                     168
     method7_key                       4
     method8_key                       8
     method9_key                       8
     Canvas_key                       52
     GetKeyCodes                     128
     ?<Constant {0, 0, 0, 100}>      160
     ?<Constant {255, 255, 255, 100}>
                                       4
     ?<Constant {0, 0, 0, 0}>          4
     ?<Constant "%u">                  3
      Others                          76

 
 1 016 bytes in segment CODE
   223 bytes in segment DATA_C
    16 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 952 bytes of CODE  memory (+ 76 bytes shared)
 223 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    28/Sep/2010  15:46:41 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CfgEdit\main.c                                #
#    Command line    =  C:\arm\CfgEdit\main.c -D NDEBUG -lC                  #
#                       C:\arm\CfgEdit\Release_SGOLD\List\ -o                #
#                       C:\arm\CfgEdit\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\CfgEdit\Release_SGOLD\List\main.lst           #
#    Object file     =  C:\arm\CfgEdit\Release_SGOLD\Obj\main.r79            #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CfgEdit\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "rect_patcher.h"
      4          #include <errno.h>
      5          
      6          extern long  strtol (const char *nptr,char **endptr,int base);
      7          extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
      8          
      9          void GetKeyCodes(void *key);
     10          void EditCoordinates(void *rect_or_xy, int is_rect);
     11          extern void EditColors(char *color);
     12          
     13          #ifdef NEWSGOLD
     14          #define CBOX_CHECKED 0xE116
     15          #define CBOX_UNCHECKED 0xE117
     16          #else
     17          #define CBOX_CHECKED 0xE10B
     18          #define CBOX_UNCHECKED 0xE10C
     19          #endif
     20          
     21          #ifdef ELKA
     22          const char* key_names[63]=    {"Пусто","Левый софт",NULL,NULL,"Правый софт",NULL,NULL,NULL,NULL,NULL,NULL,"Кнопка вызова","Красная кнопка","Громкость +","Громкость -",NULL,NULL,"Медиа",NULL,NULL,NULL,"Poc.",NULL,NULL,NULL,NULL,"Enter",NULL,NULL,NULL,"Плей",NULL,NULL,NULL,NULL,"#",NULL,NULL,NULL,"PTT",NULL,NULL,"*",NULL,NULL,NULL,NULL,NULL,"0","1","2","3","4","5","6","7","8","9",NULL,"Нав. вверх","Нав. вниз","Нав. влево","Нав. вправо"};
     23          #else
     24          #ifdef NEWSGOLD 
     25          const char* key_names[63]={"Пусто","Левый софт",NULL,NULL,"Правый софт",NULL,NULL,NULL,NULL,NULL,NULL,"Кнопка вызова","Красная кнопка","Громкость +","Громкость -",NULL,NULL,"Интернет",NULL,NULL,"Камера","Плей",NULL,NULL,NULL,NULL,"Enter",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,"#",NULL,NULL,NULL,"PTT",NULL,NULL,"*",NULL,NULL,NULL,NULL,NULL,"0","1","2","3","4","5","6","7","8","9",NULL,"Нав. вверх","Нав. вниз","Нав. влево","Нав. вправо"};
     26          #else
     27          #ifdef X75
     28          const char* key_names[63]={"Пусто","Левый софт",NULL,NULL,"Правый софт",NULL,NULL,NULL,NULL,NULL,NULL,"Кнопка вызова","Красная кнопка","Громкость +","Громкость -",NULL,NULL,"Интернет",NULL,NULL,"Громкость +","Громкость -",NULL,NULL,NULL,NULL,"Enter",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,"#",NULL,NULL,NULL,"PTT",NULL,NULL,"*",NULL,NULL,NULL,NULL,NULL,"0","1","2","3","4","5","6","7","8","9",NULL,"Нав. вверх","Нав. вниз","Нав. влево","Нав. вправо"};
     29          #else
     30          const char* key_names[63]={"Пусто","Левый софт",NULL,NULL,"Правый софт",NULL,NULL,NULL,NULL,NULL,NULL,"Кнопка вызова","Красная кнопка","Громкость +","Громкость -",NULL,NULL,"Интернет",NULL,NULL,"Камера","Плей",NULL,NULL,NULL,NULL,"Enter",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,"#",NULL,NULL,NULL,"PTT",NULL,NULL,"*",NULL,NULL,NULL,NULL,NULL,"0","1","2","3","4","5","6","7","8","9",NULL,"Нав. вверх","Нав. вниз","Нав. влево","Нав. вправо"};
     31          #endif
     32          #endif
     33          #endif
     34          
     35          
     36          
     37          unsigned int level=0;
     38          CFG_HDR *levelstack[16];
     39          
     40          int icon[]={0x58,0};

   \                                 In segment DATA_C, align 4, align-sorted
     41          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     42          
     43          char cfg_name[256];
     44          
     45          //Указатель на буфер конфигурации
     46          char *cfg;
     47          //Длинна файла конфигурации
     48          int size_cfg;
     49          
     50          CFG_HDR *cfg_h[512];
     51          int total_items;
     52          
     53          SOFTKEY_DESC menu_sk[]=
     54          {
     55            {0x0018,0x0000,(int)"Лев"},
     56            {0x0001,0x0000,(int)"Прав"},
     57            {0x003D,0x0000,(int)"+"}
     58          };
     59          
     60          SOFTKEYSTAB menu_skt=
     61          {
     62            menu_sk,0
     63          };
     64          
     65          WSHDR *ews;
     66          
     67          typedef struct
     68          {
     69            CSM_RAM csm;
     70            int gui_id;
     71            int sel_bcfg_id;
     72          }MAIN_CSM;
     73          
     74          int maincsm_id;
     75          
     76          const char _percent_u[]="%u";
     77          const char _percent_d[]="%d";
     78          const char _percent_t[]="%t";
     79          
     80          const char _mmc_etc_path[]="4:\\Zbin\\etc\\";
     81          const char _data_etc_path[]="0:\\Zbin\\etc\\";
     82          
     83          int create_ed(CFG_HDR *);
     84          unsigned int char16to8(unsigned int c);
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          void ed1_locret(void){}
   \                     ed1_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     87          
     88          extern void open_select_file_gui(void *ed_gui, int type);
     89          
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          int IsFieldCorrect(void *data, int ec_index)
     92          {
   \                     IsFieldCorrect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
     93            EDITCONTROL ec;
     94            char ss[16];
     95            WSHDR *ws1;
     96            CFG_HDR *hp;
     97            int n; //Индекс элемента в массиве cfg_h
     98            int result=0;
   \   00000010   0050A0E3           MOV      R5,#+0
     99            int err;
    100            unsigned int vui;
    101            int vi;
    102            ExtractEditControl(data,ec_index,&ec);
   \   00000014   10208DE2           ADD      R2,SP,#+16
   \   00000018   690100EF           SWI      +361
    103            if ((ec_index>1)&&(ec_index&1))
   \   0000001C   020057E3           CMP      R7,#+2
   \   00000020   630000BA           BLT      ??IsFieldCorrect_0
   \   00000024   010017E3           TST      R7,#0x1
   \   00000028   6100000A           BEQ      ??IsFieldCorrect_0
    104            {
    105              ws1=AllocWS(ec.pWS->maxlen);
   \   0000002C   38009DE5           LDR      R0,[SP, #+56]
    106              n=(ec_index-3)>>1; 
    107              hp=cfg_h[n];
    108              wstrcpy(ws1,ec.pWS);
    109              ws_2str(ws1,ss,15);
    110              *_Geterrno()=0;
    111              switch(hp->type)
   \   00000030   ........           LDR      R10,??DataTable0  ;; _percent_u
   \   00000034   B001D0E1           LDRH     R0,[R0, #+16]
   \   00000038   250100EF           SWI      +293
   \   0000003C   ........           LDR      R1,??DataTable17  ;; ed1_desc
   \   00000040   0040A0E1           MOV      R4,R0
   \   00000044   030047E2           SUB      R0,R7,#+3
   \   00000048   C000A0E1           ASR      R0,R0,#+1
   \   0000004C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000050   A89190E5           LDR      R9,[R0, #+424]
   \   00000054   38109DE5           LDR      R1,[SP, #+56]
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   1F0100EF           SWI      +287
   \   00000060   0F20A0E3           MOV      R2,#+15
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   A30000EF           SWI      +163
   \   00000070   ........           _BLF     _Geterrno,??_Geterrno??rA
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   001080E5           STR      R1,[R0, #+0]
   \   0000007C   000099E5           LDR      R0,[R9, #+0]
   \   00000080   010050E2           SUBS     R0,R0,#+1
   \   00000084   0200000A           BEQ      ??IsFieldCorrect_1
   \   00000088   020050E2           SUBS     R0,R0,#+2
   \   0000008C   1C00000A           BEQ      ??IsFieldCorrect_2
   \   00000090   450000EA           B        ??IsFieldCorrect_3
    112              {
    113              case CFG_UINT:
    114                vui=strtoul(ss,0,10);
   \                     ??IsFieldCorrect_1:
   \   00000094   0A20A0E3           MOV      R2,#+10
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           _BLF     strtoul,??strtoul??rA
   \   000000A0   00B0A0E1           MOV      R11,R0
    115                if (vui<hp->min || vui>hp->max || !ws1->wsbody[0] || (err=*_Geterrno())==ERANGE)
   \   000000A4   240099E5           LDR      R0,[R9, #+36]
   \   000000A8   00005BE1           CMP      R11,R0
   \   000000AC   28009925           LDRCS    R0,[R9, #+40]
   \   000000B0   0B005021           CMPCS    R0,R11
   \   000000B4   0700003A           BCC      ??IsFieldCorrect_4
   \   000000B8   000094E5           LDR      R0,[R4, #+0]
   \   000000BC   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300000A           BEQ      ??IsFieldCorrect_4
   \   000000C8   ........           _BLF     _Geterrno,??_Geterrno??rA
   \   000000CC   008090E5           LDR      R8,[R0, #+0]
   \   000000D0   220058E3           CMP      R8,#+34
   \   000000D4   3400001A           BNE      ??IsFieldCorrect_3
    116                {
    117                  if (vui<hp->min) {vui=hp->min; result=-1;}
   \                     ??IsFieldCorrect_4:
   \   000000D8   240099E5           LDR      R0,[R9, #+36]
    118                  if (vui>hp->max) {vui=hp->max; result=1;}
    119                  if (!ws1->wsbody[0]) {vui=hp->min; result=-1;}
    120                  if (err==ERANGE) {vui=hp->max; result=1;}
    121                  *((unsigned int *)(hp+1))=vui;
    122                  wsprintf(ws1,_percent_u,vui);
   \   000000DC   0A10A0E1           MOV      R1,R10
   \   000000E0   00005BE1           CMP      R11,R0
   \   000000E4   00B0A031           MOVCC    R11,R0
   \   000000E8   280099E5           LDR      R0,[R9, #+40]
   \   000000EC   0550E031           MVNCC    R5,R5
   \   000000F0   0B0050E1           CMP      R0,R11
   \   000000F4   00B0A031           MOVCC    R11,R0
   \   000000F8   000094E5           LDR      R0,[R4, #+0]
   \   000000FC   0150A033           MOVCC    R5,#+1
   \   00000100   1A0000EA           B        ??IsFieldCorrect_5
    123                  EDIT_SetTextToEditControl(data,ec_index,ws1);
    124                }
    125                break;
    126                
    127              case CFG_INT:
    128                vi=strtol(ss,0,10);
   \                     ??IsFieldCorrect_2:
   \   00000104   0A20A0E3           MOV      R2,#+10
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   ........           _BLF     strtol,??strtol??rA
   \   00000110   00B0A0E1           MOV      R11,R0
    129                if (vi<(int)hp->min || vi>(int)hp->max || !ws1->wsbody[0] || (err=*_Geterrno())==ERANGE)
   \   00000114   240099E5           LDR      R0,[R9, #+36]
   \   00000118   00005BE1           CMP      R11,R0
   \   0000011C   280099A5           LDRGE    R0,[R9, #+40]
   \   00000120   0B0050A1           CMPGE    R0,R11
   \   00000124   070000BA           BLT      ??IsFieldCorrect_6
   \   00000128   000094E5           LDR      R0,[R4, #+0]
   \   0000012C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0300000A           BEQ      ??IsFieldCorrect_6
   \   00000138   ........           _BLF     _Geterrno,??_Geterrno??rA
   \   0000013C   008090E5           LDR      R8,[R0, #+0]
   \   00000140   220058E3           CMP      R8,#+34
   \   00000144   1800001A           BNE      ??IsFieldCorrect_3
    130                {
    131                  if (vi<(int)hp->min) {vi=(int)hp->min; result=-1;}
   \                     ??IsFieldCorrect_6:
   \   00000148   240099E5           LDR      R0,[R9, #+36]
    132                  if (vi>(int)hp->max) {vi=(int)hp->max; result=1;}
    133                  if (!ws1->wsbody[0]) {vi=(int)hp->min; result=-1;}
    134                  if (err==ERANGE) {vi=(int)hp->max; result=1;}
    135                  *((int *)(hp+1))=vi;
    136                  wsprintf(ws1,_percent_d,vi);
   \   0000014C   03108AE2           ADD      R1,R10,#+3
   \   00000150   00005BE1           CMP      R11,R0
   \   00000154   00B0A0B1           MOVLT    R11,R0
   \   00000158   280099E5           LDR      R0,[R9, #+40]
   \   0000015C   0550E0B1           MVNLT    R5,R5
   \   00000160   0B0050E1           CMP      R0,R11
   \   00000164   00B0A0B1           MOVLT    R11,R0
   \   00000168   000094E5           LDR      R0,[R4, #+0]
   \   0000016C   0150A0B3           MOVLT    R5,#+1
   \                     ??IsFieldCorrect_5:
   \   00000170   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   24B09905           LDREQ    R11,[R9, #+36]
   \   0000017C   0050E003           MVNEQ    R5,#+0
   \   00000180   220058E3           CMP      R8,#+34
   \   00000184   28B09905           LDREQ    R11,[R9, #+40]
   \   00000188   0150A003           MOVEQ    R5,#+1
   \   0000018C   2CB089E5           STR      R11,[R9, #+44]
   \   00000190   0B20A0E1           MOV      R2,R11
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   240100EF           SWI      +292
    137                  EDIT_SetTextToEditControl(data,ec_index,ws1);
   \   0000019C   0420A0E1           MOV      R2,R4
   \   000001A0   0710A0E1           MOV      R1,R7
   \   000001A4   0600A0E1           MOV      R0,R6
   \   000001A8   DE0100EF           SWI      +478
    138                }
    139                break;
    140              }
    141              FreeWS(ws1);
   \                     ??IsFieldCorrect_3:
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   290100EF           SWI      +297
    142            }
    143            return result;
   \                     ??IsFieldCorrect_0:
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   3CD08DE2           ADD      SP,SP,#+60
   \   000001BC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    144          }
    145          

   \                                 In segment CODE, align 4, keep-with-next
    146          void on_utf8ec(USR_MENU_ITEM *item)
    147          {
   \                     on_utf8ec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    148            if (item->type==0)
   \   00000008   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0C00001A           BNE      ??on_utf8ec_0
    149            {
    150              switch(item->cur_item)
   \   00000014   B820D4E1           LDRH     R2,[R4, #+8]
   \   00000018   0C0094E5           LDR      R0,[R4, #+12]
   \   0000001C   ........           LDR      R1,??DataTable19  ;; _percent_u
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   0200000A           BEQ      ??on_utf8ec_1
   \   00000028   012052E2           SUBS     R2,R2,#+1
   \   0000002C   0200000A           BEQ      ??on_utf8ec_2
   \   00000030   040000EA           B        ??on_utf8ec_0
    151              {
    152              case 0:
    153                wsprintf(item->ws,_percent_t,"Выберите папку");
   \                     ??on_utf8ec_1:
   \   00000034   0C2081E2           ADD      R2,R1,#+12
   \   00000038   000000EA           B        ??on_utf8ec_3
    154                break;
    155              case 1:
    156                wsprintf(item->ws,_percent_t,"Выберите файл");
   \                     ??on_utf8ec_2:
   \   0000003C   1C2081E2           ADD      R2,R1,#+28
   \                     ??on_utf8ec_3:
   \   00000040   061081E2           ADD      R1,R1,#+6
   \   00000044   240100EF           SWI      +292
    157                break;
    158              }
    159            }
    160            if (item->type==1)
   \                     ??on_utf8ec_0:
   \   00000048   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000004C   010050E3           CMP      R0,#+1
   \   00000050   1080BD18           POPNE    {R4,PC}
    161            {
    162              switch(item->cur_item)
   \   00000054   B810D4E1           LDRH     R1,[R4, #+8]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   000051E3           CMP      R1,#+0
   \   00000060   0300000A           BEQ      ??on_utf8ec_4
   \   00000064   011051E2           SUBS     R1,R1,#+1
   \   00000068   0000000A           BEQ      ??on_utf8ec_5
   \   0000006C   1080BDE8           POP      {R4,PC}
    163              {
    164              case 0:
    165                open_select_file_gui(item->user_pointer, 0);
    166                break;
    167              case 1:
    168                open_select_file_gui(item->user_pointer, 1);
   \                     ??on_utf8ec_5:
   \   00000070   0110A0E3           MOV      R1,#+1
   \                     ??on_utf8ec_4:
   \   00000074   ........           _BLF     open_select_file_gui,??open_select_file_gui??rA
    169                break;
    170              }
    171            }   
    172          }
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return
    173          

   \                                 In segment CODE, align 4, keep-with-next
    174          int ed1_onkey(GUI *data, GUI_MSG *msg)
    175          {
   \                     ed1_onkey:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    176            CFG_HDR *hp;
    177            int l;
    178            int i;
    179            int n;
    180            if (msg->keys==0xFFF)  // OK
   \   00000004   FF20A0E3           MOV      R2,#+255
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000010   F02E82E3           ORR      R2,R2,#0xF00
   \   00000014   020050E1           CMP      R0,R2
   \   00000018   3F00000A           BEQ      ??ed1_onkey_1
    181            {
    182              return (1);    
    183            }
    184            if (msg->keys==0xFFE)  // Back
   \   0000001C   0120C2E3           BIC      R2,R2,#0x1
   \   00000020   020050E1           CMP      R0,R2
    185            {
    186              return (0xFF);
   \   00000024   FF00A003           MOVEQ    R0,#+255
   \   00000028   3080BD08           POPEQ    {R4,R5,PC}
    187            }
    188            if (msg->gbsmsg->msg==KEY_DOWN)
   \   0000002C   040091E5           LDR      R0,[R1, #+4]
   \   00000030   9320A0E3           MOV      R2,#+147
   \   00000034   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000038   402F82E3           ORR      R2,R2,#0x100
   \   0000003C   020051E1           CMP      R1,R2
   \   00000040   3F00001A           BNE      ??ed1_onkey_2
    189            {
    190              l=msg->gbsmsg->submess;
   \   00000044   045090E5           LDR      R5,[R0, #+4]
    191              i=EDIT_GetFocus(data);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   820100EF           SWI      +386
    192              if ((i>1)&&(i&1))
   \   00000050   020050E3           CMP      R0,#+2
   \   00000054   3A0000BA           BLT      ??ed1_onkey_2
   \   00000058   010010E3           TST      R0,#0x1
   \   0000005C   3800000A           BEQ      ??ed1_onkey_2
    193              {
    194                n=(i-3)>>1; //Индекс элемента в массиве cfg_h
    195                hp=cfg_h[n];
   \   00000060   ........           LDR      R1,??DataTable17  ;; ed1_desc
   \   00000064   030040E2           SUB      R0,R0,#+3
   \   00000068   C000A0E1           ASR      R0,R0,#+1
   \   0000006C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000070   A80190E5           LDR      R0,[R0, #+424]
    196                if (l==LEFT_SOFT||l==ENTER_BUTTON)
   \   00000074   010055E3           CMP      R5,#+1
   \   00000078   1A005513           CMPNE    R5,#+26
   \   0000007C   3000001A           BNE      ??ed1_onkey_2
    197                {
    198                  if (l==ENTER_BUTTON)
   \   00000080   1A0055E3           CMP      R5,#+26
    199                  {
    200                    if (hp->type==CFG_STR_UTF8)
   \   00000084   00209005           LDREQ    R2,[R0, #+0]
   \   00000088   02005203           CMPEQ    R2,#+2
   \   0000008C   0500001A           BNE      ??ed1_onkey_3
    201                    {
    202                      EDIT_OpenOptionMenuWithUserItems(data,on_utf8ec,data,2);
   \   00000090   B4109FE5           LDR      R1,??ed1_onkey_4  ;; on_utf8ec
   \   00000094   0230A0E3           MOV      R3,#+2
   \   00000098   0420A0E1           MOV      R2,R4
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   E50100EF           SWI      +485
    203                      return (-1);
   \   000000A4   100000EA           B        ??ed1_onkey_5
    204                    }
    205                  }
    206                  switch(hp->type)
   \                     ??ed1_onkey_3:
   \   000000A8   002090E5           LDR      R2,[R0, #+0]
   \   000000AC   072042E2           SUB      R2,R2,#+7
   \   000000B0   0A0052E3           CMP      R2,#+10
   \   000000B4   2200008A           BHI      ??ed1_onkey_2
   \   000000B8   013F8FE2           ADR      R3,??ed1_onkey_0
   \   000000BC   0230D3E7           LDRB     R3,[R3, R2]
   \   000000C0   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??ed1_onkey_0:
   \   000000C4   02070E1F           DC8      +2,+7,+14,+31
   \   000000C8   171F1F1D           DC8      +23,+31,+31,+29
   \   000000CC   1F1F0B00           DC8      +31,+31,+11,+0
    207                  {
    208                  case CFG_COORDINATES:
    209                    EditCoordinates((unsigned int *)(hp+1),0);
   \                     ??ed1_onkey_6:
   \   000000D0   0010A0E3           MOV      R1,#+0
   \                     ??ed1_onkey_7:
   \   000000D4   2C0080E2           ADD      R0,R0,#+44
   \   000000D8   ........           _BLF     EditCoordinates,??EditCoordinates??rA
    210                    break;
    211                  case CFG_COLOR:
    212                    EditColors((char *)(hp+1));
    213                    break;
    214                  case CFG_KEYCODE:
    215                    GetKeyCodes((unsigned int *)(hp+1));
    216                    break;
    217          	case CFG_LEVEL:
    218          	  level++;
    219          	  levelstack[level]=hp;
    220          	  level++;
    221          	  return 1;
    222                  case CFG_CHECKBOX:
    223                    *((int *)(hp+1))=!*((int *)(hp+1));
    224                    break;
    225                  case CFG_RECT:
    226                    EditCoordinates((unsigned int *)(hp+1),1);
    227                    break;
    228                    
    229                  default:
    230                    return(0);
    231                  }
    232                  return (-1);
   \   000000DC   0000E0E3           MVN      R0,#+0
   \   000000E0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??ed1_onkey_8:
   \   000000E4   2C0080E2           ADD      R0,R0,#+44
   \   000000E8   ........           _BLF     EditColors,??EditColors??rA
   \                     ??ed1_onkey_5:
   \   000000EC   0000E0E3           MVN      R0,#+0
   \   000000F0   3080BDE8           POP      {R4,R5,PC}
   \                     ??ed1_onkey_9:
   \   000000F4   2C0080E2           ADD      R0,R0,#+44
   \   000000F8   ........           _BLF     GetKeyCodes,??GetKeyCodes??rA
   \   000000FC   FAFFFFEA           B        ??ed1_onkey_5
   \                     ??ed1_onkey_10:
   \   00000100   5C2191E5           LDR      R2,[R1, #+348]
   \   00000104   012082E2           ADD      R2,R2,#+1
   \   00000108   5C2181E5           STR      R2,[R1, #+348]
   \   0000010C   023181E0           ADD      R3,R1,R2, LSL #+2
   \   00000110   600183E5           STR      R0,[R3, #+352]
   \   00000114   010082E2           ADD      R0,R2,#+1
   \   00000118   5C0181E5           STR      R0,[R1, #+348]
   \                     ??ed1_onkey_1:
   \   0000011C   0100A0E3           MOV      R0,#+1
   \   00000120   3080BDE8           POP      {R4,R5,PC}
   \                     ??ed1_onkey_11:
   \   00000124   2C1090E5           LDR      R1,[R0, #+44]
   \   00000128   000051E3           CMP      R1,#+0
   \   0000012C   0110A003           MOVEQ    R1,#+1
   \   00000130   0010A013           MOVNE    R1,#+0
   \   00000134   2C1080E5           STR      R1,[R0, #+44]
   \   00000138   EBFFFFEA           B        ??ed1_onkey_5
   \                     ??ed1_onkey_12:
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   E3FFFFEA           B        ??ed1_onkey_7
   \                     ??ed1_onkey_2:
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   3080BDE8           POP      {R4,R5,PC}
   \                     ??ed1_onkey_4:
   \   0000014C   ........           DC32     on_utf8ec
    233                }
    234              }
    235            }
    236            return(0); //Do standart keys
    237            //1: close
    238          }
    239          
    240          extern char str[128];
    241          extern int code;

   \                                 In segment CODE, align 4, keep-with-next
    242          void ed1_ghook(GUI *data, int cmd)
    243          {
   \                     ed1_ghook:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   50D04DE2           SUB      SP,SP,#+80
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0180A0E1           MOV      R8,R1
    244            static SOFTKEY_DESC ok={0x0FFF,0x0000,(int)"Ок"};
    245            static SOFTKEY_DESC back={0x0FFE,0x0000,(int)"Назад"};
    246            static SOFTKEY_DESC close={0x0FFE,0x0000,(int)"Закрыть"};
    247            EDITCONTROL ec;
    248            int i;
    249            int n;
    250            int j;
    251            int vi;
    252            int utf8conv_res_len;
    253            unsigned int vui;
    254            char ss[16];
    255            char *p;
    256            TTime tt;
    257            TDate dd;
    258          
    259            CFG_HDR *hp;
    260            
    261            if (cmd==TI_CMD_CREATE)
   \   00000010   020058E3           CMP      R8,#+2
   \   00000014   0400001A           BNE      ??ed1_ghook_1
    262            {
    263              //Create
    264              int need_to_jump=(int)EDIT_GetUserPointer(data);
   \   00000018   DF0100EF           SWI      +479
    265              EDIT_SetFocus(data,need_to_jump);
   \   0000001C   0010A0E1           MOV      R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   9B0100EF           SWI      +411
   \   00000028   350000EA           B        ??ed1_ghook_2
    266            }
    267            if (cmd==TI_CMD_DESTROY)
   \                     ??ed1_ghook_1:
   \   0000002C   030058E3           CMP      R8,#+3
   \   00000030   0400001A           BNE      ??ed1_ghook_3
    268            {
    269              i=EDIT_GetFocus(data);
   \   00000034   820100EF           SWI      +386
    270              IsFieldCorrect(data,i);
   \                     ??ed1_ghook_4:
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       IsFieldCorrect
   \   00000044   2E0000EA           B        ??ed1_ghook_2
    271            }
    272            if (cmd==TI_CMD_REDRAW)
   \                     ??ed1_ghook_3:
   \   00000048   ........           LDR      R7,??DataTable19  ;; _percent_u
   \   0000004C   ........           LDR      R5,??DataTable17  ;; ed1_desc
   \   00000050   070058E3           CMP      R8,#+7
   \   00000054   A800001A           BNE      ??ed1_ghook_5
    273            {
    274              i=EDIT_GetFocus(data);
   \   00000058   820100EF           SWI      +386
   \   0000005C   0090A0E1           MOV      R9,R0
    275              ExtractEditControl(data,i,&ec);
   \   00000060   24208DE2           ADD      R2,SP,#+36
   \   00000064   0910A0E1           MOV      R1,R9
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   690100EF           SWI      +361
    276              if ((i>1)&&(i&1))
   \   00000070   020059E3           CMP      R9,#+2
   \   00000074   D20000BA           BLT      ??ed1_ghook_6
   \   00000078   010019E3           TST      R9,#0x1
   \   0000007C   D000000A           BEQ      ??ed1_ghook_6
    277              {
    278                n=(i-3)>>1; //Индекс элемента в массиве cfg_h
    279                hp=cfg_h[n];
    280                wstrcpy(ews,ec.pWS);
   \   00000080   4C109DE5           LDR      R1,[SP, #+76]
   \   00000084   030049E2           SUB      R0,R9,#+3
   \   00000088   C000A0E1           ASR      R0,R0,#+1
   \   0000008C   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000090   A86190E5           LDR      R6,[R0, #+424]
   \   00000094   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000098   1F0100EF           SWI      +287
    281                ws_2str(ews,ss,15);
   \   0000009C   AC0995E5           LDR      R0,[R5, #+2476]
   \   000000A0   0F20A0E3           MOV      R2,#+15
   \   000000A4   14108DE2           ADD      R1,SP,#+20
   \   000000A8   A30000EF           SWI      +163
    282                int need_set_sk=0;
    283                switch(hp->type)
   \   000000AC   000096E5           LDR      R0,[R6, #+0]
   \   000000B0   010040E2           SUB      R0,R0,#+1
   \   000000B4   100050E3           CMP      R0,#+16
   \   000000B8   9700008A           BHI      ??ed1_ghook_7
   \   000000BC   011F8FE2           ADR      R1,??ed1_ghook_0
   \   000000C0   0010D1E7           LDRB     R1,[R1, R0]
   \   000000C4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ed1_ghook_0:
   \   000000C8   0410091B           DC8      +4,+16,+9,+27
   \   000000CC   2E1B323B           DC8      +46,+27,+50,+59
   \   000000D0   7C15535E           DC8      +124,+21,+83,+94
   \   000000D4   676E9415           DC8      +103,+110,+148,+21
   \   000000D8   43000000           DC8      +67,+0,+0,+0
    284                {
    285                case CFG_UINT:
    286                  vui=strtoul(ss,0,10);
    287                  *((unsigned int *)(hp+1))=vui;
   \                     ??ed1_ghook_8:
   \   000000DC   0A20A0E3           MOV      R2,#+10
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   14008DE2           ADD      R0,SP,#+20
   \   000000E8   ........           _BLF     strtoul,??strtoul??rA
   \   000000EC   030000EA           B        ??ed1_ghook_9
    288                  break;
    289                case CFG_INT:
    290                  vi=strtol(ss,0,10);
    291                  *((int *)(hp+1))=vi;
   \                     ??ed1_ghook_10:
   \   000000F0   0A20A0E3           MOV      R2,#+10
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   14008DE2           ADD      R0,SP,#+20
   \   000000FC   ........           _BLF     strtol,??strtol??rA
   \                     ??ed1_ghook_9:
   \   00000100   2C0086E5           STR      R0,[R6, #+44]
   \                     ??ed1_ghook_2:
   \   00000104   50D08DE2           ADD      SP,SP,#+80
   \   00000108   F083BDE8           POP      {R4-R9,PC}
    292                  break;
    293                case CFG_STR_UTF8:
    294                  ws_2str(ews,(char *)(hp+1),hp->max);
   \                     ??ed1_ghook_11:
   \   0000010C   282096E5           LDR      R2,[R6, #+40]
   \   00000110   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000114   2C1086E2           ADD      R1,R6,#+44
   \   00000118   A30000EF           SWI      +163
   \   0000011C   F8FFFFEA           B        ??ed1_ghook_2
    295                  break;
    296          
    297                case CFG_UTF8_STRING_PASS:
    298                case CFG_UTF8_STRING:
    299                  // ws_2utf8( WSHDR *from, char *to , int *result_length, int max_len);
    300                  ws_2utf8(ews,(char *)(hp+1),&utf8conv_res_len,hp->max);
   \                     ??ed1_ghook_12:
   \   00000120   283096E5           LDR      R3,[R6, #+40]
   \   00000124   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000128   0D20A0E1           MOV      R2,SP
   \   0000012C   2C1086E2           ADD      R1,R6,#+44
   \   00000130   E20100EF           SWI      +482
   \   00000134   F2FFFFEA           B        ??ed1_ghook_2
    301                  break;        
    302                  
    303                case CFG_STR_PASS:
    304                case CFG_STR_WIN1251:
    305                  j=0;
   \                     ??ed1_ghook_13:
   \   00000138   0080A0E3           MOV      R8,#+0
    306                  p=(char *)(hp+1);
   \   0000013C   2C4086E2           ADD      R4,R6,#+44
   \   00000140   040000EA           B        ??ed1_ghook_14
    307                  while(j<hp->max)
    308                  {
    309                    if (j>=ews->wsbody[0]) break;
    310                    *p++=char16to8(ews->wsbody[j+1]);
   \                     ??ed1_ghook_15:
   \   00000144   880080E0           ADD      R0,R0,R8, LSL #+1
   \   00000148   B200D0E1           LDRH     R0,[R0, #+2]
    311                    j++;
   \   0000014C   018088E2           ADD      R8,R8,#+1
   \   00000150   ........           BL       char16to8
   \   00000154   ........           STRB     R0,[R4], #+1
   \                     ??ed1_ghook_14:
   \   00000158   280096E5           LDR      R0,[R6, #+40]
   \   0000015C   000058E1           CMP      R8,R0
   \   00000160   0400002A           BCS      ??ed1_ghook_16
   \   00000164   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000168   000090E5           LDR      R0,[R0, #+0]
   \   0000016C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000170   010058E1           CMP      R8,R1
   \   00000174   F2FFFFBA           BLT      ??ed1_ghook_15
    312                  }
    313                  *p=0;
   \                     ??ed1_ghook_16:
   \   00000178   0000A0E3           MOV      R0,#+0
   \   0000017C   0000C4E5           STRB     R0,[R4, #+0]
   \   00000180   DFFFFFEA           B        ??ed1_ghook_2
    314                  break;
    315                case CFG_CBOX:
    316                  *((int *)(hp+1))=EDIT_GetItemNumInFocusedComboBox(data)-1;
   \                     ??ed1_ghook_17:
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   800100EF           SWI      +384
   \   0000018C   010040E2           SUB      R0,R0,#+1
   \   00000190   DAFFFFEA           B        ??ed1_ghook_9
    317                  break;
    318                   
    319                case CFG_COORDINATES:
    320                  wsprintf(ews,"%d,%d",*((int *)(hp+1)),*((int *)(hp+1)+1));
   \                     ??ed1_ghook_18:
   \   00000194   303096E5           LDR      R3,[R6, #+48]
   \   00000198   2C2096E5           LDR      R2,[R6, #+44]
   \   0000019C   AC0995E5           LDR      R0,[R5, #+2476]
   \   000001A0   2C1087E2           ADD      R1,R7,#+44
   \   000001A4   240100EF           SWI      +292
    321                  EDIT_SetTextToFocused(data,ews);
   \                     ??ed1_ghook_19:
   \   000001A8   AC1995E5           LDR      R1,[R5, #+2476]
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   810100EF           SWI      +385
    322                  need_set_sk=1;
   \   000001B4   400000EA           B        ??ed1_ghook_20
    323                  break;
    324                case CFG_COLOR:
    325                  wsprintf(ews,"%02X,%02X,%02X,%02X",*((char *)(hp+1)),*((char *)(hp+1)+1),*((char *)(hp+1)+2),*((char *)(hp+1)+3));
   \                     ??ed1_ghook_21:
   \   000001B8   2F00D6E5           LDRB     R0,[R6, #+47]
   \   000001BC   341087E2           ADD      R1,R7,#+52
   \   000001C0   01002DE9           PUSH     {R0}
   \   000001C4   2E00D6E5           LDRB     R0,[R6, #+46]
   \   000001C8   01002DE9           PUSH     {R0}
   \   000001CC   2D30D6E5           LDRB     R3,[R6, #+45]
   \   000001D0   2C20D6E5           LDRB     R2,[R6, #+44]
   \   000001D4   320000EA           B        ??ed1_ghook_22
    326                  EDIT_SetTextToFocused(data,ews);  
    327                  need_set_sk=1;
    328                  break;
    329                case CFG_KEYCODE:
    330                  sprintf(str,"%u",*((int *)(hp+1)));
   \                     ??ed1_ghook_23:
   \   000001D8   F4719FE5           LDR      R7,??ed1_ghook_24+0x8  ;; `str`
   \   000001DC   2C2096E5           LDR      R2,[R6, #+44]
    331                  code=StrToInt(str,0);
   \   000001E0   F0619FE5           LDR      R6,??ed1_ghook_24+0xC  ;; code
   \   000001E4   781F8FE2           ADR      R1,??ed1_ghook_24  ;; "%u"
   \   000001E8   0700A0E1           MOV      R0,R7
   \   000001EC   160000EF           SWI      +22
   \   000001F0   0010A0E3           MOV      R1,#+0
   \   000001F4   0700A0E1           MOV      R0,R7
   \   000001F8   540000EF           SWI      +84
   \   000001FC   000086E5           STR      R0,[R6, #+0]
    332                  wsprintf(ews,"%s",key_names[code]);
   \   00000200   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000204   602090E5           LDR      R2,[R0, #+96]
   \   00000208   AC0995E5           LDR      R0,[R5, #+2476]
   \   0000020C   6F1F8FE2           ADR      R1,??ed1_ghook_24+0x4  ;; "%s"
   \   00000210   240100EF           SWI      +292
    333                  EDIT_SetTextToFocused(data,ews);  
   \   00000214   E3FFFFEA           B        ??ed1_ghook_19
    334                  need_set_sk=1;
    335                  break;
    336                case CFG_CHECKBOX:
    337                  CutWSTR(ews,0);
   \                     ??ed1_ghook_25:
   \   00000218   AC0995E5           LDR      R0,[R5, #+2476]
   \   0000021C   0010A0E3           MOV      R1,#+0
   \   00000220   260100EF           SWI      +294
    338                  wsAppendChar(ews, *((int *)(hp+1))?CBOX_CHECKED:CBOX_UNCHECKED);
   \   00000224   2C0096E5           LDR      R0,[R6, #+44]
   \   00000228   000050E3           CMP      R0,#+0
   \   0000022C   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000230   0B10A013           MOVNE    R1,#+11
   \   00000234   0C10A003           MOVEQ    R1,#+12
   \   00000238   E11C81E3           ORR      R1,R1,#0xE100
   \   0000023C   1C0000EF           SWI      +28
    339                  EDIT_SetTextToFocused(data,ews);
   \   00000240   D8FFFFEA           B        ??ed1_ghook_19
    340                  need_set_sk=1;
    341                  break;
    342                case CFG_TIME:
    343                  EDIT_GetTime(data,i,&tt);
   \                     ??ed1_ghook_26:
   \   00000244   04208DE2           ADD      R2,SP,#+4
   \   00000248   0910A0E1           MOV      R1,R9
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   0D0200EF           SWI      +525
    344                  memcpy((char *)(hp+1),&tt,sizeof(TTime));
   \   00000254   0820A0E3           MOV      R2,#+8
   \   00000258   04108DE2           ADD      R1,SP,#+4
   \                     ??ed1_ghook_27:
   \   0000025C   2C0086E2           ADD      R0,R6,#+44
   \   00000260   1E0100EF           SWI      +286
   \   00000264   A6FFFFEA           B        ??ed1_ghook_2
    345                  break;
    346                case CFG_DATE:
    347                  EDIT_GetDate(data,i,&dd);
   \                     ??ed1_ghook_28:
   \   00000268   0C208DE2           ADD      R2,SP,#+12
   \   0000026C   0910A0E1           MOV      R1,R9
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   0C0200EF           SWI      +524
    348                  memcpy((char *)(hp+1),&dd,sizeof(TDate));
   \   00000278   0820A0E3           MOV      R2,#+8
   \   0000027C   0C108DE2           ADD      R1,SP,#+12
   \   00000280   F5FFFFEA           B        ??ed1_ghook_27
    349                  break;  
    350                case CFG_RECT:
    351                  {
    352                    RECT *rc=(RECT *)(hp+1);
   \                     ??ed1_ghook_29:
   \   00000284   2C0086E2           ADD      R0,R6,#+44
    353                    wsprintf(ews,"RECT:%03d;%03d;%03d;%03d;",rc->x,rc->y,rc->x2,rc->y2);
   \   00000288   F610D0E1           LDRSH    R1,[R0, #+6]
   \   0000028C   02002DE9           PUSH     {R1}
   \   00000290   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000294   02002DE9           PUSH     {R1}
   \   00000298   F230D0E1           LDRSH    R3,[R0, #+2]
   \   0000029C   F020D0E1           LDRSH    R2,[R0, #+0]
   \   000002A0   481087E2           ADD      R1,R7,#+72
   \                     ??ed1_ghook_22:
   \   000002A4   AC0995E5           LDR      R0,[R5, #+2476]
   \   000002A8   240100EF           SWI      +292
    354                    EDIT_SetTextToFocused(data,ews);    
   \   000002AC   AC1995E5           LDR      R1,[R5, #+2476]
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   810100EF           SWI      +385
    355                  }
    356                  need_set_sk=1;
   \   000002B8   08D08DE2           ADD      SP,SP,#+8
    357                  break;
    358                case CFG_LEVEL:
    359                  need_set_sk=1;
    360                  break;
    361                  
    362                default:
    363                  break;      
    364                }
    365                if (need_set_sk)
    366                {
    367                  need_set_sk=0;
    368                  SetSoftKey(data,&ok,SET_SOFT_KEY_N);
   \                     ??ed1_ghook_20:
   \   000002BC   0120A0E3           MOV      R2,#+1
   \   000002C0   F800A0E3           MOV      R0,#+248
   \   000002C4   A00E80E3           ORR      R0,R0,#0xA00
   \   000002C8   051080E0           ADD      R1,R0,R5
   \   000002CC   0400A0E1           MOV      R0,R4
   \   000002D0   680100EF           SWI      +360
    369                  SetSoftKey(data,level?&back:&close,!SET_SOFT_KEY_N);
   \   000002D4   5C0195E5           LDR      R0,[R5, #+348]
   \   000002D8   0020A0E3           MOV      R2,#+0
   \   000002DC   000050E3           CMP      R0,#+0
   \   000002E0   B01E8512           ADDNE    R1,R5,#+2816
   \   000002E4   0800A003           MOVEQ    R0,#+8
   \   000002E8   B00E8003           ORREQ    R0,R0,#0xB00
   \   000002EC   05108000           ADDEQ    R1,R0,R5
   \   000002F0   0400A0E1           MOV      R0,R4
   \   000002F4   680100EF           SWI      +360
   \   000002F8   81FFFFEA           B        ??ed1_ghook_2
    370                }
    371              }
    372            }
    373            if (cmd==TI_CMD_FOCUS)
   \                     ??ed1_ghook_5:
   \   000002FC   0A0058E3           CMP      R8,#+10
   \   00000300   0100001A           BNE      ??ed1_ghook_30
    374            {
    375              DisableIDLETMR();
   \   00000304   7F0100EF           SWI      +383
   \   00000308   7DFFFFEA           B        ??ed1_ghook_2
    376            }
    377            if (cmd==TI_CMD_SUBFOCUS_CHANGE)
   \                     ??ed1_ghook_30:
   \   0000030C   0C0058E3           CMP      R8,#+12
   \   00000310   0100001A           BNE      ??ed1_ghook_7
    378            {
    379              i=EDIT_GetUnFocus(data);
   \   00000314   830100EF           SWI      +387
    380              IsFieldCorrect(data,i);
   \   00000318   46FFFFEA           B        ??ed1_ghook_4
    381            }
    382            if (cmd==TI_CMD_COMBOBOX_FOCUS)
   \                     ??ed1_ghook_7:
   \   0000031C   0D0058E3           CMP      R8,#+13
   \   00000320   2700001A           BNE      ??ed1_ghook_6
    383            {
    384              //onCombo
    385              i=EDIT_GetFocus(data);
   \   00000324   0400A0E1           MOV      R0,R4
   \   00000328   820100EF           SWI      +386
   \   0000032C   0090A0E1           MOV      R9,R0
    386              ExtractEditControl(data,i,&ec);
   \   00000330   24208DE2           ADD      R2,SP,#+36
   \   00000334   0910A0E1           MOV      R1,R9
   \   00000338   0400A0E1           MOV      R0,R4
   \   0000033C   690100EF           SWI      +361
    387              if ((i>1)&&(i&1))
   \   00000340   020059E3           CMP      R9,#+2
   \   00000344   1E0000BA           BLT      ??ed1_ghook_6
   \   00000348   010019E3           TST      R9,#0x1
   \   0000034C   1C00000A           BEQ      ??ed1_ghook_6
    388              {
    389                n=(i-3)>>1; //Индекс элемента в массиве cfg_h
    390                hp=cfg_h[n];
   \   00000350   030049E2           SUB      R0,R9,#+3
   \   00000354   C000A0E1           ASR      R0,R0,#+1
   \   00000358   000185E0           ADD      R0,R5,R0, LSL #+2
   \   0000035C   A86190E5           LDR      R6,[R0, #+424]
    391                if (hp->type==CFG_CBOX)
   \   00000360   000096E5           LDR      R0,[R6, #+0]
   \   00000364   050050E3           CMP      R0,#+5
   \   00000368   1500001A           BNE      ??ed1_ghook_6
    392                {
    393                  if ((j=EDIT_GetItemNumInFocusedComboBox(data)))
   \   0000036C   0400A0E1           MOV      R0,R4
   \   00000370   800100EF           SWI      +384
   \   00000374   0080B0E1           MOVS     R8,R0
   \   00000378   0500000A           BEQ      ??ed1_ghook_31
    394                  {
    395                    wsprintf(ews,_percent_t,((CFG_CBOX_ITEM*)((char *)hp+sizeof(CFG_HDR)+4))+(j-1));
   \   0000037C   800286E0           ADD      R0,R6,R0, LSL #+5
   \   00000380   102080E2           ADD      R2,R0,#+16
   \   00000384   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000388   061087E2           ADD      R1,R7,#+6
   \   0000038C   240100EF           SWI      +292
   \   00000390   080000EA           B        ??ed1_ghook_32
    396                  }
    397                  else
    398                  {
    399                    ExtractEditControl(data,EDIT_GetFocus(data)-1,&ec);
   \                     ??ed1_ghook_31:
   \   00000394   0400A0E1           MOV      R0,R4
   \   00000398   820100EF           SWI      +386
   \   0000039C   24208DE2           ADD      R2,SP,#+36
   \   000003A0   011040E2           SUB      R1,R0,#+1
   \   000003A4   0400A0E1           MOV      R0,R4
   \   000003A8   690100EF           SWI      +361
    400                    wstrcpy(ews,ec.pWS);
   \   000003AC   4C109DE5           LDR      R1,[SP, #+76]
   \   000003B0   AC0995E5           LDR      R0,[R5, #+2476]
   \   000003B4   1F0100EF           SWI      +287
    401                  }
    402                  EDIT_SetTextToFocused(data,ews);
   \                     ??ed1_ghook_32:
   \   000003B8   AC1995E5           LDR      R1,[R5, #+2476]
   \   000003BC   0400A0E1           MOV      R0,R4
   \   000003C0   810100EF           SWI      +385
    403                }
    404              }
    405            }
    406          }
   \                     ??ed1_ghook_6:
   \   000003C4   50D08DE2           ADD      SP,SP,#+80       ;; stack cleaning
   \   000003C8   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??ed1_ghook_24:
   \   000003CC   25750000           DC8      "%u",+0
   \   000003D0   25730000           DC8      "%s",+0
   \   000003D4   ........           DC32     `str`
   \   000003D8   ........           DC32     code
    407          
    408          HEADER_DESC ed1_hdr={0,0,0,0,NULL,(int)"Редактирование",LGP_NULL};
    409          
    410          INPUTDIA_DESC ed1_desc=
    411          {
    412            1,
    413            ed1_onkey,
    414            ed1_ghook,
    415            (void *)ed1_locret,
    416            0,
    417            &menu_skt,
    418            {0,0,0,0},
    419            4,
    420            100,
    421            101,
    422            0,
    423          
    424          //  0x00000001 - Выровнять по правому краю
    425          //  0x00000002 - Выровнять по центру
    426          //  0x00000004 - Инверсия знакомест
    427          //  0x00000008 - UnderLine
    428          //  0x00000020 - Не переносить слова
    429          //  0x00000200 - bold
    430            0,
    431          
    432          //  0x00000002 - ReadOnly
    433          //  0x00000004 - Не двигается курсор
    434          //  0x40000000 - Поменять местами софт-кнопки
    435            0x40000000
    436          };
    437          
    438          
    439          void ErrorMsg(const char *msg);
    440          void UpdateCSMname(const char *fname);
    441          

   \                                 In segment CODE, align 4, keep-with-next
    442          int LoadCfg(char *cfgname)
    443          {
   \                     LoadCfg:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    444            int f;
    445            unsigned int err;
    446            FSTATS fstat;
    447            if (cfgname!=cfg_name)  strncpy(cfg_name,cfgname,255);
   \   00000004   ........           LDR      R4,??DataTable17  ;; ed1_desc
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   9C0EA0E3           MOV      R0,#+2496
   \   00000014   041080E0           ADD      R1,R0,R4
   \   00000018   010056E1           CMP      R6,R1
   \   0000001C   0300000A           BEQ      ??LoadCfg_0
   \   00000020   FF20A0E3           MOV      R2,#+255
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   040080E0           ADD      R0,R0,R4
   \   0000002C   160100EF           SWI      +278
    448            int result=0;
   \                     ??LoadCfg_0:
   \   00000030   0050A0E3           MOV      R5,#+0
    449            
    450            if (GetFileStats(cfgname,&fstat,&err)!=-1)
   \   00000034   0570E0E1           MVN      R7,R5
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   04108DE2           ADD      R1,SP,#+4
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   840000EF           SWI      +132
   \   00000048   070050E1           CMP      R0,R7
   \   0000004C   2400000A           BEQ      ??LoadCfg_1
    451            {
    452              if ((f=fopen(cfgname,A_ReadOnly+A_BIN,P_READ,&err))!=-1)
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   8020A0E3           MOV      R2,#+128
   \   00000058   801CA0E3           MOV      R1,#+32768
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   0A0000EF           SWI      +10
   \   00000064   0060A0E1           MOV      R6,R0
   \   00000068   070056E1           CMP      R6,R7
   \   0000006C   1C00000A           BEQ      ??LoadCfg_1
    453              {
    454                size_cfg=fstat.size;
   \   00000070   08009DE5           LDR      R0,[SP, #+8]
    455                if (size_cfg<=0)
   \   00000074   74709FE5           LDR      R7,??LoadCfg_2   ;; `?<Constant "Can\\'t read .bcfg file!">`
   \   00000078   A40184E5           STR      R0,[R4, #+420]
   \   0000007C   010050E3           CMP      R0,#+1
   \   00000080   020000AA           BGE      ??LoadCfg_3
    456                {
    457                  ErrorMsg("Zero lenght of .bcfg file!");
   \   00000084   180087E2           ADD      R0,R7,#+24
   \   00000088   ........           BL       ErrorMsg
   \   0000008C   110000EA           B        ??LoadCfg_4
    458                }
    459                else
    460                {
    461                  cfg=malloc((size_cfg+3)&(~3));
   \                     ??LoadCfg_3:
   \   00000090   030080E2           ADD      R0,R0,#+3
   \   00000094   0300C0E3           BIC      R0,R0,#0x3
   \   00000098   140000EF           SWI      +20
    462                  if (fread(f,cfg,size_cfg,&err)!=size_cfg)
   \   0000009C   A42194E5           LDR      R2,[R4, #+420]
   \   000000A0   A00184E5           STR      R0,[R4, #+416]
   \   000000A4   0D30A0E1           MOV      R3,SP
   \   000000A8   0010A0E1           MOV      R1,R0
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   0B0000EF           SWI      +11
   \   000000B4   A41194E5           LDR      R1,[R4, #+420]
   \   000000B8   010050E1           CMP      R0,R1
   \   000000BC   0400000A           BEQ      ??LoadCfg_5
    463                  {
    464                    ErrorMsg("Can't read .bcfg file!");
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   ........           BL       ErrorMsg
    465                    mfree(cfg);
   \   000000C8   A00194E5           LDR      R0,[R4, #+416]
   \   000000CC   150000EF           SWI      +21
   \   000000D0   000000EA           B        ??LoadCfg_4
    466                  }
    467                  else result=1;
   \                     ??LoadCfg_5:
   \   000000D4   0150A0E3           MOV      R5,#+1
    468                }
    469                fclose(f,&err);
   \                     ??LoadCfg_4:
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   0600A0E1           MOV      R0,R6
   \   000000E0   0D0000EF           SWI      +13
    470              }
    471            } 
    472            return result;
   \                     ??LoadCfg_1:
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   2CD08DE2           ADD      SP,SP,#+44
   \   000000EC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LoadCfg_2:
   \   000000F0   ........           DC32     `?<Constant "Can\\'t read .bcfg file!">`
    473          }
    474          
    475          typedef struct
    476          {
    477            void *next;
    478            char cfgname[64];
    479            char fullpath[128];
    480          }SEL_BCFG;
    481          
    482          
    483          SEL_BCFG *sbtop;
    484          
    485          //------------------- Т9 ------------------//
    486          
    487          //Ключи для поиска по T9
    488          static const char table_T9Key[256]=
    489          "11111111111111111111111111111111"
    490          "10001**0***0000*012345678900***0"
    491          "0222333444555666777788899991*110"
    492          "122233344455566677778889999111*1"
    493          "11111111111111111111111111111111"
    494          "11111111311111111111111131111111"
    495          "22223333444455566677778888899999"
    496          "22223333444455566677778888899999";
    497          
    498          
    499          char T9Key[32];
    500          int sel_bcfg_id;
    501          char bcfg_hdr_text[32];
    502          char bcfgmenu_sk_r[16];
    503          volatile int prev_bcfg_itemcount;
    504          

   \                                 In segment CODE, align 4, keep-with-next
    505          SEL_BCFG *FindBCFGByNS(int *i)
    506          {
    507            SEL_BCFG *t;
    508            t=(SEL_BCFG *)sbtop;
   \                     FindBCFGByNS:
   \   00000000   ........           LDR      R2,??DataTable17  ;; ed1_desc
   \   00000004   70002DE9           PUSH     {R4-R6}
   \   00000008   B41992E5           LDR      R1,[R2, #+2484]
   \   0000000C   60609FE5           LDR      R6,??FindBCFGByNS_0  ;; table_T9Key
   \   00000010   020000EA           B        ??FindBCFGByNS_1
    509            char *s;
    510            char *d;
    511            int c;
    512            while(t)
    513            {
    514             s=T9Key;
    515             d=t->cfgname;
    516             while(c=*s++)
    517             {
    518              if(c!=table_T9Key[*d++]) goto L_NOT9;
    519             }
    520             if(!(*i)) return(t);
    521             (*i)--;
   \                     ??FindBCFGByNS_2:
   \   00000014   013043E2           SUB      R3,R3,#+1
   \   00000018   003080E5           STR      R3,[R0, #+0]
    522           L_NOT9:
    523              t=t->next;
   \                     ??FindBCFGByNS_3:
   \   0000001C   001091E5           LDR      R1,[R1, #+0]
   \                     ??FindBCFGByNS_1:
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0F00000A           BEQ      ??FindBCFGByNS_4
   \   00000028   AC3E82E2           ADD      R3,R2,#+2752
   \   0000002C   04C081E2           ADD      R12,R1,#+4
   \   00000030   030000EA           B        ??FindBCFGByNS_5
   \                     ??FindBCFGByNS_6:
   \   00000034   ........           LDRB     R5,[R12], #+1
   \   00000038   0650D5E7           LDRB     R5,[R5, +R6]
   \   0000003C   050054E1           CMP      R4,R5
   \   00000040   F5FFFF1A           BNE      ??FindBCFGByNS_3
   \                     ??FindBCFGByNS_5:
   \   00000044   ........           LDRB     R4,[R3], #+1
   \   00000048   000054E3           CMP      R4,#+0
   \   0000004C   F8FFFF1A           BNE      ??FindBCFGByNS_6
   \   00000050   003090E5           LDR      R3,[R0, #+0]
   \   00000054   000053E3           CMP      R3,#+0
   \   00000058   EDFFFF1A           BNE      ??FindBCFGByNS_2
   \   0000005C   7000BDE8           POP      {R4-R6}
   \   00000060   0100A0E1           MOV      R0,R1
   \   00000064   1EFF2FE1           BX       LR
    524            }
    525            return(t);
   \                     ??FindBCFGByNS_4:
   \   00000068   7000BDE8           POP      {R4-R6}
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   1EFF2FE1           BX       LR               ;; return
   \                     ??FindBCFGByNS_0:
   \   00000074   ........           DC32     table_T9Key
    526          }
    527          

   \                                 In segment CODE, align 4, keep-with-next
    528          int CountBCFG(void)
    529          {
   \                     CountBCFG:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    530            int l=-1;
   \   00000008   0010E0E3           MVN      R1,#+0
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
    531            FindBCFGByNS(&l);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       FindBCFGByNS
    532            l=-1-l;
    533            return l;
   \   00000018   00109DE5           LDR      R1,[SP, #+0]
   \   0000001C   0000E0E3           MVN      R0,#+0
   \   00000020   010040E0           SUB      R0,R0,R1
   \   00000024   0280BDE8           POP      {R1,PC}          ;; return
    534          }
    535          

   \                                 In segment CODE, align 4, keep-with-next
    536          SEL_BCFG *FindBCFGByN(int i)
    537          {
   \                     FindBCFGByN:
   \   00000000   01402DE9           PUSH     {R0,LR}
    538            SEL_BCFG *t;
    539            t=FindBCFGByNS(&i);
    540            return t;
   \   00000004   0D00A0E1           MOV      R0,SP
   \   00000008   ........           BL       FindBCFGByNS
   \   0000000C   0280BDE8           POP      {R1,PC}          ;; return
    541          }
    542          
    543          //----------------------------------//
    544          

   \                                 In segment CODE, align 4, keep-with-next
    545          void ClearT9Key(void)
    546          {
    547            zeromem(T9Key,sizeof(T9Key));
   \                     ClearT9Key:
   \   00000000   0C009FE5           LDR      R0,??ClearT9Key_0  ;; ed1_desc + 2752
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2010A0E3           MOV      R1,#+32
   \   0000000C   1D0100EF           SWI      +285
    548          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??ClearT9Key_0:
   \   00000014   ........           DC32     ed1_desc + 2752
    549          

   \                                 In segment CODE, align 4, keep-with-next
    550          void UpdateBCFGHeader(void)
    551          {
   \                     UpdateBCFGHeader:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    552            if (strlen(T9Key))
   \   00000004   64609FE5           LDR      R6,??UpdateBCFGHeader_0+0x4  ;; `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`
   \   00000008   ........           LDR      R8,??DataTable17  ;; ed1_desc
   \   0000000C   B34EA0E3           MOV      R4,#+2864
   \   00000010   B15EA0E3           MOV      R5,#+2832
   \   00000014   AC7EA0E3           MOV      R7,#+2752
   \   00000018   080087E0           ADD      R0,R7,R8
   \   0000001C   1B0000EF           SWI      +27
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0900000A           BEQ      ??UpdateBCFGHeader_1
    553            {
    554              strcpy(bcfg_hdr_text,"Ввод T9:");
   \   00000028   081086E2           ADD      R1,R6,#+8
   \   0000002C   080085E0           ADD      R0,R5,R8
   \   00000030   1A0000EF           SWI      +26
    555              strcat(bcfg_hdr_text,T9Key);
   \   00000034   081087E0           ADD      R1,R7,R8
   \   00000038   080085E0           ADD      R0,R5,R8
   \   0000003C   170000EF           SWI      +23
    556              strcpy(bcfgmenu_sk_r,"<C");
   \   00000040   091F8FE2           ADR      R1,??UpdateBCFGHeader_0  ;; "<C"
   \   00000044   080084E0           ADD      R0,R4,R8
   \   00000048   1A0000EF           SWI      +26
   \   0000004C   F081BDE8           POP      {R4-R8,PC}
    557            }
    558            else
    559            {
    560              strcpy(bcfg_hdr_text,"Выберите BCFG");
   \                     ??UpdateBCFGHeader_1:
   \   00000050   141086E2           ADD      R1,R6,#+20
   \   00000054   080085E0           ADD      R0,R5,R8
   \   00000058   1A0000EF           SWI      +26
    561              strcpy(bcfgmenu_sk_r,"Закрыть");
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   080084E0           ADD      R0,R4,R8
   \   00000064   1A0000EF           SWI      +26
    562            }
    563          }
   \   00000068   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??UpdateBCFGHeader_0:
   \   0000006C   3C430000           DC8      "<C",+0
   \   00000070   ........           DC32     `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`
    564          

   \                                 In segment CODE, align 4, keep-with-next
    565          void AddT9Key(int chr)
    566          {
   \                     AddT9Key:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    567            int l=strlen(T9Key);
   \   00000004   ........           LDR      R5,??DataTable17  ;; ed1_desc
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   AC0E85E2           ADD      R0,R5,#+2752
   \   00000010   1B0000EF           SWI      +27
    568            if (l<(sizeof(T9Key)-1))
   \   00000014   1F0050E3           CMP      R0,#+31
    569            {
    570              T9Key[l]=chr;
   \   00000018   05008030           ADDCC    R0,R0,R5
   \   0000001C   C04AC035           STRBCC   R4,[R0, #+2752]
    571            }
    572          }
   \   00000020   3080BDE8           POP      {R4,R5,PC}       ;; return
    573          

   \                                 In segment CODE, align 4, keep-with-next
    574          void BackSpaceT9(void)
    575          {
   \                     BackSpaceT9:
   \   00000000   10402DE9           PUSH     {R4,LR}
    576            int l=strlen(T9Key);
   \   00000004   ........           LDR      R4,??DataTable17  ;; ed1_desc
   \   00000008   AC0E84E2           ADD      R0,R4,#+2752
   \   0000000C   1B0000EF           SWI      +27
    577            if (l)
   \   00000010   000050E3           CMP      R0,#+0
    578            {
    579              l--;
    580              T9Key[l]=0;
   \   00000014   04008010           ADDNE    R0,R0,R4
   \   00000018   0010A013           MOVNE    R1,#+0
   \   0000001C   BF1AC015           STRBNE   R1,[R0, #+2751]
    581            }
    582          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    583          

   \                                 In segment CODE, align 4, keep-with-next
    584          void RecountMenuBCFG()
    585          {
   \                     RecountMenuBCFG:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    586            int i;
    587            void *data;
    588            UpdateBCFGHeader();
    589            if (!sel_bcfg_id) return; //Нечего считать
   \   00000004   ........           LDR      R4,??DataTable17  ;; ed1_desc
   \   00000008   ........           BL       UpdateBCFGHeader
   \   0000000C   B80994E5           LDR      R0,[R4, #+2488]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
    590            data=FindGUIbyId(sel_bcfg_id,NULL);
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   090200EF           SWI      +521
   \   00000020   0050A0E1           MOV      R5,R0
    591          
    592            i=CountBCFG();
   \   00000024   ........           BL       CountBCFG
   \   00000028   0010A0E1           MOV      R1,R0
    593            if (i!=prev_bcfg_itemcount)
   \   0000002C   BC0994E5           LDR      R0,[R4, #+2492]
   \   00000030   000051E1           CMP      R1,R0
   \   00000034   0200000A           BEQ      ??RecountMenuBCFG_0
    594            {
    595              prev_bcfg_itemcount=i;
   \   00000038   BC1984E5           STR      R1,[R4, #+2492]
    596              Menu_SetItemCountDyn(data,i);
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   E60100EF           SWI      +486
    597            }
    598            SetCursorToMenuItem(data,0);
   \                     ??RecountMenuBCFG_0:
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   C40100EF           SWI      +452
    599            if (IsGuiOnTop(sel_bcfg_id)) RefreshGUI();
   \   00000050   B80994E5           LDR      R0,[R4, #+2488]
   \   00000054   350100EF           SWI      +309
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   3080BD08           POPEQ    {R4,R5,PC}
   \   00000060   960100EF           SWI      +406
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
    600          }
    601          
    602          //-------------------------------------------//
    603          
    604          

   \                                 In segment CODE, align 4, keep-with-next
    605          int selbcfg_menu_onkey(void *gui, GUI_MSG *msg)
    606          {
   \                     selbcfg_menu_onkey:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    607            SEL_BCFG *t;
    608            int i;  
    609            i=GetCurMenuItem(gui);
    610            if (msg->keys==0x3D || msg->keys==0x18)
   \   00000008   ........           LDR      R6,??DataTable17  ;; ed1_desc
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   8F0100EF           SWI      +399
   \   00000014   F210D4E1           LDRSH    R1,[R4, #+2]
   \   00000018   AC5EA0E3           MOV      R5,#+2752
   \   0000001C   3D0051E3           CMP      R1,#+61
   \   00000020   18005113           CMPNE    R1,#+24
   \   00000024   1500001A           BNE      ??selbcfg_menu_onkey_0
    611            {
    612              t=FindBCFGByN(i);
   \   00000028   00008DE5           STR      R0,[SP, #+0]
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           BL       FindBCFGByNS
   \   00000034   0070B0E1           MOVS     R7,R0
    613              if (t)
   \   00000038   1000000A           BEQ      ??selbcfg_menu_onkey_0
    614              {
    615                ClearT9Key();
   \   0000003C   2010A0E3           MOV      R1,#+32
   \   00000040   060085E0           ADD      R0,R5,R6
   \   00000044   1D0100EF           SWI      +285
    616                MAIN_CSM *csm=(MAIN_CSM *)FindCSMbyID(maincsm_id);
   \   00000048   B00996E5           LDR      R0,[R6, #+2480]
   \   0000004C   080100EF           SWI      +264
   \   00000050   0080A0E1           MOV      R8,R0
    617                if (LoadCfg(t->fullpath))
   \   00000054   440087E2           ADD      R0,R7,#+68
   \   00000058   ........           BL       LoadCfg
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0600000A           BEQ      ??selbcfg_menu_onkey_0
    618                {
    619                  UpdateCSMname(t->fullpath);
   \   00000064   440087E2           ADD      R0,R7,#+68
   \   00000068   ........           BL       UpdateCSMname
    620                  csm->gui_id=create_ed(0);
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   ........           BL       create_ed
   \   00000074   280088E5           STR      R0,[R8, #+40]
    621                  return (1);
   \   00000078   0100A0E3           MOV      R0,#+1
   \   0000007C   F281BDE8           POP      {R1,R4-R8,PC}
    622                }
    623              }
    624            } 
    625            
    626            if (msg->gbsmsg->msg==KEY_DOWN)
   \                     ??selbcfg_menu_onkey_0:
   \   00000080   040094E5           LDR      R0,[R4, #+4]
   \   00000084   9320A0E3           MOV      R2,#+147
   \   00000088   F210D0E1           LDRSH    R1,[R0, #+2]
   \   0000008C   402F82E3           ORR      R2,R2,#0x100
   \   00000090   020051E1           CMP      R1,R2
   \   00000094   0400001A           BNE      ??selbcfg_menu_onkey_1
    627            {
    628              int key=msg->gbsmsg->submess;
   \   00000098   040090E5           LDR      R0,[R0, #+4]
    629              if (((key>='0')&&(key<='9'))||(key=='#')||(key=='*'))
   \   0000009C   300050E3           CMP      R0,#+48
   \   000000A0   0C0000BA           BLT      ??selbcfg_menu_onkey_2
   \   000000A4   3A0050E3           CMP      R0,#+58
   \   000000A8   0D0000BA           BLT      ??selbcfg_menu_onkey_3
    630              {
    631                AddT9Key(key);
    632                RecountMenuBCFG();
    633                return(-1);
    634              }
    635            }  
    636            if (msg->keys==1)
   \                     ??selbcfg_menu_onkey_1:
   \   000000AC   F200D4E1           LDRSH    R0,[R4, #+2]
   \   000000B0   010050E3           CMP      R0,#+1
   \   000000B4   0E00001A           BNE      ??selbcfg_menu_onkey_4
    637            {
    638              if (strlen(T9Key))
   \   000000B8   060085E0           ADD      R0,R5,R6
   \   000000BC   1B0000EF           SWI      +27
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   F281BD08           POPEQ    {R1,R4-R8,PC}
    639              {
    640                BackSpaceT9();
   \   000000C8   ........           BL       BackSpaceT9
    641                RecountMenuBCFG();
   \   000000CC   ........           BL       RecountMenuBCFG
   \   000000D0   0000E0E3           MVN      R0,#+0
   \   000000D4   F281BDE8           POP      {R1,R4-R8,PC}
    642                return(-1);
    643              }
    644            }
   \                     ??selbcfg_menu_onkey_2:
   \   000000D8   230050E3           CMP      R0,#+35
   \   000000DC   2A005013           CMPNE    R0,#+42
   \   000000E0   F1FFFF1A           BNE      ??selbcfg_menu_onkey_1
   \                     ??selbcfg_menu_onkey_3:
   \   000000E4   ........           BL       AddT9Key
   \   000000E8   ........           BL       RecountMenuBCFG
   \   000000EC   0000E0E3           MVN      R0,#+0
   \   000000F0   F281BDE8           POP      {R1,R4-R8,PC}
    645           
    646            return (0);
   \                     ??selbcfg_menu_onkey_4:
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    647          }
    648          

   \                                 In segment CODE, align 4, keep-with-next
    649          void selbcfg_menu_ghook(void *gui, int cmd)
    650          {
   \                     selbcfg_menu_ghook:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    651            SEL_BCFG *sbtop=MenuGetUserPointer(gui);
   \   00000008   E00100EF           SWI      +480
   \   0000000C   0050A0E1           MOV      R5,R0
    652            if (cmd==TI_CMD_DESTROY)
   \   00000010   030054E3           CMP      R4,#+3
   \   00000014   0500001A           BNE      ??selbcfg_menu_ghook_0
    653            {
    654              while(sbtop)
   \                     ??selbcfg_menu_ghook_1:
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   3080BD08           POPEQ    {R4,R5,PC}
    655              {
    656                SEL_BCFG *sb=sbtop;
   \   00000020   0500A0E1           MOV      R0,R5
    657                sbtop=sbtop->next;
   \   00000024   005095E5           LDR      R5,[R5, #+0]
    658                mfree(sb);
   \   00000028   150000EF           SWI      +21
   \   0000002C   F9FFFFEA           B        ??selbcfg_menu_ghook_1
    659              }    
    660            }
    661            if (cmd==TI_CMD_FOCUS)
   \                     ??selbcfg_menu_ghook_0:
   \   00000030   0A0054E3           CMP      R4,#+10
   \   00000034   3080BD18           POPNE    {R4,R5,PC}
    662            {
    663              DisableIDLETMR();
   \   00000038   7F0100EF           SWI      +383
    664            }
    665          }
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
    666          

   \                                 In segment CODE, align 4, keep-with-next
    667          void selbcfg_menu_iconhndl(void *gui, int cur_item, void *user_pointer)
    668          {
   \                     selbcfg_menu_iconhndl:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    669            SEL_BCFG  *t;
    670            WSHDR *ws;
    671            int len;
    672            void *item=AllocMenuItem(gui);
    673            t=FindBCFGByN(cur_item);
    674            if (t)
   \   00000008   ........           LDR      R8,??DataTable19  ;; _percent_u
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   970100EF           SWI      +407
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   00508DE5           STR      R5,[SP, #+0]
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           BL       FindBCFGByNS
   \   00000028   0070B0E1           MOVS     R7,R0
   \   0000002C   0900000A           BEQ      ??selbcfg_menu_iconhndl_0
    675            {
    676              len=strlen(t->cfgname);
   \   00000030   040087E2           ADD      R0,R7,#+4
   \   00000034   1B0000EF           SWI      +27
    677              len=strlen(t->cfgname);
   \   00000038   040087E2           ADD      R0,R7,#+4
   \   0000003C   1B0000EF           SWI      +27
    678              ws=AllocMenuWS(gui,len+4);
   \   00000040   041080E2           ADD      R1,R0,#+4
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   980100EF           SWI      +408
   \   0000004C   0090A0E1           MOV      R9,R0
    679              wsprintf(ws,_percent_t,t->cfgname);
   \   00000050   042087E2           ADD      R2,R7,#+4
   \   00000054   040000EA           B        ??selbcfg_menu_iconhndl_1
    680            }
    681            else
    682            {
    683              ws=AllocMenuWS(gui,10);
   \                     ??selbcfg_menu_iconhndl_0:
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   980100EF           SWI      +408
   \   00000064   0090A0E1           MOV      R9,R0
    684              wsprintf(ws,_percent_t,"Ошибка");
   \   00000068   642088E2           ADD      R2,R8,#+100
   \                     ??selbcfg_menu_iconhndl_1:
   \   0000006C   061088E2           ADD      R1,R8,#+6
   \   00000070   240100EF           SWI      +292
    685            }
    686            SetMenuItemText(gui, item, ws, cur_item);
   \   00000074   0530A0E1           MOV      R3,R5
   \   00000078   0920A0E1           MOV      R2,R9
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   9A0100EF           SWI      +410
    687          }
   \   00000088   F183BDE8           POP      {R0,R4-R9,PC}    ;; return
    688          
    689          int selbcfg_softkeys[]={0,1,2};
    690          SOFTKEY_DESC selbcfg_sk[]=
    691          {
    692            {0x0018,0x0000,(int)"Выбрать"},
    693            {0x0001,0x0000,(int)bcfgmenu_sk_r},
    694            {0x003D,0x0000,(int)"+"}
    695          };
    696          
    697          SOFTKEYSTAB selbcfg_skt=
    698          {
    699            selbcfg_sk,0
    700          };
    701          HEADER_DESC selbcfg_HDR={0,0,0,0,NULL,(int)bcfg_hdr_text,LGP_NULL};
    702          
    703          MENU_DESC selbcfg_STRUCT=
    704          {
    705            8,selbcfg_menu_onkey,selbcfg_menu_ghook,NULL,
    706            selbcfg_softkeys,
    707            &selbcfg_skt,
    708            0x10,
    709            selbcfg_menu_iconhndl,
    710            NULL,   //Items
    711            NULL,   //Procs
    712            0   //n
    713          };
    714          

   \                                 In segment CODE, align 4, keep-with-next
    715          int CreateSelectBCFGMenu()
    716          {
   \                     CreateSelectBCFGMenu:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    717            UpdateBCFGHeader();
    718            unsigned int err;
    719            DIR_ENTRY de;
    720            const char *s;
    721            SEL_BCFG *sb;
    722            int n_bcfg=0;
    723            char str[128];
    724            if (!isdir((s=_mmc_etc_path),&err))
   \   00000004   74619FE5           LDR      R6,??CreateSelectBCFGMenu_0  ;; `?<Constant "*.bcfg">`
   \   00000008   8FDF4DE2           SUB      SP,SP,#+572
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   ........           BL       UpdateBCFGHeader
   \   00000014   085086E2           ADD      R5,R6,#+8
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   080086E2           ADD      R0,R6,#+8
   \   00000020   910000EF           SWI      +145
   \   00000024   000050E3           CMP      R0,#+0
    725            {
    726              s=_data_etc_path;
   \   00000028   18508602           ADDEQ    R5,R6,#+24
    727            }
    728            strcpy(str,s);
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   6F0F8DE2           ADD      R0,SP,#+444
   \   00000034   1A0000EF           SWI      +26
    729            strcat(str,"*.bcfg");
   \   00000038   0610A0E1           MOV      R1,R6
    730            if (FindFirstFile(&de,str,&err))
   \   0000003C   ........           LDR      R6,??DataTable17  ;; ed1_desc
   \   00000040   6F0F8DE2           ADD      R0,SP,#+444
   \   00000044   170000EF           SWI      +23
   \   00000048   0070A0E3           MOV      R7,#+0
   \   0000004C   0D20A0E1           MOV      R2,SP
   \   00000050   6F1F8DE2           ADD      R1,SP,#+444
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   6B0000EF           SWI      +107
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   2D00000A           BEQ      ??CreateSelectBCFGMenu_1
    731            {
    732              do
    733              {
    734                if (!(de.file_attr&FA_DIRECTORY))
   \                     ??CreateSelectBCFGMenu_2:
   \   00000064   F201DDE1           LDRSH    R0,[SP, #+18]
   \   00000068   100010E3           TST      R0,#0x10
   \   0000006C   2500001A           BNE      ??CreateSelectBCFGMenu_3
    735                {
    736                  extern int strcmp_nocase(const char *s, const char *d);
    737                  sb=malloc(sizeof(SEL_BCFG));
   \   00000070   C400A0E3           MOV      R0,#+196
   \   00000074   140000EF           SWI      +20
   \   00000078   0080A0E1           MOV      R8,R0
    738                  strcpy(sb->fullpath,s);
   \   0000007C   0510A0E1           MOV      R1,R5
   \   00000080   440088E2           ADD      R0,R8,#+68
   \   00000084   1A0000EF           SWI      +26
    739                  strcat(sb->fullpath,de.file_name);
   \   00000088   AD108DE2           ADD      R1,SP,#+173
   \   0000008C   440088E2           ADD      R0,R8,#+68
   \   00000090   170000EF           SWI      +23
    740                  strcpy(sb->cfgname,de.file_name);
   \   00000094   AD108DE2           ADD      R1,SP,#+173
   \   00000098   040088E2           ADD      R0,R8,#+4
   \   0000009C   1A0000EF           SWI      +26
    741                  sb->cfgname[strlen(de.file_name)-5]=0;
   \   000000A0   AD008DE2           ADD      R0,SP,#+173
   \   000000A4   1B0000EF           SWI      +27
   \   000000A8   050040E2           SUB      R0,R0,#+5
   \   000000AC   080080E0           ADD      R0,R0,R8
   \   000000B0   0470C0E5           STRB     R7,[R0, #+4]
    742                  sb->next=0;
   \   000000B4   007088E5           STR      R7,[R8, #+0]
    743                  if (sbtop)
   \   000000B8   B49996E5           LDR      R9,[R6, #+2484]
   \   000000BC   000059E3           CMP      R9,#+0
   \   000000C0   0E00000A           BEQ      ??CreateSelectBCFGMenu_4
    744                  {
    745                    SEL_BCFG *sbr, *sbt;
    746                    sbr=(SEL_BCFG *)&sbtop;
   \   000000C4   B400A0E3           MOV      R0,#+180
   \   000000C8   900E80E3           ORR      R0,R0,#0x900
   \   000000CC   06A080E0           ADD      R10,R0,R6
    747                    sbt=sbtop;
    748                    while(strcmp_nocase(sbt->cfgname,sb->cfgname)<0)
   \                     ??CreateSelectBCFGMenu_5:
   \   000000D0   041088E2           ADD      R1,R8,#+4
   \   000000D4   040089E2           ADD      R0,R9,#+4
   \   000000D8   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0300005A           BPL      ??CreateSelectBCFGMenu_6
    749                    {
    750                      sbr=sbt;
   \   000000E4   09A0A0E1           MOV      R10,R9
    751                      sbt=sbt->next;
   \   000000E8   009099E5           LDR      R9,[R9, #+0]
    752                      if (!sbt) break;
   \   000000EC   000059E3           CMP      R9,#+0
   \   000000F0   F6FFFF1A           BNE      ??CreateSelectBCFGMenu_5
    753                    }
    754                    sb->next=sbt;
   \                     ??CreateSelectBCFGMenu_6:
   \   000000F4   009088E5           STR      R9,[R8, #+0]
    755                    sbr->next=sb;
   \   000000F8   00808AE5           STR      R8,[R10, #+0]
   \   000000FC   000000EA           B        ??CreateSelectBCFGMenu_7
    756                  }
    757                  else
    758                  {
    759                    sbtop=sb;
   \                     ??CreateSelectBCFGMenu_4:
   \   00000100   B48986E5           STR      R8,[R6, #+2484]
    760                  }
    761                  n_bcfg++;
   \                     ??CreateSelectBCFGMenu_7:
   \   00000104   014084E2           ADD      R4,R4,#+1
    762                }
    763              }
    764              while(FindNextFile(&de,&err));
   \                     ??CreateSelectBCFGMenu_3:
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   04008DE2           ADD      R0,SP,#+4
   \   00000110   6C0000EF           SWI      +108
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   D1FFFF1A           BNE      ??CreateSelectBCFGMenu_2
    765            }
    766            FindClose(&de,&err);
   \                     ??CreateSelectBCFGMenu_1:
   \   0000011C   0D10A0E1           MOV      R1,SP
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   6D0000EF           SWI      +109
    767            prev_bcfg_itemcount=n_bcfg;
   \   00000128   BC4986E5           STR      R4,[R6, #+2492]
    768            patch_header(&selbcfg_HDR);
   \   0000012C   4C7086E5           STR      R7,[R6, #+76]
   \   00000130   888100EF           SWI      +33160
   \   00000134   010040E2           SUB      R0,R0,#+1
   \   00000138   B005C6E1           STRH     R0,[R6, #+80]
   \   0000013C   8A8100EF           SWI      +33162
   \   00000140   010040E2           SUB      R0,R0,#+1
   \   00000144   B205C6E1           STRH     R0,[R6, #+82]
    769            return sel_bcfg_id=CreateMenu(0,0,&selbcfg_STRUCT,&selbcfg_HDR,0,n_bcfg,sbtop,0);
   \   00000148   0000A0E3           MOV      R0,#+0
   \   0000014C   01002DE9           PUSH     {R0}
   \   00000150   B40996E5           LDR      R0,[R6, #+2484]
   \   00000154   4C3086E2           ADD      R3,R6,#+76
   \   00000158   01002DE9           PUSH     {R0}
   \   0000015C   10002DE9           PUSH     {R4}
   \   00000160   B42E86E2           ADD      R2,R6,#+2880
   \   00000164   0700A0E1           MOV      R0,R7
   \   00000168   01002DE9           PUSH     {R0}
   \   0000016C   0010A0E1           MOV      R1,R0
   \   00000170   520100EF           SWI      +338
   \   00000174   B80986E5           STR      R0,[R6, #+2488]
   \   00000178   93DF8DE2           ADD      SP,SP,#+588
   \   0000017C   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??CreateSelectBCFGMenu_0:
   \   00000180   ........           DC32     `?<Constant "*.bcfg">`
    770          }
    771          

   \                                 In segment CODE, align 4, keep-with-next
    772          void maincsm_oncreate(CSM_RAM *data)
    773          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    774            MAIN_CSM *csm=(MAIN_CSM*)data;
    775            ews=AllocWS(256);
   \   00000004   ........           LDR      R5,??DataTable17  ;; ed1_desc
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   250100EF           SWI      +293
   \   00000014   AC0985E5           STR      R0,[R5, #+2476]
    776            
    777            char *s=cfg_name;
    778            int find_cfg=1;
    779            if (*s>='0' && *s<='9' && *(s+1)==':')  // Наверное путь к bcfg :)
   \   00000018   9C6EA0E3           MOV      R6,#+2496
   \   0000001C   0500D6E7           LDRB     R0,[R6, +R5]
   \   00000020   300050E3           CMP      R0,#+48
   \   00000024   0E00003A           BCC      ??maincsm_oncreate_0
   \   00000028   3A0050E3           CMP      R0,#+58
   \   0000002C   0C00002A           BCS      ??maincsm_oncreate_0
   \   00000030   C109D5E5           LDRB     R0,[R5, #+2497]
   \   00000034   3A0050E3           CMP      R0,#+58
   \   00000038   0900001A           BNE      ??maincsm_oncreate_0
    780            {
    781              if (LoadCfg(s))
   \   0000003C   050086E0           ADD      R0,R6,R5
   \   00000040   ........           BL       LoadCfg
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0500000A           BEQ      ??maincsm_oncreate_0
    782              {
    783                UpdateCSMname(s);
   \   0000004C   050086E0           ADD      R0,R6,R5
   \   00000050   ........           BL       UpdateCSMname
    784                csm->gui_id=create_ed(0);
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   ........           BL       create_ed
   \   0000005C   280084E5           STR      R0,[R4, #+40]
    785                find_cfg=0;
   \   00000060   030000EA           B        ??maincsm_oncreate_1
    786              }
    787            }
    788            if (find_cfg)
    789            {
    790              UpdateCSMname("Выберите BCFG");
   \                     ??maincsm_oncreate_0:
   \   00000064   18009FE5           LDR      R0,??maincsm_oncreate_2  ;; `?<Constant "\\307\\340\\352\\360\\373\\362\\374">` + 20
   \   00000068   ........           BL       UpdateCSMname
    791              csm->sel_bcfg_id=CreateSelectBCFGMenu();    
   \   0000006C   ........           BL       CreateSelectBCFGMenu
   \   00000070   2C0084E5           STR      R0,[R4, #+44]
    792            }
    793            csm->csm.state=0;
   \                     ??maincsm_oncreate_1:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   100084E5           STR      R0,[R4, #+16]
    794            csm->csm.unk1=0;
   \   0000007C   140084E5           STR      R0,[R4, #+20]
    795          }
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_2:
   \   00000084   ........           DC32     `?<Constant "\\307\\340\\352\\360\\373\\362\\374">` + 20
    796          

   \                                 In segment CODE, align 4, keep-with-next
    797          void Killer(void)
    798          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    799            extern void *ELF_BEGIN;
    800            extern void kill_data(void *p, void (*func_p)(void *));
    801            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    802          }
    803          

   \                                 In segment CODE, align 4, keep-with-next
    804          void SaveConfig(void)
    805          {
   \                     SaveConfig:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    806            unsigned int ul;
    807            int f=fopen(cfg_name,A_ReadWrite+A_Create+A_Truncate+A_BIN,P_READ+P_WRITE,&ul);
   \   00000004   ........           LDR      R5,??DataTable17  ;; ed1_desc
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   9C4EA0E3           MOV      R4,#+2496
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   602FA0E3           MOV      R2,#+384
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   831C81E3           ORR      R1,R1,#0x8300
   \   00000020   050084E0           ADD      R0,R4,R5
   \   00000024   0A0000EF           SWI      +10
   \   00000028   0060A0E1           MOV      R6,R0
    808            if (f!=-1)
   \   0000002C   010076E3           CMN      R6,#+1
   \   00000030   0600000A           BEQ      ??SaveConfig_0
    809            {
    810              fwrite(f,cfg,size_cfg,&ul);
   \   00000034   A42195E5           LDR      R2,[R5, #+420]
   \   00000038   A01195E5           LDR      R1,[R5, #+416]
   \   0000003C   0D30A0E1           MOV      R3,SP
   \   00000040   0C0000EF           SWI      +12
    811              fclose(f,&ul);
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   0D0000EF           SWI      +13
    812            }
    813            GBS_SendMessage(MMI_CEPID, MSG_RECONFIGURE_REQ,0,cfg_name);
   \                     ??SaveConfig_0:
   \   00000050   053084E0           ADD      R3,R4,R5
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   F110A0E3           MOV      R1,#+241
   \   0000005C   C01F81E3           ORR      R1,R1,#0x300
   \   00000060   0900A0E3           MOV      R0,#+9
   \   00000064   420C80E3           ORR      R0,R0,#0x4200
   \   00000068   000100EF           SWI      +256
    814          }
   \   0000006C   7180BDE8           POP      {R0,R4-R6,PC}    ;; return
    815          

   \                                 In segment CODE, align 4, keep-with-next
    816          void maincsm_onclose(CSM_RAM *csm)
    817          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    818            FreeWS(ews);
   \   00000004   ........           LDR      R4,??DataTable17  ;; ed1_desc
   \   00000008   AC0994E5           LDR      R0,[R4, #+2476]
   \   0000000C   290100EF           SWI      +297
    819            if (cfg) mfree(cfg);
   \   00000010   A00194E5           LDR      R0,[R4, #+416]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0000000A           BEQ      ??maincsm_onclose_0
   \   0000001C   150000EF           SWI      +21
    820            SUBPROC((void *)Killer);
   \                     ??maincsm_onclose_0:
   \   00000020   04009FE5           LDR      R0,??maincsm_onclose_1  ;; Killer
   \   00000024   710100EF           SWI      +369
    821          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_1:
   \   0000002C   ........           DC32     Killer
    822          

   \                                 In segment CODE, align 4, keep-with-next
    823          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    824          {
   \                     maincsm_onmessage:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    825            MAIN_CSM *csm=(MAIN_CSM*)data;
    826            CFG_HDR *hp;
    827            if (msg->msg==MSG_GUI_DESTROYED)
   \   00000008   ........           LDR      R5,??DataTable20  ;; ed1_desc
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   F200D6E1           LDRSH    R0,[R6, #+2]
   \   00000014   0270E0E3           MVN      R7,#+2
   \   00000018   980050E3           CMP      R0,#+152
   \   0000001C   1F00001A           BNE      ??maincsm_onmessage_0
    828            {
    829              if ((int)msg->data0==csm->gui_id)
   \   00000020   080096E5           LDR      R0,[R6, #+8]
   \   00000024   281094E5           LDR      R1,[R4, #+40]
   \   00000028   0080A0E3           MOV      R8,#+0
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   1200001A           BNE      ??maincsm_onmessage_1
    830              {
    831                if (level)
   \   00000034   5C1195E5           LDR      R1,[R5, #+348]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0800000A           BEQ      ??maincsm_onmessage_2
    832                {
    833          	hp=levelstack[level];
   \   00000040   012185E0           ADD      R2,R5,R1, LSL #+2
   \   00000044   600192E5           LDR      R0,[R2, #+352]
    834                  levelstack[level]=NULL;
   \   00000048   608182E5           STR      R8,[R2, #+352]
    835          	level--;
   \   0000004C   011041E2           SUB      R1,R1,#+1
   \   00000050   5C1185E5           STR      R1,[R5, #+348]
    836          	csm->gui_id=create_ed(hp);
   \   00000054   ........           BL       create_ed
   \   00000058   280084E5           STR      R0,[R4, #+40]
    837          	return (1);
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   F081BDE8           POP      {R4-R8,PC}
    838                }
    839                if ((int)msg->data1==1)
   \                     ??maincsm_onmessage_2:
   \   00000064   0C0096E5           LDR      R0,[R6, #+12]
   \   00000068   010050E3           CMP      R0,#+1
   \   0000006C   0100001A           BNE      ??maincsm_onmessage_3
    840          	SaveConfig();
   \   00000070   ........           BL       SaveConfig
   \   00000074   000000EA           B        ??maincsm_onmessage_4
    841                else 
    842          	csm->csm.state=-3;
   \                     ??maincsm_onmessage_3:
   \   00000078   107084E5           STR      R7,[R4, #+16]
    843                csm->gui_id=0;
   \                     ??maincsm_onmessage_4:
   \   0000007C   288084E5           STR      R8,[R4, #+40]
    844              }
    845              if ((int)msg->data0==csm->sel_bcfg_id)
   \                     ??maincsm_onmessage_1:
   \   00000080   080096E5           LDR      R0,[R6, #+8]
   \   00000084   2C1094E5           LDR      R1,[R4, #+44]
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   0300001A           BNE      ??maincsm_onmessage_0
    846              {
    847                if (csm->gui_id==0)
   \   00000090   280094E5           LDR      R0,[R4, #+40]
   \   00000094   000050E3           CMP      R0,#+0
    848                  csm->csm.state=-3;
   \   00000098   10708405           STREQ    R7,[R4, #+16]
    849                csm->sel_bcfg_id=0;
   \   0000009C   2C8084E5           STR      R8,[R4, #+44]
    850              }
    851            }
    852            if ((msg->msg==MSG_RECONFIGURE_REQ)&&(cfg_name==(char *)msg->data0))
   \                     ??maincsm_onmessage_0:
   \   000000A0   F200D6E1           LDRSH    R0,[R6, #+2]
   \   000000A4   F110A0E3           MOV      R1,#+241
   \   000000A8   C01F81E3           ORR      R1,R1,#0x300
   \   000000AC   010050E1           CMP      R0,R1
   \   000000B0   0300001A           BNE      ??maincsm_onmessage_5
   \   000000B4   081096E5           LDR      R1,[R6, #+8]
   \   000000B8   9C0E85E2           ADD      R0,R5,#+2496
   \   000000BC   010050E1           CMP      R0,R1
    853            {
    854              csm->csm.state=-3;
   \   000000C0   10708405           STREQ    R7,[R4, #+16]
    855            }
    856            return(1);
   \                     ??maincsm_onmessage_5:
   \   000000C4   0100A0E3           MOV      R0,#+1
   \   000000C8   F081BDE8           POP      {R4-R8,PC}       ;; return
    857          }
    858          

   \                                 In segment DATA_Z, align 4, align-sorted
    859          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
   \                     _percent_u:
   \   00000000   257500             DC8 "%u"
   \                     _percent_d:
   \   00000003   256400             DC8 "%d"
   \                     _percent_t:
   \   00000006   257400             DC8 "%t"
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   C2FBE1E5F0E8       DC8 "\302\373\341\345\360\350\362\345 \357\340\357\352\363"
   \              F2E520EFE0EF
   \              EAF300      
   \   0000001B   00                 DC8 0
   \   0000001C   C2FBE1E5F0E8       DC8 "\302\373\341\345\360\350\362\345 \364\340\351\353"
   \              F2E520F4E0E9
   \              EB00        
   \   0000002A   0000               DC8 0, 0
   \   0000002C   25642C256400       DC8 "%d,%d"
   \   00000032   0000               DC8 0, 0
   \   00000034   253032582C25       DC8 "%02X,%02X,%02X,%02X"
   \              3032582C2530
   \              32582C253032
   \              5800        
   \   00000048   524543543A25       DC8 "RECT:%03d;%03d;%03d;%03d;"
   \              3033643B2530
   \              33643B253033
   \              643B25303364
   \              3B00        
   \   00000062   0000               DC8 0, 0
   \   00000064   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340"
   \              00          
   \   0000006B   00                 DC8 0
   \   0000006C   CAEEEDF4E8E3       DC8 "\312\356\355\364\350\343: %w"
   \              3A20257700  
   \   00000077   00                 DC8 0
   \   00000078   CDE5EEE6E8E4       DC8 "\315\345\356\346\350\344\340\355\355\373\351 \352\356\355\345\366 \364\340\351\353\340!!!"
   \              E0EDEDFBE920
   \              EAEEEDE5F620
   \              F4E0E9EBE021
   \              212100      
   \   00000093   00                 DC8 0
   \   00000094   CDE5E2E5F0ED       DC8 "\315\345\342\345\360\355\373\351 \350\355\344\345\352\361 \342 \352\356\354\341\356\341\356\352\361!!!"
   \              FBE920E8EDE4
   \              E5EAF120E220
   \              EAEEECE1EEE1
   \              EEEAF1212121
   \              00          
   \   000000B3   00                 DC8 0
   \   000000B4   2530325800         DC8 "%02X"
   \   000000B9   000000             DC8 0, 0, 0
   \   000000BC   C2E2EEE400         DC8 "\302\342\356\344"
   \   000000C1   000000             DC8 0, 0, 0
   \   000000C4   CDE5EFEEE4E4       DC8 "\315\345\357\356\344\344\345\360\346\350\342\340\345\354\373\351 \362\350\357 %d"
   \              E5F0E6E8E2E0
   \              E5ECFBE920F2
   \              E8EF20256400
    860          
    861          const struct
    862          {
    863            CSM_DESC maincsm;
    864            WSHDR maincsm_name;
    865          }MAINCSM =
   \                     MAINCSM:
   \   000000DC   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 48, 1
   \              ............
   \              300000000100
   \              0000        
   \   000000F0   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000104   8B00               DC16 139
   \   00000106   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "*.bcfg">`:
   \   00000000   2A2E62636667       DC8 "*.bcfg"
   \              00          
   \   00000007   00                 DC8 0
   \                     _mmc_etc_path:
   \   00000008   343A5C5A6269       DC8 "4:\\Zbin\\etc\\"
   \              6E5C6574635C
   \              00          
   \   00000015   000000             DC8 0, 0, 0
   \                     _data_etc_path:
   \   00000018   303A5C5A6269       DC8 "0:\\Zbin\\etc\\"
   \              6E5C6574635C
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     table_T9Key:
   \   00000000   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000008   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000010   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000018   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000020   31303030312A       DC8 31H, 30H, 30H, 30H, 31H, 2AH, 2AH, 30H
   \              2A30        
   \   00000028   2A2A2A303030       DC8 2AH, 2AH, 2AH, 30H, 30H, 30H, 30H, 2AH
   \              302A        
   \   00000030   303132333435       DC8 30H, 31H, 32H, 33H, 34H, 35H, 36H, 37H
   \              3637        
   \   00000038   383930302A2A       DC8 38H, 39H, 30H, 30H, 2AH, 2AH, 2AH, 30H
   \              2A30        
   \   00000040   303232323333       DC8 30H, 32H, 32H, 32H, 33H, 33H, 33H, 34H
   \              3334        
   \   00000048   343435353536       DC8 34H, 34H, 35H, 35H, 35H, 36H, 36H, 36H
   \              3636        
   \   00000050   373737373838       DC8 37H, 37H, 37H, 37H, 38H, 38H, 38H, 39H
   \              3839        
   \   00000058   393939312A31       DC8 39H, 39H, 39H, 31H, 2AH, 31H, 31H, 30H
   \              3130        
   \   00000060   313232323333       DC8 31H, 32H, 32H, 32H, 33H, 33H, 33H, 34H
   \              3334        
   \   00000068   343435353536       DC8 34H, 34H, 35H, 35H, 35H, 36H, 36H, 36H
   \              3636        
   \   00000070   373737373838       DC8 37H, 37H, 37H, 37H, 38H, 38H, 38H, 39H
   \              3839        
   \   00000078   393939313131       DC8 39H, 39H, 39H, 31H, 31H, 31H, 2AH, 31H
   \              2A31        
   \   00000080   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000088   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000090   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000098   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000A0   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000A8   333131313131       DC8 33H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000B0   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000B8   333131313131       DC8 33H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000C0   323232323333       DC8 32H, 32H, 32H, 32H, 33H, 33H, 33H, 33H
   \              3333        
   \   000000C8   343434343535       DC8 34H, 34H, 34H, 34H, 35H, 35H, 35H, 36H
   \              3536        
   \   000000D0   363637373737       DC8 36H, 36H, 37H, 37H, 37H, 37H, 38H, 38H
   \              3838        
   \   000000D8   383838393939       DC8 38H, 38H, 38H, 39H, 39H, 39H, 39H, 39H
   \              3939        
   \   000000E0   323232323333       DC8 32H, 32H, 32H, 32H, 33H, 33H, 33H, 33H
   \              3333        
   \   000000E8   343434343535       DC8 34H, 34H, 34H, 34H, 35H, 35H, 35H, 36H
   \              3536        
   \   000000F0   363637373737       DC8 36H, 36H, 37H, 37H, 37H, 37H, 38H, 38H
   \              3838        
   \   000000F8   383838393939       DC8 38H, 38H, 38H, 39H, 39H, 39H, 39H, 39H
   \              3939        
    866          {
    867            {
    868            maincsm_onmessage,
    869            maincsm_oncreate,
    870          #ifdef NEWSGOLD
    871            0,
    872            0, 
    873            0, 
    874            0,
    875          #endif
    876            maincsm_onclose,
    877            sizeof(MAIN_CSM),
    878            1,
    879            &minus11
    880            },
    881            {
    882              maincsm_name_body,
    883              NAMECSM_MAGIC1,
    884              NAMECSM_MAGIC2,
    885              0x0,
    886              139
    887            }
    888          };
    889          
    890          typedef struct
    891          {
    892            unsigned short u;
    893            char dos;
    894            char win;
    895            char koi8;
    896          } TUNICODE2CHAR;
    897          

   \                                 In segment DATA_C, align 4, align-sorted
    898          const TUNICODE2CHAR unicode2char[]=
   \                     unicode2char:
   \   00000000   1004               DC16 1040
   \   00000002   80C0E100           DC8 128, 192, 225, 0
   \   00000006   1104               DC16 1041
   \   00000008   81C1E200           DC8 129, 193, 226, 0
   \   0000000C   1204               DC16 1042
   \   0000000E   82C2F700           DC8 130, 194, 247, 0
   \   00000012   1304               DC16 1043
   \   00000014   83C3E700           DC8 131, 195, 231, 0
   \   00000018   1404               DC16 1044
   \   0000001A   84C4E400           DC8 132, 196, 228, 0
   \   0000001E   1504               DC16 1045
   \   00000020   85C5E500           DC8 133, 197, 229, 0
   \   00000024   1604               DC16 1046
   \   00000026   86C6F600           DC8 134, 198, 246, 0
   \   0000002A   1704               DC16 1047
   \   0000002C   87C7FA00           DC8 135, 199, 250, 0
   \   00000030   1804               DC16 1048
   \   00000032   88C8E900           DC8 136, 200, 233, 0
   \   00000036   1904               DC16 1049
   \   00000038   89C9EA00           DC8 137, 201, 234, 0
   \   0000003C   1A04               DC16 1050
   \   0000003E   8ACAEB00           DC8 138, 202, 235, 0
   \   00000042   1B04               DC16 1051
   \   00000044   8BCBEC00           DC8 139, 203, 236, 0
   \   00000048   1C04               DC16 1052
   \   0000004A   8CCCED00           DC8 140, 204, 237, 0
   \   0000004E   1D04               DC16 1053
   \   00000050   8DCDEE00           DC8 141, 205, 238, 0
   \   00000054   1E04               DC16 1054
   \   00000056   8ECEEF00           DC8 142, 206, 239, 0
   \   0000005A   1F04               DC16 1055
   \   0000005C   8FCFF000           DC8 143, 207, 240, 0
   \   00000060   2004               DC16 1056
   \   00000062   90D0F200           DC8 144, 208, 242, 0
   \   00000066   2104               DC16 1057
   \   00000068   91D1F300           DC8 145, 209, 243, 0
   \   0000006C   2204               DC16 1058
   \   0000006E   92D2F400           DC8 146, 210, 244, 0
   \   00000072   2304               DC16 1059
   \   00000074   93D3F500           DC8 147, 211, 245, 0
   \   00000078   2404               DC16 1060
   \   0000007A   94D4E600           DC8 148, 212, 230, 0
   \   0000007E   2504               DC16 1061
   \   00000080   95D5E800           DC8 149, 213, 232, 0
   \   00000084   2604               DC16 1062
   \   00000086   96D6E300           DC8 150, 214, 227, 0
   \   0000008A   2704               DC16 1063
   \   0000008C   97D7FE00           DC8 151, 215, 254, 0
   \   00000090   2804               DC16 1064
   \   00000092   98D8FB00           DC8 152, 216, 251, 0
   \   00000096   2904               DC16 1065
   \   00000098   99D9FD00           DC8 153, 217, 253, 0
   \   0000009C   2A04               DC16 1066
   \   0000009E   9ADAFF00           DC8 154, 218, 255, 0
   \   000000A2   2B04               DC16 1067
   \   000000A4   9BDBF900           DC8 155, 219, 249, 0
   \   000000A8   2C04               DC16 1068
   \   000000AA   9CDCF800           DC8 156, 220, 248, 0
   \   000000AE   2D04               DC16 1069
   \   000000B0   9DDDFC00           DC8 157, 221, 252, 0
   \   000000B4   2E04               DC16 1070
   \   000000B6   9EDEE000           DC8 158, 222, 224, 0
   \   000000BA   2F04               DC16 1071
   \   000000BC   9FDFF100           DC8 159, 223, 241, 0
   \   000000C0   0204               DC16 1026
   \   000000C2   5F805F00           DC8 95, 128, 95, 0
   \   000000C6   0304               DC16 1027
   \   000000C8   5F815F00           DC8 95, 129, 95, 0
   \   000000CC   0904               DC16 1033
   \   000000CE   5F8A5F00           DC8 95, 138, 95, 0
   \   000000D2   0A04               DC16 1034
   \   000000D4   5F8C5F00           DC8 95, 140, 95, 0
   \   000000D8   0C04               DC16 1036
   \   000000DA   5F8D5F00           DC8 95, 141, 95, 0
   \   000000DE   0B04               DC16 1035
   \   000000E0   5F8E5F00           DC8 95, 142, 95, 0
   \   000000E4   0F04               DC16 1039
   \   000000E6   5F8F5F00           DC8 95, 143, 95, 0
   \   000000EA   0E04               DC16 1038
   \   000000EC   F6A15F00           DC8 246, 161, 95, 0
   \   000000F0   0804               DC16 1032
   \   000000F2   4AA34A00           DC8 74, 163, 74, 0
   \   000000F6   0904               DC16 1033
   \   000000F8   83A5BD00           DC8 131, 165, 189, 0
   \   000000FC   0104               DC16 1025
   \   000000FE   F0A8B300           DC8 240, 168, 179, 0
   \   00000102   0404               DC16 1028
   \   00000104   F2AAB400           DC8 242, 170, 180, 0
   \   00000108   0704               DC16 1031
   \   0000010A   F4AFB700           DC8 244, 175, 183, 0
   \   0000010E   0604               DC16 1030
   \   00000110   49B2B600           DC8 73, 178, 182, 0
   \   00000114   0504               DC16 1029
   \   00000116   53BD5300           DC8 83, 189, 83, 0
   \   0000011A   3004               DC16 1072
   \   0000011C   A0E0C100           DC8 160, 224, 193, 0
   \   00000120   3104               DC16 1073
   \   00000122   A1E1C200           DC8 161, 225, 194, 0
   \   00000126   3204               DC16 1074
   \   00000128   A2E2D700           DC8 162, 226, 215, 0
   \   0000012C   3304               DC16 1075
   \   0000012E   A3E3C700           DC8 163, 227, 199, 0
   \   00000132   3404               DC16 1076
   \   00000134   A4E4C400           DC8 164, 228, 196, 0
   \   00000138   3504               DC16 1077
   \   0000013A   A5E5C500           DC8 165, 229, 197, 0
   \   0000013E   3604               DC16 1078
   \   00000140   A6E6D600           DC8 166, 230, 214, 0
   \   00000144   3704               DC16 1079
   \   00000146   A7E7DA00           DC8 167, 231, 218, 0
   \   0000014A   3804               DC16 1080
   \   0000014C   A8E8C900           DC8 168, 232, 201, 0
   \   00000150   3904               DC16 1081
   \   00000152   A9E9CA00           DC8 169, 233, 202, 0
   \   00000156   3A04               DC16 1082
   \   00000158   AAEACB00           DC8 170, 234, 203, 0
   \   0000015C   3B04               DC16 1083
   \   0000015E   ABEBCC00           DC8 171, 235, 204, 0
   \   00000162   3C04               DC16 1084
   \   00000164   ACECCD00           DC8 172, 236, 205, 0
   \   00000168   3D04               DC16 1085
   \   0000016A   ADEDCE00           DC8 173, 237, 206, 0
   \   0000016E   3E04               DC16 1086
   \   00000170   AEEECF00           DC8 174, 238, 207, 0
   \   00000174   3F04               DC16 1087
   \   00000176   AFEFD000           DC8 175, 239, 208, 0
   \   0000017A   4004               DC16 1088
   \   0000017C   E0F0D200           DC8 224, 240, 210, 0
   \   00000180   4104               DC16 1089
   \   00000182   E1F1D300           DC8 225, 241, 211, 0
   \   00000186   4204               DC16 1090
   \   00000188   E2F2D400           DC8 226, 242, 212, 0
   \   0000018C   4304               DC16 1091
   \   0000018E   E3F3D500           DC8 227, 243, 213, 0
   \   00000192   4404               DC16 1092
   \   00000194   E4F4C600           DC8 228, 244, 198, 0
   \   00000198   4504               DC16 1093
   \   0000019A   E5F5C800           DC8 229, 245, 200, 0
   \   0000019E   4604               DC16 1094
   \   000001A0   E6F6C300           DC8 230, 246, 195, 0
   \   000001A4   4704               DC16 1095
   \   000001A6   E7F7DE00           DC8 231, 247, 222, 0
   \   000001AA   4804               DC16 1096
   \   000001AC   E8F8DB00           DC8 232, 248, 219, 0
   \   000001B0   4904               DC16 1097
   \   000001B2   E9F9DD00           DC8 233, 249, 221, 0
   \   000001B6   4A04               DC16 1098
   \   000001B8   EAFADF00           DC8 234, 250, 223, 0
   \   000001BC   4B04               DC16 1099
   \   000001BE   EBFBD900           DC8 235, 251, 217, 0
   \   000001C2   4C04               DC16 1100
   \   000001C4   ECFCD800           DC8 236, 252, 216, 0
   \   000001C8   4D04               DC16 1101
   \   000001CA   EDFDDC00           DC8 237, 253, 220, 0
   \   000001CE   4E04               DC16 1102
   \   000001D0   EEFEC000           DC8 238, 254, 192, 0
   \   000001D4   4F04               DC16 1103
   \   000001D6   EFFFD100           DC8 239, 255, 209, 0
   \   000001DA   5204               DC16 1106
   \   000001DC   5F905F00           DC8 95, 144, 95, 0
   \   000001E0   5304               DC16 1107
   \   000001E2   5F835F00           DC8 95, 131, 95, 0
   \   000001E6   5904               DC16 1113
   \   000001E8   5F9A5F00           DC8 95, 154, 95, 0
   \   000001EC   5A04               DC16 1114
   \   000001EE   5F9C5F00           DC8 95, 156, 95, 0
   \   000001F2   5C04               DC16 1116
   \   000001F4   5F9D5F00           DC8 95, 157, 95, 0
   \   000001F8   5B04               DC16 1115
   \   000001FA   5F9E5F00           DC8 95, 158, 95, 0
   \   000001FE   5F04               DC16 1119
   \   00000200   5F9F5F00           DC8 95, 159, 95, 0
   \   00000204   5E04               DC16 1118
   \   00000206   F7A25F00           DC8 247, 162, 95, 0
   \   0000020A   5804               DC16 1112
   \   0000020C   6ABC6A00           DC8 106, 188, 106, 0
   \   00000210   9104               DC16 1169
   \   00000212   A3B4AD00           DC8 163, 180, 173, 0
   \   00000216   5104               DC16 1105
   \   00000218   F1B8A300           DC8 241, 184, 163, 0
   \   0000021C   5404               DC16 1108
   \   0000021E   F3BAA400           DC8 243, 186, 164, 0
   \   00000222   5704               DC16 1111
   \   00000224   F5BFA700           DC8 245, 191, 167, 0
   \   00000228   5604               DC16 1110
   \   0000022A   69B3A600           DC8 105, 179, 166, 0
   \   0000022E   5504               DC16 1109
   \   00000230   73BE7300           DC8 115, 190, 115, 0
   \   00000234   A000               DC16 160
   \   00000236   5FA02000           DC8 95, 160, 32, 0
   \   0000023A   A400               DC16 164
   \   0000023C   5FA4FD00           DC8 95, 164, 253, 0
   \   00000240   A600               DC16 166
   \   00000242   5FA65F00           DC8 95, 166, 95, 0
   \   00000246   B000               DC16 176
   \   00000248   F8B09C00           DC8 248, 176, 156, 0
   \   0000024C   B700               DC16 183
   \   0000024E   FAB79E00           DC8 250, 183, 158, 0
   \   00000252   0000               DC16 0
   \   00000254   00000000           DC8 0, 0, 0, 0
    899          {
    900            // CAPITAL Cyrillic letters (base)
    901            0x410,0x80,0xC0,0xE1, // А
    902            0x411,0x81,0xC1,0xE2, // Б
    903            0x412,0x82,0xC2,0xF7, // В
    904            0x413,0x83,0xC3,0xE7, // Г
    905            0x414,0x84,0xC4,0xE4, // Д
    906            0x415,0x85,0xC5,0xE5, // Е
    907            0x416,0x86,0xC6,0xF6, // Ж
    908            0x417,0x87,0xC7,0xFA, // З
    909            0x418,0x88,0xC8,0xE9, // И
    910            0x419,0x89,0xC9,0xEA, // Й
    911            0x41A,0x8A,0xCA,0xEB, // К
    912            0x41B,0x8B,0xCB,0xEC, // Л
    913            0x41C,0x8C,0xCC,0xED, // М
    914            0x41D,0x8D,0xCD,0xEE, // Н
    915            0x41E,0x8E,0xCE,0xEF, // О
    916            0x41F,0x8F,0xCF,0xF0, // П
    917            0x420,0x90,0xD0,0xF2, // Р
    918            0x421,0x91,0xD1,0xF3, // С
    919            0x422,0x92,0xD2,0xF4, // Т
    920            0x423,0x93,0xD3,0xF5, // У
    921            0x424,0x94,0xD4,0xE6, // Ф
    922            0x425,0x95,0xD5,0xE8, // Х
    923            0x426,0x96,0xD6,0xE3, // Ц
    924            0x427,0x97,0xD7,0xFE, // Ч
    925            0x428,0x98,0xD8,0xFB, // Ш
    926            0x429,0x99,0xD9,0xFD, // Щ
    927            0x42A,0x9A,0xDA,0xFF, // Ъ
    928            0x42B,0x9B,0xDB,0xF9, // Ы
    929            0x42C,0x9C,0xDC,0xF8, // Ь
    930            0x42D,0x9D,0xDD,0xFC, // Э
    931            0x42E,0x9E,0xDE,0xE0, // Ю
    932            0x42F,0x9F,0xDF,0xF1, // Я
    933            // CAPITAL Cyrillic letters (additional)
    934            0x402,'_',0x80,'_', // _ .*.*
    935            0x403,'_',0x81,'_', // _ .*.*
    936            0x409,'_',0x8A,'_', // _ .*.*
    937            0x40A,'_',0x8C,'_', // _ .*.*
    938            0x40C,'_',0x8D,'_', // _ .*.*
    939            0x40B,'_',0x8E,'_', // _ .*.*
    940            0x40F,'_',0x8F,'_', // _ .*.*
    941            0x40E,0xF6,0xA1,'_', // Ў ...*
    942            0x408,0x4A,0xA3,0x4A, // _ .*.*
    943            0x409,0x83,0xA5,0xBD, // _ .*..
    944            0x401,0xF0,0xA8,0xB3, // Ё
    945            0x404,0xF2,0xAA,0xB4, // Є
    946            0x407,0xF4,0xAF,0xB7, // Ї
    947            0x406,0x49,0xB2,0xB6, // _ .*..
    948            0x405,0x53,0xBD,0x53, // _ .*.*
    949            // SMALL Cyrillic letters (base)
    950            0x430,0xA0,0xE0,0xC1, // а
    951            0x431,0xA1,0xE1,0xC2, // б
    952            0x432,0xA2,0xE2,0xD7, // в
    953            0x433,0xA3,0xE3,0xC7, // г
    954            0x434,0xA4,0xE4,0xC4, // д
    955            0x435,0xA5,0xE5,0xC5, // е
    956            0x436,0xA6,0xE6,0xD6, // ж
    957            0x437,0xA7,0xE7,0xDA, // з
    958            0x438,0xA8,0xE8,0xC9, // и
    959            0x439,0xA9,0xE9,0xCA, // й
    960            0x43A,0xAA,0xEA,0xCB, // к
    961            0x43B,0xAB,0xEB,0xCC, // л
    962            0x43C,0xAC,0xEC,0xCD, // м
    963            0x43D,0xAD,0xED,0xCE, // н
    964            0x43E,0xAE,0xEE,0xCF, // о
    965            0x43F,0xAF,0xEF,0xD0, // п
    966            0x440,0xE0,0xF0,0xD2, // р
    967            0x441,0xE1,0xF1,0xD3, // с
    968            0x442,0xE2,0xF2,0xD4, // т
    969            0x443,0xE3,0xF3,0xD5, // у
    970            0x444,0xE4,0xF4,0xC6, // ф
    971            0x445,0xE5,0xF5,0xC8, // х
    972            0x446,0xE6,0xF6,0xC3, // ц
    973            0x447,0xE7,0xF7,0xDE, // ч
    974            0x448,0xE8,0xF8,0xDB, // ш
    975            0x449,0xE9,0xF9,0xDD, // щ
    976            0x44A,0xEA,0xFA,0xDF, // ъ
    977            0x44B,0xEB,0xFB,0xD9, // ы
    978            0x44C,0xEC,0xFC,0xD8, // ь
    979            0x44D,0xED,0xFD,0xDC, // э
    980            0x44E,0xEE,0xFE,0xC0, // ю
    981            0x44F,0xEF,0xFF,0xD1, // я
    982            // SMALL Cyrillic letters (additional)
    983            0x452,'_',0x90,'_', // _ .*.*
    984            0x453,'_',0x83,'_', // _ .*.*
    985            0x459,'_',0x9A,'_', // _ .*.*
    986            0x45A,'_',0x9C,'_', // _ .*.*
    987            0x45C,'_',0x9D,'_', // _ .*.*
    988            0x45B,'_',0x9E,'_', // _ .*.*
    989            0x45F,'_',0x9F,'_', // _ .*.*
    990            0x45E,0xF7,0xA2,'_', // ў ...*
    991            0x458,0x6A,0xBC,0x6A, // _ .*.*
    992            0x491,0xA3,0xB4,0xAD, // _ .*..
    993            0x451,0xF1,0xB8,0xA3, // ё
    994            0x454,0xF3,0xBA,0xA4, // є
    995            0x457,0xF5,0xBF,0xA7, // ї
    996            0x456,0x69,0xB3,0xA6, // _ .*..
    997            0x455,0x73,0xBE,0x73, // _ .*.*
    998            0x0A0,'_',0xA0,0x20, // space .*..
    999            0x0A4,'_',0xA4,0xFD, // ¤   .*..
   1000            0x0A6,'_',0xA6,'_', // ¦   .*.*
   1001            0x0B0,0xF8,0xB0,0x9C, // °
   1002            0x0B7,0xFA,0xB7,0x9E, // ·
   1003            // 0x2022,,0x95,0x95, //    .*..
   1004            // 0x2116,0xFC,0xB9,0x23, // №   ...*
   1005            // 0x2219,,0xF9,0x9E, //    .*..
   1006            // 0x221A,0xFB,,0x96, // v   ..*.
   1007            // 0x25A0,0xFE,,0x94, // ¦
   1008            0x0000,0,0,0
   1009          };
   1010          

   \                                 In segment CODE, align 4, keep-with-next
   1011          unsigned int char16to8(unsigned int c)
   1012          {
   1013            const TUNICODE2CHAR *p=unicode2char;
   \                     char16to8:
   \   00000000   44109FE5           LDR      R1,??char16to8_0  ;; unicode2char
   1014            unsigned int i;
   1015            if (c<32) return(' ');
   \   00000004   200050E3           CMP      R0,#+32
   \   00000008   2000A033           MOVCC    R0,#+32
   \   0000000C   1EFF2F31           BXCC     LR
   1016            if (c<128) return(c);
   \   00000010   800050E3           CMP      R0,#+128
   \   00000014   0100002A           BCS      ??char16to8_1
   \   00000018   1EFF2FE1           BX       LR
   1017            while((i=p->u))
   1018            {
   1019              if (c==i)
   1020              {
   1021                return(p->win);
   1022              }
   1023              p++;
   \                     ??char16to8_2:
   \   0000001C   061081E2           ADD      R1,R1,#+6
   \                     ??char16to8_1:
   \   00000020   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0300000A           BEQ      ??char16to8_3
   \   0000002C   020050E1           CMP      R0,R2
   \   00000030   F9FFFF1A           BNE      ??char16to8_2
   \   00000034   0300D1E5           LDRB     R0,[R1, #+3]
   \   00000038   1EFF2FE1           BX       LR
   1024            }
   1025            c&=0xFF;
   \                     ??char16to8_3:
   \   0000003C   FF0000E2           AND      R0,R0,#0xFF
   1026            if (c<32) return(' ');
   \   00000040   200050E3           CMP      R0,#+32
   \   00000044   2000A033           MOVCC    R0,#+32
   1027            return(c);
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??char16to8_0:
   \   0000004C   ........           DC32     unicode2char
   1028          }
   1029          

   \                                 In segment CODE, align 4, keep-with-next
   1030          void UpdateCSMname(const char *fname)
   1031          {
   \                     UpdateCSMname:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1032            char *s;
   1033          //  int i;
   1034            WSHDR *ws=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   0050A0E1           MOV      R5,R0
   1035            if ((s=strrchr(fname,'\\'))==0)
   \   00000014   5C10A0E3           MOV      R1,#+92
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   170100EF           SWI      +279
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0900001A           BNE      ??UpdateCSMname_0
   1036            {
   1037              if ((s=strrchr(fname,'/'))==0)
   \   00000028   2F10A0E3           MOV      R1,#+47
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   170100EF           SWI      +279
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0400001A           BNE      ??UpdateCSMname_0
   1038              {
   1039                if ((s=strrchr(fname,':'))==0) s=(char *)fname-1;
   \   0000003C   3A10A0E3           MOV      R1,#+58
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   170100EF           SWI      +279
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   01004402           SUBEQ    R0,R4,#+1
   1040              }
   1041            }
   1042            s++;
   1043            str_2ws(ws,s,128);
   \                     ??UpdateCSMname_0:
   \   00000050   8020A0E3           MOV      R2,#+128
   \   00000054   011080E2           ADD      R1,R0,#+1
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   6C0100EF           SWI      +364
   1044            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Конфиг: %w",ws);
   \   00000060   ........           LDR      R0,??DataTable19  ;; _percent_u
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   6C1080E2           ADD      R1,R0,#+108
   \   0000006C   F40080E2           ADD      R0,R0,#+244
   \   00000070   240100EF           SWI      +292
   1045            FreeWS(ws);
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   290100EF           SWI      +297
   1046          }
   \   0000007C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1047          

   \                                 In segment CODE, align 4, keep-with-next
   1048          void ErrorMsg(const char *msg)
   1049          {
   \                     ErrorMsg:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1050            LockSched();
   \   00000008   460100EF           SWI      +326
   1051            ShowMSG(1,(int)msg);
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   480100EF           SWI      +328
   1052            UnlockSched();
   \   00000018   470100EF           SWI      +327
   1053          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ed1_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for ed1_desc>`
   \                     ed1_hdr:
   \   00000038                      DS8 20
   \   0000004C                      REQUIRE `?<Initializer for ed1_hdr>`
   \                     selbcfg_HDR:
   \   0000004C                      DS8 20
   \   00000060                      REQUIRE `?<Initializer for selbcfg_HDR>`
   \                     key_names:
   \   00000060                      DS8 252
   \   0000015C                      REQUIRE `?<Initializer for key_names>`
   \                     level:
   \   0000015C                      DS8 4
   \   00000160                      REQUIRE `?<Initializer for level>`
   \                     levelstack:
   \   00000160                      DS8 64
   \   000001A0                      REQUIRE `?<Initializer for levelstack>`
   \                     cfg:
   \   000001A0                      DS8 4
   \   000001A4                      REQUIRE `?<Initializer for cfg>`
   \                     size_cfg:
   \   000001A4                      DS8 4
   \   000001A8                      REQUIRE `?<Initializer for size_cfg>`
   \                     cfg_h:
   \   000001A8                      DS8 2048
   \   000009A8                      REQUIRE `?<Initializer for cfg_h>`
   \                     total_items:
   \   000009A8                      DS8 4
   \   000009AC                      REQUIRE `?<Initializer for total_items>`
   \                     ews:
   \   000009AC                      DS8 4
   \   000009B0                      REQUIRE `?<Initializer for ews>`
   \                     maincsm_id:
   \   000009B0                      DS8 4
   \   000009B4                      REQUIRE `?<Initializer for maincsm_id>`
   \                     sbtop:
   \   000009B4                      DS8 4
   \   000009B8                      REQUIRE `?<Initializer for sbtop>`
   \                     sel_bcfg_id:
   \   000009B8                      DS8 4
   \   000009BC                      REQUIRE `?<Initializer for sel_bcfg_id>`
   \                     prev_bcfg_itemcount:
   \   000009BC                      DS8 4
   \   000009C0                      REQUIRE `?<Initializer for prev_bcfg_itemcount>`
   \                     cfg_name:
   \   000009C0                      DS8 256
   \   00000AC0                      REQUIRE `?<Initializer for cfg_name>`
   \                     T9Key:
   \   00000AC0                      DS8 32
   \   00000AE0                      REQUIRE `?<Initializer for T9Key>`
   1054          char picpath[]="0:\\zbin\\img\\cfgedit.png";
   \                     picpath:
   \   00000AE0                      DS8 24
   \   00000AF8                      REQUIRE `?<Initializer for picpath>`
   \   00000AF8                      DS8 8
   \   00000B00                      REQUIRE `?<Initializer for ok>`
   \   00000B00                      DS8 8
   \   00000B08                      REQUIRE `?<Initializer for back>`
   \   00000B08                      DS8 8
   \   00000B10                      REQUIRE `?<Initializer for close>`
   \                     bcfg_hdr_text:
   \   00000B10                      DS8 32
   \   00000B30                      REQUIRE `?<Initializer for bcfg_hdr_text>`
   \                     bcfgmenu_sk_r:
   \   00000B30                      DS8 16
   \   00000B40                      REQUIRE `?<Initializer for bcfgmenu_sk_r>`
   \                     selbcfg_STRUCT:
   \   00000B40                      DS8 44
   \   00000B6C                      REQUIRE `?<Initializer for selbcfg_STRUCT>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     icon:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for icon>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     menu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for menu_sk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     menu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for menu_skt>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     selbcfg_softkeys:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for selbcfg_softkeys>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     selbcfg_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for selbcfg_sk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     selbcfg_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for selbcfg_skt>`

   \                                 In segment CODE, align 4, keep-with-next
   1055          int main(const char *elf_name, const char *fname)
   1056          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1057            picpath[0]=elf_name[0];
   \   00000004   ........           LDR      R5,??DataTable20  ;; ed1_desc
   \   00000008   30D04DE2           SUB      SP,SP,#+48
   \   0000000C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000010   0140B0E1           MOVS     R4,R1
   \   00000014   E00AC5E5           STRB     R0,[R5, #+2784]
   1058            MAIN_CSM main_csm;
   1059            if (fname) strncpy(cfg_name,fname,255);
   \   00000018   0200000A           BEQ      ??main_0
   \   0000001C   FF20A0E3           MOV      R2,#+255
   \   00000020   9C0E85E2           ADD      R0,R5,#+2496
   \   00000024   160100EF           SWI      +278
   1060            zeromem(&main_csm,sizeof(MAIN_CSM));
   \                     ??main_0:
   \   00000028   3010A0E3           MOV      R1,#+48
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   1D0100EF           SWI      +285
   1061            UpdateCSMname(fname);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       UpdateCSMname
   1062            LockSched();
   \   0000003C   460100EF           SWI      +326
   1063            maincsm_id=CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000040   1C009FE5           LDR      R0,??main_1      ;; _percent_u + 220
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   070100EF           SWI      +263
   \   00000050   B00985E5           STR      R0,[R5, #+2480]
   1064            UnlockSched();
   \   00000054   470100EF           SWI      +327
   1065            return 0;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   30D08DE2           ADD      SP,SP,#+48
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_1:
   \   00000064   ........           DC32     _percent_u + 220
   1066          }
   1067          

   \                                 In segment CODE, align 4, keep-with-next
   1068          int getnumwidth(unsigned int num)
   1069          {
   1070            int i=1;
   \                     getnumwidth:
   \   00000000   28209FE5           LDR      R2,??getnumwidth_0  ;; 0xffffffffcccccccd
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0A0050E3           CMP      R0,#+10
   \   0000000C   0500003A           BCC      ??getnumwidth_1
   1071            while(num>=10) 
   1072            {
   1073              num/=10;
   \                     ??getnumwidth_2:
   \   00000010   92308CE0           UMULL    R3,R12,R2,R0
   1074              i++;
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   ACC1A0E1           LSR      R12,R12,#+3
   \   0000001C   0C00A0E1           MOV      R0,R12
   1075            }
   \   00000020   0A0050E3           CMP      R0,#+10
   \   00000024   F9FFFF2A           BCS      ??getnumwidth_2
   1076            return (i);  
   \                     ??getnumwidth_1:
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??getnumwidth_0:
   \   00000030   CDCCCCCC           DC32     0xffffffffcccccccd
   1077          }
   1078          

   \                                 In segment CODE, align 4, keep-with-next
   1079          int create_ed(CFG_HDR *need_to_focus)
   1080          {
   \                     create_ed:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   1081            void *ma=malloc_adr();
   1082            void *eq;
   1083            EDITCONTROL ec;
   1084            
   1085            char *p=cfg;
   \   00000004   D8589FE5           LDR      R5,??create_ed_1  ;; ed1_desc
   \   00000008   88D04DE2           SUB      SP,SP,#+136
   1086            int n=size_cfg;
   1087            CFG_HDR *hp;
   1088            int need_to_jump=3;
   \   0000000C   0080A0E3           MOV      R8,#+0
   \   00000010   148000EF           SWI      +32788
   \   00000014   A06195E5           LDR      R6,[R5, #+416]
   \   00000018   A47195E5           LDR      R7,[R5, #+420]
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   0310A0E3           MOV      R1,#+3
   \   00000024   30108DE5           STR      R1,[SP, #+48]
   1089          
   1090            int i;
   1091            unsigned int curlev=0;
   1092            CFG_HDR *parent=NULL;
   1093            CFG_HDR *parents[16];
   1094          
   1095            PrepareEditControl(&ec);
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   640100EF           SWI      +356
   1096            eq=AllocEQueue(ma,mfree_adr());
   \   00000030   158000EF           SWI      +32789
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   630100EF           SWI      +355
   \   00000040   A0389FE5           LDR      R3,??create_ed_1+0x4  ;; _percent_u + 244
   \   00000044   00A0A0E1           MOV      R10,R0
   \   00000048   400FA0E3           MOV      R0,#+256
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   0090A0E3           MOV      R9,#+0
   \   00000054   4020A0E3           MOV      R2,#+64
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   08008DE2           ADD      R0,SP,#+8
   1097          
   1098            //Имя конфигурации
   1099            ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,(WSHDR *)(&MAINCSM.maincsm_name),256);
   \   00000060   650100EF           SWI      +357
   1100            AddEditControlToEditQend(eq,&ec,ma); //EditControl 1
   \   00000064   0420A0E1           MOV      R2,R4
   \   00000068   08108DE2           ADD      R1,SP,#+8
   \   0000006C   0A00A0E1           MOV      R0,R10
   \   00000070   660100EF           SWI      +358
   1101            parents[0]=NULL;
   \   00000074   0810A0E1           MOV      R1,R8
   \   00000078   4C108DE5           STR      R1,[SP, #+76]
   1102          
   1103            total_items=0;
   \   0000007C   0100A0E1           MOV      R0,R1
   \   00000080   A80985E5           STR      R0,[R5, #+2472]
   \   00000084   04D08DE2           ADD      SP,SP,#+4
   \   00000088   2F0000EA           B        ??create_ed_2
   1104            while(n>=sizeof(CFG_HDR))
   1105            {
   1106              hp=(CFG_HDR*)p;
   1107              cfg_h[total_items]=hp;
   1108              //Добавляем заголовок итема
   1109              wsprintf(ews,"%t:",hp->name);
   1110              if (hp->type==CFG_LEVEL)
   1111              {
   1112                if (hp->min)
   1113                {
   1114                  if ((curlev==level)&&(parent==levelstack[level]))
   1115          	{
   1116          	  ConstructEditControl(&ec,ECT_HEADER,ECF_NORMAL_STR,ews,256);
   1117          	  AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+2
   1118          	}
   1119                }
   1120                else
   1121          	if (curlev)
   1122          	{
   1123          	  parent=parents[curlev];
   1124          	  curlev--;
   1125          	}
   1126              }
   1127              else
   1128              {
   1129                if ((curlev==level)&&(parent==levelstack[level]))
   1130                {
   1131                  if (hp->type!=CFG_CHECKBOX)
   1132                  {
   1133                    ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,ews,256);
   1134                  }
   1135                  else 
   1136                  {
   1137                    ConstructEditControl(&ec,ECT_HEADER,ECF_NORMAL_STR,ews,256);
   1138                  }
   1139          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+2
   1140                }
   1141              }
   1142              n-=sizeof(CFG_HDR);
   1143              p+=sizeof(CFG_HDR);
   1144              switch(hp->type)
   1145              {
   1146              case CFG_UINT:
   1147                n-=sizeof(unsigned int);
   1148                if (n<0)
   1149                {
   1150                L_ERRCONSTR:
   1151                  wsprintf(ews,"Неожиданный конец файла!!!");
   1152                L_ERRCONSTR1:
   1153                  ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,ews,256);
   1154                  AddEditControlToEditQend(eq,&ec,ma);
   1155                  goto L_ENDCONSTR;
   1156                }
   1157                if ((curlev==level)&&(parent==levelstack[level]))
   1158                {
   1159                  wsprintf(ews,_percent_u,*((unsigned int *)p));
   1160          	ConstructEditControl(&ec,ECT_NORMAL_NUM,ECF_APPEND_EOL|ECF_DISABLE_MINUS|ECF_DISABLE_POINT,ews,getnumwidth(hp->max));
   1161          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1162                }
   1163                p+=sizeof(unsigned int);
   1164                break;
   1165              case CFG_INT:
   1166                n-=sizeof(int);
   1167                if (n<0) goto L_ERRCONSTR;
   1168                if ((curlev==level)&&(parent==levelstack[level]))
   1169                {
   1170                  int k1,k2;
   1171                  unsigned int min,max;
   1172                  wsprintf(ews,_percent_d,*((int *)p));
   1173                  min=(k1=hp->min)>=0?k1:(-k1)*10;
   1174                  max=(k2=hp->max)>=0?k2:(-k2)*10;
   1175          	ConstructEditControl(&ec,ECT_NORMAL_NUM,ECF_APPEND_EOL|ECF_DISABLE_POINT,ews,getnumwidth(min>max?min:max));
   1176                  if (k1>=0 && k2>=0) ec.flag|=ECF_DISABLE_MINUS;
   1177          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1178                }
   1179                p+=sizeof(int);
   1180                break;
   1181              case CFG_STR_UTF8:
   1182                n-=(hp->max+1+3)&(~3);
   1183                if (n<0) goto L_ERRCONSTR;
   1184                if ((curlev==level)&&(parent==levelstack[level]))
   1185                {
   1186                  str_2ws(ews,p,hp->max);
   1187          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL,ews,hp->max);
   1188          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1189                }
   1190                p+=(hp->max+1+3)&(~3);
   1191                break;
   1192              case CFG_STR_WIN1251:
   1193                n-=(hp->max+1+3)&(~3);
   1194                if (n<0) goto L_ERRCONSTR;
   1195                if ((curlev==level)&&(parent==levelstack[level]))
   1196                {
   1197                  wsprintf(ews,_percent_t,p);
   1198          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL,ews,hp->max);
   1199          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1200                }
   1201                p+=(hp->max+1+3)&(~3);
   1202                break;
   1203          
   1204              case CFG_UTF8_STRING:
   1205                n-=(hp->max+1+3)&(~3);
   1206                if (n<0) goto L_ERRCONSTR;
   1207                if ((curlev==level)&&(parent==levelstack[level]))
   1208                {
   1209                  utf8_2ws(ews,p,hp->max);
   1210          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL,ews,hp->max);
   1211          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1212                }
   1213                p+=(hp->max+1+3)&(~3);
   1214                break;
   1215              case CFG_UTF8_STRING_PASS:
   1216                n-=(hp->max+1+3)&(~3);
   1217                if (n<0) goto L_ERRCONSTR;
   1218                if ((curlev==level)&&(parent==levelstack[level]))
   1219                {
   1220                  utf8_2ws(ews,p,hp->max);
   1221          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL|ECF_PASSW,ews,hp->max);
   1222          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1223                }
   1224                p+=(hp->max+1+3)&(~3);
   1225                break;      
   1226              case CFG_CBOX:
   1227                n-=hp->max*sizeof(CFG_CBOX_ITEM)+4;
   1228                if (n<0) goto L_ERRCONSTR;
   1229                i=*((int *)p);
   1230                if (i>=hp->max)
   1231                {
   1232                  wsprintf(ews,"Неверный индекс в комбобокс!!!");
   1233                  goto L_ERRCONSTR1;
   1234                }
   1235                if ((curlev==level)&&(parent==levelstack[level]))
   1236                {
   1237                  wsprintf(ews,_percent_t,((CFG_CBOX_ITEM*)(p+4))+i);
   1238          	ConstructComboBox(&ec,7,ECF_APPEND_EOL,ews,32,0,hp->max,i+1);
   1239          	AddEditControlToEditQend(eq,&ec,ma);
   1240                }
   1241                p+=hp->max*sizeof(CFG_CBOX_ITEM)+4;
   1242                break;
   1243                
   1244              case CFG_STR_PASS:
   1245                n-=(hp->max+1+3)&(~3);
   1246                if (n<0) goto L_ERRCONSTR;
   1247                if ((curlev==level)&&(parent==levelstack[level]))
   1248                {
   1249                  wsprintf(ews,_percent_t,p);
   1250          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL|ECF_PASSW,ews,hp->max);
   1251          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1252                }
   1253                p+=(hp->max+1+3)&(~3);
   1254                break;
   1255              case CFG_COORDINATES:
   1256                n-=8;
   1257                if (n<0) goto L_ERRCONSTR;
   1258                if ((curlev==level)&&(parent==levelstack[level]))
   1259                {
   1260                  wsprintf(ews,"%d,%d",*((int *)p),*((int *)p+1));
   1261          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,10);
   1262          	AddEditControlToEditQend(eq,&ec,ma); 
   1263                }
   1264                p+=8;
   1265                break;
   1266              case CFG_COLOR:
   1267                n-=4;
   1268                if (n<0) goto L_ERRCONSTR;
   1269                if ((curlev==level)&&(parent==levelstack[level]))
   1270                {
   1271                  wsprintf(ews,"%02X,%02X,%02X,%02X",*((char *)p),*((char *)p+1),*((char *)p+2),*((char *)p+3));
   1272          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,12);
   1273          	AddEditControlToEditQend(eq,&ec,ma);
   1274                }
   1275                p+=4;
   1276                break;
   1277              case CFG_KEYCODE:
   1278                n-=4;
   1279                if (n<0) goto L_ERRCONSTR;
   1280                if ((curlev==level)&&(parent==levelstack[level]))
   1281                {
   1282                  wsprintf(ews,"%02X",*(int *)p);
   1283          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,12);
   1284          	AddEditControlToEditQend(eq,&ec,ma);
   1285                }
   1286                p+=4;
   1287                break;
   1288          
   1289              case CFG_LEVEL:
   1290                if (n<0) goto L_ERRCONSTR;
   \                     ??create_ed_3:
   \   0000008C   000057E3           CMP      R7,#+0
   \   00000090   8600004A           BMI      ??create_ed_4
   1291                wsprintf(ews,_percent_t,"Ввод");
   \   00000094   50289FE5           LDR      R2,??create_ed_1+0x8  ;; _percent_u + 188
   \   00000098   50189FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   0000009C   240100EF           SWI      +292
   1292                if (hp->min)
   \   000000A0   24009BE5           LDR      R0,[R11, #+36]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   2700000A           BEQ      ??create_ed_2
   1293                {
   1294          	if ((curlev==level)&&(parent==levelstack[level]))
   \   000000AC   5C0195E5           LDR      R0,[R5, #+348]
   \   000000B0   000058E1           CMP      R8,R0
   \   000000B4   2000001A           BNE      ??create_ed_5
   \   000000B8   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000000BC   600190E5           LDR      R0,[R0, #+352]
   \   000000C0   000059E1           CMP      R9,R0
   \   000000C4   1C00001A           BNE      ??create_ed_5
   1295          	{
   1296                    int n_edit;
   1297          	  EDITC_OPTIONS ec_options;
   1298          	  ConstructEditControl(&ec,ECT_READ_ONLY_SELECTED,ECF_APPEND_EOL,ews,256);
   \   000000C8   400FA0E3           MOV      R0,#+256
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   AC3995E5           LDR      R3,[R5, #+2476]
   \   000000D4   4020A0E3           MOV      R2,#+64
   \   000000D8   0810A0E3           MOV      R1,#+8
   \   000000DC   08008DE2           ADD      R0,SP,#+8
   \   000000E0   650100EF           SWI      +357
   1299          	  SetPenColorToEditCOptions(&ec_options,2);
   \   000000E4   0210A0E3           MOV      R1,#+2
   \   000000E8   3C008DE2           ADD      R0,SP,#+60
   \   000000EC   CC0100EF           SWI      +460
   1300          	  SetFontToEditCOptions(&ec_options,1);
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   3C008DE2           ADD      R0,SP,#+60
   \   000000F8   CA0100EF           SWI      +458
   1301          	  CopyOptionsToEditControl(&ec,&ec_options);
   \   000000FC   3C108DE2           ADD      R1,SP,#+60
   \   00000100   08008DE2           ADD      R0,SP,#+8
   \   00000104   CE0100EF           SWI      +462
   1302          	  n_edit=AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   \   00000108   0420A0E1           MOV      R2,R4
   \   0000010C   08108DE2           ADD      R1,SP,#+8
   \   00000110   0A00A0E1           MOV      R0,R10
   \   00000114   660100EF           SWI      +358
   1303                    if (need_to_focus)
   \   00000118   8C109DE5           LDR      R1,[SP, #+140]
   \   0000011C   04D08DE2           ADD      SP,SP,#+4
   \   00000120   000051E3           CMP      R1,#+0
   \   00000124   0100000A           BEQ      ??create_ed_6
   1304                    {
   1305                      if (need_to_focus==hp)  need_to_jump=n_edit;
   \   00000128   0B0051E1           CMP      R1,R11
   \   0000012C   30008D05           STREQ    R0,[SP, #+48]
   1306                    }
   1307          	  total_items++;
   \                     ??create_ed_6:
   \   00000130   A80995E5           LDR      R0,[R5, #+2472]
   \   00000134   010080E2           ADD      R0,R0,#+1
   \   00000138   A80985E5           STR      R0,[R5, #+2472]
   1308          	}
   1309          	curlev++;
   \                     ??create_ed_5:
   \   0000013C   018088E2           ADD      R8,R8,#+1
   1310          	parents[curlev]=parent;
   \   00000140   48008DE2           ADD      R0,SP,#+72
   \   00000144   089180E7           STR      R9,[R0, +R8, LSL #+2]
   1311          	parent=hp;
   \   00000148   0B90A0E1           MOV      R9,R11
   1312                }
   \                     ??create_ed_2:
   \   0000014C   2C0057E3           CMP      R7,#+44
   \   00000150   6400003A           BCC      ??create_ed_7
   \   00000154   A80995E5           LDR      R0,[R5, #+2472]
   \   00000158   06B0A0E1           MOV      R11,R6
   \   0000015C   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000160   A8B180E5           STR      R11,[R0, #+424]
   \   00000164   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000168   04208BE2           ADD      R2,R11,#+4
   \   0000016C   F01F8FE2           ADR      R1,??create_ed_8  ;; "%t:"
   \   00000170   240100EF           SWI      +292
   \   00000174   00009BE5           LDR      R0,[R11, #+0]
   \   00000178   090050E3           CMP      R0,#+9
   \   0000017C   1C00001A           BNE      ??create_ed_9
   \   00000180   24009BE5           LDR      R0,[R11, #+36]
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   1300000A           BEQ      ??create_ed_10
   \   0000018C   5C1195E5           LDR      R1,[R5, #+348]
   \   00000190   010058E1           CMP      R8,R1
   \   00000194   2B00001A           BNE      ??create_ed_11
   \   00000198   010185E0           ADD      R0,R5,R1, LSL #+2
   \   0000019C   600190E5           LDR      R0,[R0, #+352]
   \   000001A0   000059E1           CMP      R9,R0
   \   000001A4   2700001A           BNE      ??create_ed_11
   \   000001A8   400FA0E3           MOV      R0,#+256
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   AC3995E5           LDR      R3,[R5, #+2476]
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   08008DE2           ADD      R0,SP,#+8
   \   000001C0   650100EF           SWI      +357
   \   000001C4   0420A0E1           MOV      R2,R4
   \   000001C8   08108DE2           ADD      R1,SP,#+8
   \   000001CC   0A00A0E1           MOV      R0,R10
   \   000001D0   660100EF           SWI      +358
   \   000001D4   04D08DE2           ADD      SP,SP,#+4
   \   000001D8   1A0000EA           B        ??create_ed_11
   \                     ??create_ed_10:
   \   000001DC   000058E3           CMP      R8,#+0
   \   000001E0   1800000A           BEQ      ??create_ed_11
   \   000001E4   48008DE2           ADD      R0,SP,#+72
   \   000001E8   089190E7           LDR      R9,[R0, +R8, LSL #+2]
   \   000001EC   018048E2           SUB      R8,R8,#+1
   \   000001F0   140000EA           B        ??create_ed_11
   \                     ??create_ed_9:
   \   000001F4   5C1195E5           LDR      R1,[R5, #+348]
   \   000001F8   010058E1           CMP      R8,R1
   \   000001FC   1100001A           BNE      ??create_ed_11
   \   00000200   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000204   601191E5           LDR      R1,[R1, #+352]
   \   00000208   010059E1           CMP      R9,R1
   \   0000020C   0D00001A           BNE      ??create_ed_11
   \   00000210   AC3995E5           LDR      R3,[R5, #+2476]
   \   00000214   0B0050E3           CMP      R0,#+11
   \   00000218   400FA0E3           MOV      R0,#+256
   \   0000021C   01002DE9           PUSH     {R0}
   \   00000220   4020A013           MOVNE    R2,#+64
   \   00000224   0020A003           MOVEQ    R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   08008DE2           ADD      R0,SP,#+8
   \   00000230   650100EF           SWI      +357
   \   00000234   04D08DE2           ADD      SP,SP,#+4
   \   00000238   0420A0E1           MOV      R2,R4
   \   0000023C   04108DE2           ADD      R1,SP,#+4
   \   00000240   0A00A0E1           MOV      R0,R10
   \   00000244   660100EF           SWI      +358
   \                     ??create_ed_11:
   \   00000248   5C1195E5           LDR      R1,[R5, #+348]
   \   0000024C   00E09BE5           LDR      LR,[R11, #+0]
   \   00000250   28209BE5           LDR      R2,[R11, #+40]
   \   00000254   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000258   2C7047E2           SUB      R7,R7,#+44
   \   0000025C   2C6086E2           ADD      R6,R6,#+44
   \   00000260   013185E0           ADD      R3,R5,R1, LSL #+2
   \   00000264   34E08DE5           STR      LR,[SP, #+52]
   \   00000268   01C04EE2           SUB      R12,LR,#+1
   \   0000026C   10005CE3           CMP      R12,#+16
   \   00000270   9701008A           BHI      ??create_ed_12
   \   00000274   02EF8FE2           ADR      LR,??create_ed_0
   \   00000278   8CC0A0E1           MOV      R12,R12, LSL #+1
   \   0000027C   FCE09EE1           LDRSH    LR,[LR, R12]
   \   00000280   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??create_ed_0:
   \   00000284   080084005800       DC16     +8,+132,+88,+159
   \              9F00        
   \   0000028C   C400EB00F900       DC16     +196,+235,+249,+273
   \              1101        
   \   00000294   81FFAC003B01       DC16     +65409,+172,+315,+335
   \              4F01        
   \   0000029C   600171019301       DC16     +352,+369,+403,+183
   \              B700        
   \   000002A4   2C010000           DC16     +300,+0
   \                     ??create_ed_13:
   \   000002A8   047057E2           SUBS     R7,R7,#+4
   \   000002AC   2C00005A           BPL      ??create_ed_14
   \                     ??create_ed_4:
   \   000002B0   3C169FE5           LDR      R1,??create_ed_1+0x10  ;; _percent_u + 120
   \                     ??create_ed_15:
   \   000002B4   240100EF           SWI      +292
   \                     ??create_ed_16:
   \   000002B8   400FA0E3           MOV      R0,#+256
   \   000002BC   01002DE9           PUSH     {R0}
   \   000002C0   AC3995E5           LDR      R3,[R5, #+2476]
   \   000002C4   4020A0E3           MOV      R2,#+64
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   08008DE2           ADD      R0,SP,#+8
   \   000002D0   650100EF           SWI      +357
   \   000002D4   0420A0E1           MOV      R2,R4
   \   000002D8   08108DE2           ADD      R1,SP,#+8
   \   000002DC   0A00A0E1           MOV      R0,R10
   \   000002E0   660100EF           SWI      +358
   \   000002E4   04D08DE2           ADD      SP,SP,#+4
   1313                continue;
   1314              case CFG_CHECKBOX:
   1315                n-=4;
   1316                if (n<0) goto L_ERRCONSTR;
   1317                CutWSTR(ews,0);
   1318                wsAppendChar(ews, *((int *)p)?CBOX_CHECKED:CBOX_UNCHECKED);
   1319                if ((curlev==level)&&(parent==levelstack[level]))
   1320                {
   1321          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,1);
   1322          	AddEditControlToEditQend(eq,&ec,ma);           
   1323                }
   1324                p+=4;
   1325                break;
   1326              case CFG_TIME:
   1327                n-=sizeof(TTime);
   1328                if (n<0) goto L_ERRCONSTR;
   1329                if ((curlev==level)&&(parent==levelstack[level]))
   1330                {
   1331                  TTime *tt=(TTime *)p;
   1332          	ConstructEditControl(&ec,ECT_TIME,ECF_APPEND_EOL,0,0);
   1333                  ConstructEditTime(&ec,tt);
   1334          	AddEditControlToEditQend(eq,&ec,ma);  
   1335                }
   1336                p+=sizeof(TTime);
   1337                break;
   1338                
   1339              case CFG_DATE:
   1340                n-=sizeof(TDate);
   1341                if (n<0) goto L_ERRCONSTR;
   1342                if ((curlev==level)&&(parent==levelstack[level]))
   1343                {
   1344                  TDate *dd=(TDate *)p;
   1345          	ConstructEditControl(&ec,ECT_CALENDAR,ECF_APPEND_EOL,0,0);
   1346                  ConstructEditDate(&ec,dd);
   1347          	AddEditControlToEditQend(eq,&ec,ma);  
   1348                }
   1349                p+=sizeof(TDate);
   1350                break;
   1351                
   1352              case CFG_RECT:
   1353                n-=sizeof(RECT);
   1354                if (n<0) goto L_ERRCONSTR;
   1355                if ((curlev==level)&&(parent==levelstack[level]))
   1356                {
   1357                  EDITC_OPTIONS ec_options;
   1358                  RECT *rc=(RECT *)p;
   1359                  wsprintf(ews,"RECT:%03d;%03d;%03d;%03d;",rc->x,rc->y,rc->x2,rc->y2);
   1360          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,ews->wsbody[0]);
   1361                  SetFontToEditCOptions(&ec_options,1);
   1362          	CopyOptionsToEditControl(&ec,&ec_options);
   1363          	AddEditControlToEditQend(eq,&ec,ma);  
   1364                }
   1365                p+=sizeof(RECT);
   1366                break;
   1367                
   1368              default:
   1369                wsprintf(ews,"Неподдерживаемый тип %d",hp->type);
   1370                ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,ews,256);
   1371                AddEditControlToEditQend(eq,&ec,ma);
   1372                goto L_ENDCONSTR;
   1373              }
   1374              if ((curlev==level)&&(parent==levelstack[level])) total_items++;
   1375            }
   1376          L_ENDCONSTR:
   1377            patch_header(&ed1_hdr);
   \                     ??create_ed_7:
   \   000002E8   0000A0E3           MOV      R0,#+0
   \   000002EC   380085E5           STR      R0,[R5, #+56]
   \   000002F0   888100EF           SWI      +33160
   \   000002F4   010040E2           SUB      R0,R0,#+1
   \   000002F8   BC03C5E1           STRH     R0,[R5, #+60]
   \   000002FC   8A8100EF           SWI      +33162
   \   00000300   010040E2           SUB      R0,R0,#+1
   \   00000304   BE03C5E1           STRH     R0,[R5, #+62]
   1378            patch_input(&ed1_desc);
   \   00000308   0000A0E3           MOV      R0,#+0
   \   0000030C   B801C5E1           STRH     R0,[R5, #+24]
   \   00000310   8A8100EF           SWI      +33162
   \   00000314   010080E2           ADD      R0,R0,#+1
   \   00000318   BA01C5E1           STRH     R0,[R5, #+26]
   \   0000031C   888100EF           SWI      +33160
   \   00000320   010040E2           SUB      R0,R0,#+1
   \   00000324   BC01C5E1           STRH     R0,[R5, #+28]
   \   00000328   898100EF           SWI      +33161
   \   0000032C   0040A0E1           MOV      R4,R0
   \   00000330   8B8100EF           SWI      +33163
   \   00000334   000044E0           SUB      R0,R4,R0
   \   00000338   010040E2           SUB      R0,R0,#+1
   \   0000033C   BE01C5E1           STRH     R0,[R5, #+30]
   1379            return CreateInputTextDialog(&ed1_desc,&ed1_hdr,eq,1,(void *)need_to_jump);
   \   00000340   30009DE5           LDR      R0,[SP, #+48]
   \   00000344   0130A0E3           MOV      R3,#+1
   \   00000348   01002DE9           PUSH     {R0}
   \   0000034C   0A20A0E1           MOV      R2,R10
   \   00000350   381085E2           ADD      R1,R5,#+56
   \   00000354   0500A0E1           MOV      R0,R5
   \   00000358   670100EF           SWI      +359
   \   0000035C   90D08DE2           ADD      SP,SP,#+144
   \   00000360   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??create_ed_14:
   \   00000364   010058E1           CMP      R8,R1
   \   00000368   60119305           LDREQ    R1,[R3, #+352]
   \   0000036C   01005901           CMPEQ    R9,R1
   \   00000370   1000001A           BNE      ??create_ed_17
   \   00000374   002096E5           LDR      R2,[R6, #+0]
   \   00000378   ........           LDR      R1,??DataTable21  ;; _percent_u
   \   0000037C   240100EF           SWI      +292
   \   00000380   28009BE5           LDR      R0,[R11, #+40]
   \   00000384   ........           BL       getnumwidth
   \   00000388   01002DE9           PUSH     {R0}
   \   0000038C   AC3995E5           LDR      R3,[R5, #+2476]
   \   00000390   4020A0E3           MOV      R2,#+64
   \   00000394   602A82E3           ORR      R2,R2,#0x60000
   \   00000398   0610A0E3           MOV      R1,#+6
   \                     ??create_ed_18:
   \   0000039C   08008DE2           ADD      R0,SP,#+8
   \   000003A0   650100EF           SWI      +357
   \   000003A4   0420A0E1           MOV      R2,R4
   \   000003A8   08108DE2           ADD      R1,SP,#+8
   \   000003AC   0A00A0E1           MOV      R0,R10
   \   000003B0   660100EF           SWI      +358
   \   000003B4   04D08DE2           ADD      SP,SP,#+4
   \                     ??create_ed_17:
   \   000003B8   046086E2           ADD      R6,R6,#+4
   \                     ??create_ed_19:
   \   000003BC   5C0195E5           LDR      R0,[R5, #+348]
   \   000003C0   000058E1           CMP      R8,R0
   \   000003C4   60FFFF1A           BNE      ??create_ed_2
   \   000003C8   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000003CC   600190E5           LDR      R0,[R0, #+352]
   \   000003D0   000059E1           CMP      R9,R0
   \   000003D4   5CFFFF1A           BNE      ??create_ed_2
   \   000003D8   A80995E5           LDR      R0,[R5, #+2472]
   \   000003DC   010080E2           ADD      R0,R0,#+1
   \   000003E0   A80985E5           STR      R0,[R5, #+2472]
   \   000003E4   58FFFFEA           B        ??create_ed_2
   \                     ??create_ed_20:
   \   000003E8   047057E2           SUBS     R7,R7,#+4
   \   000003EC   AFFFFF4A           BMI      ??create_ed_4
   \   000003F0   010058E1           CMP      R8,R1
   \   000003F4   60119305           LDREQ    R1,[R3, #+352]
   \   000003F8   01005901           CMPEQ    R9,R1
   \   000003FC   EDFFFF1A           BNE      ??create_ed_17
   \   00000400   002096E5           LDR      R2,[R6, #+0]
   \   00000404   EC149FE5           LDR      R1,??create_ed_1+0x14  ;; _percent_u + 3
   \   00000408   240100EF           SWI      +292
   \   0000040C   24109BE5           LDR      R1,[R11, #+36]
   \   00000410   00108DE5           STR      R1,[SP, #+0]
   \   00000414   28B09BE5           LDR      R11,[R11, #+40]
   \   00000418   0100A0E1           MOV      R0,R1
   \   0000041C   000050E3           CMP      R0,#+0
   \   00000420   0A10A043           MOVMI    R1,#+10
   \   00000424   91000040           MULMI    R0,R1,R0
   \   00000428   00006042           RSBMI    R0,R0,#+0
   \   0000042C   00005BE3           CMP      R11,#+0
   \   00000430   0A10A043           MOVMI    R1,#+10
   \   00000434   910B0240           MULMI    R2,R1,R11
   \   00000438   0B10A051           MOVPL    R1,R11
   \   0000043C   00106242           RSBMI    R1,R2,#+0
   \   00000440   000051E1           CMP      R1,R0
   \   00000444   0100A021           MOVCS    R0,R1
   \   00000448   ........           BL       getnumwidth
   \   0000044C   01002DE9           PUSH     {R0}
   \   00000450   AC3995E5           LDR      R3,[R5, #+2476]
   \   00000454   4020A0E3           MOV      R2,#+64
   \   00000458   402A82E3           ORR      R2,R2,#0x40000
   \   0000045C   0610A0E3           MOV      R1,#+6
   \   00000460   08008DE2           ADD      R0,SP,#+8
   \   00000464   650100EF           SWI      +357
   \   00000468   04009DE5           LDR      R0,[SP, #+4]
   \   0000046C   04D08DE2           ADD      SP,SP,#+4
   \   00000470   000050E3           CMP      R0,#+0
   \   00000474   00005B53           CMPPL    R11,#+0
   \   00000478   08109D55           LDRPL    R1,[SP, #+8]
   \   0000047C   0420A0E1           MOV      R2,R4
   \   00000480   801B8153           ORRPL    R1,R1,#0x20000
   \   00000484   08108D55           STRPL    R1,[SP, #+8]
   \   00000488   04108DE2           ADD      R1,SP,#+4
   \   0000048C   0A00A0E1           MOV      R0,R10
   \   00000490   660100EF           SWI      +358
   \   00000494   C7FFFFEA           B        ??create_ed_17
   \                     ??create_ed_21:
   \   00000498   04C082E2           ADD      R12,R2,#+4
   \   0000049C   03C0CCE3           BIC      R12,R12,#0x3
   \   000004A0   0C7057E0           SUBS     R7,R7,R12
   \   000004A4   81FFFF4A           BMI      ??create_ed_4
   \   000004A8   010058E1           CMP      R8,R1
   \   000004AC   60119305           LDREQ    R1,[R3, #+352]
   \   000004B0   01005901           CMPEQ    R9,R1
   \   000004B4   0D00001A           BNE      ??create_ed_22
   \   000004B8   0610A0E1           MOV      R1,R6
   \   000004BC   6C0100EF           SWI      +364
   \                     ??create_ed_23:
   \   000004C0   28009BE5           LDR      R0,[R11, #+40]
   \   000004C4   4020A0E3           MOV      R2,#+64
   \                     ??create_ed_24:
   \   000004C8   01002DE9           PUSH     {R0}
   \   000004CC   AC3995E5           LDR      R3,[R5, #+2476]
   \   000004D0   0310A0E3           MOV      R1,#+3
   \   000004D4   08008DE2           ADD      R0,SP,#+8
   \   000004D8   650100EF           SWI      +357
   \   000004DC   0420A0E1           MOV      R2,R4
   \   000004E0   08108DE2           ADD      R1,SP,#+8
   \   000004E4   0A00A0E1           MOV      R0,R10
   \   000004E8   660100EF           SWI      +358
   \   000004EC   04D08DE2           ADD      SP,SP,#+4
   \                     ??create_ed_22:
   \   000004F0   28009BE5           LDR      R0,[R11, #+40]
   \   000004F4   040080E2           ADD      R0,R0,#+4
   \   000004F8   0300C0E3           BIC      R0,R0,#0x3
   \   000004FC   066080E0           ADD      R6,R0,R6
   \   00000500   ADFFFFEA           B        ??create_ed_19
   \                     ??create_ed_25:
   \   00000504   042082E2           ADD      R2,R2,#+4
   \   00000508   0320C2E3           BIC      R2,R2,#0x3
   \   0000050C   027057E0           SUBS     R7,R7,R2
   \   00000510   66FFFF4A           BMI      ??create_ed_4
   \   00000514   010058E1           CMP      R8,R1
   \   00000518   60119305           LDREQ    R1,[R3, #+352]
   \   0000051C   01005901           CMPEQ    R9,R1
   \   00000520   F2FFFF1A           BNE      ??create_ed_22
   \   00000524   C4139FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   00000528   0620A0E1           MOV      R2,R6
   \   0000052C   240100EF           SWI      +292
   \   00000530   E2FFFFEA           B        ??create_ed_23
   \                     ??create_ed_8:
   \   00000534   25743A00           DC8      "%t:"
   \                     ??create_ed_26:
   \   00000538   04C082E2           ADD      R12,R2,#+4
   \   0000053C   03C0CCE3           BIC      R12,R12,#0x3
   \   00000540   0C7057E0           SUBS     R7,R7,R12
   \   00000544   59FFFF4A           BMI      ??create_ed_4
   \   00000548   010058E1           CMP      R8,R1
   \   0000054C   60119305           LDREQ    R1,[R3, #+352]
   \   00000550   01005901           CMPEQ    R9,R1
   \   00000554   E5FFFF1A           BNE      ??create_ed_22
   \   00000558   0610A0E1           MOV      R1,R6
   \   0000055C   E30100EF           SWI      +483
   \   00000560   D6FFFFEA           B        ??create_ed_23
   \                     ??create_ed_27:
   \   00000564   04C082E2           ADD      R12,R2,#+4
   \   00000568   03C0CCE3           BIC      R12,R12,#0x3
   \   0000056C   0C7057E0           SUBS     R7,R7,R12
   \   00000570   4EFFFF4A           BMI      ??create_ed_4
   \   00000574   010058E1           CMP      R8,R1
   \   00000578   60119305           LDREQ    R1,[R3, #+352]
   \   0000057C   01005901           CMPEQ    R9,R1
   \   00000580   DAFFFF1A           BNE      ??create_ed_22
   \   00000584   0610A0E1           MOV      R1,R6
   \   00000588   E30100EF           SWI      +483
   \   0000058C   28009BE5           LDR      R0,[R11, #+40]
   \   00000590   5020A0E3           MOV      R2,#+80
   \   00000594   CBFFFFEA           B        ??create_ed_24
   \                     ??create_ed_28:
   \   00000598   827247E0           SUB      R7,R7,R2, LSL #+5
   \   0000059C   047057E2           SUBS     R7,R7,#+4
   \   000005A0   42FFFF4A           BMI      ??create_ed_4
   \   000005A4   00E096E5           LDR      LR,[R6, #+0]
   \   000005A8   00E08DE5           STR      LR,[SP, #+0]
   \   000005AC   02005EE1           CMP      LR,R2
   \   000005B0   44139F25           LDRCS    R1,??create_ed_1+0x18  ;; _percent_u + 148
   \   000005B4   3EFFFF2A           BCS      ??create_ed_15
   \   000005B8   010058E1           CMP      R8,R1
   \   000005BC   60119305           LDREQ    R1,[R3, #+352]
   \   000005C0   01005901           CMPEQ    R9,R1
   \   000005C4   1600001A           BNE      ??create_ed_29
   \   000005C8   8E1286E0           ADD      R1,R6,LR, LSL #+5
   \   000005CC   042081E2           ADD      R2,R1,#+4
   \   000005D0   18139FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   000005D4   240100EF           SWI      +292
   \   000005D8   00009DE5           LDR      R0,[SP, #+0]
   \   000005DC   4020A0E3           MOV      R2,#+64
   \   000005E0   010080E2           ADD      R0,R0,#+1
   \   000005E4   01002DE9           PUSH     {R0}
   \   000005E8   28009BE5           LDR      R0,[R11, #+40]
   \   000005EC   0710A0E3           MOV      R1,#+7
   \   000005F0   01002DE9           PUSH     {R0}
   \   000005F4   0000A0E3           MOV      R0,#+0
   \   000005F8   01002DE9           PUSH     {R0}
   \   000005FC   2000A0E3           MOV      R0,#+32
   \   00000600   01002DE9           PUSH     {R0}
   \   00000604   AC3995E5           LDR      R3,[R5, #+2476]
   \   00000608   14008DE2           ADD      R0,SP,#+20
   \   0000060C   840100EF           SWI      +388
   \   00000610   0420A0E1           MOV      R2,R4
   \   00000614   14108DE2           ADD      R1,SP,#+20
   \   00000618   0A00A0E1           MOV      R0,R10
   \   0000061C   660100EF           SWI      +358
   \   00000620   10D08DE2           ADD      SP,SP,#+16
   \                     ??create_ed_29:
   \   00000624   28009BE5           LDR      R0,[R11, #+40]
   \   00000628   800286E0           ADD      R0,R6,R0, LSL #+5
   \   0000062C   046080E2           ADD      R6,R0,#+4
   \   00000630   61FFFFEA           B        ??create_ed_19
   \                     ??create_ed_30:
   \   00000634   042082E2           ADD      R2,R2,#+4
   \   00000638   0320C2E3           BIC      R2,R2,#0x3
   \   0000063C   027057E0           SUBS     R7,R7,R2
   \   00000640   1AFFFF4A           BMI      ??create_ed_4
   \   00000644   010058E1           CMP      R8,R1
   \   00000648   60119305           LDREQ    R1,[R3, #+352]
   \   0000064C   01005901           CMPEQ    R9,R1
   \   00000650   A6FFFF1A           BNE      ??create_ed_22
   \   00000654   94129FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   00000658   0620A0E1           MOV      R2,R6
   \   0000065C   240100EF           SWI      +292
   \   00000660   28009BE5           LDR      R0,[R11, #+40]
   \   00000664   5020A0E3           MOV      R2,#+80
   \   00000668   96FFFFEA           B        ??create_ed_24
   \                     ??create_ed_31:
   \   0000066C   087057E2           SUBS     R7,R7,#+8
   \   00000670   0EFFFF4A           BMI      ??create_ed_4
   \   00000674   010058E1           CMP      R8,R1
   \   00000678   60119305           LDREQ    R1,[R3, #+352]
   \   0000067C   01005901           CMPEQ    R9,R1
   \   00000680   0F00001A           BNE      ??create_ed_32
   \   00000684   043096E5           LDR      R3,[R6, #+4]
   \   00000688   002096E5           LDR      R2,[R6, #+0]
   \   0000068C   6C129FE5           LDR      R1,??create_ed_1+0x1C  ;; _percent_u + 44
   \   00000690   240100EF           SWI      +292
   \   00000694   0A00A0E3           MOV      R0,#+10
   \   00000698   01002DE9           PUSH     {R0}
   \   0000069C   AC3995E5           LDR      R3,[R5, #+2476]
   \   000006A0   4020A0E3           MOV      R2,#+64
   \   000006A4   0910A0E3           MOV      R1,#+9
   \   000006A8   08008DE2           ADD      R0,SP,#+8
   \   000006AC   650100EF           SWI      +357
   \                     ??create_ed_33:
   \   000006B0   0420A0E1           MOV      R2,R4
   \   000006B4   08108DE2           ADD      R1,SP,#+8
   \   000006B8   0A00A0E1           MOV      R0,R10
   \   000006BC   660100EF           SWI      +358
   \   000006C0   04D08DE2           ADD      SP,SP,#+4
   \                     ??create_ed_32:
   \   000006C4   086086E2           ADD      R6,R6,#+8
   \   000006C8   3BFFFFEA           B        ??create_ed_19
   \                     ??create_ed_34:
   \   000006CC   047057E2           SUBS     R7,R7,#+4
   \   000006D0   F6FEFF4A           BMI      ??create_ed_4
   \   000006D4   010058E1           CMP      R8,R1
   \   000006D8   60119305           LDREQ    R1,[R3, #+352]
   \   000006DC   01005901           CMPEQ    R9,R1
   \   000006E0   34FFFF1A           BNE      ??create_ed_17
   \   000006E4   0310D6E5           LDRB     R1,[R6, #+3]
   \   000006E8   02002DE9           PUSH     {R1}
   \   000006EC   0210D6E5           LDRB     R1,[R6, #+2]
   \   000006F0   02002DE9           PUSH     {R1}
   \   000006F4   0130D6E5           LDRB     R3,[R6, #+1]
   \   000006F8   0020D6E5           LDRB     R2,[R6, #+0]
   \   000006FC   00129FE5           LDR      R1,??create_ed_1+0x20  ;; _percent_u + 52
   \   00000700   240100EF           SWI      +292
   \   00000704   0C00A0E3           MOV      R0,#+12
   \   00000708   01002DE9           PUSH     {R0}
   \   0000070C   AC3995E5           LDR      R3,[R5, #+2476]
   \   00000710   4020A0E3           MOV      R2,#+64
   \   00000714   0910A0E3           MOV      R1,#+9
   \   00000718   10008DE2           ADD      R0,SP,#+16
   \   0000071C   650100EF           SWI      +357
   \   00000720   0420A0E1           MOV      R2,R4
   \   00000724   10108DE2           ADD      R1,SP,#+16
   \   00000728   0A00A0E1           MOV      R0,R10
   \   0000072C   660100EF           SWI      +358
   \   00000730   0CD08DE2           ADD      SP,SP,#+12
   \   00000734   1FFFFFEA           B        ??create_ed_17
   \                     ??create_ed_35:
   \   00000738   047057E2           SUBS     R7,R7,#+4
   \   0000073C   DBFEFF4A           BMI      ??create_ed_4
   \   00000740   010058E1           CMP      R8,R1
   \   00000744   60119305           LDREQ    R1,[R3, #+352]
   \   00000748   01005901           CMPEQ    R9,R1
   \   0000074C   19FFFF1A           BNE      ??create_ed_17
   \   00000750   002096E5           LDR      R2,[R6, #+0]
   \   00000754   AC119FE5           LDR      R1,??create_ed_1+0x24  ;; _percent_u + 180
   \   00000758   240100EF           SWI      +292
   \   0000075C   0C00A0E3           MOV      R0,#+12
   \                     ??create_ed_36:
   \   00000760   01002DE9           PUSH     {R0}
   \   00000764   AC3995E5           LDR      R3,[R5, #+2476]
   \   00000768   4020A0E3           MOV      R2,#+64
   \   0000076C   0910A0E3           MOV      R1,#+9
   \   00000770   09FFFFEA           B        ??create_ed_18
   \                     ??create_ed_37:
   \   00000774   047057E2           SUBS     R7,R7,#+4
   \   00000778   CCFEFF4A           BMI      ??create_ed_4
   \   0000077C   0010A0E3           MOV      R1,#+0
   \   00000780   260100EF           SWI      +294
   \   00000784   000096E5           LDR      R0,[R6, #+0]
   \   00000788   000050E3           CMP      R0,#+0
   \   0000078C   AC0995E5           LDR      R0,[R5, #+2476]
   \   00000790   0B10A013           MOVNE    R1,#+11
   \   00000794   0C10A003           MOVEQ    R1,#+12
   \   00000798   E11C81E3           ORR      R1,R1,#0xE100
   \   0000079C   1C0000EF           SWI      +28
   \   000007A0   5C0195E5           LDR      R0,[R5, #+348]
   \   000007A4   000058E1           CMP      R8,R0
   \   000007A8   02FFFF1A           BNE      ??create_ed_17
   \   000007AC   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000007B0   600190E5           LDR      R0,[R0, #+352]
   \   000007B4   000059E1           CMP      R9,R0
   \   000007B8   FEFEFF1A           BNE      ??create_ed_17
   \   000007BC   0100A0E3           MOV      R0,#+1
   \   000007C0   E6FFFFEA           B        ??create_ed_36
   \                     ??create_ed_38:
   \   000007C4   087057E2           SUBS     R7,R7,#+8
   \   000007C8   B8FEFF4A           BMI      ??create_ed_4
   \   000007CC   010058E1           CMP      R8,R1
   \   000007D0   60019305           LDREQ    R0,[R3, #+352]
   \   000007D4   00005901           CMPEQ    R9,R0
   \   000007D8   B9FFFF1A           BNE      ??create_ed_32
   \   000007DC   0000A0E3           MOV      R0,#+0
   \   000007E0   01002DE9           PUSH     {R0}
   \   000007E4   0030A0E3           MOV      R3,#+0
   \   000007E8   4020A0E3           MOV      R2,#+64
   \   000007EC   0B10A0E3           MOV      R1,#+11
   \   000007F0   08008DE2           ADD      R0,SP,#+8
   \   000007F4   650100EF           SWI      +357
   \   000007F8   0610A0E1           MOV      R1,R6
   \   000007FC   08008DE2           ADD      R0,SP,#+8
   \   00000800   0E0200EF           SWI      +526
   \   00000804   A9FFFFEA           B        ??create_ed_33
   \                     ??create_ed_39:
   \   00000808   087057E2           SUBS     R7,R7,#+8
   \   0000080C   A7FEFF4A           BMI      ??create_ed_4
   \   00000810   010058E1           CMP      R8,R1
   \   00000814   60019305           LDREQ    R0,[R3, #+352]
   \   00000818   00005901           CMPEQ    R9,R0
   \   0000081C   A8FFFF1A           BNE      ??create_ed_32
   \   00000820   0000A0E3           MOV      R0,#+0
   \   00000824   01002DE9           PUSH     {R0}
   \   00000828   0030A0E3           MOV      R3,#+0
   \   0000082C   4020A0E3           MOV      R2,#+64
   \   00000830   0A10A0E3           MOV      R1,#+10
   \   00000834   08008DE2           ADD      R0,SP,#+8
   \   00000838   650100EF           SWI      +357
   \   0000083C   0610A0E1           MOV      R1,R6
   \   00000840   08008DE2           ADD      R0,SP,#+8
   \   00000844   0F0200EF           SWI      +527
   \   00000848   98FFFFEA           B        ??create_ed_33
   \                     ??create_ed_40:
   \   0000084C   087057E2           SUBS     R7,R7,#+8
   \   00000850   96FEFF4A           BMI      ??create_ed_4
   \   00000854   010058E1           CMP      R8,R1
   \   00000858   60119305           LDREQ    R1,[R3, #+352]
   \   0000085C   01005901           CMPEQ    R9,R1
   \   00000860   97FFFF1A           BNE      ??create_ed_32
   \   00000864   F610D6E1           LDRSH    R1,[R6, #+6]
   \   00000868   02002DE9           PUSH     {R1}
   \   0000086C   F410D6E1           LDRSH    R1,[R6, #+4]
   \   00000870   02002DE9           PUSH     {R1}
   \   00000874   F230D6E1           LDRSH    R3,[R6, #+2]
   \   00000878   F020D6E1           LDRSH    R2,[R6, #+0]
   \   0000087C   88109FE5           LDR      R1,??create_ed_1+0x28  ;; _percent_u + 72
   \   00000880   240100EF           SWI      +292
   \   00000884   AC3995E5           LDR      R3,[R5, #+2476]
   \   00000888   4020A0E3           MOV      R2,#+64
   \   0000088C   000093E5           LDR      R0,[R3, #+0]
   \   00000890   0910A0E3           MOV      R1,#+9
   \   00000894   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000898   01002DE9           PUSH     {R0}
   \   0000089C   10008DE2           ADD      R0,SP,#+16
   \   000008A0   650100EF           SWI      +357
   \   000008A4   0110A0E3           MOV      R1,#+1
   \   000008A8   44008DE2           ADD      R0,SP,#+68
   \   000008AC   CA0100EF           SWI      +458
   \   000008B0   44108DE2           ADD      R1,SP,#+68
   \   000008B4   10008DE2           ADD      R0,SP,#+16
   \   000008B8   CE0100EF           SWI      +462
   \   000008BC   0420A0E1           MOV      R2,R4
   \   000008C0   10108DE2           ADD      R1,SP,#+16
   \   000008C4   0A00A0E1           MOV      R0,R10
   \   000008C8   660100EF           SWI      +358
   \   000008CC   0CD08DE2           ADD      SP,SP,#+12
   \   000008D0   7BFFFFEA           B        ??create_ed_32
   \                     ??create_ed_12:
   \   000008D4   34209DE5           LDR      R2,[SP, #+52]
   \   000008D8   30109FE5           LDR      R1,??create_ed_1+0x2C  ;; _percent_u + 196
   \   000008DC   240100EF           SWI      +292
   \   000008E0   74FEFFEA           B        ??create_ed_16
   \                     ??create_ed_1:
   \   000008E4   ........           DC32     ed1_desc
   \   000008E8   ........           DC32     _percent_u + 244
   \   000008EC   ........           DC32     _percent_u + 188
   \   000008F0   ........           DC32     _percent_u + 6
   \   000008F4   ........           DC32     _percent_u + 120
   \   000008F8   ........           DC32     _percent_u + 3
   \   000008FC   ........           DC32     _percent_u + 148
   \   00000900   ........           DC32     _percent_u + 44
   \   00000904   ........           DC32     _percent_u + 52
   \   00000908   ........           DC32     _percent_u + 180
   \   0000090C   ........           DC32     _percent_u + 72
   \   00000910   ........           DC32     _percent_u + 196
   1380          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     _percent_u

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     ed1_desc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     _percent_u

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     ed1_desc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     _percent_u

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ed1_desc>`:
   \   00000000   01000000....       DC32 1, ed1_onkey, ed1_ghook, ed1_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 0, 1073741824
   \              000065000000
   \              000000000000
   \              000000000040
   \                     `?<Initializer for ed1_hdr>`:
   \   00000038   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000040   00000000....       DC32 0H, `?<Constant "\\320\\345\\344\\340\\352\\362\\350\\360\\3`
   \              ....        
   \   00000048   FF7F0000           DC32 32767
   \                     `?<Initializer for selbcfg_HDR>`:
   \   0000004C   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000054   00000000....       DC32 0H, bcfg_hdr_text, 32767
   \              ....FF7F0000
   \                     `?<Initializer for key_names>`:
   \   00000060   ........           DC32 `?<Constant "\\317\\363\\361\\362\\356">`
   \   00000064   ........0000       DC32 `?<Constant "\\313\\345\\342\\373\\351 \\361\\356\\364\\`, 0H, 0H
   \              000000000000
   \   00000070   ........0000       DC32 `?<Constant "\\317\\360\\340\\342\\373\\351 \\361\\356\\`, 0H, 0H
   \              000000000000
   \   0000007C   000000000000       DC32 0H, 0H, 0H, 0H
   \              000000000000
   \              00000000    
   \   0000008C   ........           DC32 `?<Constant "\\312\\355\\356\\357\\352\\340 \\342\\373\\`
   \   00000090   ........           DC32 `?<Constant "\\312\\360\\340\\361\\355\\340\\377 \\352\\`
   \   00000094   ........           DC32 `?<Constant "\\303\\360\\356\\354\\352\\356\\361\\362\\3`
   \   00000098   ........0000       DC32 `?<Constant "\\303\\360\\356\\354\\352\\356\\361\\362\\3_1`, 0H
   \              0000        
   \   000000A0   00000000....       DC32 0H, `?<Constant "\\310\\355\\362\\345\\360\\355\\345\\362">`, 0H
   \              ....00000000
   \   000000AC   00000000....       DC32 0H, `?<Constant "\\312\\340\\354\\345\\360\\340">`
   \              ....        
   \   000000B4   ........0000       DC32 `?<Constant "\\317\\353\\345\\351">`, 0H, 0H, 0H, 0H
   \              000000000000
   \              000000000000
   \              0000        
   \   000000C8   ........0000       DC32 `?<Constant "Enter">`, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   000000EC   ........0000       DC32 `?<Constant "#">`, 0H, 0H, 0H, `?<Constant "PTT">`, 0H, 0H
   \              000000000000
   \              00000000....
   \              ....00000000
   \              00000000    
   \   00000108   ........0000       DC32 `?<Constant "*">`, 0H, 0H, 0H, 0H, 0H, `?<Constant "0">`
   \              000000000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000124   ............       DC32 `?<Constant "1">`, `?<Constant "2">`, `?<Constant "3">`
   \              ............
   \   00000130   ............       DC32 `?<Constant "4">`, `?<Constant "5">`, `?<Constant "6">`
   \              ............
   \   0000013C   ............       DC32 `?<Constant "7">`, `?<Constant "8">`, `?<Constant "9">`, 0H
   \              ............
   \              00000000    
   \   0000014C   ........           DC32 `?<Constant "\\315\\340\\342. \\342\\342\\345\\360\\365`
   \   00000150   ........           DC32 `?<Constant "\\315\\340\\342. \\342\\355\\350\\347">`
   \   00000154   ........           DC32 `?<Constant "\\315\\340\\342. \\342\\353\\345\\342\\356`
   \   00000158   ........           DC32 `?<Constant "\\315\\340\\342. \\342\\357\\360\\340\\342`
   \                     `?<Initializer for level>`:
   \   0000015C   00000000           DC32 0
   \                     `?<Initializer for levelstack>`:
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for cfg>`:
   \   000001A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for size_cfg>`:
   \   000001A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for cfg_h>`:
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000458   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000468   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000478   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000488   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000498   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000508   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000518   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000528   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000538   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000548   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000558   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000568   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000578   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000588   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000598   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000608   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000618   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000628   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000638   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000648   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000658   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000668   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000678   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000688   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000698   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000708   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000718   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000728   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000738   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000748   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000758   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000768   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000778   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000788   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000798   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000808   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000818   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000828   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000838   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000848   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000858   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000868   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000878   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000888   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000898   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000908   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000918   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000928   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000938   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000948   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000958   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000968   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000978   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000988   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000998   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for total_items>`:
   \   000009A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ews>`:
   \   000009AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for maincsm_id>`:
   \   000009B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sbtop>`:
   \   000009B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sel_bcfg_id>`:
   \   000009B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for prev_bcfg_itemcount>`:
   \   000009BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for cfg_name>`:
   \   000009C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for T9Key>`:
   \   00000AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for picpath>`:
   \   00000AE0   303A5C7A6269       DC8 "0:\\zbin\\img\\cfgedit.png"
   \              6E5C696D675C
   \              636667656469
   \              742E706E6700
   \                     `?<Initializer for ok>`:
   \   00000AF8   FF0F0000           DC16 4095, 0
   \   00000AFC   ........           DC32 `?<Constant "\\316\\352">`
   \                     `?<Initializer for back>`:
   \   00000B00   FE0F0000           DC16 4094, 0
   \   00000B04   ........           DC32 `?<Constant "\\315\\340\\347\\340\\344">`
   \                     `?<Initializer for close>`:
   \   00000B08   FE0F0000           DC16 4094, 0
   \   00000B0C   ........           DC32 `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`
   \                     `?<Initializer for bcfg_hdr_text>`:
   \   00000B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for bcfgmenu_sk_r>`:
   \   00000B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for selbcfg_STRUCT>`:
   \   00000B40   08000000....       DC32 8, selbcfg_menu_onkey, selbcfg_menu_ghook, 0H, selbcfg_softkeys
   \              ............
   \              00000000....
   \              ....        
   \   00000B54   ........1000       DC32 selbcfg_skt, 16, selbcfg_menu_iconhndl, 0H, 0H, 0
   \              0000........
   \              000000000000
   \              000000000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for icon>`:
   \   00000000   580000000000       DC32 88, 0
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\313\\345\\342">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\317\\360\\340\\342">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   ........           DC32 `?<Constant "+">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_skt>`:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for selbcfg_softkeys>`:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for selbcfg_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 bcfgmenu_sk_r
   \   00000010   3D000000           DC16 61, 0
   \   00000014   ........           DC32 `?<Constant "+">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for selbcfg_skt>`:
   \   00000000   ........0000       DC32 selbcfg_sk, 0
   \              0000        

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "6">`:
   \   00000000   3600               DC8 "6"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "7">`:
   \   00000000   3700               DC8 "7"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "8">`:
   \   00000000   3800               DC8 "8"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\342. \\342\\342\\345\\360\\365`:
   \   00000000   CDE0E22E20E2       DC8 "\315\340\342. \342\342\345\360\365"
   \              E2E5F0F500  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\342. \\342\\355\\350\\347">`:
   \   00000000   CDE0E22E20E2       DC8 "\315\340\342. \342\355\350\347"
   \              EDE8E700    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\342. \\342\\353\\345\\342\\356`:
   \   00000000   CDE0E22E20E2       DC8 "\315\340\342. \342\353\345\342\356"
   \              EBE5E2EE00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\342. \\342\\357\\360\\340\\342`:
   \   00000000   CDE0E22E20E2       DC8 "\315\340\342. \342\357\360\340\342\356"
   \              EFF0E0E2EE00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\313\\345\\342">`:
   \   00000000   CBE5E200           DC8 "\313\345\342"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\360\\340\\342">`:
   \   00000000   CFF0E0E200         DC8 "\317\360\340\342"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "+">`:
   \   00000000   2B00               DC8 "+"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\320\\345\\344\\340\\352\\362\\350\\360\\3`:
   \   00000000   D0E5E4E0EAF2       DC8 "\320\345\344\340\352\362\350\360\356\342\340\355\350\345"
   \              E8F0EEE2E0ED
   \              E8E500      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`:
   \   00000000   C2FBE1F0E0F2       DC8 "\302\373\341\360\340\362\374"
   \              FC00        

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "9">`:
   \   00000000   3900               DC8 "9"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t read .bcfg file!">`:
   \   00000000   43616E277420       DC8 "Can't read .bcfg file!"
   \              72656164202E
   \              626366672066
   \              696C652100  
   \   00000017   00                 DC8 0
   \   00000018   5A65726F206C       DC8 "Zero lenght of .bcfg file!"
   \              656E67687420
   \              6F66202E6263
   \              66672066696C
   \              652100      
   \   00000033   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257500             DC8 "%u"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "\\316\\352">`:
   \   00000000   CEEA00             DC8 "\316\352"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\347\\340\\344">`:
   \   00000000   CDE0E7E0E400       DC8 "\315\340\347\340\344"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`:
   \   00000000   C7E0EAF0FBF2       DC8 "\307\340\352\360\373\362\374"
   \              FC00        
   \   00000008   C2E2EEE42054       DC8 "\302\342\356\344 T9:"
   \              393A00      
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   C2FBE1E5F0E8       DC8 "\302\373\341\345\360\350\362\345 BCFG"
   \              F2E520424346
   \              4700        
   \   00000022   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3C4300             DC8 "<C"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25743A00           DC8 "%t:"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "#">`:
   \   00000000   2300               DC8 "#"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\363\\361\\362\\356">`:
   \   00000000   CFF3F1F2EE00       DC8 "\317\363\361\362\356"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\313\\345\\342\\373\\351 \\361\\356\\364\\`:
   \   00000000   CBE5E2FBE920       DC8 "\313\345\342\373\351 \361\356\364\362"
   \              F1EEF4F200  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\360\\340\\342\\373\\351 \\361\\356\\`:
   \   00000000   CFF0E0E2FBE9       DC8 "\317\360\340\342\373\351 \361\356\364\362"
   \              20F1EEF4F200

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\312\\355\\356\\357\\352\\340 \\342\\373\\`:
   \   00000000   CAEDEEEFEAE0       DC8 "\312\355\356\357\352\340 \342\373\347\356\342\340"
   \              20E2FBE7EEE2
   \              E000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\312\\360\\340\\361\\355\\340\\377 \\352\\`:
   \   00000000   CAF0E0F1EDE0       DC8 "\312\360\340\361\355\340\377 \352\355\356\357\352\340"
   \              FF20EAEDEEEF
   \              EAE000      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\303\\360\\356\\354\\352\\356\\361\\362\\3`:
   \   00000000   C3F0EEECEAEE       DC8 "\303\360\356\354\352\356\361\362\374 +"
   \              F1F2FC202B00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\303\\360\\356\\354\\352\\356\\361\\362\\3_1`:
   \   00000000   C3F0EEECEAEE       DC8 "\303\360\356\354\352\356\361\362\374 -"
   \              F1F2FC202D00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\310\\355\\362\\345\\360\\355\\345\\362">`:
   \   00000000   C8EDF2E5F0ED       DC8 "\310\355\362\345\360\355\345\362"
   \              E5F200      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\312\\340\\354\\345\\360\\340">`:
   \   00000000   CAE0ECE5F0E0       DC8 "\312\340\354\345\360\340"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\353\\345\\351">`:
   \   00000000   CFEBE5E900         DC8 "\317\353\345\351"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Enter">`:
   \   00000000   456E74657200       DC8 "Enter"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PTT">`:
   \   00000000   50545400           DC8 "PTT"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "*">`:
   \   00000000   2A00               DC8 "*"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "0">`:
   \   00000000   3000               DC8 "0"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "1">`:
   \   00000000   3100               DC8 "1"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "2">`:
   \   00000000   3200               DC8 "2"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "3">`:
   \   00000000   3300               DC8 "3"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "4">`:
   \   00000000   3400               DC8 "4"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "5">`:
   \   00000000   3500               DC8 "5"

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     AddT9Key                 12
     BackSpaceT9               8
     ClearT9Key                4
     CountBCFG                 8
     CreateSelectBCFGMenu    620
     ErrorMsg                  8
     FindBCFGByN               8
     FindBCFGByNS             12
     IsFieldCorrect           96
     Killer                    4
     LoadCfg                  64
     RecountMenuBCFG          12
     SaveConfig               20
     UpdateBCFGHeader         24
     UpdateCSMname            12
     char16to8                 0
     create_ed               192
     ed1_ghook               116
     ed1_locret                0
     ed1_onkey                12
     getnumwidth               0
     main                     60
     maincsm_onclose           8
     maincsm_oncreate         16
     maincsm_onmessage        24
     on_utf8ec                 8
     selbcfg_menu_ghook       12
     selbcfg_menu_iconhndl    32
     selbcfg_menu_onkey       28


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     ed1_locret                        4
     IsFieldCorrect                  448
     on_utf8ec                       124
     ed1_onkey                       336
     ed1_ghook                       988
     LoadCfg                         244
     FindBCFGByNS                    120
     CountBCFG                        40
     FindBCFGByN                      16
     ClearT9Key                       24
     UpdateBCFGHeader                116
     AddT9Key                         36
     BackSpaceT9                      36
     RecountMenuBCFG                 104
     selbcfg_menu_onkey              252
     selbcfg_menu_ghook               64
     selbcfg_menu_iconhndl           140
     CreateSelectBCFGMenu            388
     maincsm_oncreate                136
     Killer                           28
     SaveConfig                      112
     maincsm_onclose                  48
     maincsm_onmessage               204
     maincsm_name_body               280
     _percent_u                      264
     ?<Constant "*.bcfg">             40
     table_T9Key                     256
     unicode2char                    600
     char16to8                        80
     UpdateCSMname                   128
     ErrorMsg                         32
     ed1_desc                       2924
     icon                              8
     menu_sk                          24
     menu_skt                          8
     selbcfg_softkeys                 12
     selbcfg_sk                       24
     selbcfg_skt                       8
     main                            104
     getnumwidth                      52
     create_ed                      2324
     ??DataTable0                      4
     ??DataTable17                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ?<Initializer for ed1_desc>    2924
     ?<Initializer for icon>           8
     ?<Initializer for menu_sk>       24
     ?<Initializer for menu_skt>       8
     ?<Initializer for selbcfg_softkeys>
                                      12
     ?<Initializer for selbcfg_sk>    24
     ?<Initializer for selbcfg_skt>    8
     ?<Constant "6">                   2
     ?<Constant "7">                   2
     ?<Constant "8">                   2
     ?<Constant "\315\340\342. \342\342\345\360\365
                                      12
     ?<Constant "\315\340\342. \342\355\350\347">
                                      12
     ?<Constant "\315\340\342. \342\353\345\342\356
                                      12
     ?<Constant "\315\340\342. \342\357\360\340\342
                                      12
     ?<Constant "\313\345\342">        4
     ?<Constant "\317\360\340\342">    8
     ?<Constant "+">                   2
     ?<Constant "\320\345\344\340\352\362\350\360\3
                                      16
     ?<Constant "\302\373\341\360\340\362\374">
                                       8
     ?<Constant "9">                   2
     ?<Constant "Can\'t read .bcfg file!">
                                      52
     ?<Constant "%u">                  3
     ?<Constant "%s">                  3
     ?<Constant "\316\352">            3
     ?<Constant "\315\340\347\340\344">
                                       8
     ?<Constant "\307\340\352\360\373\362\374">
                                      36
     ?<Constant "<C">                  3
     ?<Constant "%t:">                 4
     ?<Constant "#">                   2
     ?<Constant "\317\363\361\362\356">
                                       8
     ?<Constant "\313\345\342\373\351 \361\356\364\
                                      12
     ?<Constant "\317\360\340\342\373\351 \361\356\
                                      12
     ?<Constant "\312\355\356\357\352\340 \342\373\
                                      16
     ?<Constant "\312\360\340\361\355\340\377 \352\
                                      16
     ?<Constant "\303\360\356\354\352\356\361\362\3
                                      12
     ?<Constant "\303\360\356\354\352\356\361\362\3_1
                                      12
     ?<Constant "\310\355\362\345\360\355\345\362">
                                      12
     ?<Constant "\312\340\354\345\360\340">
                                       8
     ?<Constant "\317\353\345\351">    8
     ?<Constant "Enter">               8
     ?<Constant "PTT">                 4
     ?<Constant "*">                   2
     ?<Constant "0">                   2
     ?<Constant "1">                   2
     ?<Constant "2">                   2
     ?<Constant "3">                   2
     ?<Constant "4">                   2
     ?<Constant "5">                   2
      Others                         248

 
 6 972 bytes in segment CODE
 1 514 bytes in segment DATA_C
 3 008 bytes in segment DATA_I
 3 008 bytes in segment DATA_ID
   280 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 6 748 bytes of CODE  memory (+ 248 bytes shared)
 4 522 bytes of CONST memory
 3 288 bytes of DATA  memory

Errors: none
Warnings: none

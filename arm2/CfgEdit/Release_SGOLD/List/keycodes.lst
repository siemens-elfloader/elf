##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    28/Sep/2010  15:46:39 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CfgEdit\keycodes.c                            #
#    Command line    =  C:\arm\CfgEdit\keycodes.c -D NDEBUG -lC              #
#                       C:\arm\CfgEdit\Release_SGOLD\List\ -o                #
#                       C:\arm\CfgEdit\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\CfgEdit\Release_SGOLD\List\keycodes.lst       #
#    Object file     =  C:\arm\CfgEdit\Release_SGOLD\Obj\keycodes.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CfgEdit\keycodes.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          
      4          #define UTF16_FONT_SMALL_BOLD (0xE013)
      5          
      6          typedef struct
      7          {
      8            GUI gui;
      9            WSHDR *ws1;
     10            unsigned int keyscancode;
     11            unsigned int *keymodecode;
     12            char needexit;
     13          }KEY_GUI;
     14          
     15          extern const char *key_names[63];
     16          
     17          

   \                                 In segment DATA_Z, align 4, align-sorted
     18          char str[128];
     19          int code=0;
   \                     code:
   \   00000000                      DS8 4
   \                     `str`:
   \   00000004                      DS8 128

   \                                 In segment CODE, align 4, keep-with-next
     20          void OnReadraw_key(KEY_GUI *data)
     21          {
   \                     OnReadraw_key:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     22          
     23            char black[4]={0x00,0x00,0x00,0x64};
   \   00000004   0C529FE5           LDR      R5,??OnReadraw_key_0+0x4  ;; `?<Constant {0, 0, 0, 100}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   001095E5           LDR      R1,[R5, #0]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   001080E5           STR      R1,[R0, #+0]
     24            char white[4]={0xFF,0xFF,0xFF,0x64};
   \   0000001C   F8119FE5           LDR      R1,??OnReadraw_key_0+0x8  ;; `?<Constant {255, 255, 255, 100}>`
   \   00000020   08008DE2           ADD      R0,SP,#+8
   \   00000024   002091E5           LDR      R2,[R1, #0]
     25            char transparent[4]={0x00,0x00,0x00,0x00};
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   002080E5           STR      R2,[R0, #+0]
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   001080E5           STR      R1,[R0, #+0]
     26          
     27            int scr_w=ScreenW();
   \   00000038   888100EF           SWI      +33160
   \   0000003C   0080A0E1           MOV      R8,R0
     28            int scr_h=ScreenH();
   \   00000040   898100EF           SWI      +33161
   \   00000044   0070A0E1           MOV      R7,R0
     29            int fsize=GetFontYSIZE(FONT_SMALL)+1;
   \   00000048   0700A0E3           MOV      R0,#+7
   \   0000004C   C50100EF           SWI      +453
   \   00000050   016080E2           ADD      R6,R0,#+1
     30              DrawRectangle(0,YDISP,scr_w-1,scr_h-1,0,white,white);
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   013047E2           SUB      R3,R7,#+1
   \   00000064   012048E2           SUB      R2,R8,#+1
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   01002DE9           PUSH     {R0}
     31              ////////////////////////////////////////////////////////////////////////////
     32              // tridog, 05.08.09 ////////////////////////////////////////////////////////
     33              // Точим окошко выбора CFG_KEY на елках ////////////////////////////////////
     34              ////////////////////////////////////////////////////////////////////////////
     35              if(data->needexit)
     36              {
     37                wsprintf(data->ws1,"Нажмите <Enter> для подтверждения.\nНажмите  <Red> или <Left> для выхода.");
     38                DrawString(data->ws1,3,YDISP + 1 + fsize,scr_w-4,YDISP + fsize*5,FONT_SMALL,1,black,transparent);
     39              }
     40              else
     41              {
     42                wsprintf(data->ws1,"Нажмите любую клавишу\nДлинный левый нав. для обнуления");
     43                DrawString(data->ws1,3,YDISP + 1 + fsize,scr_w-4,YDISP + fsize*5,FONT_SMALL,1,black,transparent);
     44              }   
     45              wsprintf(data->ws1,"HEX: %c%02X",UTF16_FONT_SMALL_BOLD,data->keyscancode);
   \   00000074   1370A0E3           MOV      R7,#+19
   \   00000078   E07C87E3           ORR      R7,R7,#0xE000
     46              DrawString(data->ws1,3,YDISP + 1 + fsize*7,scr_w-4,YDISP + fsize*8,FONT_SMALL,1,black,transparent);    
   \   0000007C   8691A0E1           LSL      R9,R6,#+3
   \   00000080   B40100EF           SWI      +436
   \   00000084   3C00D4E5           LDRB     R0,[R4, #+60]
   \   00000088   0CD08DE2           ADD      SP,SP,#+12
     47              wsprintf(data->ws1,"DEC: %c%u",UTF16_FONT_SMALL_BOLD,data->keyscancode);
     48              DrawString(data->ws1,3,YDISP + 1 + fsize*8,scr_w-4,YDISP + fsize*9,FONT_SMALL,1,black,transparent); 
   \   0000008C   86A186E0           ADD      R10,R6,R6, LSL #+3
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   300094E5           LDR      R0,[R4, #+48]
   \   00000098   04108512           ADDNE    R1,R5,#+4
   \   0000009C   50108502           ADDEQ    R1,R5,#+80
   \   000000A0   240100EF           SWI      +292
   \   000000A4   04008DE2           ADD      R0,SP,#+4
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   043048E2           SUB      R3,R8,#+4
   \   000000B0   012086E2           ADD      R2,R6,#+1
   \   000000B4   0310A0E3           MOV      R1,#+3
   \   000000B8   04008DE2           ADD      R0,SP,#+4
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   048048E2           SUB      R8,R8,#+4
   \   000000C4   0100A0E3           MOV      R0,#+1
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   0700A0E3           MOV      R0,#+7
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   060186E0           ADD      R0,R6,R6, LSL #+2
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   300094E5           LDR      R0,[R4, #+48]
   \   000000E0   4C0100EF           SWI      +332
   \   000000E4   14D08DE2           ADD      SP,SP,#+20
   \   000000E8   343094E5           LDR      R3,[R4, #+52]
   \   000000EC   300094E5           LDR      R0,[R4, #+48]
   \   000000F0   0720A0E1           MOV      R2,R7
   \   000000F4   881085E2           ADD      R1,R5,#+136
   \   000000F8   240100EF           SWI      +292
   \   000000FC   04008DE2           ADD      R0,SP,#+4
   \   00000100   01002DE9           PUSH     {R0}
   \   00000104   0830A0E1           MOV      R3,R8
   \   00000108   0310A0E3           MOV      R1,#+3
   \   0000010C   04008DE2           ADD      R0,SP,#+4
   \   00000110   01002DE9           PUSH     {R0}
   \   00000114   0100A0E3           MOV      R0,#+1
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   0700A0E3           MOV      R0,#+7
   \   00000120   01002DE9           PUSH     {R0}
   \   00000124   0900A0E1           MOV      R0,R9
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   860166E0           RSB      R0,R6,R6, LSL #+3
   \   00000130   012080E2           ADD      R2,R0,#+1
   \   00000134   300094E5           LDR      R0,[R4, #+48]
   \   00000138   4C0100EF           SWI      +332
   \   0000013C   343094E5           LDR      R3,[R4, #+52]
   \   00000140   300094E5           LDR      R0,[R4, #+48]
   \   00000144   0720A0E1           MOV      R2,R7
   \   00000148   941085E2           ADD      R1,R5,#+148
   \   0000014C   240100EF           SWI      +292
   \   00000150   18008DE2           ADD      R0,SP,#+24
   \   00000154   01002DE9           PUSH     {R0}
   \   00000158   012089E2           ADD      R2,R9,#+1
     49              sprintf(str,"%u",data->keyscancode);
   \   0000015C   BC909FE5           LDR      R9,??OnReadraw_key_0+0xC  ;; code
   \   00000160   0830A0E1           MOV      R3,R8
   \   00000164   18008DE2           ADD      R0,SP,#+24
   \   00000168   01002DE9           PUSH     {R0}
   \   0000016C   0310A0E3           MOV      R1,#+3
   \   00000170   0100A0E3           MOV      R0,#+1
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   0700A0E3           MOV      R0,#+7
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   0A00A0E1           MOV      R0,R10
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   300094E5           LDR      R0,[R4, #+48]
   \   0000018C   4C0100EF           SWI      +332
   \   00000190   28D08DE2           ADD      SP,SP,#+40
   \   00000194   342094E5           LDR      R2,[R4, #+52]
   \   00000198   1D1F8FE2           ADR      R1,??OnReadraw_key_0  ;; "%u"
   \   0000019C   040089E2           ADD      R0,R9,#+4
   \   000001A0   160000EF           SWI      +22
     50              code=StrToInt(str,0);
   \   000001A4   0010A0E3           MOV      R1,#+0
   \   000001A8   040089E2           ADD      R0,R9,#+4
   \   000001AC   540000EF           SWI      +84
     51              wsprintf(data->ws1,"Имя: %c%s",UTF16_FONT_SMALL_BOLD,key_names[code]);
   \   000001B0   6C109FE5           LDR      R1,??OnReadraw_key_0+0x10  ;; key_names
   \   000001B4   000089E5           STR      R0,[R9, #+0]
   \   000001B8   003191E7           LDR      R3,[R1, +R0, LSL #+2]
   \   000001BC   300094E5           LDR      R0,[R4, #+48]
   \   000001C0   0720A0E1           MOV      R2,R7
   \   000001C4   A01085E2           ADD      R1,R5,#+160
   \   000001C8   240100EF           SWI      +292
     52              DrawString(data->ws1,3,YDISP + 1 + fsize*9,scr_w-4,YDISP + fsize*10,FONT_SMALL,1,black,transparent); 
   \   000001CC   04008DE2           ADD      R0,SP,#+4
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   0830A0E1           MOV      R3,R8
   \   000001D8   01208AE2           ADD      R2,R10,#+1
   \   000001DC   04008DE2           ADD      R0,SP,#+4
   \   000001E0   01002DE9           PUSH     {R0}
   \   000001E4   0100A0E3           MOV      R0,#+1
   \   000001E8   01002DE9           PUSH     {R0}
   \   000001EC   0700A0E3           MOV      R0,#+7
   \   000001F0   01002DE9           PUSH     {R0}
   \   000001F4   0A00A0E3           MOV      R0,#+10
   \   000001F8   900601E0           MUL      R1,R0,R6
   \   000001FC   02002DE9           PUSH     {R1}
   \   00000200   300094E5           LDR      R0,[R4, #+48]
   \   00000204   0310A0E3           MOV      R1,#+3
   \   00000208   4C0100EF           SWI      +332
     53              ////////////////////////////////////////////////////////////////////////////
     54          }
   \   0000020C   20D08DE2           ADD      SP,SP,#+32
   \   00000210   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??OnReadraw_key_0:
   \   00000214   25750000           DC8      "%u",+0
   \   00000218   ........           DC32     `?<Constant {0, 0, 0, 100}>`
   \   0000021C   ........           DC32     `?<Constant {255, 255, 255, 100}>`
   \   00000220   ........           DC32     code
   \   00000224   ........           DC32     key_names
     55          

   \                                 In segment CODE, align 4, keep-with-next
     56          void OnCreate_key(KEY_GUI *data, void *(*malloc_adr)(int))
     57          {
   \                     OnCreate_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     58            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   300084E5           STR      R0,[R4, #+48]
     59            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
     60          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          void method2_key(KEY_GUI *data, void (*mfree_adr)(void *))
     63          {
   \                     method2_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     64            FreeWS(data->ws1);
   \   00000008   300094E5           LDR      R0,[R4, #+48]
   \   0000000C   290100EF           SWI      +297
     65            data->gui.state=0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     66          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          void OnFocus_key(KEY_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     69          {
     70          #ifdef ELKA  
     71            DisableIconBar(1);
     72          #endif  
     73            data->gui.state=2;
   \                     OnFocus_key:
   \   00000000   0210A0E3           MOV      R1,#+2
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
     74          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          void method4_key(KEY_GUI *data, void (*mfree_adr)(void *))
     77          {
     78            if (data->gui.state!=2) return;
   \                     method4_key:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     79            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     80          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          int method5_key(KEY_GUI *data, GUI_MSG *msg)
     83          {
   \                     method5_key:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     84            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \   00000004   042091E5           LDR      R2,[R1, #+4]
   \   00000008   9530A0E3           MOV      R3,#+149
   \   0000000C   F240D2E1           LDRSH    R4,[R2, #+2]
   \   00000010   403F83E3           ORR      R3,R3,#0x100
   \   00000014   02C043E2           SUB      R12,R3,#+2
   \   00000018   0C0054E1           CMP      R4,R12
   \   0000001C   03005411           CMPNE    R4,R3
   \   00000020   1E00001A           BNE      ??method5_key_0
     85            {
     86              if(msg->gbsmsg->msg==LONG_PRESS&&msg->gbsmsg->submess==LEFT_BUTTON)
   \   00000024   F250D2E1           LDRSH    R5,[R2, #+2]
   \   00000028   0040A0E3           MOV      R4,#+0
   \   0000002C   030055E1           CMP      R5,R3
   \   00000030   04309205           LDREQ    R3,[R2, #+4]
   \   00000034   3D005303           CMPEQ    R3,#+61
     87              {
     88                data->keyscancode=0;
   \   00000038   34408005           STREQ    R4,[R0, #+52]
     89                DirectRedrawGUI();
   \   0000003C   1600000A           BEQ      ??method5_key_1
     90                
     91              }
     92              else
     93              {
     94              if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000040   0C0055E1           CMP      R5,R12
   \   00000044   1100001A           BNE      ??method5_key_2
     95              {
     96                if(data->needexit)
   \   00000048   3C30D0E5           LDRB     R3,[R0, #+60]
   \   0000004C   000053E3           CMP      R3,#+0
   \   00000050   0C00000A           BEQ      ??method5_key_3
     97                {
     98                 switch(msg->gbsmsg->submess)
   \   00000054   042092E5           LDR      R2,[R2, #+4]
   \   00000058   012052E2           SUBS     R2,R2,#+1
   \   0000005C   0B205212           SUBSNE   R2,R2,#+11
   \   00000060   0400000A           BEQ      ??method5_key_4
   \   00000064   0E2052E2           SUBS     R2,R2,#+14
   \   00000068   0400001A           BNE      ??method5_key_5
     99                 {
    100                 case RED_BUTTON:
    101                 case LEFT_SOFT:
    102                   return (1);
    103                 case ENTER_BUTTON:
    104                   data->keymodecode[0] = data->keyscancode;
   \   0000006C   381090E5           LDR      R1,[R0, #+56]
   \   00000070   340090E5           LDR      R0,[R0, #+52]
   \   00000074   000081E5           STR      R0,[R1, #+0]
    105                   return(1);
   \                     ??method5_key_4:
   \   00000078   0100A0E3           MOV      R0,#+1
   \   0000007C   3080BDE8           POP      {R4,R5,PC}
    106                 }
    107                 data->needexit = 0;
   \                     ??method5_key_5:
   \   00000080   3C40C0E5           STRB     R4,[R0, #+60]
   \   00000084   010000EA           B        ??method5_key_2
    108                } else
    109                data->needexit = 1;
   \                     ??method5_key_3:
   \   00000088   0120A0E3           MOV      R2,#+1
   \   0000008C   3C20C0E5           STRB     R2,[R0, #+60]
    110              }
    111             
    112            data->keyscancode = msg->gbsmsg->submess;
   \                     ??method5_key_2:
   \   00000090   041091E5           LDR      R1,[R1, #+4]
   \   00000094   041091E5           LDR      R1,[R1, #+4]
   \   00000098   341080E5           STR      R1,[R0, #+52]
    113            DirectRedrawGUI();
   \                     ??method5_key_1:
   \   0000009C   3F0100EF           SWI      +319
    114              }
    115            }
    116            return(0);
   \                     ??method5_key_0:
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   3080BDE8           POP      {R4,R5,PC}       ;; return
    117          }
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          void method7_key(KEY_GUI *data, void (*mfree_adr)(void *))
    120          {
    121            extern void kill_data(void *p, void (*func_p)(void *));
    122            kill_data(data,mfree_adr);
   \                     method7_key:
   \   00000000   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
    123          }
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          int method8_key(void){return(0);}
   \                     method8_key:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          int method9_key(void){return(0);}
   \                     method9_key:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    128          

   \                                 In segment DATA_C, align 4, align-sorted
    129          const void * const gui_methods_key[11]={
    130            (void *)OnReadraw_key,//Redraw
    131            (void *)OnCreate_key,	//Create
    132            (void *)method2_key,	//Close
    133            (void *)OnFocus_key,	//Focus
    134            (void *)method4_key,	//Unfocus
    135            (void *)method5_key,	//OnKey
    136            0,
    137            (void *)method7_key,	//Destroy
    138            (void *)method8_key,
    139            (void *)method9_key,
    140            0
    141          };
    142          
    143          const RECT Canvas_key={0,0,0,0};
   \                     Canvas_key:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods_key:
   \   00000008   ............       DC32 OnReadraw_key, OnCreate_key, method2_key, OnFocus_key, method4_key
   \              ............
   \              ............
   \              ....        
   \   0000001C   ........0000       DC32 method5_key, 0H, method7_key, method8_key, method9_key, 0H
   \              0000........
   \              ............
   \              ....00000000
    144          

   \                                 In segment CODE, align 4, keep-with-next
    145          void GetKeyCodes(void *key)
    146          {
   \                     GetKeyCodes:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    147            KEY_GUI *keygui=malloc(sizeof(KEY_GUI));
   \   00000008   4000A0E3           MOV      R0,#+64
   \   0000000C   140000EF           SWI      +20
   \   00000010   0040A0E1           MOV      R4,R0
    148            zeromem(keygui,sizeof(KEY_GUI));
   \   00000014   4010A0E3           MOV      R1,#+64
   \   00000018   1D0100EF           SWI      +285
    149            unsigned int *modekode=key;
    150              keygui->keymodecode=key;
   \   0000001C   385084E5           STR      R5,[R4, #+56]
    151              keygui->keyscancode=modekode[0];
   \   00000020   000095E5           LDR      R0,[R5, #+0]
    152              keygui->needexit=0;
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   340084E5           STR      R0,[R4, #+52]
   \   0000002C   3C50C4E5           STRB     R5,[R4, #+60]
    153            patch_rect((RECT*)&Canvas_key,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   00000030   898100EF           SWI      +33161
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   888100EF           SWI      +33160
   \   0000003C   38209FE5           LDR      R2,??GetKeyCodes_0  ;; Canvas_key
   \   00000040   011046E2           SUB      R1,R6,#+1
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   005082E5           STR      R5,[R2, #+0]
   \   0000004C   B400C2E1           STRH     R0,[R2, #+4]
   \   00000050   B610C2E1           STRH     R1,[R2, #+6]
    154            keygui->gui.canvas=(void *)(&Canvas_key);
   \   00000054   002084E5           STR      R2,[R4, #+0]
    155            keygui->gui.flag30=2;
   \   00000058   0200A0E3           MOV      R0,#+2
   \   0000005C   2C0084E5           STR      R0,[R4, #+44]
    156            keygui->gui.methods=(void *)gui_methods_key;
   \   00000060   080082E2           ADD      R0,R2,#+8
   \   00000064   040084E5           STR      R0,[R4, #+4]
    157            keygui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000068   158000EF           SWI      +32789
   \   0000006C   1C0084E5           STR      R0,[R4, #+28]
    158            CreateGUI(keygui);
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   370100EF           SWI      +311
    159          }
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??GetKeyCodes_0:
   \   0000007C   ........           DC32     Canvas_key

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {0, 0, 0, 100}>`:
   \   00000000   00000064           DC8 0, 0, 0, 100
   \   00000004   CDE0E6ECE8F2       DC8 0CDH, 0E0H, 0E6H, 0ECH, 0E8H, 0F2H, 0E5H, 20H
   \              E520        
   \   0000000C   3C456E746572       DC8 3CH, 45H, 6EH, 74H, 65H, 72H, 3EH, 20H
   \              3E20        
   \   00000014   E4EBFF20EFEE       DC8 0E4H, 0EBH, 0FFH, 20H, 0EFH, 0EEH, 0E4H, 0F2H
   \              E4F2        
   \   0000001C   E2E5F0E6E4E5       DC8 0E2H, 0E5H, 0F0H, 0E6H, 0E4H, 0E5H, 0EDH, 0E8H
   \              EDE8        
   \   00000024   FF2E0ACDE0E6       DC8 0FFH, 2EH, 0AH, 0CDH, 0E0H, 0E6H, 0ECH, 0E8H
   \              ECE8        
   \   0000002C   F2E520203C52       DC8 0F2H, 0E5H, 20H, 20H, 3CH, 52H, 65H, 64H
   \              6564        
   \   00000034   3E20E8EBE820       DC8 3EH, 20H, 0E8H, 0EBH, 0E8H, 20H, 3CH, 4CH
   \              3C4C        
   \   0000003C   6566743E20E4       DC8 65H, 66H, 74H, 3EH, 20H, 0E4H, 0EBH, 0FFH
   \              EBFF        
   \   00000044   20E2FBF5EEE4       DC8 20H, 0E2H, 0FBH, 0F5H, 0EEH, 0E4H, 0E0H, 2EH
   \              E02E        
   \   0000004C   00                 DC8 0
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   CDE0E6ECE8F2       DC8 0CDH, 0E0H, 0E6H, 0ECH, 0E8H, 0F2H, 0E5H, 20H
   \              E520        
   \   00000058   EBFEE1F3FE20       DC8 0EBH, 0FEH, 0E1H, 0F3H, 0FEH, 20H, 0EAH, 0EBH
   \              EAEB        
   \   00000060   E0E2E8F8F30A       DC8 0E0H, 0E2H, 0E8H, 0F8H, 0F3H, 0AH, 0C4H, 0EBH
   \              C4EB        
   \   00000068   E8EDEDFBE920       DC8 0E8H, 0EDH, 0EDH, 0FBH, 0E9H, 20H, 0EBH, 0E5H
   \              EBE5        
   \   00000070   E2FBE920EDE0       DC8 0E2H, 0FBH, 0E9H, 20H, 0EDH, 0E0H, 0E2H, 2EH
   \              E22E        
   \   00000078   20E4EBFF20EE       DC8 20H, 0E4H, 0EBH, 0FFH, 20H, 0EEH, 0E1H, 0EDH
   \              E1ED        
   \   00000080   F3EBE5EDE8FF       DC8 0F3H, 0EBH, 0E5H, 0EDH, 0E8H, 0FFH, 0
   \              00          
   \   00000087   00                 DC8 0
   \   00000088   4845583A2025       DC8 "HEX: %c%02X"
   \              632530325800
   \   00000094   4445433A2025       DC8 "DEC: %c%u"
   \              63257500    
   \   0000009E   0000               DC8 0, 0
   \   000000A0   C8ECFF3A2025       DC8 "\310\354\377: %c%s"
   \              63257300    
   \   000000AA   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {255, 255, 255, 100}>`:
   \   00000000   FFFFFF64           DC8 255, 255, 255, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00000000           DC8 0, 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257500             DC8 "%u"
    160          

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     GetKeyCodes      16
     OnCreate_key      8
     OnFocus_key       0
     OnReadraw_key    84
     method2_key       8
     method4_key       0
     method5_key      12
     method7_key       4
     method8_key       0
     method9_key       0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     code                            132
     OnReadraw_key                   552
     OnCreate_key                     32
     method2_key                      28
     OnFocus_key                      12
     method4_key                      20
     method5_key                     168
     method7_key                       4
     method8_key                       8
     method9_key                       8
     Canvas_key                       52
     GetKeyCodes                     128
     ?<Constant {0, 0, 0, 100}>      172
     ?<Constant {255, 255, 255, 100}>
                                       4
     ?<Constant {0, 0, 0, 0}>          4
     ?<Constant "%u">                  3
      Others                          64

 
 1 012 bytes in segment CODE
   235 bytes in segment DATA_C
   132 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 960 bytes of CODE  memory (+ 64 bytes shared)
 235 bytes of CONST memory
 132 bytes of DATA  memory

Errors: none
Warnings: none

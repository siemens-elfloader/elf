##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Mar/2011  00:23:08 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CfgEdit\color.c                               #
#    Command line    =  C:\arm\CfgEdit\color.c -D NEWSGOLD -D ELKA -lC       #
#                       C:\arm\CfgEdit\Release_ELKA\List\ -o                 #
#                       C:\arm\CfgEdit\Release_ELKA\Obj\ -s9 --no_unroll     #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\CfgEdit\Release_ELKA\List\color.lst           #
#    Object file     =  C:\arm\CfgEdit\Release_ELKA\Obj\color.r79            #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CfgEdit\color.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          
      4          extern char colors[4][4];
      5          extern char black[4];
      6          extern char white[4];
      7          extern char transparent[4];
      8          
      9          typedef struct
     10          {
     11            GUI gui;
     12            WSHDR*ws1; 
     13            int r;
     14            int g;
     15            int b;
     16            int a;
     17            char *color;
     18            int current_column;
     19            char testcolor[4];
     20            int cstep;
     21          }MAIN_GUI_2;
     22          
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          void method0_2(MAIN_GUI_2 *data)
     25          {
   \                     method0_2:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
     26            int scr_w=ScreenW();
   \   0000000C   888100EF           SWI      +33160
   \   00000010   04008DE5           STR      R0,[SP, #+4]
     27            int scr_h=ScreenH();
   \   00000014   898100EF           SWI      +33161
     28            DrawRectangle(0,YDISP,scr_w-1,scr_h-1,0,white,white);
   \   00000018   04109DE5           LDR      R1,[SP, #+4]
   \   0000001C   0060A0E1           MOV      R6,R0
   \   00000020   84029FE5           LDR      R0,??method0_2_0  ;; white
   \   00000024   011041E2           SUB      R1,R1,#+1
   \   00000028   0C108DE5           STR      R1,[SP, #+12]
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   013046E2           SUB      R3,R6,#+1
   \   00000038   0120A0E1           MOV      R2,R1
   \   0000003C   1810A0E3           MOV      R1,#+24
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   B40100EF           SWI      +436
     29          
     30            int fsize=GetFontYSIZE(FONT_SMALL)+1;
   \   0000004C   0800A0E3           MOV      R0,#+8
   \   00000050   C50100EF           SWI      +453
     31            int column_height=scr_h-fsize-fsize-YDISP;
     32            int column_width=scr_w/9;
   \   00000054   10109DE5           LDR      R1,[SP, #+16]
   \   00000058   50229FE5           LDR      R2,??method0_2_0+0x4  ;; 0x38e38e39
   \   0000005C   018080E2           ADD      R8,R0,#+1
   \   00000060   9231C7E0           SMULL    R3,R7,R2,R1
   \   00000064   880046E0           SUB      R0,R6,R8, LSL #+1
   \   00000068   186040E2           SUB      R6,R0,#+24
   \   0000006C   C770A0E1           ASR      R7,R7,#+1
   \   00000070   A11F87E0           ADD      R1,R7,R1, LSR #+31
     33            int start_column;
     34            int y_line;
     35            wsprintf(data->ws1,"%02X,%02X,%02X,%02X",data->r,data->g,data->b,data->a);
     36          
     37            DrawString(data->ws1,1,YDISP+1,scr_w-20,YDISP+fsize,FONT_SMALL,1,black,transparent);
   \   00000074   38729FE5           LDR      R7,??method0_2_0+0x8  ;; black
   \   00000078   0C108DE5           STR      R1,[SP, #+12]
   \   0000007C   440094E5           LDR      R0,[R4, #+68]
   \   00000080   30129FE5           LDR      R1,??method0_2_0+0xC  ;; `?<Constant "%02X,%02X,%02X,%02X">`
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   400094E5           LDR      R0,[R4, #+64]
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   3C3094E5           LDR      R3,[R4, #+60]
   \   00000094   382094E5           LDR      R2,[R4, #+56]
   \   00000098   340094E5           LDR      R0,[R4, #+52]
   \   0000009C   240100EF           SWI      +292
   \   000000A0   14029FE5           LDR      R0,??method0_2_0+0x10  ;; transparent
   \   000000A4   1920A0E3           MOV      R2,#+25
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   01002DE9           PUSH     {R0}
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   0800A0E3           MOV      R0,#+8
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   180088E2           ADD      R0,R8,#+24
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   2C009DE5           LDR      R0,[SP, #+44]
   \   000000D4   143040E2           SUB      R3,R0,#+20
   \   000000D8   340094E5           LDR      R0,[R4, #+52]
   \   000000DC   4C0100EF           SWI      +332
   \   000000E0   28D08DE2           ADD      SP,SP,#+40
     38            fsize+=3;
   \   000000E4   031088E2           ADD      R1,R8,#+3
   \   000000E8   08108DE5           STR      R1,[SP, #+8]
     39            for (int i=0;i!=4;i++)
   \   000000EC   0080A0E3           MOV      R8,#+0
     40            {
     41              start_column=column_width+2*i*column_width;
   \                     ??method0_2_1:
   \   000000F0   00009DE5           LDR      R0,[SP, #+0]
   \   000000F4   0010A0E1           MOV      R1,R0
   \   000000F8   910802E0           MUL      R2,R1,R8
   \   000000FC   829080E0           ADD      R9,R0,R2, LSL #+1
     42              if (data->current_column==i)
   \   00000100   08009DE5           LDR      R0,[SP, #+8]
   \   00000104   00A086E0           ADD      R10,R6,R0
   \   00000108   4C0094E5           LDR      R0,[R4, #+76]
   \   0000010C   080050E1           CMP      R0,R8
   \   00000110   0D00001A           BNE      ??method0_2_2
     43                DrawRectangle(start_column-2,YDISP+fsize-2,start_column+column_width+2,YDISP+fsize+column_height+2,
     44                              0,black,white);
   \   00000114   90019FE5           LDR      R0,??method0_2_0  ;; white
   \   00000118   1A308AE2           ADD      R3,R10,#+26
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   0700A0E1           MOV      R0,R7
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0000A0E3           MOV      R0,#+0
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   010089E0           ADD      R0,R9,R1
   \   00000134   022080E2           ADD      R2,R0,#+2
   \   00000138   14009DE5           LDR      R0,[SP, #+20]
   \   0000013C   161080E2           ADD      R1,R0,#+22
   \   00000140   020049E2           SUB      R0,R9,#+2
   \   00000144   B40100EF           SWI      +436
   \   00000148   0CD08DE2           ADD      SP,SP,#+12
     45          
     46              DrawRectangle(start_column,YDISP+fsize,start_column+column_width,YDISP+fsize+column_height,
     47                            0,black,colors[i]);
   \                     ??method0_2_2:
   \   0000014C   08109DE5           LDR      R1,[SP, #+8]
   \   00000150   18A08AE2           ADD      R10,R10,#+24
   \   00000154   181081E2           ADD      R1,R1,#+24
   \   00000158   10108DE5           STR      R1,[SP, #+16]
   \   0000015C   00009DE5           LDR      R0,[SP, #+0]
   \   00000160   0A30A0E1           MOV      R3,R10
   \   00000164   09B080E0           ADD      R11,R0,R9
   \   00000168   50019FE5           LDR      R0,??method0_2_0+0x14  ;; colors
   \   0000016C   0B20A0E1           MOV      R2,R11
   \   00000170   080180E0           ADD      R0,R0,R8, LSL #+2
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   0700A0E1           MOV      R0,R7
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   0000A0E3           MOV      R0,#+0
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   0900A0E1           MOV      R0,R9
   \   0000018C   B40100EF           SWI      +436
     48              switch(i)
   \   00000190   0800B0E1           MOVS     R0,R8
   \   00000194   0CD08DE2           ADD      SP,SP,#+12
   \   00000198   0600000A           BEQ      ??method0_2_3
   \   0000019C   010058E2           SUBS     R0,R8,#+1
   \   000001A0   0B00000A           BEQ      ??method0_2_4
   \   000001A4   010050E2           SUBS     R0,R0,#+1
   \   000001A8   0B00000A           BEQ      ??method0_2_5
   \   000001AC   010050E2           SUBS     R0,R0,#+1
   \   000001B0   1000000A           BEQ      ??method0_2_6
   \   000001B4   160000EA           B        ??method0_2_7
     49              {
     50              case 0:
     51                y_line=YDISP+fsize+column_height-(data->r*column_height)/0xFF;
   \                     ??method0_2_3:
   \   000001B8   380094E5           LDR      R0,[R4, #+56]
   \                     ??method0_2_8:
   \   000001BC   00119FE5           LDR      R1,??method0_2_0+0x18  ;; 0xffffffff80808081
   \   000001C0   960000E0           MUL      R0,R6,R0
   \   000001C4   9120C3E0           SMULL    R2,R3,R1,R0
   \   000001C8   003083E0           ADD      R3,R3,R0
   \   000001CC   C333A0E1           ASR      R3,R3,#+7
   \   000001D0   0D0000EA           B        ??method0_2_9
     52                break;
     53              case 1:
     54                y_line=YDISP+fsize+column_height-(data->g*column_height)/0xFF;
   \                     ??method0_2_4:
   \   000001D4   3C0094E5           LDR      R0,[R4, #+60]
   \   000001D8   F7FFFFEA           B        ??method0_2_8
     55                break;      
     56              case 2:
     57                y_line=YDISP+fsize+column_height-(data->b*column_height)/0xFF;
   \                     ??method0_2_5:
   \   000001DC   400094E5           LDR      R0,[R4, #+64]
   \   000001E0   DC109FE5           LDR      R1,??method0_2_0+0x18  ;; 0xffffffff80808081
   \   000001E4   960000E0           MUL      R0,R6,R0
   \   000001E8   9120C3E0           SMULL    R2,R3,R1,R0
   \   000001EC   003083E0           ADD      R3,R3,R0
   \   000001F0   C333A0E1           ASR      R3,R3,#+7
   \   000001F4   040000EA           B        ??method0_2_9
     58                break;
     59              case 3:
     60                y_line=YDISP+fsize+column_height-(data->a*column_height)/0x64;
   \                     ??method0_2_6:
   \   000001F8   440094E5           LDR      R0,[R4, #+68]
   \   000001FC   C4109FE5           LDR      R1,??method0_2_0+0x1C  ;; 0x51eb851f
   \   00000200   960000E0           MUL      R0,R6,R0
   \   00000204   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000208   C332A0E1           ASR      R3,R3,#+5
   \                     ??method0_2_9:
   \   0000020C   A00F83E0           ADD      R0,R3,R0, LSR #+31
   \   00000210   00504AE0           SUB      R5,R10,R0
     61                break;
     62              }
     63              DrawLine(start_column,y_line,start_column+column_width,y_line,0,black);
   \                     ??method0_2_7:
   \   00000214   0700A0E1           MOV      R0,R7
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   0530A0E1           MOV      R3,R5
   \   00000220   0B20A0E1           MOV      R2,R11
   \   00000224   0510A0E1           MOV      R1,R5
   \   00000228   0000A0E3           MOV      R0,#+0
   \   0000022C   01002DE9           PUSH     {R0}
     64            }
   \   00000230   018088E2           ADD      R8,R8,#+1
   \   00000234   0900A0E1           MOV      R0,R9
   \   00000238   B30100EF           SWI      +435
   \   0000023C   040058E3           CMP      R8,#+4
   \   00000240   08D08DE2           ADD      SP,SP,#+8
   \   00000244   A9FFFF1A           BNE      ??method0_2_1
     65            setColor(data->r,data->g,data->b,data->a,data->testcolor);
   \   00000248   500084E2           ADD      R0,R4,#+80
   \   0000024C   01002DE9           PUSH     {R0}
   \   00000250   443094E5           LDR      R3,[R4, #+68]
   \   00000254   402094E5           LDR      R2,[R4, #+64]
   \   00000258   3C1094E5           LDR      R1,[R4, #+60]
   \   0000025C   380094E5           LDR      R0,[R4, #+56]
   \   00000260   310100EF           SWI      +305
     66            DrawRoundedFrame(scr_w-1-fsize,YDISP+1,scr_w-2,YDISP+fsize,2,2,0,black,data->testcolor);
   \   00000264   500084E2           ADD      R0,R4,#+80
   \   00000268   01002DE9           PUSH     {R0}
   \   0000026C   80002DE9           PUSH     {R7}
   \   00000270   1910A0E3           MOV      R1,#+25
   \   00000274   0000A0E3           MOV      R0,#+0
   \   00000278   01002DE9           PUSH     {R0}
   \   0000027C   0200A0E3           MOV      R0,#+2
   \   00000280   01002DE9           PUSH     {R0}
   \   00000284   01002DE9           PUSH     {R0}
   \   00000288   20409DE5           LDR      R4,[SP, #+32]
   \   0000028C   28309DE5           LDR      R3,[SP, #+40]
   \   00000290   1C009DE5           LDR      R0,[SP, #+28]
   \   00000294   022040E2           SUB      R2,R0,#+2
   \   00000298   24009DE5           LDR      R0,[SP, #+36]
   \   0000029C   040040E0           SUB      R0,R0,R4
   \   000002A0   500100EF           SWI      +336
     67          }
   \   000002A4   2CD08DE2           ADD      SP,SP,#+44
   \   000002A8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??method0_2_0:
   \   000002AC   ........           DC32     white
   \   000002B0   398EE338           DC32     0x38e38e39
   \   000002B4   ........           DC32     black
   \   000002B8   ........           DC32     `?<Constant "%02X,%02X,%02X,%02X">`
   \   000002BC   ........           DC32     transparent
   \   000002C0   ........           DC32     colors
   \   000002C4   81808080           DC32     0xffffffff80808081
   \   000002C8   1F85EB51           DC32     0x51eb851f
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          void method1_2(MAIN_GUI_2 *data, void *(*malloc_adr)(int))
     70          {
   \                     method1_2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     71            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
     72            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
     73          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     74          

   \                                 In segment CODE, align 4, keep-with-next
     75          void method2_2(MAIN_GUI_2 *data, void (*mfree_adr)(void *))
     76          {
   \                     method2_2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     77            FreeWS(data->ws1);
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   290100EF           SWI      +297
     78            data->gui.state=0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     79          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     80          

   \                                 In segment CODE, align 4, keep-with-next
     81          void method3_2(MAIN_GUI_2 *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     82          {
   \                     method3_2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     83          #ifdef ELKA    
     84            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
     85          #endif  
     86            data->gui.state=2;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     87          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          void method4_2(MAIN_GUI_2 *data, void (*mfree_adr)(void *))
     90          {
     91            if (data->gui.state!=2) return;
   \                     method4_2:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     92            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     93          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     94          

   \                                 In segment CODE, align 4, keep-with-next
     95          int method5_2(MAIN_GUI_2 *data, GUI_MSG *msg)
     96          {
   \                     method5_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     97            int n;
     98            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \   00000004   044091E5           LDR      R4,[R1, #+4]
   \   00000008   0020A0E1           MOV      R2,R0
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   9550A0E3           MOV      R5,#+149
   \   00000014   405F85E3           ORR      R5,R5,#0x100
   \   00000018   026045E2           SUB      R6,R5,#+2
   \   0000001C   060050E1           CMP      R0,R6
   \   00000020   05005011           CMPNE    R0,R5
   \   00000024   7200001A           BNE      ??method5_2_1
     99            {
    100              if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000028   047094E5           LDR      R7,[R4, #+4]
   \   0000002C   380092E5           LDR      R0,[R2, #+56]
   \   00000030   3C1092E5           LDR      R1,[R2, #+60]
   \   00000034   40C092E5           LDR      R12,[R2, #+64]
   \   00000038   443092E5           LDR      R3,[R2, #+68]
   \   0000003C   060057E1           CMP      R7,R6
   \   00000040   0F00001A           BNE      ??method5_2_2
    101              {
    102                 switch(msg->gbsmsg->submess)
   \   00000044   086094E5           LDR      R6,[R4, #+8]
   \   00000048   046056E2           SUBS     R6,R6,#+4
   \   0000004C   08605612           SUBSNE   R6,R6,#+8
   \   00000050   0200000A           BEQ      ??method5_2_3
   \   00000054   0E6056E2           SUBS     R6,R6,#+14
   \   00000058   0200000A           BEQ      ??method5_2_4
   \   0000005C   080000EA           B        ??method5_2_2
    103                 {
    104                 case RIGHT_SOFT:
    105                 case RED_BUTTON:
    106                   return (1);
   \                     ??method5_2_3:
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   F081BDE8           POP      {R4-R8,PC}
    107                   
    108                 case ENTER_BUTTON:
    109                   setColor(data->r,data->g,data->b,data->a,data->color);
   \                     ??method5_2_4:
   \   00000068   482092E5           LDR      R2,[R2, #+72]
   \   0000006C   04002DE9           PUSH     {R2}
   \   00000070   0C20A0E1           MOV      R2,R12
   \   00000074   310100EF           SWI      +305
    110                   return (1);
   \   00000078   0100A0E3           MOV      R0,#+1
   \   0000007C   04D08DE2           ADD      SP,SP,#+4
   \   00000080   F081BDE8           POP      {R4-R8,PC}
    111                 }
    112              }
    113              if (msg->gbsmsg->msg==LONG_PRESS)  
   \                     ??method5_2_2:
   \   00000084   050057E1           CMP      R7,R5
    114                data->cstep=8;
   \   00000088   0850A003           MOVEQ    R5,#+8
   \   0000008C   54508205           STREQ    R5,[R2, #+84]
    115          
    116              switch(msg->gbsmsg->submess)
   \   00000090   08E094E5           LDR      LR,[R4, #+8]
   \   00000094   546092E5           LDR      R6,[R2, #+84]
   \   00000098   4C7092E5           LDR      R7,[R2, #+76]
   \   0000009C   0050A0E3           MOV      R5,#+0
   \   000000A0   32E04EE2           SUB      LR,LR,#+50
   \   000000A4   0C005EE3           CMP      LR,#+12
   \   000000A8   5100008A           BHI      ??method5_2_1
   \   000000AC   018F8FE2           ADR      R8,??method5_2_0
   \   000000B0   0E80D8E7           LDRB     R8,[R8, LR]
   \   000000B4   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??method5_2_0:
   \   000000B8   034E264E           DC8      +3,+78,+38,+78
   \   000000BC   2C4E324E           DC8      +44,+78,+50,+78
   \   000000C0   4E033226           DC8      +78,+3,+50,+38
   \   000000C4   2C000000           DC8      +44,+0,+0,+0
    117              {
    118              case UP_BUTTON:
    119              case '2':
    120                switch(data->current_column)
   \                     ??method5_2_5:
   \   000000C8   000057E3           CMP      R7,#+0
   \   000000CC   0600000A           BEQ      ??method5_2_6
   \   000000D0   017057E2           SUBS     R7,R7,#+1
   \   000000D4   0A00000A           BEQ      ??method5_2_7
   \   000000D8   017057E2           SUBS     R7,R7,#+1
   \   000000DC   0E00000A           BEQ      ??method5_2_8
   \   000000E0   017057E2           SUBS     R7,R7,#+1
   \   000000E4   1200000A           BEQ      ??method5_2_9
   \   000000E8   410000EA           B        ??method5_2_1
    121                {
    122                case 0:
    123                  if ((data->r+=data->cstep)>0xFF)
   \                     ??method5_2_6:
   \   000000EC   000086E0           ADD      R0,R6,R0
   \   000000F0   380082E5           STR      R0,[R2, #+56]
   \   000000F4   400F50E3           CMP      R0,#+256
   \   000000F8   3D0000BA           BLT      ??method5_2_1
    124                    data->r=0;
   \                     ??method5_2_10:
   \   000000FC   385082E5           STR      R5,[R2, #+56]
   \   00000100   3B0000EA           B        ??method5_2_1
    125                  break;
    126                case 1:
    127                  if ((data->g+=data->cstep)>0xFF)
   \                     ??method5_2_7:
   \   00000104   010086E0           ADD      R0,R6,R1
   \   00000108   3C0082E5           STR      R0,[R2, #+60]
   \   0000010C   400F50E3           CMP      R0,#+256
   \   00000110   370000BA           BLT      ??method5_2_1
    128                    data->g=0;
   \                     ??method5_2_11:
   \   00000114   3C5082E5           STR      R5,[R2, #+60]
   \   00000118   350000EA           B        ??method5_2_1
    129                  break;
    130                case 2:
    131                  if ((data->b+=data->cstep)>0xFF)
   \                     ??method5_2_8:
   \   0000011C   0C0086E0           ADD      R0,R6,R12
   \   00000120   400082E5           STR      R0,[R2, #+64]
   \   00000124   400F50E3           CMP      R0,#+256
   \   00000128   310000BA           BLT      ??method5_2_1
    132                    data->b=0;
   \                     ??method5_2_12:
   \   0000012C   405082E5           STR      R5,[R2, #+64]
   \   00000130   2F0000EA           B        ??method5_2_1
    133                  break;
    134                case 3:
    135                  if ((data->a+=((n=data->cstep)==8?n>>1:n))>0x64)
   \                     ??method5_2_9:
   \   00000134   080056E3           CMP      R6,#+8
   \   00000138   0460A003           MOVEQ    R6,#+4
   \   0000013C   030086E0           ADD      R0,R6,R3
   \   00000140   440082E5           STR      R0,[R2, #+68]
   \   00000144   650050E3           CMP      R0,#+101
   \   00000148   290000BA           BLT      ??method5_2_1
    136                    data->a=0;
   \   0000014C   445082E5           STR      R5,[R2, #+68]
   \   00000150   270000EA           B        ??method5_2_1
    137                  break;
    138                }
    139                break;
    140                
    141              case LEFT_BUTTON:
    142              case '4':
    143                if (--data->current_column<0)
   \                     ??method5_2_13:
   \   00000154   010057E2           SUBS     R0,R7,#+1
   \   00000158   4C0082E5           STR      R0,[R2, #+76]
   \   0000015C   2400005A           BPL      ??method5_2_1
    144                  data->current_column=3;
   \   00000160   0300A0E3           MOV      R0,#+3
   \   00000164   4C0082E5           STR      R0,[R2, #+76]
   \   00000168   210000EA           B        ??method5_2_1
    145                break;  
    146              case RIGHT_BUTTON:
    147              case '6':
    148                if (++data->current_column>3)
   \                     ??method5_2_14:
   \   0000016C   010087E2           ADD      R0,R7,#+1
   \   00000170   4C0082E5           STR      R0,[R2, #+76]
   \   00000174   040050E3           CMP      R0,#+4
   \   00000178   1D0000BA           BLT      ??method5_2_1
    149                  data->current_column=0;
   \   0000017C   4C5082E5           STR      R5,[R2, #+76]
   \   00000180   1B0000EA           B        ??method5_2_1
    150                break;
    151                
    152              case DOWN_BUTTON:
    153              case '8':
    154                switch(data->current_column)
   \                     ??method5_2_15:
   \   00000184   FF50A0E3           MOV      R5,#+255
   \   00000188   000057E3           CMP      R7,#+0
   \   0000018C   0600000A           BEQ      ??method5_2_16
   \   00000190   017057E2           SUBS     R7,R7,#+1
   \   00000194   0800000A           BEQ      ??method5_2_17
   \   00000198   017057E2           SUBS     R7,R7,#+1
   \   0000019C   0A00000A           BEQ      ??method5_2_18
   \   000001A0   017057E2           SUBS     R7,R7,#+1
   \   000001A4   0C00000A           BEQ      ??method5_2_19
   \   000001A8   110000EA           B        ??method5_2_1
    155                {
    156                case 0:
    157                  if ((data->r-=data->cstep)<0)
   \                     ??method5_2_16:
   \   000001AC   060050E0           SUBS     R0,R0,R6
   \   000001B0   380082E5           STR      R0,[R2, #+56]
   \   000001B4   0E00005A           BPL      ??method5_2_1
    158                    data->r=0xFF;
   \   000001B8   CFFFFFEA           B        ??method5_2_10
    159                  break;
    160                case 1:
    161                  if ((data->g-=data->cstep)<0)
   \                     ??method5_2_17:
   \   000001BC   060051E0           SUBS     R0,R1,R6
   \   000001C0   3C0082E5           STR      R0,[R2, #+60]
   \   000001C4   0A00005A           BPL      ??method5_2_1
    162                    data->g=0xFF;
   \   000001C8   D1FFFFEA           B        ??method5_2_11
    163                  break;
    164                case 2:
    165                  if ((data->b-=data->cstep)<0)
   \                     ??method5_2_18:
   \   000001CC   06005CE0           SUBS     R0,R12,R6
   \   000001D0   400082E5           STR      R0,[R2, #+64]
   \   000001D4   0600005A           BPL      ??method5_2_1
    166                    data->b=0xFF;
   \   000001D8   D3FFFFEA           B        ??method5_2_12
    167                  break;
    168                case 3:
    169                  if ((data->a-=((n=data->cstep)==8?n>>1:n))<0)
   \                     ??method5_2_19:
   \   000001DC   080056E3           CMP      R6,#+8
   \   000001E0   0460A003           MOVEQ    R6,#+4
   \   000001E4   060053E0           SUBS     R0,R3,R6
   \   000001E8   440082E5           STR      R0,[R2, #+68]
    170                    data->a=0x64;
   \   000001EC   6400A043           MOVMI    R0,#+100
   \   000001F0   44008245           STRMI    R0,[R2, #+68]
    171                  break;
    172                }
    173                break;
    174              }
    175            }
    176            if (msg->gbsmsg->msg==KEY_UP)
   \                     ??method5_2_1:
   \   000001F4   040094E5           LDR      R0,[R4, #+4]
   \   000001F8   650F50E3           CMP      R0,#+404
    177              data->cstep=1;
   \   000001FC   0100A003           MOVEQ    R0,#+1
   \   00000200   54008205           STREQ    R0,[R2, #+84]
    178            DirectRedrawGUI();
   \   00000204   3F0100EF           SWI      +319
    179            return(0);
   \   00000208   0000A0E3           MOV      R0,#+0
   \   0000020C   F081BDE8           POP      {R4-R8,PC}       ;; return
    180          }
    181          
    182          

   \                                 In segment CODE, align 4, keep-with-next
    183          void method7_2(MAIN_GUI_2 *data, void (*mfree_adr)(void *))
    184          {
    185            extern void kill_data(void *p, void (*func_p)(void *));
    186            kill_data(data,mfree_adr);
   \                     method7_2:
   \   00000000   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
    187          }
    188          

   \                                 In segment CODE, align 4, keep-with-next
    189          int method8_2(void){return(0);}
   \                     method8_2:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    190          

   \                                 In segment CODE, align 4, keep-with-next
    191          int method9_2(void){return(0);}
   \                     method9_2:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    192          

   \                                 In segment DATA_C, align 4, align-sorted
    193          const void * const gui_methods_2[11]={
    194            (void *)method0_2,	//Redraw
    195            (void *)method1_2,	//Create
    196            (void *)method2_2,	//Close
    197            (void *)method3_2,	//Focus
    198            (void *)method4_2,	//Unfocus
    199            (void *)method5_2,	//OnKey
    200            0,
    201            (void *)method7_2,	//Destroy
    202            (void *)method8_2,
    203            (void *)method9_2,
    204            0
    205          };
    206          
    207          const RECT Canvas_2={0,0,0,0};
   \                     Canvas_2:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods_2:
   \   00000008   ............       DC32 method0_2, method1_2, method2_2, method3_2, method4_2, method5_2
   \              ............
   \              ............
   \              ............
   \   00000020   00000000....       DC32 0H, method7_2, method8_2, method9_2, 0H
   \              ............
   \              ........0000
   \              0000        
    208          

   \                                 In segment CODE, align 4, keep-with-next
    209          void EditColors(char *color)
    210          {
   \                     EditColors:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    211            MAIN_GUI_2 *main_gui=malloc(sizeof(MAIN_GUI_2));
   \   00000008   5800A0E3           MOV      R0,#+88
   \   0000000C   140000EF           SWI      +20
   \   00000010   0040A0E1           MOV      R4,R0
    212            zeromem(main_gui,sizeof(MAIN_GUI_2));
   \   00000014   5810A0E3           MOV      R1,#+88
   \   00000018   1D0100EF           SWI      +285
    213            main_gui->r=color[0];
   \   0000001C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000020   380084E5           STR      R0,[R4, #+56]
    214            main_gui->g=color[1];
   \   00000024   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000028   3C0084E5           STR      R0,[R4, #+60]
    215            main_gui->b=color[2];
   \   0000002C   0200D5E5           LDRB     R0,[R5, #+2]
   \   00000030   400084E5           STR      R0,[R4, #+64]
    216            main_gui->a=color[3];
   \   00000034   0300D5E5           LDRB     R0,[R5, #+3]
   \   00000038   440084E5           STR      R0,[R4, #+68]
    217            main_gui->color=color;
   \   0000003C   485084E5           STR      R5,[R4, #+72]
    218            patch_rect((RECT*)&Canvas_2,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   00000040   898100EF           SWI      +33161
   \   00000044   0050A0E1           MOV      R5,R0
   \   00000048   888100EF           SWI      +33160
   \   0000004C   44209FE5           LDR      R2,??EditColors_0  ;; Canvas_2
   \   00000050   011045E2           SUB      R1,R5,#+1
   \   00000054   010040E2           SUB      R0,R0,#+1
   \   00000058   0030A0E3           MOV      R3,#+0
   \   0000005C   B030C2E1           STRH     R3,[R2, #+0]
   \   00000060   1830A0E3           MOV      R3,#+24
   \   00000064   B230C2E1           STRH     R3,[R2, #+2]
   \   00000068   B400C2E1           STRH     R0,[R2, #+4]
   \   0000006C   B610C2E1           STRH     R1,[R2, #+6]
    219            main_gui->gui.canvas=(void *)(&Canvas_2);
   \   00000070   002084E5           STR      R2,[R4, #+0]
    220            main_gui->gui.flag30=2;
   \   00000074   0200A0E3           MOV      R0,#+2
   \   00000078   300084E5           STR      R0,[R4, #+48]
    221            main_gui->gui.methods=(void *)gui_methods_2;
   \   0000007C   080082E2           ADD      R0,R2,#+8
   \   00000080   040084E5           STR      R0,[R4, #+4]
    222            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000084   158000EF           SWI      +32789
   \   00000088   200084E5           STR      R0,[R4, #+32]
    223            CreateGUI(main_gui);
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   370100EF           SWI      +311
    224          }
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??EditColors_0:
   \   00000098   ........           DC32     Canvas_2

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02X,%02X,%02X,%02X">`:
   \   00000000   253032582C25       DC8 "%02X,%02X,%02X,%02X"
   \              3032582C2530
   \              32582C253032
   \              5800        

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     EditColors    12
     method0_2     96
     method1_2      8
     method2_2      8
     method3_2      8
     method4_2      0
     method5_2     28
     method7_2      4
     method8_2      0
     method9_2      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     method0_2                       716
     method1_2                        32
     method2_2                        28
     method3_2                        28
     method4_2                        20
     method5_2                       528
     method7_2                         4
     method8_2                         8
     method9_2                         8
     Canvas_2                         52
     EditColors                      156
     ?<Constant "%02X,%02X,%02X,%02X">
                                      20
      Others                          52

 
 1 580 bytes in segment CODE
    72 bytes in segment DATA_C
 
 1 528 bytes of CODE  memory (+ 52 bytes shared)
    72 bytes of CONST memory

Errors: none
Warnings: none

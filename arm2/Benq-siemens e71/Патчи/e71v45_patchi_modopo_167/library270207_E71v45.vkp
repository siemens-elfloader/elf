; E71 v45 lg1 - Patch made by "Smelter" © avkiev
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************

;Library

;27.02.2007

+0074000
#pragma enable old_equal_ff
0000: 0xA0002040   ;   0: void loopback0()
0004: 0xA0002040   ;   1: void loopback1()
0008: 0xA0002040   ;   2: void loopback2()
000C: 0xA0002040   ;   3: void loopback3()
0010: 0xA0002040   ;   4: void loopback4()
0014: 0xA058AC29   ;   5: DecToHex
0018: 0xA01A7790   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA04B7254   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0543CE4   ;   9: SwitchPhoneOff
0028: 0xA0568464   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0568524   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0568654   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA05683B8   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA05683E8   ;   E: fflush
003C: 0xA0568418   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA056805C   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0567EBC   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA05681B0   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0092F51   ;  14: void *malloc(unsigned int size)
0054: 0xA0092D85   ;  15: void mfree(void *)
0058: 0xA0FAEA01   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA122AE25   ;  17: char *strcat (char *,const char *)
0060: 0xA122AE45   ;  18: char *strchr (const char *,int)
0064: 0xA122AE68   ;  19: int strcmp (const char *,const char *)
0068: 0xA122AF05   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA122AF85   ;  1B: unsigned int strlen(const char *)
0070: 0xA04FB4D9   ;  1C: void wsAppendChar(void *WSHDR,int wchar)
0074: 0xA04FB48D   ;  1D: wsInsertChar
0078: 0xA094CE9B   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA05C34E5   ;  1F: DrawMainScreen

0080: 0xA0702CF5   ;  20: DrawScreenSaver
0084: 0xA094CFC3   ;  21: int GetImgHeight(short picture)
0088: 0xA094CFD3   ;  22: int GetImgWidth(short picture)
008C: 0xA05C17C5   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
0090: 0xA0A0C91B   ;  24: DrawImage2
0094: 0xA05C0B9F   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A0C845   ;  26: DrawImgBW
009C: 0xA05C0DDD   ;  27: AddIconToIconbar
;0A0:              ;  28: getEELiteMaxID
;0A4:              ;  29: getEEFullMaxID
00A8: 0xA04E7B8C   ;  2A: int *GetEELiteBlockAddress(short blocknum)
;0AC:              ;  2B: getEELiteBlockSizeVersion
;0B0:              ;  2C: getEEFullBlockSizeVersion
;0B4:              ;  2D: StartWriteEELiteBlock
;0B8:              ;  2E: FinishWriteEELiteBlock
;0BC:              ;  2F: DeleteEELiteBlock

;0C0:              ;  30: WriteEELiteBlock
00C4: 0xA122B0CD   ;  31: char *strrchr(const char *s,int c)
00C8: 0xA05A2C64   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0595668   ;  33: PlaySound2
;0D0:              ;  34: PlaySoundLoop
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: GetATCmdString
00DC: 0xA09A4AF5   ;  37: OriginalATCGSN
;0E0:              ;  38: PostAtCommand
00E4: 0xA08B89A5   ;  39: SendATAnswerStr
00E8: 0xA0092F93   ;  3A: mfree_high
00EC: 0xA0FAF769   ;  3B: MemChr
00F0: 0xA0568564   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
;0F8:              ;  3E: LoadProcesses
00FC: 0xA0948031   ;  3F: char *GetPaletteAdrByColorIndex(int ColorIndex)

0100: 0xA05AEC0F   ;  40: GetVibraStatus
0104: 0xA08C9EF7   ;  41: GetProvider
0108: 0xA0670B6F   ;  42: IsScreenSaver
010C: 0xA08D3C95   ;  43: int IsUnlocked(void)
0110: 0xA08CCB21   ;  44: TempLightOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: HasNewSMS
;11C:              ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA059932C   ;  4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA0ACB520   ;  4B: StartMidlet
0130: 0xA09B4E31   ;  4C: GetMissedCallsCount
0134: 0xA0092531   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA094EA69   ;  4E: MessageBox_OK
013C: 0xA094EA97   ;  4F: MessageBox_Error

0140: 0xA094EAF7   ;  50: MessageBox_Question_Yes_No
0144: 0xA0D384DF   ;  51: GetNetAccessMode
0148: 0xA8D87270   ;  52: GetIlluminationDataTable
014C: 0xA0FAF78D   ;  53: memcmp(void *m1,void *m2,int n)
0150: 0xA062A7BD   ;  54: StrToInt
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0FAFC48   ;  58: ClearMemory
0164: 0xA0FAFCA4   ;  59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA08D3553   ;  5A: KeypressOn
016C: 0xA08D3665   ;  5B: KeypressOff
0170: 0xA06236E8   ;  5C: unsigned char GetCPUClock()
0174: 0xA06EC933   ;  5D: unsigned char GetCPULoad()
;178:              ;  5E: GetMMIMemUsed
017C: 0xA0092F9B   ;  5F: int GetFreeRamAvail()

;180:              ;  60: ShowMainMenu
;184:              ;  61: ShowNativeMenu
;188:              ;  62: SetVibraStatus
;18C:              ;  63: MS_Wallpaper_Flush
;190:              ;  64: TriggerUpdate
;194:              ;  65: EndCall
;198:              ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
;1A0:              ;  68: GetScreenSaverRAM
01A4: 0xA00976FF   ;  69: LockSched(void)
01A8: 0xA009777B   ;  6A: UnlockSched(void)
01AC: 0xA0567F34   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0567FB4   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0567E7C   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0CD95ED   ;  6E: IsCalling
;1BC:              ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0604E0C   ;  70: int *GetGPRSTrafficPointer()
;1C4:              ;  71: DrawRoundRect
;1C8:              ;  72: SetCurrentSecondOfCall
;1CC:              ;  73: GetTypeOfCall
;1D0:              ;  74: GetFunctionPointer
01D4: 0xA094CA91   ;  75: StoreXYWHtoRECT
;1D8:              ;  76: SetWindowText
;1DC:              ;  77: set2color_byPaletteAdr
;1E0:              ;  78: GetTimeFormat
01E4: 0xA08D2DCB   ;  79: DrawObject
;1E8:              ;  7A: ClearWindowBuffer
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA04AD9CB   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0CD8FAF   ;  7D: IsIncognitoCall
01F8: 0xA0CD864D   ;  7E: Rand
01FC: 0xA069F7F8   ;  7F: IsPlayerOn

0200: 0xA0A82501   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FAFFF8   ;  81: HexToDec
0208: 0xA069FA9C   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0568228   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
;214:              ;  85: StrCmpNoCase
;218:              ;  86: ReadEEPROMData
;21C:              ;  87: WriteEEPROMData
;220:              ;  88: GetAccessoryType
0224: 0xA08D5F30   ;  89: GetLangMesIntoWS
0228: 0xA0567E0C   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA05686C0   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA0502AE0   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA05C2B05   ;  8D: GetProfileName
0238: 0xA05680C4   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0568148   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA05685DC   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0567FF4   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0B986C4   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0543CF0   ;  93: RebootPhone
0250: 0xA0502D7C   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA0502C54   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA01B56AF   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ;  99: 
;268:              ;  9A: 
;26C:              ;  9B: 
0270: 0xA067109D   ;  9C: CloseScreensaver
0274: 0xA066CA43   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA093EB4D   ;  A0: wsprintf(WSHDR *,const char *format,...)
;284:              ;  A1: wstrcpy
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA0568BA4   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA093F611   ;  A4: AllocWS(int len)
0294: 0xA04FAB85   ;  A5: FreeWS_2(WSHDR *wshdr)
;298:              ;  A6: void ResetGPRSTraffic()
029C: 0xA0D2C34F   ;  A7: char IsGPRSEnabled()
02A0: 0xA0CDA7AD   ;  A8: char IsGPRSConnected()
02A4: 0xA08D447B   ;  A9: void KbdLock()
02A8: 0xA0A1CEB1   ;  AA: char *GetCurrentLocale()
02AC: 0xA0002040   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
;2BC:              ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
;2CC:              ;  B3: Seconds2iTime
02D0: 0xA08CF3FB   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA0589BEB   ;  B5: char GetWeek(TDate *)
02D8: 0xA05ADA13   ;  B6: char GetProfile()
02DC: 0xA05ADA73   ;  B7: char SetProfile(char)
02E0: 0xA0FAFE18   ;  B8: int dwMODdw(int denom,int number)
02E4: 0xA08D3F5F   ;  B9: void KbdUnlock()
02E8: 0xA0092F5D   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FAFE00   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FAFEF0   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FAFFB4   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScanner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
;314:              ;  C5: PIT_Manager_Core
0318: 0xA01A6A50   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D8378C   ;  C8: unsigned short *RamCap()
0324: 0xA8D837B0   ;  C9: RamLS
0328: 0xA8EFA5F2   ;  CA: RAMNET *RamNet()
;32C:              ;  CB: RamRingtoneStatus
0330: 0xA8EB59E4   ;  CC: RamMissedCalls
;334:              ;  CD: RamMissedSMS
;338:              ;  CE: RamDateTime
;33C:              ;  CF: RamAlarm

0340: 0xA8E27140   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8E37598   ;  D4: RamMissedMes
0354: 0xA8DF3348   ;  D5: RamIsLocked
0358: 0xA8E6936C   ;  D6: RamNetOnline
035C: 0xA8E6A484   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
0368: 0xA8E6A520   ;  DA: RamIsShutdown
036C: 0xA8F59D84   ;  DB: RamNotOnMainscreen
;370:              ;  DC: RamRandSeed
0374: 0xAD2B3D58   ;  DD: RamCurrentTrack
0378: 0xA8E35E98   ;  DE: RamIsSimPresent
037C: 0xA8DF3320   ;  DF: RamPressedKey

0380: 0xA8DF32A4   ;  E0: RamScreenBuffer
0384: 0xA8F05078   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8D80010   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000268   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA05C1801   ;  F1: BuildCanvas
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: 
;3D4:              ;  F5: 
;3D8:              ;  F6: 
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: AddrLibrary()

0400: 0xA0091EAB   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA009130B   ; 101: int GBS_ReceiveMessage(GBS_MSG *)
0408: 0xA0091855   ; 102: void GBS_AcceptMessage(void)
040C: 0xA009153B   ; 103: void GBS_ClearMessage(void)
0410: 0xA00917B9   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092221   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E903AC   ; 106: CSMROOT *CSM_root()
041C: 0xA094695F   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA0946971   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA0946A3B   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA05BFC9D   ; 10F: void freeUSSD()

0440: 0xA058B001   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA05BFCD9   ; 111: char GetTypeUSSD()
0448: 0xA05BFCE9   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA122AF55   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA122AFD1   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA122B001   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA122B051   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA122B0CD   ; 117: char *strrchr(const char *s,int c)
0460: 0xA122B10D   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA122B135   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA122B1B1   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FAE9AD   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0FAF78D   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0FAFC00   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FAFCA4   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA04FB3CB   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA04FB3ED   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA04FB411   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA04FB445   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA04FAC53   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA093EB4D   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA093F611   ; 125: WSHDR *AllocWS(int len)
0498: 0xA04FB63D   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA04FB25B   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA04FB2D5   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA04FAB85   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA08D2DCB   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA0946B17   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA0946B1F   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA0946B27   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA0948031   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA0948055   ; 12F: void GetRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0948065   ; 130: void GetRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0948083   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FAFD5C   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA094CA91   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA094CAA7   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA094F3FF   ; 135: int IsGuiOnTop(int id)
04D8: 0xA094F51F   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA094F52F   ; 137: int CreateGUI(void *gui)
04E0: 0xA094F53D   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA094F577   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA094F587   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA094F597   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA094F5A5   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA094F5B3   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA094F5C3   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA094F657   ; 13F: void DirectRedrawGUI(void)

0500: 0xA094F66F   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA094F663   ; 141: void PendedRedrawGUI(void)
0508: 0xA0A0A3B3   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA009258B   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0097B1B   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA009618B   ; 145: int GBS_GetCurCepid(void)
0518: 0xA00976FF   ; 146: void LockSched(void)
051C: 0xA009777B   ; 147: void UnlockSched(void)
0520: 0xA094EA5B   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA094A35D   ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA094857D   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA09484E7   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA094A3AB   ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,char *Pen,char *Brush)
0534: 0xA094F40D   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A227ED   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A22839   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A0C2C7   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,char *pen,char *brush)
0544: 0xA0A0C81B   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA094E5BF   ; 152: int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0091259   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0096141   ; 154: void KillGBSproc(int cepid)
0554: 0xA0132BF9   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0131FB5   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0133A6D   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0131E89   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0132D37   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0132611   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA01329B7   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0133627   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0133669   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA01322AD   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0132527   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA01331BF   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E3BA0   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA122B3E4   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A168BF   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A15CFD   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A1600D   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A16A5B   ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A13671   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0A1C96F   ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A1C905   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A1C911   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA05682A0   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0568AB0   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA0625D70   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA011B42C   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA05CD18C   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0926D8D   ; 170: int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A593F5   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A598ED   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A596F1   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A59C21   ; 176: int closesocket(int socket)
05DC: 0xA0A59B29   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A59D13   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A5A181   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A60E01   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A60E0D   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EF1EE0   ; 17C: int *socklasterr(void)
05F4: 0xA094F5D3   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA094F5E3   ; 17E: void RestartIDLETMR(void)
05FC: 0xA094F5EF   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A1C809   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A1C761   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A1C7A9   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A1C1F9   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A16047   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0091C33   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA096A0E5   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA096B1F5   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x000000F0   ; 188: int ScreenW(void)
0624: 0x00000140   ; 189: int ScreenH(void)
0628: 0x00000020   ; 18A: int HeaderH(void)
062C: 0x00000020   ; 18B: int SoftkeyH(void)
0630: 0xA0097A53   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09FF3C4   ; 18D: int available0(int sock)
0638: 0xA0D2C2E9   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0952DBB   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA00970F9   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA0097195   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009738F   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA00973BD   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA0097459   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA0954525   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA094F6E5   ; 196: void RefreshGUI(void)
065C: 0xA0954585   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA095469D   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA09544F7   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0953E97   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A1C1ED   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA04D1FFC   ; 19D: long getCpuUsedTime_if_ena(void)
0678: 0xA04D1F80   ; 19E: void StartCpuUsageCount(void)
067C: 0xA012E85D   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA012E993   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA012F7CF   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA00978A5   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA092BE95   ; 1A7: char *Get_CC_NC()
06A0: 0xA0132ABD   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA0133B0F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0133187   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0133C29   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0132515   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0133C29   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0135735   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0133C0D   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA01356CB   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA0133C61   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0131EE9   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A0E1EF   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA0A0C193   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
;6D4:              ; 1B5: 
06D8: 0xA0A5ABF5   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0973E75   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F2F257   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F2EF3B   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F2F137   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E75C75   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E75D03   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E75ECF   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E72467   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA0950D31   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA0950C99   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A32378   ; 1C5: int GetFontYSIZE(int font)
;718:              ; 1C6: 
;71C:              ; 1C7: 
;720:              ; 1C8: 
;724:              ; 1C9: 
;728:              ; 1CA: 
;72C:              ; 1CB: 
;730:              ; 1CC: 
;734:              ; 1CD: 
;738:              ; 1CE: 
;73C:              ; 1CF: 

;740:              ; 1D0: 
;744:              ; 1D1: 
;748:              ; 1D2: 
;74C:              ; 1D3: 
;750:              ; 1D4: 
;754:              ; 1D5: 
;758:              ; 1D6: 
;75C:              ; 1D7: 
;760:              ; 1D8: 
;764:              ; 1D9: 
;768:              ; 1DA: 
;76C:              ; 1DB: 
;770:              ; 1DC: 
;774:              ; 1DD: 
;778:              ; 1DE: 
;77C:              ; 1DF: 

;780:              ; 1E0: 
;784:              ; 1E1: 
;788:              ; 1E2: 
;78C:              ; 1E3: 
;790:              ; 1E4: 
;794:              ; 1E5: 
;798:              ; 1E6: 
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
;7AC:              ; 1EB: 
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: 
;7BC:              ; 1EF: 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
;7C8:              ; 1F2: 
;7CC:              ; 1F3: 
;7D0:              ; 1F4: 
;7D4:              ; 1F5: 
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
07E4: 0xA006F401   ; 1F9: SendMP_cmd(cmd,substract);
;7E8:              ; 1FA: 
;7EC:              ; 1FB: 
;7F0:              ; 1FC: 
;7F4:              ; 1FD: 
;7F8:              ; 1FE: 
;7FC:              ; 1FF: 

0800: 0xA0067301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0

;********************************************************************************


;locale=russian
{\rtf1\ansi\deff0{\fonttbl{\f0\fmodern Courier New;}{\f1\fmodern\fcharset204{\*\fname Courier New;}Courier New CYR;}}
{\colortbl ;\red0\green0\blue0;}
\viewkind4\uc1\pard\f0\fs16 ;E71sw45\par
;\f1\'c1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'e0 \'f4\'f3\'ed\'ea\'f6\'e8\'e9\par
;Functions Library\par
;(c) avkiev\par
;(p) Miha_r, Grizzzzly\par
;version 31.0\par
;http://inck.e71.ru/library.html\par
\par
;10.06.2010 22:00:22 (GSM+4)\par
\par
\par
+0074000\par
#pragma enable old_equal_ff\par
0000: 0xA009B810 ; 000: __arm void loopback0();\par
0004: 0xA009B810 ; 001: __arm void loopback1();\par
0008: 0xA009B810 ; 002: __arm void loopback2();\par
000C: 0xA009B810 ; 003: __arm void loopback3();\par
0010: 0xA009B810 ; 004: __arm void loopback4();\par
0014: 0xA058AC29 ; 005: DecToHex\par
0018: 0xA01A7790 ; 006: __arm int GetAkku(int param1,int param2);\par
001C: 0xA006F061 ; 007: GetLP\par
0020: 0xA04B7254 ; 008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);\par
0024: 0xA0543CE4 ; 009: __arm void SwitchPhoneOff();\par
0028: 0xA0568464 ; 00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);\par
002C: 0xA0568524 ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);\par
0030: 0xA0568654 ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);\par
0034: 0xA05683B8 ; 00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber);\par
0038: 0xA05683E8 ; 00E: fflush\par
003C: 0xA0568418 ; 00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);\par
\par
0040: 0xA056805C ; 010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);\par
0044: 0xA006F001 ; 011: OpenReadCloseFile\par
0048: 0xA0567EBC ; 012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);\par
004C: 0xA05681B0 ; 013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);\par
0050: 0xA0092F51 ; 014: __arm void *malloc(unsigned int size);\par
0054: 0xA0092F93 ; 015: __arm void mfree(void *);\par
0058: 0xA0FAEA01 ; 016: __thumb int sprintf(char *buf, char *str, ...);\par
005C: 0xA122AE25 ; 017: __thumb char * strcat (char *,const char *);\par
0060: 0xA122AE45 ; 018: __thumb char * strchr (const char *,int);\par
0064: 0xA122AE68 ; 019: __arm int  strcmp (const char *,const char *);\par
0068: 0xA122AF05 ; 01A: __thumb char * strcpy (char *dest,const char *source);\par
006C: 0xA122AF85 ; 01B: __thumb unsigned int strlen(char *);\par
0070: 0xA04FB4D9 ; 01C: __thumb void  wsAppendChar (void *WSHDR,int wchar);\par
0074: 0xA04FB48D ; 01D: __thumb int wsInsertChar(WSHDR *ws,int wchar, int pos);\par
0078: 0xA094CE9B ; 01E: __thumb IMGHDR *GetPITaddr(int num);\par
007C: 0xA05C34E5 ; 01F: DrawMainScreen\par
\par
0080: 0xA0670B83 ; 020: DrawScreenSaver\par
0084: 0xA094CFC3 ; 021: __thumb int GetImgHeight(int picture);\par
0088: 0xA094CFD3 ; 022: __thumb int GetImgWidth(int picture);\par
008C: 0xA05C17C5 ; 023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture);\par
0090: 0xA0A0C91B ; 024: DrawImage2\par
0094: 0xA05C0B9F ; 025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);\par
0098: 0xA0A0C845 ; 026: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush);\par
009C: 0xA05C0DDD ; 027: __thumb void AddIconToIconBar(void *data, unsigned int picture, unsigned short *pos);\par
00A0: 0xA129A67C ; 028: double fp_sint2fp(signed int i);\par
;00A4: 0x ; 029: getEEFullMaxID\par
00A8: 0xA04E7B8C ; 02A: __arm int *GetEELiteBlockAddress(short blocknum);\par
00AC: 0xA129A51C ; 02B: signed int fp_fp2sint(double f);\par
00B0: 0xA04E7228 ; 02C: __arm int EEFullGetBlockInfo(unsigned int block,int *size,char *version);\par
00B4: 0xA12998DC ; 02D: double fp_add(double addend1, double addend2);\par
00B8: 0xA129A83C ; 02E: double fp_mul(double factor1, double factor2);\par
00BC: 0xA1299EF0 ; 02F: double fp_div(double divisor, double divident);\par
\par
;00C0: 0x ; 030: WriteEELiteBlock\par
00C4: 0xA122B0CD ; 031: char *strrchr(const char *s,int c);\par
00C8: 0xA05A2C64 ; 032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);\par
00CC: 0xA0595668 ; 033: PlaySound2\par
00D0: 0xA0B6C7B0 ; 034: PlaySoundLoop\par
;00D4: 0x ; 035: AlarmClockRing\par
00D8: 0xA05AE173 ; 036: void SLI_SetState(unsigned char state);\par
00DC: 0xA059A934 ; 037: void Ringtones_SetState(unsigned char state);\par
00E0: 0xA06B1E4C ; 038: int Registry_GetHMIKeyID(char *Keyword);\par
00E4: 0xA06B18C0 ; 039: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path);\par
00E8: 0xA06AEAB8 ; 03A: Registry_DeleteResourcePath(int HMIKeyID, int Prio);\par
00EC: 0xA0FAF769 ; 03B: MemChr\par
00F0: 0xA0568564 ; 03C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber);\par
;0F4: 0x ; 03D: editOrNewTXTModule\par
00F8: 0xA06B0F60 ; 03E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path);\par
00FC: 0xA0948031 ; 03F: char *GetPaletteAdrByColorIndex(int ColorIndex);\par
\par
0100: 0xA05AEC0F ; 040: GetVibraStatus\par
0104: 0xA08C9EF7 ; 041: GetProvider\par
0108: 0xA0670B6F ; 042: IsScreenSaver\par
010C: 0xA08D3C95 ; 043: __arm int IsUnlocked(void);\par
0110: 0xA08CCB21 ; 044: TempLightOn\par
0114: 0xA006F241 ; 045: GetWavLen\par
;0118: 0x ; 046: HasNewSMS\par
011C: 0xA05C02BF ; 047: __thumb int HasFlashSMS();\par
;0120: 0x ; 048: ReadNewSMS\par
0124: 0xA066C8E1 ; 049: __thumb int ReadFlashSMS(void);\par
0128: 0xA059932C ; 04A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167);\par
012C: 0xA0ACB520 ; 04B: StartMidlet\par
0130: 0xA09B4E31 ; 04C: __thumb GetMissedCallsCount;\par
0134: 0xA0092531 ; 04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());\par
0138: 0xA094EA89 ; 04E: __thumb int MsgBoxError(int flag, int LgpId);\par
013C: 0xA094EAF7 ; 04F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));\par
\par
0140: 0xA094EB01 ; 050: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));\par
0144: 0xA0D384DF ; 051: GetNetAccessMode\par
0148: 0xA8D87270 ; 052: GetIlluminationDataTable\par
014C: 0xA0FAF78D ; 053: memcmp(void *m1,void *m2,int n);\par
0150: 0xA062A7BD ; 054: StrToInt\par
;0154: 0x ; 055: SwitchVibraOnOff\par
0158: 0xA006F131 ; 056: void PlayVibra (char VibraPower, unsigned int VibraDuration, char VibraIfOff)\par
015C: 0xA00978A5 ; 057: int IsTimerProc(GBSTMR *)\par
0160: 0xA0FAFC48 ; 058: ClearMemory\par
0164: 0xA0FAFCA4 ; 059: memcpy(void *dest,const void *source,int cnt);\par
0168: 0xA08D3553 ; 05A: KeypressOn\par
016C: 0xA08D3665 ; 05B: KeypressOff\par
0170: 0xA06236E8 ; 05C: __arm unsigned char GetCPUClock();\par
0174: 0xA06EC933 ; 05D: __thumb unsigned char GetCPULoad();\par
0178: 0xA06EC901 ; 05E: GetMMIMemUsed\par
017C: 0xA0092F9B ; 05F: __arm int GetFreeRamAvail();\par
\par
0180: 0xA06E83A5 ; 060: ShowMainMenu\par
0184: 0xA063B07B ; 061: ShowNativeMenu\par
0188: 0xA05AEBD5 ; 062: SetVibraStatus\par
018C: 0xA05C4441 ; 063: MMI_CanvasBuffer_FlushV(int CanvasID);\par
0190: 0xA094F594 ; 064: TriggerUpdate\par
;0194: 0x ; 065: EndCall\par
0198: 0xA09B648B ; 066: EndCallBusy\par
019C: 0xA0668D19 ; 067: IsDirectCallActive\par
01A0: 0xA0670B49 ; 068: GetScreenSaverRAM\par
01A4: 0xA00976FF ; 069: LockSched(void);\par
01A8: 0xA009777B ; 06A: UnlockSched(void);\par
01AC: 0xA0567F34 ; 06B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);\par
01B0: 0xA0567FB4 ; 06C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);\par
01B4: 0xA0567E7C ; 06D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);\par
01B8: 0xA0CD95ED ; 06E: __thumb int IsCalling(void);\par
01BC: 0xA0923291 ; 06F: __arm void RefreshGPRSTraffic();\par
\par
01C0: 0xA09232A5 ; 070: __arm int *GetGPRSTrafficPointer();\par
01C4: 0xA0A0C2C7 ; 071: DrawRoundRect\par
;01C8: 0x ; 072: SetCurrentSecondOfCall\par
01CC: 0xA0CD9DEF ; 073: GetTypeOfCall\par
01D0: 0xA0635875 ; 074: __thumb void* GetFunctionPointer(char * _shortcut);\par
01D4: 0xA05C4965 ; 075: IsCanvasBufferSet(char CanvasID);\par
01D8: 0xA05C4915 ; 076: GetCanvasBufferPicPtr(char CanvasID);\par
;01DC: 0x ; 077: set2color_byPaletteAdr\par
;01E0: 0x ; 078: GetTimeFormat\par
01E4: 0xA08D2D63 ; 079: DrawObject2Layer(LCD_Layer *, DRWOBJ *);\par
01E8: 0xA094CA19 ; 07A: UpdateDisplayByLayerPtr(LCD_Layer *);\par
;01EC: 0x ; 07B: GetProfileFilter\par
01F0: 0xA04AD9CB ; 07C: __arm unsigned int SetVibration(unsigned int power);\par
01F4: 0xA0CD8FAF ; 07D: IsIncognitoCall\par
01F8: 0xA0CD864D ; 07E: Rand\par
01FC: 0xA069F7F8 ; 07F: IsPlayerOn\par
\par
0200: 0xA0A82501 ; 080: __thumb void int ShowCallList(int list, int zero);\par
0204: 0xA0FAFFF8 ; 081: HexToDec\par
0208: 0xA069FA9C ; 082: GetCurrentTrackFilename\par
;020C: 0x ; 083: GetPathOfFoundFile\par
0210: 0xA0568228 ; 084: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber);\par
0214: 0xA058AF51 ; 085: StrCmpNoCase\par
0218: 0xA04E7048 ; 086: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg);\par
021C: 0xA04E72D8 ; 087: __arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg); \par
0220: 0xA006EF00 ; 088: __arm char GetAccessoryType(void);\par
0224: 0xA08D5F30 ; 089: GetLangMesIntoWS\par
0228: 0xA0567E0C ; 08A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);\par
022C: 0xA05686C0 ; 08B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);\par
0230: 0xA0502AE0 ; 08C: __thumb void RegExplorerExt(REGEXPLEXT *);\par
0234: 0xA05C2B05 ; 08D: GetProfileName\par
0238: 0xA05680C4 ; 08E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber);\par
023C: 0xA0568148 ; 08F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber);\par
\par
0240: 0xA05685DC ; 090: __arm int truncate (int FileHandler, int length, int *errornumber);\par
0244: 0xA0567FF4 ; 091: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber);\par
0248: 0xA0B986C4 ; 092: __arm int * calloc(size_t nelem, size_t elsize);\par
024C: 0xA0543CF0 ; 093: RebootPhone\par
0250: 0xA0502D7C ; 094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);\par
0254: 0xA0502C54 ; 095: __arm int UnRegExplorerExt(REGEXPLEXT const *);\par
0258: 0xA01B56AF ; 096: GetWavLenByContent\par
025C: 0xA006F261 ; 097: CreatePath\par
0260: 0xA006F211 ; 098: __thumb void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff);\par
0264: 0xA059959C ; 099: __arm short PlayMelodyInMem(char flags,void *MelAddr,int MelSize,int CepId,int msg,PLAYFILE_OPT *PlayFileStruct);\par
;0268: 0x ; 09A: __arm int ChangeVolume(unsigned char Volume);\par
;026C: 0x ; 09B: Audio params addr\par
0270: 0xA067109D ; 09C: CloseScreensaver\par
0274: 0xA066CA43 ; 09D: GetMissedEventsPtr\par
0278: 0xA006F2B1 ; 09E: int GetMissedEventCount(unsigned int Event);\par
;027C: 0x ; 09F: DrawRect\par
\par
0280: 0xA093EB4D ; 0A0: wsprintf(WSHDR *,const char *format,...);\par
0284: 0xA04FB3CB ; 0A1: wstrcpy\par
0288: 0xA04FADB1 ; 0A2: Unicode_GetCharByPosition\par
028C: 0xA0568BA4 ; 0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size);\par
0290: 0xA093F611 ; 0A4: AllocWS(int len);\par
0294: 0xA04FAB85 ; 0A5: FreeWS_2(WSHDR *wshdr);\par
;0298: 0x ; 0A6: void ResetGPRSTraffic()\par
029C: 0xA0D2C34F ; 0A7: __thumb char IsGPRSEnabled();\par
02A0: 0xA0CDA7AD ; 0A8: char IsGPRSConnected();\par
02A4: 0xA08D447B ; 0A9: __thumb void KbdLock();\par
02A8: 0xA0A1CEB1 ; 0AA: char *GetCurrentLocale();\par
02AC: 0xA009B810 ; 0AB: __arm void loopback171();\par
;02B0: 0x ; 0AC: DrawText\par
;02B4: 0x ; 0AD: StrAnsi2Uni\par
;02B8: 0x ; 0AE: StrUni2Ansi\par
02BC: 0xA06EC6FD ; 0AF: Hex2Int\par
\par
;02C0: 0x ; 0B0: DrawPicWithCanvas\par
02C4: 0xA006F101 ; 0B1: DrawColorPicWithCanvas\par
;02C8: 0x ; 0B2: GetBuildCanvas\par
02CC: 0xA006F551 ; 0B3: long Seconds2iTime(int timeval);\par
02D0: 0xA08CF3FB ; 0B4: __thumb void GetDateTime(TDate *, TTime *);\par
02D4: 0xA0589BEB ; 0B5: __thumb char GetWeek(TDate*);\par
02D8: 0xA05ADA13 ; 0B6: __thumb char GetProfile();\par
02DC: 0xA05ADA73 ; 0B7: __thumb char SetProfile(char);\par
02E0: 0xA0FAFE18 ; 0B8: __arm int dwMODdw(int denom,int number);\par
02E4: 0xA08D3F5F ; 0B9: __thumb void KbdUnlock();\par
02E8: 0xA0092F5D ; 0BA: __arm void *realloc(void *ptr, int size);\par
02EC: 0xA0FAFE00 ; 0BB: __arm void *memset(void *s, int c, int n);\par
02F0: 0xA0FAFEF0 ; 0BC: __arm int divide(int divisor, int dividend);\par
02F4: 0xA0FAFFB4 ; 0BD: __arm  int DivBy10(int divident);\par
02F8: 0xA0060C91 ; 0BE: RunScanner\par
02FC: 0xA0063001 ; 0BF: SpellTime\par
\par
;0300: 0x ; 0C0: MiniGPS\par
0304: 0xA0060C51 ; 0C1: RunDispatcher\par
;0308: 0x ; 0C2: GetAllPatchesByInject\par
030C: 0xA006F091 ; 0C3: ProcessFiles\par
0310: 0xA0060C01 ; 0C4: GetBuffer\par
0314: 0xA066C9EB ; 0C5: IsIdleUiOnTop\par
0318: 0xA01A6A50 ; 0C6: __arm char GetAkkuCapacity();\par
031C: 0xA06236B0 ; 0C7: SetCpuClockTempHi(2)\par
0320: 0xA8D8378C ;80C8: __arm unsigned short *RamCap();\par
0324: 0xA8D837BE ; 0C9: RamLS\par
0328: 0xA8EFA5F2 ;80CA: __arm RAMNET * RamNet();\par
032C: 0xA8E36D14 ; 0CB: RamRingtoneStatus\par
0330: 0xA8EB59E4 ; 0CC: RamMissedCalls\par
;0334: 0x ; 0CD: RamMissedSMS\par
0338: 0xA8D97460 ; 0CE: RamDateTime\par
033C: 0xA8F5B964 ; 0CF: RamAlarm\par
\par
0340: 0xA8E27140 ; 0D0: RamAccPoint\par
0344: 0xA8EAADD8 ; 0D1: RamScreensaver\par
0348: 0xA8D97488 ; 0D2: RamAutoTime\par
034C: 0xA8A80000 ; 0D3: RamStby\par
0350: 0xA8E37598 ; 0D4: RamMissedMes\par
0354: 0xA8DF3348 ; 0D5: RamIsLocked\par
0358: 0xA8E6936C ; 0D6: RamNetOnline\par
035C: 0xA8E6A484 ; 0D7: RamScreenBrightness\par
0360: 0xA8DA7D39 ; 0D8: RamMenuAnywhere\par
;0364: 0x ; 0D9: RamShutdownMode\par
0368: 0xA8E6A520 ; 80DA: RamIsShutdown\par
036C: 0xA8F59D84 ; 0DB: RamNotOnMainscreen\par
;0370: 0x ; 0DC: RamRandSeed\par
0374: 0xAD2B3D58 ; 0DD: RamCurrentTrack\par
0378: 0xA8E35E98 ; 0DE: RamIsSimPresent\par
037C: 0xA8DF3320 ; 0DF: RamPressedKey\par
\par
0380: 0xA8DA81F0 ; 80E0: __arm void * RamScreenBuffer();\par
0384: 0xA8F05078 ; 0E1: unsigned int RamMPlayer_CtrlCode();\par
;0388: 0x ; 0E2: RamKeyBuffer\par
;038C: 0x ; 0E3: RamProfileNum\par
0390: 0xA8D80010 ; 0E4: FreeRAM\par
0394: 0x0000123D ; 0E5: LP_MonthsShort\par
0398: 0x00000268 ; 0E6: Pic_Big0\par
039C: 0x00000830 ; 0E7: Pic_Little0\par
03A0: 0x00000800 ; 0E8: Pic_Extra\par
03A4: 0x00000810 ; 0E9: Pic_Profiles\par
03A8: 0x00000818 ; 0EA: Pic_Vibra\par
;03AC: 0x ; 0EB: Pic_Call\par
03B0: 0x00000800 ; 0EC: Pic_AdvNet\par
03B4: 0x00001137 ; 0ED: LP_MonthsLong\par
03B8: 0x000003EB ; 0EE: LP_Weekdays\par
03BC: 0x000005B0 ; 0EF: Pic_Calendar\par
\par
03C0: 0x00001200 ; 0F0: Pic_AccuGraph\par
03C4: 0xA05C1801 ; 0F1: __arm void *BuildCanvas(void);\par
;03C8: 0x ; 0F2: lpRAM_PIT\par
;03CC: 0x ; 0F3: RAM_PIT_Cap\par
;03D0: 0x ; 0F4:\par
03D4: 0xA8DF32B8 ; 0F5: Ram_LCD_Overlay_Layer\par
03D8: 0xA8E6AACC ; 0F6: Ram_Layer_Base_Ptr\par
;03DC: 0x ; 0F7:\par
;03E0: 0x ; 0F8: Additional_PIT_address\par
;03E4: 0x ; 0F9: Additional_PIT_start\par
;03E8: 0x ; 0FA: Additional_PIT_end\par
;03EC: 0x ; 0FB:\par
;03F0: 0x ; 0FC: PictureRelocationTable\par
;03F4: 0x ; 0FD: PictureRelocationBase\par
;03F8: 0x ; 0FE: NextPictureMagic\par
03FC: 0xA0074000 ; 0FF: unsigned int AddrLibrary();\par
\par
0400: 0xA0091EAB ; 100: void GBS_SendMessage(int cepid_to, int msg, ...);\par
0404: 0xA009130B ; 101: int GBS_ReceiveMessage(GBS_MSG *);\par
0408: 0xA0091855 ; 102: void GBS_AcceptMessage(void);\par
040C: 0xA009153B ; 103: void GBS_ClearMessage(void);\par
0410: 0xA00917B9 ; 104: void GBS_PendMessage(GBS_MSG *);\par
0414: 0xA0092221 ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero);\par
0418: 0xA8E903AC ; 106: CSMROOT *CSM_root();\par
041C: 0xA094695F ; 107: __thumb int CreateCSM(const CSM_DESC *,void *,int);\par
0420: 0xA0946971 ; 108: CSM_RAM *FindCSMbyID(int id);\par
0424: 0xA0946A3B ; 109: __thumb void DoIDLE(void);\par
;0428: 0x ; 10A: void *GetConfig(unsigned int id);\par
;042C: 0x ; 10B: void *GetMinAdrScan();\par
;0430: 0x ; 10C: void *GetMaxAdrScan();\par
;0434: 0x ; 10D: unsigned short *GetCI();\par
;0438: 0x ; 10E: void Vibration(unsigned int power, unsigned int duration);\par
043C: 0xA05BFC9D ; 10F: __thumb void freeUSSD();\par
\par
0440: 0xA058B001 ; 110: __thumb char *wstrcopy(char *dst, char *src);\par
0444: 0xA05BFCD9 ; 111: __thumb char GetTypeUSSD();\par
0448: 0xA05BFCE9 ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *);\par
044C: 0xA122AF55 ; 113: __thumb char * strpbrk (const char *s1,const char *s2);\par
0450: 0xA122AFD1 ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);\par
0454: 0xA122B001 ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n);\par
0458: 0xA122B051 ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen);\par
045C: 0xA122B0CD ; 117: __thumb char * strrchr (const char *s,int c);\par
0460: 0xA122B10D ; 118: __thumb char * strstr (const char *s1,const char *s2);\par
0464: 0xA122B135 ; 119: __thumb int  strtol (const char *nptr,char **endptr,int base);\par
0468: 0xA122B1B1 ; 11A: __thumb int  strtoul (const char *nptr,char **endptr,int base);\par
046C: 0xA0FAE9AD ; 11B: __thumb int snprintf (char *,int n,const char *format,...);\par
0470: 0xA0FAF78D ; 11C: __thumb int  memcmp (void *m1,void *m2,int n);\par
0474: 0xA0FAFC00 ; 11D: __arm void  zeromem (void *dest,int n);\par
0478: 0xA0FAFCA4 ; 11E: __arm void * memcpy (void *dest,const void *source,int cnt);\par
047C: 0xA04FB3CB ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);\par
\par
0480: 0xA04FB3ED ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);\par
0484: 0xA04FB411 ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);\par
0488: 0xA04FB445 ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);\par
048C: 0xA04FAC53 ; 123: __thumb int  wstrlen (WSHDR *wshdr);\par
0490: 0xA093EB4D ; 124: __thumb int wsprintf (WSHDR *,const char *format,...);\par
0494: 0xA093F611 ; 125: __thumb WSHDR * AllocWS (int len);\par
0498: 0xA04FB63D ; 126: __thumb void  CutWSTR (void *WSHDR,int len);\par
049C: 0xA04FB25B ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);\par
04A0: 0xA04FB2D5 ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len);\par
04A4: 0xA04FAB85 ; 129: __thumb void  FreeWS (WSHDR *wshdr);\par
04A8: 0xA08D2DCB ; 12A: __thumb void  DrawObject (DRWOBJ *);\par
04AC: 0xA0946B17 ; 12B: __thumb void  AddKeybMsgHook (void *proc);\par
04B0: 0xA0946B1F ; 12C: __thumb int  AddKeybMsgHook_end (void *proc);\par
04B4: 0xA0946B27 ; 12D: __unknown void  RemoveKeybMsgHook (void *proc);\par
04B8: 0xA0948031 ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex);\par
04BC: 0xA0948055 ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest);\par
\par
04C0: 0xA0948065 ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest);\par
04C4: 0xA0948083 ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest);\par
04C8: 0xA0FAFD5C ; 132: __arm void *memmove(void *dest,const void *source,int cnt);\par
04CC: 0xA094CA91 ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);\par
04D0: 0xA094CAA7 ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);\par
04D4: 0xA094F3FF ; 135: __thumb int  IsGuiOnTop (int id);\par
04D8: 0xA094F51F ; 136: __thumb int  CreateGUI_ID (void *gui,int id);\par
04DC: 0xA094F52F ; 137: __thumb int  CreateGUI (void *gui);\par
04E0: 0xA094F53D ; 138: __thumb int  CreateGUI_30or2 (void *gui);\par
04E4: 0xA094F577 ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag);\par
04E8: 0xA094F587 ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag);\par
04EC: 0xA094F597 ; 13B: __thumb void  GeneralFuncF1 (int cmd);\par
04F0: 0xA094F5A5 ; 13C: __thumb void  GeneralFuncF0 (int cmd);\par
04F4: 0xA094F5B3 ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd);\par
04F8: 0xA094F5C3 ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd);\par
04FC: 0xA094F657 ; 13F: __thumb void DirectRedrawGUI (void);\par
\par
0500: 0xA094F66F ; 140: __thumb void  DirectRedrawGUI_ID (int id);\par
0504: 0xA094F663 ; 141: __thumb void PendedRedrawGUI (void);\par
0508: 0xA0A0A3B3 ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);\par
050C: 0xA009258B ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);\par
0510: 0xA0097B1B ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr);\par
0514: 0xA009618B ; 145: __arm int GBS_GetCurCepid (void);\par
0518: 0xA00976FF ; 146: __arm void LockSched(void);\par
051C: 0xA009777B ; 147: __arm void UnlockSched(void);\par
0520: 0xA094EA79 ; 148: __thumb int ShowMSG(int flag, int lgp_id);\par
0524: 0xA094A35D ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);\par
0528: 0xA094857D ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);\par
052C: 0xA09484E7 ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2);\par
0530: 0xA094A3AB ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);\par
0534: 0xA094F40D ; 14D: __thumb GUI *GetTopGUI(void);\par
0538: 0xA0A227ED ; 14E: __thumb void *FindItemByID(GUI *gui,int id);\par
053C: 0xA0A22839 ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);\par
\par
0540: 0xA0A0C2C7 ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);\par
0544: 0xA0A0C81B ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);\par
0548: 0xA094E5BF ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);\par
054C: 0xA0091259 ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *);\par
0550: 0xA0096141 ; 154: __arm void KillGBSproc(int cepid);\par
0554: 0xA0132BF9 ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);\par
0558: 0xA0131FB5 ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr);\par
055C: 0xA0133A6D ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);\par
0560: 0xA0131E89 ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes);\par
0564: 0xA0132D37 ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr);\par
0568: 0xA0132611 ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);\par
056C: 0xA01329B7 ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);\par
0570: 0xA0133627 ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image);\par
0574: 0xA0133669 ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr);\par
0578: 0xA01322AD ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);\par
057C: 0xA0132527 ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);\par
\par
0580: 0xA01331BF ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);\par
0584: 0xA00E3BA0 ; 161: __thumb png_init_io(png_structp png_ptr, int fp);\par
0588: 0xA122B3E4 ; 162: __arm setjmp(jmp_buf jmpbuf);\par
058C: 0xA0A168BF ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);\par
0590: 0xA0A15CFD ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);\par
0594: 0xA0A1600D ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);\par
0598: 0xA0A16A5B ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);\par
059C: 0xA0A13671 ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);\par
05A0: 0xA0A1C96F ; 168: __thumb void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n);\par
05A4: 0xA0A1C905 ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);\par
05A8: 0xA0A1C911 ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);\par
05AC: 0xA05682A0 ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)05B0:\par
05B0: 0xA0568AB0 ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);\par
05B4: 0xA0981559 ; 16D: __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);\par
05B8: 0xA08EBBB7 ; 16E: __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);\par
05BC: 0xA08EC505 ; 16F: __arm int GetTypeOfAB_UNPRES_ITEM(int);\par
\par
05C0: 0xA0926D8D ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);\par
;05C4: 0x ;171 __arm void SUBPROC(void *,...);\par
;05\'d18: 0x ;172 __arm void REDRAW(void);\par
05CC: 0xA0A593F5 ; 173: __thumb int socket(int af,int type,int protocol);\par
05D0: 0xA0A598ED ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);\par
05D4: 0xA0A596F1 ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);\par
05D8: 0xA0A59C21 ; 176: __thumb int closesocket(int socket);\par
05DC: 0xA0A59B29 ; 177: __thumb int shutdown(int socket,int how);\par
05E0: 0xA0A59D13 ; 178: __thumb int recv(int socket,void *buf,int len,int flag);\par
05E4: 0xA0A5A181 ; 179: __thumb int send(int socket,const void *buf,int len,int flag);\par
05E8: 0xA0A60E01 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);\par
05EC: 0xA0A60E0D ; 17B: __thumb unsigned int htonl(unsigned int);\par
05F0: 0xA8EF1EE0 ; 817C: __arm int socklasterr(void);\par
05F4: 0xA094F5D3 ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);\par
05F8: 0xA094F5E3 ; 17E: __thumb void RestartIDLETMR(void);\par
05FC: 0xA094F5EF ; 17F: __thumb void DisableIDLETMR(void);\par
\par
0600: 0xA0A1C809 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);\par
0604: 0xA0A1C761 ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);\par
0608: 0xA0A1C7A9 ; 182: __thumb int EDIT_GetFocus(void *gui);\par
060C: 0xA0A1C1F9 ; 183: __thumb int EDIT_GetUnFocus(void *gui);\par
0610: 0xA0A16047 ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);\par
0614: 0xA0091C33 ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);\par
0618: 0xA096A0E5 ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);\par
061C: 0xA096B1F5 ; 187: __thumb int RequestLMANConnect(LMAN_DATA *);\par
0620: 0x\cf1 000000F0\cf0  ; 188: __adr int ScreenW(void);\par
0624: 0x00000140 ; 189: __adr int ScreenH(void);\par
0628: 0x00000020 ; 18A: __adr int HeaderH(void);\par
062C: 0x00000020 ; 18B: __adr int SoftkeyH(void);\par
0630: 0xA0097A53 ; 18C: __arm void GBS_DelTimer(GBSTMR *);\par
0634: 0xA09FF3C4 ; 18D: __arm int available0(int sock);\par
0638: 0xA0D2C2E9 ; 18E: __thumb void GPRS_OnOff(int on, int _1);\par
063C: 0xA0952DBB ; 18F: __thumb int GetCurMenuItem(void *gui);\par
\par
0640: 0xA00970F9 ; 190: __arm void MutexCreate(MUTEX *mtx);\par
0644: 0xA0097195 ; 191: __arm void MutexDestroy(MUTEX *mtx);\par
0648: 0xA009738F ; 192: __arm void MutexLock(MUTEX *mtx);\par
064C: 0xA00973BD ; 193: __arm void MutexUnlock(MUTEX *mtx);\par
0650: 0xA0097459 ; 194: __arm void MutexUnlock(MUTEX *mtx);\par
0654: 0xA0954525 ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);\par
0658: 0xA094F6E5 ; 196: __thumb void RefreshGUI(void);\par
065C: 0xA0954585 ; 197: __thumb void *AllocMenuItem(void *gui);\par
0660: 0xA095469D ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len);\par
0664: 0xA09544F7 ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);\par
0668: 0xA0953E97 ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);\par
066C: 0xA0A1C1ED ; 19B: __thumb void EDIT_SetFocus(void *gui, int item);\par
;0670: 0x ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);\par
0674: 0xA04D1FFC ; 19D: __arm long long getCpuUsedTime_if_ena(void);\par
0678: 0xA04D1F80 ; 19E: __arm void StartCpuUsageCount(void);\par
067C: 0xA012E85D ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);\par
\par
0680: 0xA012E993 ; 1A0: __thumb int inflate(z_streamp strm, int flush);\par
0684: 0xA012F7CF ; 1A1: __thumb int inflateEnd(z_streamp strm);\par
;0688: 0x ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num);\par
;068C: 0x ; 1A3: __arm int GetCurrentGPRSProfile(void);\par
;0690: 0x ; 1A4: __arm int GetDisconnectTime(void);\par
;0694: 0x ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);\par
0698: 0xA00978A5 ; 1A6: __arm int IsTimerProc(GBSTMR *);\par
069C: 0xA092BE95 ; 1A7: __thumb char *Get_CC_NC();\par
06A0: 0xA0132ABD ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);\par
06A4: 0xA0133B0F ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);\par
06A8: 0xA0133187 ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);\par
06AC: 0xA0133C29 ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);\par
06B0: 0xA0132515 ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);\par
06B4: 0xA0133C29 ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);\par
06B8: 0xA0135735 ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);\par
06BC: 0xA0133C0D ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);\par
\par
06C0: 0xA01356CB ; 1B0: __thumb void png_set_packing(png_structp png_ptr);\par
06C4: 0xA0133C61 ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);\par
06C8: 0xA0131EE9 ; 1B2: __thumb int png_check_sig(png_bytep sig, int num);\par
06CC: 0xA0A0E1EF ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen);\par
06D0: 0xA0A0C193 ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);\par
06D4: 0x00000002 ; 81B5: __adr int isnewSGold(void);\par
06D8: 0xA0A5ABF5 ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);\par
06DC: 0xA0973E75 ; 1B7: __thumb unsigned int str2ip(const char *);\par
;06E0: 0x ; 1B8: __arm void *EXT_TOP(void);\par
;06E4: 0x ; 1B9: __arm void *PNG_TOP(void);\par
;06E8: 0x ; 1BA: __arm void *LIB_TOP(void);\par
;06EC: 0x ; 1BB: __arm void *DATA_N_SFB(void);\par
06F0: 0xA0F2F257 ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)\par
06F4: 0xA0F2EF3B ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)\par
06F8: 0xA0F2F137 ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)\par
06FC: 0xA0E75C75 ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)\par
\par
0700: 0xA0E75D03 ; 1C0: __thumb void RSA_free (RSA *r);\par
0704: 0xA0E75ECF ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);\par
0708: 0xA0E72467 ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);\par
070C: 0xA0950D31 ; 1C3: __thumb void SetMenuItemCount(void *gui,int n);\par
0710: 0xA0950C99 ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);\par
0714: 0xA0A32378 ; 1C5: __arm int GetFontYSIZE(int font);\par
0718: 0xA0A1C791 ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);\par
071C: 0xA0A1C7CD ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);\par
0720: 0xA0A16C11 ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);\par
0724: 0xA0A15C97 ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);\par
0728: 0xA0A15C8B ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);\par
072C: 0xA0A15C7F ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);\par
0730: 0xA0A15C69 ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);\par
0734: 0xA0A15C51 ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);\par
0738: 0xA0A15D39 ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);\par
073C: 0xA050281C ; 1CF: __unknown REGEXPLEXT *get_regextpnt_by_uid(int uid);\par
\par
0740: 0xA0502624 ; 1D0: __unknown int GetExtUid_ws(WSHDR * ext);\par
0744: 0xA0A1C931 ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);\par
0748: 0xA0A1C93D ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);\par
074C: 0xA0A1C7D9 ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);\par
0750: 0xA0A1C7E5 ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);\par
0754: 0xA04E16F4 ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);\par
0758: 0xA0133C29 ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);\par
075C: 0xA0135797 ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);\par
0760: 0xA0A1C839 ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);\par
0764: 0xA0A1C851 ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);\par
0768: 0xA06B4355 ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);\par
076C: 0xA8F4F7C4 ; 81DB: __unknown PDU *IncommingPDU(void);\par
0770: 0xA04FAD4F ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);\par
0774: 0xA04FAD71 ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);\par
0778: 0xA0A1C8F9 ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)\par
077C: 0xA0A1C9A7 ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)\par
\par
0780: 0xA095654F ; 1E0: __thumb void *MenuGetUserPointer(void *gui)\par
0784: 0xA08D2ED1 ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)\par
0788: 0xA04FB921 ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)\par
078C: 0xA04FB9D9 ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)\par
0790: 0xA094D8BF ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);\par
0794: 0xA0A1CA59 ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);\par
0798: 0xA0953275 ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);\par
079C: 0xA0AFD0C4 ; 1E7: __arm char *GetLastJavaApplication();\par
07A0: 0xA0A07D8C ; 1E8: __unknown int IsNoJava();\par
;07A4: 0x ; 1E9: __arm IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type);\par
07A8: 0xA094D567 ; 1EA: __unknown int GetMaxDynIcon(void);\par
07AC: 0xA8EA43A2 ; 1EB: __unknown char *RAM_IMSI(void);\par
07B0: 0xA094D56B ; 1EC: __unknown void FreeDynIcon(int picture);\par
07B4: 0xA094D6D1 ; 1ED: __unknown int IsDynIconBusy(int picture);\par
07B8: 0xA069271C ; 1EE: ProgressCalculate(int current, int total)\par
07BC: 0xA094D5CF ; 1EF: __unknown void SetDynIcon(int picture,IMGHDR *img,char *bitmap); \par
\par
07C0: 0xA0695538 ; 1F0: Filecopy\par
07C4: 0xA0697BE0 ; 1F1: Filecopy_Op_Announce\par
07C8: 0xA04E1280 ; 1F2: Devmenu_Config_IsCheckboxOff \par
07CC: 0xA00A320C ; 1F3: __arm unsigned int GetSessionAge(void);\par
07D0: 0xA8DA181C ; 81F4: char *RamServiceProviderName();\par
07D4: 0xA122AA09 ; 1F5: __thumb int sscanf(const char *, const char *, ...);\par
07D8: 0xA094D71F ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol); \par
07DC: 0xA006F501 ; 1F7: long GetFileSize(char *Filename);\par
07E0: 0xA069F6AC ; 1F8: __arm int GetPlayStatus(void);\par
07E4: 0xA006F401 ; 1F9: SendMP_cmd(cmd,substract);\par
07E8: 0xA8D86501 ; 1FA: char *RamVolumeStep();\par
07EC: 0xA8D9E8B9 ; 1FB: char *RamMediaIsPlaying()\par
07F0: 0xA0946A75 ; 1FC: __thumb void CloseCSM(int id);\par
07F4: 0xA0A0C177 ; 1FD: __thumb void SetProp2Square_v2(void);\par
07F8: 0xA8D87354 ; 1FE: char *RamLighterPower()\par
07FC: 0xA06E81DD ; 1FF: void MEDIA_PLAYLAST();\par
\par
0800: 0xA0067301 ; 200: ScreenShoot\par
0804: 0xA0A0C941 ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);\par
0808: 0xA0A12A1F ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);\par
080C: 0xA0A0E09F ; 203: __thumb void SetPixel(int x,int y,char *color);\par
0810: 0xA0A0AFFF ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);\par
0814: 0xA0A0C151 ; 205: __thumb void SetProp2Square_v1(void);\par
0818: 0xA0FAFB25 ; 206: __thumb void srand(unsigned int seed);\par
081C: 0xA0A12357 ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);\par
0820: 0xA08D2EEF ; 208: __unknown int Get_WS_width(WSHDR *ws, int font);\par
0824: 0xA09469B3 ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm);\par
0828: 0xA0A1C88D ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);\par
082C: 0xA0A1C8A5 ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);\par
0830: 0xA0A1C8BD ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);\par
0834: 0xA0A1C8D5 ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);\par
0838: 0xA0A15FC7 ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);\par
083C: 0xA0A15EAD ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);\par
\par
0840: 0xA094F3F9 ; 210: int GetCurGuiID(void);\par
0844: 0xA0006171 ; 211: GBS_Cmd_4209_RefreshScreensaver;\par
;0848: 0x ; 212: __unknown int CardExplGetCurItem(void *csm);\par
;084C: 0x ; 213: __unknown void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);\par
0850: 0xA04FB46D ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);\par
0854: 0xA04FB4FD ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to);\par
0858: 0xA093EBE7 ; 216: __thumb void wstrcatprintf(WSHDR *,const char *format,...);\par
085C: 0xA0B204AD ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);\par
0860: 0xA095785F ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);\par
0864: 0xA0957CA1 ; 219: __unknown void *AllocMLMenuItem(void *data);\par
0868: 0xA0A1C9C5 ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);\par
086C: 0xA0A1C9D1 ; 21B: void EDIT_RemoveTextInvert(void *gui);\par
0870: 0xA0A1CA0D ; 21C: __thumb int EDIT_IsBusy(void *gui);\par
0874: 0xA0925355 ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type);\par
0878: 0xA094F62F ; 21E: __thumb void FocusGUI(int id);\par
087C: 0xA094F63F ; 21F: __thumb void UnfocusGUI(void);\par
\par
0880: 0xA08D446C ; 220: IsSliderClosed;\par
0884: 0xA06236C8 ; 221: __arm void SetCpuClockLow(2);\par
0888: 0xA06236B0 ; 222: __arm void SetCpuClockTempHi(2);\par
088C: 0xA069F64C ; 223: IsMediaPlayerInBackground;\par
0890: 0xA06A0B38 ; 224: CloseMediaPlayer;\par
0894: 0xA0599C48 ; 225: __unknown int PlayMelody_ChangeVolume(int handle,int volume);\par
0898: 0xA059A6F8 ; 226: __arm int PlayMelody_StopPlayback(int handle);\par
089C: 0xA059A798 ; 227: __arm int PlayMelody_PausePlayback(int handle);\par
08A0: 0xA059A7C8 ; 228: __unknown int PlayMelody_ResumePlayBack(int handle);\par
08A4: 0xA122B40C ; 229: __arm void longjmp(jmp_buf, int);\par
08A8: 0xA092D2E9 ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);\par
08AC: 0xA06417F9 ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag);\par
08B0: 0xA0640F1D ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub);\par
08B4: 0xA0641107 ; 22D: pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub);\par
08B8: 0xA06998F8 ; 22E: OpenExplorer(ExplOpenDesc *);\par
08BC: 0xA8DA8158 ; 22F: TDateTimeSettings *RamDateTimeSettings;\par
\par
08C0: 0xA08CF389 ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone);\par
08C4: 0xA8DA8100 ; 231: TAppointment *RamAppointment;\par
08C8: 0xA0091D7B ; 232: GBS_DestroyMessage(GBS_MSG *);\par
08CC: 0xA07AD93F ; 233: void GetAllEmail();\par
;08D0: 0x ; 234: arm int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate);\par
;08D4: 0x ; 235: arm int GetLunarYearID(int year);\par
;08D8: 0x ; 236: arm int GetLunarAnimal(int year);\par
08DC: 0xA8E950A0 ; 237: char *RamIconBar;\par
08E0: 0xA092D293 ; 238: __thumb void SendAutoUSSDack(void);\par
08E4: 0xA04E76F4 ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg);\par
08E8: 0xA04E7860 ; 23A: __unknown int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);\par
08EC: 0xA09585AB ; 23B: __thumb void DisableIconBar(int disable);\par
;08F0: 0x ; 23C: __arm int SetCurrentGPRSProfile(int profile);\par
08F4: 0xA0F2BFD1 ; 23D: __arm void MD5_Init(MD5_CTX *c);\par
08F8: 0xA0F2BC41 ; 23E: __arm void MD5_Update(MD5_CTX *c, const void *data, unsigned long len);\par
08FC: 0xA0F2BED9 ; 23F: __arm void MD5_Final(unsigned char *md, MD5_CTX *c);\par
\par
0900: 0xA0F2C961 ; 240: __arm char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL);\par
0904: 0xA08CF5A7 ; 241: __arm void SetDateTime(TDate *, TTime *);\par
;0908: 0x ; 242: __arm void gb2ws(WSHDR *ws, const char *s, int len);\par
;090C: 0x ; 243: __arm void ws2gb(WSHDR *ws, char *s, int len);\par
0910: 0xA0E62BA1 ; 244: __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize);\par
0914: 0xA0E62C51 ; 245: __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5);\par
0918: 0xA0712CE8 ; 246: __arm int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder);\par
091C: 0xA097B2A9 ; 247: __thumb NetOff();\par
0920: 0xA8D8595A ; 248: char *RamFormatTrack();\par
0924: 0xA8D85BC2 ; 249: char *RamFreq();\par
0928: 0xA8D85D7A ; 24A: char *RamChannel();\par
092C: 0xA0954A8B ; 24B: __arm void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc);\par
0930: 0xA0658FA1 ; 24C: __thumb int GetPeripheryState (int device, int check_state);\par
0934: 0xA059A7F8 ; 24D: __arm int PlayMelody_SetPosition(int handle, int pos_ms);\par
0938: 0xA0633730 ; 24E: __arm void* GetPlayObjById(int handle);\par
093C: 0xA0CB7BD4 ; 24F: __arm int GetPlayObjPosition(void *playobj_3D0, int *pos_ms);\par
\par
0940: 0xA0CB7914 ; 250: __arm int GetPlayObjDuration(void *playobj_3D0, int *pos_ms);\par
0944: 0xAD07CA84 ; 8251: unsigned int *RamSizeOfPart();\par
0948: 0xAD07CA0C ; 8252: unsigned int *RamSizeOfRecievedSendFile();\par
;094C: 0x ; 253: char *RamLastCallNum();\par
0950: 0xA0699924 ; 254: __arm int StartNativeExplorer(NativeExplorerData* data);\par
0954: 0xA095654B ; 255: __arm void MenuSetUserPointer(void *gui,void *user_pointer);\par
0958: 0xAD07CAF8 ; 8256: char *RamNameOfRecievedSendFile();\par
095C: 0xAD07C9E6 ; 8257: char *RamIsSendReceiveBT();\par
0960: 0xA094CF5D ; 258: __thumb int CalcBitmapSize(short w,short h, char typy);\par
0964: 0xA0CD01B0 ; 259: __arm HObj Obs_CreateObject(int uid, int unk1, int unk2, int unk3, int unk4, int unk6,unsigned int *ErrorNumber);\par
0968: 0xA0CBBA94 ; 25A: __arm Obs_DestroyObject(HObj hObj);\par
096C: 0xA0CCCC3C ; 25B: __arm int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path);\par
0970: 0xA0CCAEA0 ; 25C: __arm int Obs_GetInputImageSize (HObj hObj, short *w, short *h);\par
0974: 0xA0CCB01C ; 25D: __arm int Obs_SetOutputImageSize (HObj hObj, short w, short h);\par
0978: 0xA0CBB618 ; 25E: __arm int Obs_Start(HObj hObj);\par
097C: 0xA0CCC290 ; 25F: __arm int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img);\par
\par
0980: 0xA0CCBE54 ; 260: __arm int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h);\par
0984: 0xA0CCB860 ; 261: __arm int Obs_SetRotation(HObj hObj, int angle);\par
0988: 0xA0CBB3DC ; 262: __arm int Obs_GetInfo (HObj hObj, int unk_0or1);\par
098C: 0xA0CCB60C ; 263: __arm Obs_SetScaling (HObj hObj, int unk5);\par
0990: 0xA0CD1968 ; 264: __arm int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler);\par
0994: 0xA0CBB7E0 ; 265: __arm int Obs_Pause (HObj hObj);\par
0998: 0xA0CBB99C ; 266: __arm int Obs_Resume (HObj hObj);\par
099C: 0xA0CBB8D0 ; 267: __arm int Obs_Stop (HObj hObj);\par
09A0: 0xA0CBB4E0 ; 268: __arm int Obs_Prepare (HObj hObj);\par
09A4: 0xA0D18248 ; 269: __arm int Obs_SetRenderOffset (HObj hObj,short x,short y);\par
09A8: 0xA0CB7B10 ; 26A: __arm int Obs_SetPosition (HObj hObj,int ms);\par
09AC: 0xA0CBBCA0 ; 26B: __arm int Obs_Mam_SetPurpose (HObj hObj,int ms);\par
09B0: 0xA0CC371C ; 26C: __arm int Obs_Sound_SetVolumeEx (HObj hObj, char vol, char delta);\par
09B4: 0xA0CC5124 ; 26D: __arm int Obs_Sound_GetVolume (HObj hObj, char *vol);\par
\par
\par
0A04: 0xA8EBC5B8 ; 8281: __thumb char *RamIsRunJava();\par
0A08: 0xA8EAAE54 ; 8282: __thumb char *RamIsRunCamera();***\par
0A0C: 0xA0680E6C ; 283: __arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename);\par
0A10: 0xA0D2C2C1 ; 284: __thumb int IsGPRS();\par
0A14: 0xA0D2C2C7 ; 285: __thumb int IsEDGE();\par
0A18: 0xA0D2343D ; 286: __thumb int GetSMSState();\par
0A1C: 0xA064248F ; 287: __thumb int BT_GetLocVisibility();\par
0A20: 0xA065F081 ; 288: __thumb int GetCurrAudioPath();\par
0A24: 0xA0D9A0D1 ; 289: __thumb int isDecryption();\par
0A28: 0xA8E374EC ; 828A: __thumb char *RamIsFileCache();\par
0A2C: 0xA8F09AE8 ; 828B: __thumb char *RamTotalHeapSize();\par
0A30: 0xA8F09B58 ; 828C: __thumb char *RamTemporaryHeapSize();***\par
0A34: 0xA8DA2634 ; 828D: __thumb char *RamBTNameDevice();\par
0A38: 0xA8DA181C ; 828E: __thumb char *RamActiveGPRSProfileName();\par
;0A3C: 0x  ; 828F: __thumb char *RamIsNumberTyping();\par
\par
0A40: 0xA8EF6DF0 ; 8290: __thumb char *RamCallState();\par
0A44: 0xA05C5ACC ; 291: int RefreshAlarmClock();\par
0A48: 0xA05C5ACC ; 292: int RefreshAlarmClock();\par
0A4C: 0xA8F5B968 ; 8293: __swi __arm char *RamIsAlarmAutorepeatOn();\par
0A50: 0xA8F5B964 ; 8294: __swi __arm char *RamAlarmclockHour();\par
0A54: 0xA8F5B964 ; 8295: __swi __arm char *RamAlarmclockMinute();\par
0A58: 0xA05ADAD3 ; 296: __thumb void getProfileNameByN(int n, WSHDR *ws, int _0);\par
0A5C: 0xA8F53DB4 ; 8297: char *RamIsSoundRecord();\par
0A60: 0xA8F53E10 ; 8298: char *RamIsSoundRecordQuality();\par
0A64: 0xA8E37860 ; 8299: char *RamExtendedCameraState();\par
0A68: 0xA05B8FD1 ; 29A: SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001);\par
0A6C: 0xA05BFBF9 ; 29B: GetTypeOfBTHeadset;\par
0A70: 0xA8DA7D75 ; 829C: char *RamInputLanguage();\par
0A74: 0xA8DF388C ; 829D: char *RamDisplayLanguage();\par
\par
\par
0A80: 0xA05C56F8 ; 2A0: int GetAlarmclockState(int state); \par
;0A84: 0x ; 2A1: \par
;0A88: 0x ; 2A2:\par
0A8C: 0xA0953319 ; 2A3: __thumb void UpdateMenuCursorItem(void *gui, int n);\par
0A90: 0xA0950125 ; 2A4: __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr); \par
0A94: 0xA0957479 ; 2A5: __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr); \par
0A98: 0xA094F739 ; 2A6: __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr); \par
0A9C: 0xA09540DB ; 2A7: __thumb void SetMenuToGUI(void *gui, const void *menu_desc);\par
0AA0: 0xA0950F33 ; 2A8: __thumb int GetMenuItemCount(void *gui);\par
0AA4: 0xA094E8C1 ; 2A9: __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg);\par
0AA8: 0xA094E803 ; 2AA: __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg);\par
0AAC: 0xA09572F9 ; 2AB: __thumb void *GetPopupUserPointer(void *gui);\par
0AB0: 0xA0B57217 ; 2AC: __thumb int DeleteSMS(int index, int _1);\par
0AB4: 0xA0B575C5 ; 2AD: __thumb int SetSmsStatus(int index, int type);\par
0AB8: 0xA0954E3D ; 2AE: __unknown void *GetHeaderPointer(void *gui);\par
0ABC: 0xA0A2819D ; 2AF: __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr);\par
\par
0AC0: 0xA0956031 ; 2B0: __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n);\par
0AC4: 0xA8EB9A84 ; 82B1: __arm SMS_DATA_ROOT *SmsDataRoot(); \par
0AC8: 0xA0D35895 ; 2B2: __thumb int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id);\par
0ACC: 0xA05FEB9D ; 2B3: __thumb NativeAbData *AllocNativeAbData(void);\par
0AD0: 0xA05FEC45 ; 2B4: __thumb int FreeNativeAbData(NativeAbData *ab_data);\par
0AD4: 0xA05FEDF7 ; 2B5: __thumb int GetNativeAbDataType(NativeAbData *nab, int unk0);\par
0AD8: 0xA05FF207 ; 2B6: __thumb WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0);\par
0ADC: 0xA05FEE0B ; 2B7: __thumb int GetNativeAbDataStatus(NativeAbData *nab, int _0);\par
0AE0: 0xA05FF37D ; 2B8: __thumb int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num);\par
0AE4: 0xA06D62FB ; 2B9: __thumb unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data);\par
0AE8: 0xA0A283F7 ; 2BA: __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr);\par
0AEC: 0xA0A251B7 ; 2BB: __arm void *GetTabGUI(void *malloc_adr, void *mfree_adr);\par
0AF0: 0xA0A22105 ; 2BC: __arm void SetGUIDefinition(void *gui, const void *definition);\par
0AF4: 0xA0A2566B ; 2BD: __arm int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui);\par
0AF8: 0xA0A25787 ; 2BE: __arm int SetCursorTab(void *tab_gui, int n);\par
0AFC: 0xA0A258E9 ; 2BF: __arm int UpdateTab1stItem(void *tab_gui, int unk_0);\par
\par
0B00: 0xA0A257A5 ; 2C0: __arm int GetCursorTab(void *tab_gui);\par
0B04: 0xA0A25221 ; 2C1: __arm void *GetGuiByTab(void *tab_gui, int n);\par
0B08: 0xA08C9CD9 ; 2C2: __arm int GetSubprovider(WSHDR* ws);\par
0B0C: 0xA08C9F0D ; 2C3: __arm int GetRoamingState();\par
0B10: 0xA05AD539 ; 2C4: __arm int GetPrfileVolumeSetting(int profile, int type);\par
0B14: 0xA8E69A24 ; 82C5: __swi __arm RAM_EMS_ADMIN *RAM_EMS_Admin();\par
0B18: 0xA058A283 ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date);\par
0B1C: 0xA058A2D5 ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time);\par
0B20: 0xA058A75F ; 2C8: int GetSecondsFromTime(*TTime time);\par
0B24: 0xA058A1BD ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date);\par
0B28: 0xA058A2F7 ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time);\par
0B2C: 0xA058A771 ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds);\par
0B30: 0xA058A163 ; 2CC: void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day);\par
0B34: 0xA058AB83 ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec);\par
0B38: 0xA0589A8D ; 2CE: int CmpDates(TDate *date1, TDate *date2);\par
0B3C: 0xA058A700 ; 2CF: int CmpTimes(TTime *time1, TTime *time2);\par
\par
0B40: 0xA0589ADD ; 2D0: int GetDaysFromMonth(TDate *date);\par
0B44: 0xA0589ABD ; 2D1: int IsLeapYear(TDate *date);\par
;0B48: 0x;  2D2: __thumb StartNativeBrowserCore();\par
0B4C: 0xA05FF477 ; 2D3: int GetFilledNAbDataCount(NativeAbData *nab);\par
0B50: 0xA05FEE21 ; 2D4: void *GetDataFromNAbData(NativeAbData *nab, int n);\par
0B54: 0xA092DBFF ; 2D5: void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen);\par
0B58: 0xA0957DDF ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr);\par
0B5C: 0xA09583DD ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *);\par
0B60: 0xA0958367 ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr);\par
0B64: 0xA095840B ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer);\par
0B68: 0xA0958411 ; 2DA: void *TViewGetUserPointer(void *gui);\par
0B6C: 0xA0788E1C ; 2DB: void SendMedia(WSHDR *file, WSHDR *path);\par
0B70: 0xA08CCD05 ; 2DC: __thumb void SaveMaxIllumination(int level);\par
0B74: 0xA08CCD2D ; 2DD: __thumb void SetIlluminationoffTimeout(int time_sec);\par
0B78: 0xA08CCEB9 ; 2DE: __thumb void IllumTimeRequest(int TimeMode, int Counter);\par
0B7C: 0xA08CCEEF ; 2DF: __thumb void IllumTimeRelease(int TimeMode, int Counter);\par
0B80: 0xA0A26A95 ; 2E0: __swi arm__ IMGHDR *GetIMGHDRFromThemeCache(int index)\par
0B88: 0xA04FAC7F ; 2E2: __swi arm__ int wstrcmp(WSHDR*ws1,WSHDR*ws2);\par
0B8C: 0xA05D0EAC ; 2E3: __swi arm__ int fexists(WSHDR* FileName);\par
0B90: 0xA05AD02D ; 2E4: __swi __arm  int SettingsAE_Update_ws(WSHDR *,int set,char * entry,char *keyword);\par
;0B94: ;2E5\par
;0B98: ;2E6\par
;0B9C: ;2E7\par
;0BA0: ;2E8\par
;0BA4: ;2E9\par
;0BA8: ;2EA\par
;0BAC: ;2EB\par
0BB0: 0xA04F445C ; __swi __arm int i2c_transfer(I2C_MSG *msg);\par
0BB4: 0xA04F44B0 ; __swi __arm int i2c_receive(I2C_MSG *msg);\par
0BB8: 0xA06A4588 ;2EE\par
#pragma disable old_equal_ff\par
+0\par
\par
\par
;locale=Russian_Russia.1251\par
\f0\par
}
 
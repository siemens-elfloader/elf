//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Mar/2011  10:39:11 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vkcom\main.c                                 /
//    Command line    =  C:\arm\vkcom\main.c -D NEWSGOLD -D ELKA -lA         /
//                       C:\arm\vkcom\Release_ELKA\List\ -o                  /
//                       C:\arm\vkcom\Release_ELKA\Obj\ -s9 --cpu_mode arm   /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vkcom\Release_ELKA\List\main.s79             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??CloseAmrFile??rA
        MULTWEAK ??CloseWaveFile??rA
        MULTWEAK ??CreateWaveFile??rA
        MULTWEAK ??Decoder_Interface_Decode??rA
        MULTWEAK ??Decoder_Interface_exit??rA
        MULTWEAK ??Decoder_Interface_init??rA
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??OpenAmrFile??rA
        MULTWEAK ??ParseOneFrameBits??rA
        MULTWEAK ??ReadOneFrameBlock??rA
        MULTWEAK ??WriteSeparateWaveFile??rA
        MULTWEAK ??decodeOneAmrFile??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC decodeOneAmrFile
        FUNCTION decodeOneAmrFile,0203H
        LOCFRAME CSTACK, 552, STACK
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 268, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
CloseAmrFile        SYMBOL "CloseAmrFile"
CloseWaveFile       SYMBOL "CloseWaveFile"
CreateWaveFile      SYMBOL "CreateWaveFile"
Decoder_Interface_Decode SYMBOL "Decoder_Interface_Decode"
Decoder_Interface_exit SYMBOL "Decoder_Interface_exit"
Decoder_Interface_init SYMBOL "Decoder_Interface_init"
OpenAmrFile         SYMBOL "OpenAmrFile"
ParseOneFrameBits   SYMBOL "ParseOneFrameBits"
ReadOneFrameBlock   SYMBOL "ReadOneFrameBlock"
WriteSeparateWaveFile SYMBOL "WriteSeparateWaveFile"
kill_data           SYMBOL "kill_data"
??CloseAmrFile??rA  SYMBOL "??rA", CloseAmrFile
??CloseWaveFile??rA SYMBOL "??rA", CloseWaveFile
??CreateWaveFile??rA SYMBOL "??rA", CreateWaveFile
??Decoder_Interface_Decode??rA SYMBOL "??rA", Decoder_Interface_Decode
??Decoder_Interface_exit??rA SYMBOL "??rA", Decoder_Interface_exit
??Decoder_Interface_init??rA SYMBOL "??rA", Decoder_Interface_init
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
??OpenAmrFile??rA   SYMBOL "??rA", OpenAmrFile
??ParseOneFrameBits??rA SYMBOL "??rA", ParseOneFrameBits
??ReadOneFrameBlock??rA SYMBOL "??rA", ReadOneFrameBlock
??WriteSeparateWaveFile??rA SYMBOL "??rA", WriteSeparateWaveFile
decodeOneAmrFile    SYMBOL "decodeOneAmrFile"
??decodeOneAmrFile??rT SYMBOL "??rT", decodeOneAmrFile
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

        EXTERN CloseAmrFile
        FUNCTION CloseAmrFile,0202H
        EXTERN CloseWaveFile
        FUNCTION CloseWaveFile,0202H
        EXTERN CreateWaveFile
        FUNCTION CreateWaveFile,0202H
        EXTERN Decoder_Interface_Decode
        FUNCTION Decoder_Interface_Decode,0202H
        EXTERN Decoder_Interface_exit
        FUNCTION Decoder_Interface_exit,0202H
        EXTERN Decoder_Interface_init
        FUNCTION Decoder_Interface_init,0202H
        EXTERN ELF_BEGIN
        EXTERN OpenAmrFile
        FUNCTION OpenAmrFile,0202H
        EXTERN ParseOneFrameBits
        FUNCTION ParseOneFrameBits,0202H
        EXTERN ReadOneFrameBlock
        FUNCTION ReadOneFrameBlock,0202H
        EXTERN WriteSeparateWaveFile
        FUNCTION WriteSeparateWaveFile,0202H
        EXTERN kill_data
        FUNCTION kill_data,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??decodeOneAmrFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE decodeOneAmrFile
// C:\arm\vkcom\main.c
//    1 #include "..\inc\swilib.h"
//    2 #include "decode.c"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function decodeOneAmrFile
        ARM
// __??Code32?? __code __interwork __atpcs int decodeOneAmrFile(char *, char *)
decodeOneAmrFile:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+524
        CFI CFA R13+552
        MOV      R7,R1
        MOV      R3,#+0
        MOV      R2,#+0
        MOV      R1,R2
        _BLF     OpenAmrFile,??OpenAmrFile??rA
        MOVS     R4,R0
        BEQ      ??decodeOneAmrFile_0
        LDRSH    R0,[R4, #+16]
        MOV      R1,#+320
        MUL      R0,R1,R0
        SWI      +20
        MOVS     R5,R0
        BEQ      ??decodeOneAmrFile_1
        LDRSH    R0,[R4, #+16]
        MOV      R6,#+0
        MOV      R1,#+320
        CMP      R0,#+1
        BGE      ??decodeOneAmrFile_2
        B        ??decodeOneAmrFile_3
??decodeOneAmrFile_4:
        MLA      R2,R1,R6,R5
        MOV      R0,SP
        STR      R2,[R0, +R6, LSL #+2]
        ADD      R6,R6,#+1
        MOV      R6,R6, LSL #+16
        MOV      R6,R6, ASR #+16
??decodeOneAmrFile_2:
        LDRSH    R0,[R4, #+16]
        CMP      R6,R0
        BLT      ??decodeOneAmrFile_4
??decodeOneAmrFile_3:
        LDR      R3,[R4, #+4]
        LDRSH    R1,[R4, #+16]
        MOV      R2,#+16
        MOV      R0,R7
        _BLF     CreateWaveFile,??CreateWaveFile??rA
        MOVS     R7,R0
        BEQ      ??decodeOneAmrFile_1
        _BLF     Decoder_Interface_init,??Decoder_Interface_init??rA
        MOVS     R8,R0
        BNE      ??decodeOneAmrFile_5
        MOV      R0,R7
        _BLF     CloseWaveFile,??CloseWaveFile??rA
??decodeOneAmrFile_1:
        MOV      R0,R4
        _BLF     CloseAmrFile,??CloseAmrFile??rA
        CMP      R5,#+0
        BEQ      ??decodeOneAmrFile_0
        MOV      R0,R5
        SWI      +21
??decodeOneAmrFile_0:
        MOV      R0,#+0
        ADD      SP,SP,#+524
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        CFI CFA R13+552
??decodeOneAmrFile_6:
        MOV      R3,#+0
        MOV      R2,R9
        ADD      R1,SP,#+24
        MOV      R0,R8
        _BLF     Decoder_Interface_Decode,??Decoder_Interface_Decode??rA
        ADD      R6,R6,#+1
        MOV      R6,R6, LSL #+16
        MOV      R6,R6, ASR #+16
??decodeOneAmrFile_7:
        LDRSH    R0,[R4, #+16]
        CMP      R6,R0
        BGE      ??decodeOneAmrFile_8
        MOV      R0,SP
        LDR      R9,[R0, +R6, LSL #+2]
        MOV      R2,R6
        MOV      R1,R4
        ADD      R0,SP,#+24
        _BLF     ParseOneFrameBits,??ParseOneFrameBits??rA
        CMP      R0,#+0
        BNE      ??decodeOneAmrFile_6
??decodeOneAmrFile_8:
        LDR      R0,[R4, #+4]
        LDR      R1,??decodeOneAmrFile_9  ;; 0x51eb851f
        LDRSH    R3,[R4, #+16]
        SMULL    R2,R6,R1,R0
        MOV      R1,SP
        ASR      R6,R6,#+4
        ADD      R2,R6,R0, LSR #+31
        MOV      R0,R7
        _BLF     WriteSeparateWaveFile,??WriteSeparateWaveFile??rA
??decodeOneAmrFile_5:
        MOV      R0,R4
        _BLF     ReadOneFrameBlock,??ReadOneFrameBlock??rA
        CMP      R0,#+0
        MOVNE    R6,#+0
        BNE      ??decodeOneAmrFile_7
        MOV      R0,R8
        _BLF     Decoder_Interface_exit,??Decoder_Interface_exit??rA
        MOV      R0,R7
        _BLF     CloseWaveFile,??CloseWaveFile??rA
        MOV      R0,R4
        _BLF     CloseAmrFile,??CloseAmrFile??rA
        MOV      R0,R5
        SWI      +21
        MOV      R0,#+1
        ADD      SP,SP,#+524
        CFI CFA R13+28
        POP      {R4-R9,PC}
        DATA
??decodeOneAmrFile_9:
        DC32     0x51eb851f
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ElfKiller
//    3 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//    4 void ElfKiller(void)
//    5 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//    6   extern void kill_data(void *p, void (*func_p)(void *));
//    7   extern void *ELF_BEGIN;
//    8   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock3
//    9 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE main
//   10 
//   11 extern int decodeOneAmrFile( char* AmrName , char* WavNAme );
//   12 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function main
        ARM
//   13 int main(char *exename, char *fname)
//   14 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   15     char wav[256];
//   16    sprintf(wav,"%s.wav",fname);
        LDR      R5,??main_0      ;; `?<Constant "%s.wav">`
        SUB      SP,SP,#+256
        CFI CFA R13+268
        MOV      R4,R1
        MOV      R2,R4
        MOV      R1,R5
        MOV      R0,SP
        SWI      +22
//   17    decodeOneAmrFile (  fname , wav) ;
        MOV      R1,SP
        MOV      R0,R4
        BL       decodeOneAmrFile
//   18    ShowMSG(1,(int)"converted!");
        ADD      R1,R5,#+8
        MOV      R0,#+1
        SWI      +328
//   19    SUBPROC((void *)ElfKiller);
        LDR      R0,??main_0+0x4  ;; ElfKiller
        SWI      +369
//   20   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+256
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??main_0:
        DC32     `?<Constant "%s.wav">`
        DC32     ElfKiller
        CFI EndBlock cfiBlock5
//   21 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
??OpenAmrFile??rA:
        LDR      R12,??Subroutine3_0  ;; OpenAmrFile
        BX       R12
        DATA
??Subroutine3_0:
        DC32     OpenAmrFile
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
??CreateWaveFile??rA:
        LDR      R12,??Subroutine4_0  ;; CreateWaveFile
        BX       R12
        DATA
??Subroutine4_0:
        DC32     CreateWaveFile
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
??Decoder_Interface_init??rA:
        LDR      R12,??Subroutine5_0  ;; Decoder_Interface_init
        BX       R12
        DATA
??Subroutine5_0:
        DC32     Decoder_Interface_init
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        ARM
??CloseWaveFile??rA:
        LDR      R12,??Subroutine6_0  ;; CloseWaveFile
        BX       R12
        DATA
??Subroutine6_0:
        DC32     CloseWaveFile
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??CloseAmrFile??rA:
        LDR      R12,??Subroutine7_0  ;; CloseAmrFile
        BX       R12
        DATA
??Subroutine7_0:
        DC32     CloseAmrFile
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??Decoder_Interface_Decode??rA:
        LDR      R12,??Subroutine8_0  ;; Decoder_Interface_Decode
        BX       R12
        DATA
??Subroutine8_0:
        DC32     Decoder_Interface_Decode
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??ParseOneFrameBits??rA:
        LDR      R12,??Subroutine9_0  ;; ParseOneFrameBits
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ParseOneFrameBits
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
??WriteSeparateWaveFile??rA:
        LDR      R12,??Subroutine10_0  ;; WriteSeparateWaveFile
        BX       R12
        DATA
??Subroutine10_0:
        DC32     WriteSeparateWaveFile
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??ReadOneFrameBlock??rA:
        LDR      R12,??Subroutine11_0  ;; ReadOneFrameBlock
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ReadOneFrameBlock
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??Decoder_Interface_exit??rA:
        LDR      R12,??Subroutine12_0  ;; Decoder_Interface_exit
        BX       R12
        DATA
??Subroutine12_0:
        DC32     Decoder_Interface_exit
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine13_0  ;; kill_data
        BX       R12
        DATA
??Subroutine13_0:
        DC32     kill_data
        CFI EndBlock cfiBlock16

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%s.wav">`:
        DATA
        DC8 "%s.wav"
        DC8 0
        DC8 "converted!"
        DC8 0

        END
// 
// 640 bytes in segment CODE
//  20 bytes in segment DATA_C
// 
// 496 bytes of CODE  memory (+ 144 bytes shared)
//  20 bytes of CONST memory
//
//Errors: none
//Warnings: none

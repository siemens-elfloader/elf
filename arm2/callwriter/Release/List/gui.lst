##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Aug/2009  10:33:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\nsd\gui.c                                     #
#    Command line    =  C:\arm\nsd\gui.c -D NEWSGOLD -D ELKA -lC             #
#                       C:\arm\nsd\Release\List\ -o C:\arm\nsd\Release\Obj\  #
#                       -s9 --no_unroll --no_clustering --cpu_mode arm       #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I "C:\arm2\Embedded       #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\nsd\Release\List\gui.lst                      #
#    Object file     =  C:\arm\nsd\Release\Obj\gui.r79                       #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\nsd\gui.c
      1          #include "..\inc\swilib.h"
      2          
      3          
      4          //==============================================================================
      5          // Гуй
      6          //==============================================================================
      7          /*
      8          extern void kill_data(void *p, void (*func_p)(void *));
      9          
     10          const int minus11=-11;
     11          
     12          typedef struct
     13          {
     14            CSM_RAM csm;
     15            int gui_id;
     16          }MAIN_CSM;
     17          
     18          typedef struct
     19          {
     20            GUI gui;
     21            WSHDR *ws1;
     22            WSHDR *ws2;
     23            int i1;
     24          }MAIN_GUI;
     25          
     26          void method0(MAIN_GUI *data)
     27          {
     28            DrawRoundedFrame(0,0,ScreenH()-1,ScreenW()-1,0,0,0,
     29          			GetPaletteAdrByColorIndex(23),
     30          			GetPaletteAdrByColorIndex(23));
     31          }
     32          
     33          void method1(MAIN_GUI *data, void *(*malloc_adr)(int))
     34          {
     35            data->gui.state=1;
     36          }
     37          
     38          void method2(MAIN_GUI *data, void (*mfree_adr)(void *))
     39          {
     40            data->gui.state=0;
     41          }
     42          
     43          void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     44          {
     45            data->gui.state=2;
     46          }
     47          
     48          void method4(MAIN_GUI *data, void (*mfree_adr)(void *))
     49          {
     50            if (data->gui.state!=2) return;
     51            data->gui.state=1;
     52          }
     53          
     54          int method5(MAIN_GUI *data, GUI_MSG *msg)
     55          {
     56            DirectRedrawGUI();
     57            
     58            if (msg->gbsmsg->msg==KEY_DOWN)
     59            {
     60              switch(msg->gbsmsg->submess)
     61              {
     62              case RIGHT_SOFT:
     63                return(1); 
     64              }//Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
     65            }
     66            return(0);
     67          }
     68          
     69          void method7(MAIN_GUI *data, void (*mfree_adr)(void *))
     70          {
     71            kill_data(data, mfree_adr);
     72          }
     73          
     74          int method8(void){return(0);}
     75          
     76          int method9(void){return(0);}
     77          
     78          const void * const gui_methods[11]={
     79            (void *)method0,	//Redraw
     80            (void *)method1,	//Create
     81            (void *)method2,	//Close
     82            (void *)method3,	//Focus
     83            (void *)method4,	//Unfocus
     84            (void *)method5,	//OnKey
     85            0,
     86            (void *)method7,	//Destroy
     87            (void *)method8,
     88            (void *)method9,
     89            0
     90          };
     91          
     92          const RECT Canvas={0,0,131,175};
     93          
     94          void maincsm_oncreate(CSM_RAM *data)
     95          {
     96            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
     97            MAIN_CSM*csm=(MAIN_CSM*)data;
     98            zeromem(main_gui,sizeof(MAIN_GUI));
     99            main_gui->gui.canvas=(void *)(&Canvas);
    100            //main_gui->gui.flag30=2;
    101            main_gui->gui.methods=(void *)gui_methods;
    102            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
    103            csm->csm.state=0;
    104            csm->csm.unk1=0;
    105            csm->gui_id=CreateGUI(main_gui);
    106          }
    107          
    108          void ELF_KILLER(void)
    109          {
    110            extern void *ELF_BEGIN;
    111            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
    112          }
    113          
    114          void maincsm_onclose(CSM_RAM *csm)
    115          {
    116            //SUBPROC((void *)ELF_KILLER);
    117          }
    118          
    119          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    120          {
    121            MAIN_CSM *csm=(MAIN_CSM*)data;
    122            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
    123            {
    124              csm->csm.state=-3;
    125            }
    126            return(1);
    127          }
    128          
    129          unsigned short maincsm_name_body[140];
    130          
    131          const struct
    132          {
    133            CSM_DESC maincsm;
    134            WSHDR maincsm_name;
    135          }MAINCSM =
    136          {
    137            {
    138              maincsm_onmessage,
    139              maincsm_oncreate,
    140          #ifdef NEWSGOLD
    141          0,
    142          0,
    143          0,
    144          0,
    145          #endif
    146          maincsm_onclose,
    147          sizeof(MAIN_CSM),
    148          1,
    149          &minus11
    150            },
    151            {
    152              maincsm_name_body,
    153              NAMECSM_MAGIC1,
    154              NAMECSM_MAGIC2,
    155              0x0,
    156              139
    157            }
    158          };
    159          
    160          void UpdateCSMname(void)
    161          {
    162            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"KeyMaster");
    163          }
    164          
    165          void ShowRedBtnMenu()
    166          {
    167            char dummy[sizeof(MAIN_CSM)];
    168            UpdateCSMname();
    169            LockSched();
    170            CreateCSM(&MAINCSM.maincsm,dummy,0);
    171            UnlockSched();
    172          }
    173          */
    174          //
    175          //==============================================================================
    176          // Uptime counter
    177          //==============================================================================
    178          
    179          

   \                                 In segment DATA_Z, align 4, align-sorted
    180          TDate date;
   \                     `date`:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    181          TTime time; 
   \                     time:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    182          int sh;
   \                     sh:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    183          int sm;
   \                     sm:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    184          int ss;
   \                     ss:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    185          int sd;
   \                     sd:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    186          int nh;
   \                     nh:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    187          int nm;
   \                     nm:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    188          int ns;
   \                     ns:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    189          int nd;
   \                     nd:
   \   00000000                      DS8 4
    190          

   \                                 In segment DATA_Z, align 1, align-sorted
    191          char resstr;
   \                     resstr:
   \   00000000                      DS8 1
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          void count_uptime()
    194          {
   \                     count_uptime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    195          GetDateTime(&date,&time);
   \   00000004   CC409FE5           LDR      R4,??count_uptime_0  ;; `date`
   \   00000008   CC509FE5           LDR      R5,??count_uptime_0+0x4  ;; time
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   0510A0E1           MOV      R1,R5
   \   00000014   B40000EF           SWI      +180
    196            ns=time.sec-ss;
   \   00000018   0200D5E5           LDRB     R0,[R5, #+2]
   \   0000001C   BC109FE5           LDR      R1,??count_uptime_0+0x8  ;; ss
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   010050E0           SUBS     R0,R0,R1
    197            if (ns<0){
   \   00000028   0300005A           BPL      ??count_uptime_1
    198              ns=60+ns;
    199              time.min--;
   \   0000002C   0110D5E5           LDRB     R1,[R5, #+1]
   \   00000030   3C0080E2           ADD      R0,R0,#+60
   \   00000034   011041E2           SUB      R1,R1,#+1
   \   00000038   0110C5E5           STRB     R1,[R5, #+1]
   \                     ??count_uptime_1:
   \   0000003C   A0109FE5           LDR      R1,??count_uptime_0+0xC  ;; ns
   \   00000040   000081E5           STR      R0,[R1, #+0]
    200            }
    201            nm=time.min-sm;
   \   00000044   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000048   98109FE5           LDR      R1,??count_uptime_0+0x10  ;; sm
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   011050E0           SUBS     R1,R0,R1
    202            if (nm<0){
   \   00000054   0300005A           BPL      ??count_uptime_2
    203              nm=60+nm;
    204              time.hour--;
   \   00000058   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000005C   3C1081E2           ADD      R1,R1,#+60
   \   00000060   010040E2           SUB      R0,R0,#+1
   \   00000064   0000C5E5           STRB     R0,[R5, #+0]
   \                     ??count_uptime_2:
   \   00000068   7C009FE5           LDR      R0,??count_uptime_0+0x14  ;; nm
    205            }
    206            nh=time.hour-sh;
   \   0000006C   7C209FE5           LDR      R2,??count_uptime_0+0x18  ;; sh
   \   00000070   001080E5           STR      R1,[R0, #+0]
   \   00000074   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000078   002092E5           LDR      R2,[R2, #+0]
   \   0000007C   021051E0           SUBS     R1,R1,R2
    207            if (nh<0){
   \   00000080   0300005A           BPL      ??count_uptime_3
    208              nh=24+nh;
    209              date.day--;
   \   00000084   0520D4E5           LDRB     R2,[R4, #+5]
   \   00000088   181081E2           ADD      R1,R1,#+24
   \   0000008C   012042E2           SUB      R2,R2,#+1
   \   00000090   0520C4E5           STRB     R2,[R4, #+5]
   \                     ??count_uptime_3:
   \   00000094   58209FE5           LDR      R2,??count_uptime_0+0x1C  ;; nh
    210            }
    211            nd=date.day-sd;
   \   00000098   58309FE5           LDR      R3,??count_uptime_0+0x20  ;; sd
   \   0000009C   001082E5           STR      R1,[R2, #+0]
   \   000000A0   0510D4E5           LDRB     R1,[R4, #+5]
   \   000000A4   003093E5           LDR      R3,[R3, #+0]
    212            if (nd<0){
    213              nd=0;
    214            }
    215            if (nd==0) sprintf(&resstr,"Uptime %02i:%02i",nh,nm);
   \   000000A8   002092E5           LDR      R2,[R2, #+0]
   \   000000AC   031051E0           SUBS     R1,R1,R3
   \   000000B0   44309FE5           LDR      R3,??count_uptime_0+0x24  ;; nd
   \   000000B4   0010A043           MOVMI    R1,#+0
   \   000000B8   001083E5           STR      R1,[R3, #+0]
   \   000000BC   003090E5           LDR      R3,[R0, #+0]
   \   000000C0   ........           LDR      R0,??DataTable9  ;; resstr
   \   000000C4   000051E3           CMP      R1,#+0
   \   000000C8   30109F05           LDREQ    R1,??count_uptime_0+0x28  ;; `?<Constant "Uptime %02i:%02i">`
    216                 else sprintf(&resstr,"Uptime %i Days, %02i:%02i",nh,nm);
   \   000000CC   30109F15           LDRNE    R1,??count_uptime_0+0x2C  ;; `?<Constant "Uptime %i Days, %02i:...">`
   \   000000D0   160000EF           SWI      +22
    217          }
   \   000000D4   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??count_uptime_0:
   \   000000D8   ........           DC32     `date`
   \   000000DC   ........           DC32     time
   \   000000E0   ........           DC32     ss
   \   000000E4   ........           DC32     ns
   \   000000E8   ........           DC32     sm
   \   000000EC   ........           DC32     nm
   \   000000F0   ........           DC32     sh
   \   000000F4   ........           DC32     nh
   \   000000F8   ........           DC32     sd
   \   000000FC   ........           DC32     nd
   \   00000100   ........           DC32     `?<Constant "Uptime %02i:%02i">`
   \   00000104   ........           DC32     `?<Constant "Uptime %i Days, %02i:...">`
    218          //==============================================================================
    219          // Меню
    220          //==============================================================================
    221          #define MENU_ITEMS_NUM 4
    222          

   \                                 In segment DATA_Z, align 4, align-sorted
    223          char hdr[64];
   \                     hdr:
   \   00000000                      DS8 64

   \                                 In segment DATA_Z, align 1, align-sorted
    224          char hdr2;
   \                     hdr2:
   \   00000000                      DS8 1

   \                                 In segment DATA_C, align 4, align-sorted
    225          static const HEADER_DESC rb_menuhdr = {0, 0,NULL,NULL,NULL, (int) hdr, LGP_NULL};
   \                     rb_menuhdr:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, hdr, 2147483647
   \              ....FFFFFF7F
    226          

   \                                 In segment CODE, align 4, keep-with-next
    227          static void mp1()
    228          {
   \                     mp1:
   \   00000000   00402DE9           PUSH     {LR}
    229            SwitchPhoneOff();
   \   00000004   090000EF           SWI      +9
    230            GeneralFuncF1(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0100EF           SWI      +315
    231          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    232          

   \                                 In segment CODE, align 4, keep-with-next
    233          static void mp2()
    234          {
   \                     mp2:
   \   00000000   00402DE9           PUSH     {LR}
    235            RebootPhone();
   \   00000004   930000EF           SWI      +147
    236            GeneralFuncF1(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0100EF           SWI      +315
    237          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    238          

   \                                 In segment CODE, align 4, keep-with-next
    239          static void mp3()
    240          {
   \                     mp3:
   \   00000000   00402DE9           PUSH     {LR}
    241            KbdLock();
   \   00000004   A90000EF           SWI      +169
    242            GeneralFuncF1(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0100EF           SWI      +315
    243          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    244          

   \                                 In segment CODE, align 4, keep-with-next
    245          static void mp4()
    246          {
   \                     mp4:
   \   00000000   00402DE9           PUSH     {LR}
    247            SetProfile(8);
   \   00000004   0800A0E3           MOV      R0,#+8
   \   00000008   B70000EF           SWI      +183
    248            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    249          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    250          

   \                                 In segment DATA_C, align 4, align-sorted
    251          static const char * const menutexts[MENU_ITEMS_NUM]=
   \                     menutexts:
   \   00000000   ........           DC32 `?<Constant "\\302\\373\\352\\353\\376\\367\\350\\362\\3`
   \   00000004   ........           DC32 `?<Constant "\\317\\345\\360\\345\\347\\340\\343\\360\\3`
   \   00000008   ........           DC32 `?<Constant "\\307\\340\\341\\353\\356\\352\\350\\360\\3`
   \   0000000C   ........           DC32 `?<Constant "\\302\\373\\352\\353\\376\\367\\350\\362\\3_1`
    252          {
    253            "Выключить",
    254            "Перезагрузить",
    255            "Заблокировать клавиатуру",
    256            "Выключить телефон и все сигналы"
    257          };
    258          

   \                                 In segment DATA_I, align 4, align-sorted
    259          static const void *menuprocs[MENU_ITEMS_NUM]=
   \                     menuprocs:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for menuprocs>`
    260          {
    261            (void *)mp1,
    262            (void *)mp2,
    263            (void *)mp3,
    264            (void *)mp4,
    265          };
    266          

   \                                 In segment DATA_C, align 4, align-sorted
    267          static const int menusoftkeys[] = {0,1,2};
   \                     menusoftkeys:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_C, align 4, align-sorted
    268          static const SOFTKEY_DESC menu_sk[]=
   \                     menu_sk:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515
    269          {
    270            {0x0018, 0x0000, (int)"Выбрать"},
    271            {0x0001, 0x0000, (int)"Закрыть"},
    272            {0x003D, 0x0000, (int)LGP_DOIT_PIC}
    273          };
    274          

   \                                 In segment DATA_C, align 4, align-sorted
    275          static const SOFTKEYSTAB menu_skt =
   \                     menu_skt:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        
    276          {
    277            menu_sk, 0
    278          };
    279          

   \                                 In segment CODE, align 4, keep-with-next
    280          int rb_menu_onkey(void *data, GUI_MSG *msg)
    281          {
   \                     rb_menu_onkey:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
    282          //  count_uptime();
    283            TTime t;
    284            TDate d;
    285            GetDateTime(&d,&t);
    286            sprintf(&hdr2,"Меню  %02d:%02d",t.hour,t.min);
   \   0000000C   ........           LDR      R6,??DataTable8  ;; hdr2
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   08008DE2           ADD      R0,SP,#+8
   \   0000001C   B40000EF           SWI      +180
   \   00000020   0020DDE5           LDRB     R2,[SP, #+0]
   \   00000024   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000028   ........           LDR      R1,??DataTable10  ;; `?<Constant "\\314\\345\\355\\376  %02d:%02d">`
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   160000EF           SWI      +22
    287            strncpy(hdr,&hdr2,63);
   \   00000034   ........           LDR      R0,??DataTable11  ;; hdr
   \   00000038   3F20A0E3           MOV      R2,#+63
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   160100EF           SWI      +278
    288            
    289            if ((msg->keys==0x18)||(msg->keys==0x3D))
   \   00000044   F200D5E1           LDRSH    R0,[R5, #+2]
   \   00000048   180050E3           CMP      R0,#+24
   \   0000004C   3D005013           CMPNE    R0,#+61
   \   00000050   0400001A           BNE      ??rb_menu_onkey_0
    290            {
    291              ((void (*)(void))(menuprocs[GetCurMenuItem(data)]))();
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   8F0100EF           SWI      +399
   \   0000005C   10109FE5           LDR      R1,??rb_menu_onkey_1  ;; menuprocs
   \   00000060   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000064   30FF2FE1           BLX      R0
    292            }  
    293            return(0);
   \                     ??rb_menu_onkey_0:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   10D08DE2           ADD      SP,SP,#+16
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??rb_menu_onkey_1:
   \   00000074   ........           DC32     menuprocs
    294          }
    295          

   \                                 In segment CODE, align 4, keep-with-next
    296          void rb_menu_ghook(void *data, int cmd)
    297          {
   \                     rb_menu_ghook:
   \   00000000   00402DE9           PUSH     {LR}
    298            if (cmd==0x0A)
   \   00000004   0A0051E3           CMP      R1,#+10
   \   00000008   0080BD18           POPNE    {PC}
    299            {
    300              DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    301            }
    302          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    303          

   \                                 In segment CODE, align 4, keep-with-next
    304          void rb_menu_iconhndl(void *data, int curitem, void *unk)
    305          {
   \                     rb_menu_iconhndl:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    306            TTime t;
    307            TDate d;
    308            GetDateTime(&d,&t);
    309            sprintf(&hdr2,"Меню  %02d:%02d",t.hour,t.min);
   \   00000004   ........           LDR      R6,??DataTable8  ;; hdr2
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   08008DE2           ADD      R0,SP,#+8
   \   0000001C   B40000EF           SWI      +180
   \   00000020   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000024   0020DDE5           LDRB     R2,[SP, #+0]
   \   00000028   ........           LDR      R1,??DataTable10  ;; `?<Constant "\\314\\345\\355\\376  %02d:%02d">`
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   160000EF           SWI      +22
    310            strncpy(hdr,&hdr2,63);
   \   00000034   ........           LDR      R0,??DataTable11  ;; hdr
   \   00000038   3F20A0E3           MOV      R2,#+63
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   160100EF           SWI      +278
    311          //  count_uptime();
    312            
    313            WSHDR *ws;
    314            WSHDR *ws2;
    315            void *item=AllocMLMenuItem(data);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   190200EF           SWI      +537
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   7C009FE5           LDR      R0,??rb_menu_iconhndl_0+0x8  ;; menutexts
   \   00000054   057190E7           LDR      R7,[R0, +R5, LSL #+2]
   \   00000058   0700A0E1           MOV      R0,R7
    316            ws=AllocMenuWS(data,strlen(menutexts[curitem]));
   \   0000005C   1B0000EF           SWI      +27
   \   00000060   0010A0E1           MOV      R1,R0
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   980100EF           SWI      +408
   \   0000006C   0080A0E1           MOV      R8,R0
    317            ws2=AllocMenuWS(data,strlen(menutexts[curitem]));
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   1B0000EF           SWI      +27
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   980100EF           SWI      +408
   \   00000084   0090A0E1           MOV      R9,R0
    318            wsprintf(ws, "%t", menutexts[curitem]);
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   0E1F8FE2           ADR      R1,??rb_menu_iconhndl_0  ;; "%t"
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   240100EF           SWI      +292
    319            wsprintf(ws2, "%s", resstr);
   \   00000098   ........           LDR      R0,??DataTable9  ;; resstr
   \   0000009C   0B1F8FE2           ADR      R1,??rb_menu_iconhndl_0+0x4  ;; "%s"
   \   000000A0   0020D0E5           LDRB     R2,[R0, #+0]
   \   000000A4   0900A0E1           MOV      R0,R9
   \   000000A8   240100EF           SWI      +292
    320          
    321            SetMLMenuItemText(data, item, ws, ws2, curitem);
   \   000000AC   20002DE9           PUSH     {R5}
   \   000000B0   0930A0E1           MOV      R3,R9
   \   000000B4   0820A0E1           MOV      R2,R8
   \   000000B8   0610A0E1           MOV      R1,R6
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   180200EF           SWI      +536
    322          }
   \   000000C4   14D08DE2           ADD      SP,SP,#+20
   \   000000C8   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??rb_menu_iconhndl_0:
   \   000000CC   25740000           DC8      "%t",+0
   \   000000D0   25730000           DC8      "%s",+0
   \   000000D4   ........           DC32     menutexts
    323          

   \                                 In segment DATA_C, align 4, align-sorted
    324          static const ML_MENU_DESC rb_menu=
   \                     rb_menu:
   \   00000000   08000000....       DC32 8, rb_menu_onkey, rb_menu_ghook, 0H, menusoftkeys, menu_skt, 16
   \              ............
   \              00000000....
   \              ............
   \              10000000    
   \   0000001C   ........0000       DC32 rb_menu_iconhndl, 0H, 0H, 4, 1
   \              000000000000
   \              040000000100
   \              0000        
    325          {
    326            8,rb_menu_onkey,rb_menu_ghook,NULL,
    327            menusoftkeys,
    328            &menu_skt,
    329            0x10,
    330            rb_menu_iconhndl,
    331            NULL,   //Items
    332            NULL,   //Procs
    333            MENU_ITEMS_NUM,   //n
    334            1 //Добавочных строк  
    335          };
    336          

   \                                 In segment CODE, align 4, keep-with-next
    337          void CreateRBMenu(void)
    338          {
   \                     CreateRBMenu:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    339            patch_header(&rb_menuhdr);
                   ^
Warning[Pe223]: function "patch_header" declared implicitly
   \   00000004   74409FE5           LDR      R4,??CreateRBMenu_0+0x4  ;; rb_menuhdr
    340            sprintf(&resstr,"");;
    341            TTime t;
    342            TDate d;
    343            GetDateTime(&d,&t);
    344            sprintf(&hdr2,"Меню  %02d:%02d",t.hour,t.min);
   \   00000008   ........           LDR      R5,??DataTable8  ;; hdr2
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     patch_header,??patch_header??rA
   \   00000018   ........           LDR      R0,??DataTable9  ;; resstr
   \   0000001C   161F8FE2           ADR      R1,??CreateRBMenu_0  ;; ""
   \   00000020   160000EF           SWI      +22
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   08008DE2           ADD      R0,SP,#+8
   \   0000002C   B40000EF           SWI      +180
   \   00000030   0020DDE5           LDRB     R2,[SP, #+0]
   \   00000034   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000038   ........           LDR      R1,??DataTable10  ;; `?<Constant "\\314\\345\\355\\376  %02d:%02d">`
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   160000EF           SWI      +22
    345            strncpy(hdr,&hdr2,63);
   \   00000044   ........           LDR      R0,??DataTable11  ;; hdr
   \   00000048   3F20A0E3           MOV      R2,#+63
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   160100EF           SWI      +278
    346            CreateMultiLinesMenu(0,0,&rb_menu,&rb_menuhdr,0,MENU_ITEMS_NUM);
   \   00000054   28209FE5           LDR      R2,??CreateRBMenu_0+0x8  ;; rb_menu
   \   00000058   0400A0E3           MOV      R0,#+4
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   0430A0E1           MOV      R3,R4
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   170200EF           SWI      +535
    347          }
   \   00000074   18D08DE2           ADD      SP,SP,#+24
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CreateRBMenu_0:
   \   0000007C   00000000           DC8      "",+0,+0,+0
   \   00000080   ........           DC32     rb_menuhdr
   \   00000084   ........           DC32     rb_menu

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     hdr2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     resstr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     `?<Constant "\\314\\345\\355\\376  %02d:%02d">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     hdr

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menuprocs>`:
   \   00000000   ............       DC32 mp1, mp2, mp3, mp4
   \              ............
   \              ........    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\302\\373\\352\\353\\376\\367\\350\\362\\3`:
   \   00000000   C2FBEAEBFEF7       DC8 "\302\373\352\353\376\367\350\362\374"
   \              E8F2FC00    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\345\\360\\345\\347\\340\\343\\360\\3`:
   \   00000000   CFE5F0E5E7E0       DC8 "\317\345\360\345\347\340\343\360\363\347\350\362\374"
   \              E3F0F3E7E8F2
   \              FC00        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\307\\340\\341\\353\\356\\352\\350\\360\\3`:
   \   00000000   C7E0E1EBEEEA       DC8 "\307\340\341\353\356\352\350\360\356\342\340\362\374 \352\353\340\342\350\340\362\363\360\363"
   \              E8F0EEE2E0F2
   \              FC20EAEBE0E2
   \              E8E0F2F3F0F3
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\302\\373\\352\\353\\376\\367\\350\\362\\3_1`:
   \   00000000   C2FBEAEBFEF7       DC8 "\302\373\352\353\376\367\350\362\374 \362\345\353\345\364\356\355 \350 \342\361\345 \361\350\343\355\340\353\373"
   \              E8F2FC20F2E5
   \              EBE5F4EEED20
   \              E820E2F1E520
   \              F1E8E3EDE0EB
   \              FB00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`:
   \   00000000   C2FBE1F0E0F2       DC8 "\302\373\341\360\340\362\374"
   \              FC00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`:
   \   00000000   C7E0EAF0FBF2       DC8 "\307\340\352\360\373\362\374"
   \              FC00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Uptime %02i:%02i">`:
   \   00000000   557074696D65       DC8 "Uptime %02i:%02i"
   \              20253032693A
   \              2530326900  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Uptime %i Days, %02i:...">`:
   \   00000000   557074696D65       DC8 "Uptime %i Days, %02i:%02i"
   \              202569204461
   \              79732C202530
   \              32693A253032
   \              6900        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\314\\345\\355\\376  %02d:%02d">`:
   \   00000000   CCE5EDFE2020       DC8 "\314\345\355\376  %02d:%02d"
   \              253032643A25
   \              30326400    

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     CreateRBMenu        36
     count_uptime        12
     mp1                  4
     mp2                  4
     mp3                  4
     mp4                  4
     rb_menu_ghook        4
     rb_menu_iconhndl    48
     rb_menu_onkey       32


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     date                              8
     time                              8
     sh                                4
     sm                                4
     ss                                4
     sd                                4
     nh                                4
     nm                                4
     ns                                4
     nd                                4
     resstr                            1
     count_uptime                    264
     hdr                              64
     hdr2                              1
     rb_menuhdr                       20
     mp1                              20
     mp2                              20
     mp3                              20
     mp4                              24
     menutexts                        16
     menuprocs                        16
     menusoftkeys                     12
     menu_sk                          24
     menu_skt                          8
     rb_menu_onkey                   120
     rb_menu_ghook                    20
     rb_menu_iconhndl                216
     rb_menu                          48
     CreateRBMenu                    136
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ?<Initializer for menuprocs>     16
     ?<Constant "\302\373\352\353\376\367\350\362\3
                                      12
     ?<Constant "\317\345\360\345\347\340\343\360\3
                                      16
     ?<Constant "\307\340\341\353\356\352\350\360\3
                                      28
     ?<Constant "\302\373\352\353\376\367\350\362\3_1
                                      32
     ?<Constant "\302\373\341\360\340\362\374">
                                       8
     ?<Constant "\307\340\352\360\373\362\374">
                                       8
     ?<Constant "Uptime %02i:%02i">   20
     ?<Constant "Uptime %i Days, %02i:...">
                                      28
     ?<Constant "\314\345\355\376  %02d:%02d">
                                      16
     ?<Constant "%t">                  3
     ?<Constant "%s">                  3
     ?<Constant "">                    1
      Others                          72

 
 904 bytes in segment CODE
 303 bytes in segment DATA_C
  16 bytes in segment DATA_I
  16 bytes in segment DATA_ID
 114 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 856 bytes of CODE  memory (+ 72 bytes shared)
 319 bytes of CONST memory
 130 bytes of DATA  memory

Errors: none
Warnings: 1

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Aug/2009  10:53:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\nsd\main.c                                    #
#    Command line    =  C:\arm\nsd\main.c -D NEWSGOLD -D ELKA -lC            #
#                       C:\arm\nsd\Release\List\ -o C:\arm\nsd\Release\Obj\  #
#                       -s9 --no_unroll --no_clustering --cpu_mode arm       #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I "C:\arm2\Embedded       #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\nsd\Release\List\main.lst                     #
#    Object file     =  C:\arm\nsd\Release\Obj\main.r79                      #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\nsd\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"
      3          #include "main.h"

   \                                 In segment DATA_C, align 4, align-sorted
      4          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
      5          
      6          typedef struct
      7          {
      8            CSM_RAM csm;
      9          }MAIN_CSM;
     10          typedef struct
     11          {
     12            GUI gui;
     13            WSHDR *ws1;
     14            WSHDR *ws2;
     15            int i1;
     16          }MAIN_GUI;
     17          

   \                                 In segment DATA_Z, align 4, align-sorted
     18          CSM_RAM *under_idle;
   \                     under_idle:
   \   00000000                      DS8 4
     19          
     20          #include "loading.c"

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data path[64]
   \                     path:
   \   00000000                      DS8 64

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data name[32]
   \                     name:
   \   00000000                      DS8 32

   \                                 In segment DATA_Z, align 4, align-sorted
   \   GBSTMR __data tmr
   \                     tmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_I, align 4, align-sorted
   \   int __data color_frame[7]
   \                     color_frame:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for color_frame>`

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int DRE(int, int)
   \                     DRE:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
   \   0000000C   2E0100EF           SWI      +302
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   1600A0E3           MOV      R0,#+22
   \   00000018   2E0100EF           SWI      +302
   \   0000001C   20002DE9           PUSH     {R5}
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   503FA0E3           MOV      R3,#+320
   \   00000028   0A2084E2           ADD      R2,R4,#+10
   \   0000002C   DC10A0E3           MOV      R1,#+220
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   B40100EF           SWI      +436
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   3E80BDE8           POP      {R1-R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void bar()
   \                     bar:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   5C409FE5           LDR      R4,??bar_0       ;; color_frame
   \   00000008   3F0100EF           SWI      +319
   \   0000000C   58209FE5           LDR      R2,??bar_0+0x4   ;; bar
   \   00000010   ........           LDR      R0,??DataTable1  ;; tmr
   \   00000014   9610A0E3           MOV      R1,#+150
   \   00000018   4D0000EF           SWI      +77
   \   0000001C   041094E5           LDR      R1,[R4, #+4]
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   ........           BL       DRE
   \   00000028   081094E5           LDR      R1,[R4, #+8]
   \   0000002C   0E00A0E3           MOV      R0,#+14
   \   00000030   ........           BL       DRE
   \   00000034   0C1094E5           LDR      R1,[R4, #+12]
   \   00000038   1A00A0E3           MOV      R0,#+26
   \   0000003C   ........           BL       DRE
   \   00000040   101094E5           LDR      R1,[R4, #+16]
   \   00000044   2600A0E3           MOV      R0,#+38
   \   00000048   ........           BL       DRE
   \   0000004C   141094E5           LDR      R1,[R4, #+20]
   \   00000050   3200A0E3           MOV      R0,#+50
   \   00000054   ........           BL       DRE
   \   00000058   181094E5           LDR      R1,[R4, #+24]
   \   0000005C   3E00A0E3           MOV      R0,#+62
   \   00000060   ........           BL       DRE
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??bar_0:
   \   00000068   ........           DC32     color_frame
   \   0000006C   ........           DC32     bar

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs void tmethod0(MAIN_GUI *)
   \                     tmethod0:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   3C509FE5           LDR      R5,??tmethod0_0  ;; path
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   34309FE5           LDR      R3,??tmethod0_0+0x4  ;; `?<Constant "img\\\\fon.png">`
   \   00000014   34209FE5           LDR      R2,??tmethod0_0+0x8  ;; folder
   \   00000018   34109FE5           LDR      R1,??tmethod0_0+0xC  ;; `?<Constant "%s%s">`
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   160000EF           SWI      +22
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   230000EF           SWI      +35
   \   00000038   ........           BL       bar
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   290100EF           SWI      +297
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??tmethod0_0:
   \   00000048   ........           DC32     path
   \   0000004C   ........           DC32     `?<Constant "img\\\\fon.png">`
   \   00000050   ........           DC32     folder
   \   00000054   ........           DC32     `?<Constant "%s%s">`

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs void tmethod1(MAIN_GUI *, void *(*)(int))
   \                     tmethod1:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs void tmethod2(MAIN_GUI *, void (*)(void *))
   \                     tmethod2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable1  ;; tmr
   \   0000000C   8C0100EF           SWI      +396
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs void tmethod3(MAIN_GUI *, void *(*)(int), void (*)(void *))
   \                     tmethod3:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   7F0100EF           SWI      +383
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs void tmethod4(MAIN_GUI *, void (*)(void *))
   \                     tmethod4:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int tmethod5(MAIN_GUI *, GUI_MSG *)
   \                     tmethod5:
   \   00000000   040091E5           LDR      R0,[R1, #+4]
   \   00000004   9320A0E3           MOV      R2,#+147
   \   00000008   041090E5           LDR      R1,[R0, #+4]
   \   0000000C   402F82E3           ORR      R2,R2,#0x100
   \   00000010   020051E1           CMP      R1,R2
   \   00000014   0600001A           BNE      ??tmethod5_0
   \   00000018   080090E5           LDR      R0,[R0, #+8]
   \   0000001C   040050E2           SUBS     R0,R0,#+4
   \   00000020   08005012           SUBSNE   R0,R0,#+8
   \   00000024   0E005012           SUBSNE   R0,R0,#+14
   \   00000028   1B005012           SUBSNE   R0,R0,#+27
   \   0000002C   0100A003           MOVEQ    R0,#+1
   \   00000030   1EFF2F01           BXEQ     LR
   \                     ??tmethod5_0:
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int tmethod8(void)
   \                     tmethod8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int tmethod9(void)
   \                     tmethod9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   \   static void const *const __data gui_tmethods[11]
   \                     gui_tmethods:
   \   00000000   ............       DC32 tmethod0, tmethod1, tmethod2, tmethod3, tmethod4, tmethod5, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, tmethod8, tmethod9, 0H
   \              ............
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   RECT const __data Canvt
   \                     Canvt:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int load()
   \                     load:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   4000A0E3           MOV      R0,#+64
   \   00000008   140000EF           SWI      +20
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   4010A0E3           MOV      R1,#+64
   \   00000014   1D0100EF           SWI      +285
   \   00000018   24009FE5           LDR      R0,??load_0      ;; Canvt
   \   0000001C   000084E5           STR      R0,[R4, #+0]
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   300084E5           STR      R0,[R4, #+48]
   \   00000028   18009FE5           LDR      R0,??load_0+0x4  ;; gui_tmethods
   \   0000002C   040084E5           STR      R0,[R4, #+4]
   \   00000030   158000EF           SWI      +32789
   \   00000034   200084E5           STR      R0,[R4, #+32]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   370100EF           SWI      +311
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??load_0:
   \   00000044   ........           DC32     Canvt
   \   00000048   ........           DC32     gui_tmethods
     21          extern void kill_data(void *p, void (*func_p)(void *));
     22          
     23          #pragma inline=forced
     24          
     25          int toupper(int c)
     26          {
     27            if ((c>='a')&&(c<='z')) c+='A'-'a';
     28            return(c);
     29          }
     30          

   \                                 In segment CODE, align 4, keep-with-next
     31          int strcmp_nocase(const char *s1,const char *s2)
     32          {
     33            int i;
     34            int c;
     35            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
     36            return(i);
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return
     37          }
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
     40          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
     41            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   AF20A0E3           MOV      R2,#+175
   \   0000000C   DE2C82E3           ORR      R2,R2,#0xDE00
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0900001A           BNE      ??maincsm_onmessage_0
     42            {
     43              extern const char *successed_config_filename;
     44              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000018   28009FE5           LDR      R0,??maincsm_onmessage_1  ;; successed_config_filename
   \   0000001C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   ........           BL       strcmp_nocase
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0300001A           BNE      ??maincsm_onmessage_0
     45              {
     46                ShowMSG(1,(int)"Win SieP1 config updated!");
   \   00000030   14109FE5           LDR      R1,??maincsm_onmessage_1+0x4  ;; `?<Constant "Win SieP1 config upda...">`
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   480100EF           SWI      +328
     47                InitConfig();
   \   0000003C   ........           _BLF     InitConfig,??InitConfig??rA
     48              }
     49            }
     50            return (1);  
   \                     ??maincsm_onmessage_0:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onmessage_1:
   \   00000048   ........           DC32     successed_config_filename
   \   0000004C   ........           DC32     `?<Constant "Win SieP1 config upda...">`
     51          }
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          static void maincsm_oncreate(CSM_RAM *data)
     54          {
     55            load();
   \                     maincsm_oncreate:
   \   00000000   ........           B        load             ;; tailcall
     56          }
     57          

   \                                 In segment CODE, align 4, keep-with-next
     58          static void Killer(void)
     59          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
     60            extern void *ELF_BEGIN;
     61            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
     62          }
     63          

   \                                 In segment CODE, align 4, keep-with-next
     64          static void maincsm_onclose(CSM_RAM *csm)
     65          {
     66            SUBPROC((void *)Killer);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
     67          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     Killer
     68          

   \                                 In segment DATA_Z, align 4, align-sorted
     69          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
     70          
     71          static const struct
     72          {
     73            CSM_DESC maincsm;
     74            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
     75          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
     76          {
     77            {
     78            maincsm_onmessage,
     79            maincsm_oncreate,
     80          #ifdef NEWSGOLD
     81            0,
     82            0,
     83            0,
     84            0,
     85          #endif
     86            maincsm_onclose,
     87            sizeof(MAIN_CSM),
     88            1,
     89            &minus11
     90            },
     91            {
     92              maincsm_name_body,
     93              NAMECSM_MAGIC1,
     94              NAMECSM_MAGIC2,
     95              0x0,
     96              139
     97            }
     98          };
     99          
    100          static void UpdateCSMname(void)
    101          {
    102            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Win SieP1");
    103          }
    104          

   \                                 In segment CODE, align 4, keep-with-next
    105          int main()
    106          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    107            InitConfig();
    108            CSM_RAM *save_cmpc;
    109            char dummy[sizeof(MAIN_CSM)];
    110            UpdateCSMname();  
   \   00000004   68409FE5           LDR      R4,??main_0      ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   60109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "Win SieP1">`
   \   00000014   280084E2           ADD      R0,R4,#+40
   \   00000018   240100EF           SWI      +292
    111            LockSched();
   \   0000001C   460100EF           SWI      +326
    112            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    113            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    114            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   070100EF           SWI      +263
    115            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000058   068100EF           SWI      +33030
   \   0000005C   080090E5           LDR      R0,[R0, #+8]
   \   00000060   045080E5           STR      R5,[R0, #+4]
    116            UnlockSched();
   \   00000064   470100EF           SWI      +327
    117            return 0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   28D08DE2           ADD      SP,SP,#+40
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   00000074   ........           DC32     MAINCSM
   \   00000078   ........           DC32     `?<Constant "Win SieP1">`
    118          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     tmr

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for color_frame>`:
   \   00000000   170000001700       DC32 23, 23, 23, 23, 23, 23, 23
   \              000017000000
   \              170000001700
   \              000017000000
   \              17000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s">`:
   \   00000000   2573257300         DC8 "%s%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "img\\\\fon.png">`:
   \   00000000   696D675C666F       DC8 "img\\fon.png"
   \              6E2E706E6700

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Win SieP1 config upda...">`:
   \   00000000   57696E205369       DC8 "Win SieP1 config updated!"
   \              65503120636F
   \              6E6669672075
   \              706461746564
   \              2100        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Win SieP1">`:
   \   00000000   57696E205369       DC8 "Win SieP1"
   \              65503100    
   \   0000000A   0000               DC8 0, 0
    119          
    120          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     DRE                  24
     Killer                4
     bar                   8
     load                  8
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      4
     maincsm_onmessage     4
     strcmp_nocase         0
     tmethod0             12
     tmethod1              0
     tmethod2              8
     tmethod3              8
     tmethod4              0
     tmethod5              0
     tmethod8              0
     tmethod9              0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     under_idle                        4
     path                             64
     name                             32
     tmr                              16
     color_frame                      28
     DRE                              72
     bar                             112
     tmethod0                         88
     tmethod1                         12
     tmethod2                         28
     tmethod3                         24
     tmethod4                         20
     tmethod5                         60
     tmethod8                          8
     tmethod9                          8
     gui_tmethods                     44
     Canvt                             8
     load                             76
     ??strcmp_nocase_0                76
     maincsm_onmessage                80
     maincsm_oncreate                  4
     Killer                           28
     maincsm_onclose                  20
     maincsm_name_body               280
     MAINCSM                          60
     main                            124
     ??DataTable1                      4
     ?<Initializer for color_frame>   28
     ?<Constant "%s%s">                8
     ?<Constant "img\\fon.png">       12
     ?<Constant "Win SieP1 config upda...">
                                      28
     ?<Constant "Win SieP1">          12
      Others                         116

 
 936 bytes in segment CODE
 176 bytes in segment DATA_C
  28 bytes in segment DATA_I
  28 bytes in segment DATA_ID
 396 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 844 bytes of CODE  memory (+ 116 bytes shared)
 204 bytes of CONST memory
 424 bytes of DATA  memory

Errors: none
Warnings: none

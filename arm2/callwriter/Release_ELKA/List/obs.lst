##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Dec/2010  16:14:23 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\callwriter\obs\obs.c                          #
#    Command line    =  C:\arm\callwriter\obs\obs.c -D NEWSGOLD -D ELKA -lC  #
#                       C:\arm\callwriter\Release_ELKA\List\ -o              #
#                       C:\arm\callwriter\Release_ELKA\Obj\ -s9 --no_unroll  #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\callwriter\Release_ELKA\List\obs.lst          #
#    Object file     =  C:\arm\callwriter\Release_ELKA\Obj\obs.r79           #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\callwriter\obs\obs.c
      1          #include "C:\arm\inc\swilib.h"
      2          #include "obs.h"

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data object
   \                     object:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data action
   \                     action:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data MSG_Report
   \                     MSG_Report:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data mode
   \                     mode:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data bit
   \                     bit:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data RecordName[256]
   \                     RecordName:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \   FSTATS __data fs
   \                     fs:
   \   00000000                      DS8 40
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          int Obs_CreateAmrFile(char *fname)
      5          {
      6            int uid=0;
      7            strcpy(RecordName,folder);
   \                     Obs_CreateAmrFile:
   \   00000000   F4119FE5           LDR      R1,??Obs_CreateAmrFile_0+0x4  ;; folder
   \   00000004   F0412DE9           PUSH     {R4-R8,LR}
   \   00000008   ........           LDR      R7,??DataTable14  ;; RecordName
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   0700A0E1           MOV      R0,R7
   \   00000014   1A0000EF           SWI      +26
      8            WSHDR *ws=AllocWS(256);
   \   00000018   400FA0E3           MOV      R0,#+256
   \   0000001C   250100EF           SWI      +293
   \   00000020   0040A0E1           MOV      R4,R0
      9            wsprintf(ws,"amr");
   \   00000024   731F8FE2           ADR      R1,??Obs_CreateAmrFile_0  ;; "amr"
   \   00000028   240100EF           SWI      +292
     10            uid=GetExtUid_ws(ws);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   D00100EF           SWI      +464
     11            strcat(RecordName,fname);
   \   00000034   0610A0E1           MOV      R1,R6
     12            if(object!=NULL)object=0;
   \   00000038   ........           LDR      R6,??DataTable12  ;; object
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   170000EF           SWI      +23
   \   00000048   000096E5           LDR      R0,[R6, #+0]
   \   0000004C   0080A0E3           MOV      R8,#+0
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   00808615           STRNE    R8,[R6, #+0]
     13            object=Obs_CreateObject(0x34,uid,2,MSG_Report,1,0,0);
   \   00000058   0000A013           MOVNE    R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   0220A0E3           MOV      R2,#+2
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   80019FE5           LDR      R0,??Obs_CreateAmrFile_0+0x8  ;; MSG_Report
   \   0000007C   003090E5           LDR      R3,[R0, #+0]
   \   00000080   3400A0E3           MOV      R0,#+52
   \   00000084   590200EF           SWI      +601
   \   00000088   000086E5           STR      R0,[R6, #+0]
     14            str_2ws(ws,RecordName,255);
   \   0000008C   FF20A0E3           MOV      R2,#+255
   \   00000090   0710A0E1           MOV      R1,R7
     15            Obs_SetOutput_File(object,ws);
     16            
     17            
     18            
     19            Obs_Sound_SetMaxFileSize(object,size*1024);
     20             switch(amrmode)
   \   00000094   68719FE5           LDR      R7,??Obs_CreateAmrFile_0+0xC  ;; mode
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   6C0100EF           SWI      +364
   \   000000A0   000096E5           LDR      R0,[R6, #+0]
   \   000000A4   0410A0E1           MOV      R1,R4
   \   000000A8   760200EF           SWI      +630
   \   000000AC   ........           LDR      R0,??DataTable15  ;; size
   \   000000B0   000090E5           LDR      R0,[R0, #+0]
   \   000000B4   0015A0E1           LSL      R1,R0,#+10
   \   000000B8   000096E5           LDR      R0,[R6, #+0]
   \   000000BC   740200EF           SWI      +628
   \   000000C0   40019FE5           LDR      R0,??Obs_CreateAmrFile_0+0x10  ;; amrmode
   \   000000C4   000090E5           LDR      R0,[R0, #+0]
   \   000000C8   0CD08DE2           ADD      SP,SP,#+12
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0400000A           BEQ      ??Obs_CreateAmrFile_1
   \   000000D4   010050E2           SUBS     R0,R0,#+1
   \   000000D8   0700000A           BEQ      ??Obs_CreateAmrFile_2
   \   000000DC   010050E2           SUBS     R0,R0,#+1
   \   000000E0   0A00000A           BEQ      ??Obs_CreateAmrFile_3
   \   000000E4   0E0000EA           B        ??Obs_CreateAmrFile_4
     21            {
     22            case 0:Obs_Sound_SetAMRMode(object,LOW_MODE);mode=LOW_MODE;break;
   \                     ??Obs_CreateAmrFile_1:
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   0010A0E3           MOV      R1,#+0
   \   000000F0   720200EF           SWI      +626
   \   000000F4   008087E5           STR      R8,[R7, #+0]
   \   000000F8   090000EA           B        ??Obs_CreateAmrFile_4
     23            case 1:Obs_Sound_SetAMRMode(object,NORMAL_MODE);mode=NORMAL_MODE;break;
   \                     ??Obs_CreateAmrFile_2:
   \   000000FC   000096E5           LDR      R0,[R6, #+0]
   \   00000100   0410A0E3           MOV      R1,#+4
   \   00000104   720200EF           SWI      +626
   \   00000108   0400A0E3           MOV      R0,#+4
   \   0000010C   030000EA           B        ??Obs_CreateAmrFile_5
     24            case 2:Obs_Sound_SetAMRMode(object,HIGHT_MODE);mode=HIGHT_MODE;break;
   \                     ??Obs_CreateAmrFile_3:
   \   00000110   000096E5           LDR      R0,[R6, #+0]
   \   00000114   0710A0E3           MOV      R1,#+7
   \   00000118   720200EF           SWI      +626
   \   0000011C   0700A0E3           MOV      R0,#+7
   \                     ??Obs_CreateAmrFile_5:
   \   00000120   000087E5           STR      R0,[R7, #+0]
     25            }
     26            
     27            switch(bitrate)
   \                     ??Obs_CreateAmrFile_4:
   \   00000124   E0109FE5           LDR      R1,??Obs_CreateAmrFile_0+0x14  ;; bitrate
   \   00000128   000096E5           LDR      R0,[R6, #+0]
   \   0000012C   001091E5           LDR      R1,[R1, #+0]
   \   00000130   D8709FE5           LDR      R7,??Obs_CreateAmrFile_0+0x18  ;; bit
   \   00000134   000051E3           CMP      R1,#+0
   \   00000138   0400000A           BEQ      ??Obs_CreateAmrFile_6
   \   0000013C   011051E2           SUBS     R1,R1,#+1
   \   00000140   0500000A           BEQ      ??Obs_CreateAmrFile_7
   \   00000144   011051E2           SUBS     R1,R1,#+1
   \   00000148   0600000A           BEQ      ??Obs_CreateAmrFile_8
   \   0000014C   0A0000EA           B        ??Obs_CreateAmrFile_9
     28            {
     29            case 0:Obs_Sound_SetBitrate(object,LOW_BITRATE);bit=LOW_BITRATE;break;
   \                     ??Obs_CreateAmrFile_6:
   \   00000150   8E80A0E3           MOV      R8,#+142
   \   00000154   488D88E3           ORR      R8,R8,#0x1200
   \   00000158   040000EA           B        ??Obs_CreateAmrFile_10
     30            case 1:Obs_Sound_SetBitrate(object,NORMAL_BITRATE);bit=NORMAL_BITRATE;break;
   \                     ??Obs_CreateAmrFile_7:
   \   0000015C   E880A0E3           MOV      R8,#+232
   \   00000160   708D88E3           ORR      R8,R8,#0x1C00
   \   00000164   010000EA           B        ??Obs_CreateAmrFile_10
     31            case 2:Obs_Sound_SetBitrate(object,HIGHT_BITRATE);bit=HIGHT_BITRATE;break;
   \                     ??Obs_CreateAmrFile_8:
   \   00000168   A880A0E3           MOV      R8,#+168
   \   0000016C   BC8D88E3           ORR      R8,R8,#0x2F00
   \                     ??Obs_CreateAmrFile_10:
   \   00000170   0810A0E1           MOV      R1,R8
   \   00000174   780200EF           SWI      +632
   \   00000178   008087E5           STR      R8,[R7, #+0]
     32            }
     33            
     34            Obs_Sound_SetRecordingMode(object,NULL);
   \                     ??Obs_CreateAmrFile_9:
   \   0000017C   000096E5           LDR      R0,[R6, #+0]
   \   00000180   0010A0E3           MOV      R1,#+0
   \   00000184   750200EF           SWI      +629
     35            
     36            Obs_Sound_SetFIsRecording(object,1);
   \   00000188   000096E5           LDR      R0,[R6, #+0]
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   730200EF           SWI      +627
     37            
     38            Obs_Sound_SetNofChannels(object,1);
   \   00000194   000096E5           LDR      R0,[R6, #+0]
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   710200EF           SWI      +625
     39            
     40            Obs_Sound_SetAMRFormat(object,NULL);
   \   000001A0   000096E5           LDR      R0,[R6, #+0]
   \   000001A4   0010A0E3           MOV      R1,#+0
   \   000001A8   6F0200EF           SWI      +623
     41            
     42            Obs_Sound_SetAMRDTX(object,NULL);
   \   000001AC   000096E5           LDR      R0,[R6, #+0]
   \   000001B0   0010A0E3           MOV      R1,#+0
   \   000001B4   700200EF           SWI      +624
     43            
     44            Obs_Sound_SetAMRFrmPrBuf(object,0xA0);
   \   000001B8   000096E5           LDR      R0,[R6, #+0]
   \   000001BC   A010A0E3           MOV      R1,#+160
   \   000001C0   6E0200EF           SWI      +622
     45            
     46            Obs_SetOutput_Uid(object,uid);
   \   000001C4   000096E5           LDR      R0,[R6, #+0]
   \   000001C8   0510A0E1           MOV      R1,R5
   \   000001CC   770200EF           SWI      +631
     47            
     48            Obs_Mam_SetPurpose(object,0xB);
   \   000001D0   000096E5           LDR      R0,[R6, #+0]
   \   000001D4   0B10A0E3           MOV      R1,#+11
   \   000001D8   6B0200EF           SWI      +619
     49          
     50            FreeWS(ws);
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   290100EF           SWI      +297
     51            action=AMR_CREATED;
   \   000001E4   ........           LDR      R0,??DataTable13  ;; action
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   001080E5           STR      R1,[R0, #+0]
     52            return AMR_OK;
   \   000001F0   0100A0E3           MOV      R0,#+1
   \   000001F4   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??Obs_CreateAmrFile_0:
   \   000001F8   616D7200           DC8      "amr"
   \   000001FC   ........           DC32     folder
   \   00000200   ........           DC32     MSG_Report
   \   00000204   ........           DC32     mode
   \   00000208   ........           DC32     amrmode
   \   0000020C   ........           DC32     bitrate
   \   00000210   ........           DC32     bit
     53          }
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          int Obs_StopAmrWrite()
     56          {
     57            Obs_Stop(object);
   \                     Obs_StopAmrWrite:
   \   00000000   ........           LDR      R0,??DataTable12  ;; object
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   670200EF           SWI      +615
     58            action=AMR_STOP;
   \   00000010   ........           LDR      R0,??DataTable13  ;; action
   \   00000014   0310A0E3           MOV      R1,#+3
   \   00000018   001080E5           STR      R1,[R0, #+0]
     59            Obs_DeleteObj();
   \   0000001C   ........           BL       Obs_DeleteObj
     60            return AMR_OK;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0080BDE8           POP      {PC}             ;; return
     61          }
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          int Obs_StartAmrWrite()
     64          {
     65            Obs_Start(object);
   \                     Obs_StartAmrWrite:
   \   00000000   ........           LDR      R0,??DataTable12  ;; object
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   5E0200EF           SWI      +606
     66            action=AMR_WRITE;
   \   00000010   ........           LDR      R0,??DataTable13  ;; action
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   001080E5           STR      R1,[R0, #+0]
     67            return AMR_OK;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0080BDE8           POP      {PC}             ;; return
     68          }
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          int Obs_DeleteObj()
     71          {
     72            Obs_DestroyObject(object);
   \                     Obs_DeleteObj:
   \   00000000   ........           LDR      R0,??DataTable12  ;; object
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   5A0200EF           SWI      +602
     73            action=AMR_NOT_CREATED;
   \   00000010   ........           LDR      R0,??DataTable13  ;; action
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   001080E5           STR      R1,[R0, #+0]
     74            return AMR_OK;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0080BDE8           POP      {PC}             ;; return
     75          }
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          int Obs_PauseAmrWrite()
     78          {
     79            Obs_Pause(object);
   \                     Obs_PauseAmrWrite:
   \   00000000   ........           LDR      R0,??DataTable12  ;; object
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   650200EF           SWI      +613
     80            action=AMR_PAUSE;
   \   00000010   ........           LDR      R0,??DataTable13  ;; action
   \   00000014   0410A0E3           MOV      R1,#+4
   \   00000018   001080E5           STR      R1,[R0, #+0]
     81            return AMR_OK;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0080BDE8           POP      {PC}             ;; return
     82          }
     83          

   \                                 In segment CODE, align 4, keep-with-next
     84          int Obs_ResumeAmrWrite()
     85          {
     86            Obs_Resume(object);
   \                     Obs_ResumeAmrWrite:
   \   00000000   ........           LDR      R0,??DataTable12  ;; object
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   660200EF           SWI      +614
     87            action=AMR_WRITE;
   \   00000010   ........           LDR      R0,??DataTable13  ;; action
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   001080E5           STR      R1,[R0, #+0]
     88            return AMR_OK;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0080BDE8           POP      {PC}             ;; return
     89          }
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          unsigned int Obs_GetRealSize()
     92          {
     93            GetFileStats(RecordName,&fs,0);
   \                     Obs_GetRealSize:
   \   00000000   ........           LDR      R0,??DataTable14  ;; RecordName
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   10409FE5           LDR      R4,??Obs_GetRealSize_0  ;; fs
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   840000EF           SWI      +132
     94            return fs.size;
   \   00000018   040094E5           LDR      R0,[R4, #+4]
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??Obs_GetRealSize_0:
   \   00000020   ........           DC32     fs
     95          }
     96          
     97          

   \                                 In segment CODE, align 4, keep-with-next
     98          double Obs_Percente()
     99          {
   \                     Obs_Percente:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    100            return (double)Obs_GetRealSize()/((double)size*(double)1024);
   \   00000004   ........           BL       Obs_GetRealSize
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   ........           LDR      R0,??DataTable15  ;; size
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   4034A0E3           MOV      R3,#+1073741824
   \   00000020   903883E3           ORR      R3,R3,#0x900000
   \   00000024   ........           _BLF     __dMul,??__dMul??rA
   \   00000028   0040A0E1           MOV      R4,R0
   \   0000002C   0150A0E1           MOV      R5,R1
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           _BLF     __ulongToDouble,??__ulongToDouble??rA
   \   00000038   0420A0E1           MOV      R2,R4
   \   0000003C   0530A0E1           MOV      R3,R5
   \   00000040   7040BDE8           POP      {R4-R6,LR}       ;; Pop
   \   00000044   ........           _BF      __dDiv,??__dDiv??rA  ;; tailcall
    101          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     object

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     action

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     RecordName

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     size

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   616D7200           DC8 "amr"

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     Obs_CreateAmrFile     36
     Obs_DeleteObj          4
     Obs_GetRealSize        8
     Obs_PauseAmrWrite      4
     Obs_Percente          16
     Obs_ResumeAmrWrite     4
     Obs_StartAmrWrite      4
     Obs_StopAmrWrite       4


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     object                4
     action                4
     MSG_Report            4
     mode                  4
     bit                   4
     RecordName          256
     fs                   40
     Obs_CreateAmrFile   532
     Obs_StopAmrWrite     40
     Obs_StartAmrWrite    36
     Obs_DeleteObj        36
     Obs_PauseAmrWrite    36
     Obs_ResumeAmrWrite   36
     Obs_GetRealSize      36
     Obs_Percente         72
     ??DataTable12         4
     ??DataTable13         4
     ??DataTable14         4
     ??DataTable15         4
     ?<Constant "amr">     4
      Others              92

 
 920 bytes in segment CODE
   4 bytes in segment DATA_C
 316 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 840 bytes of CODE  memory (+ 92 bytes shared)
   4 bytes of CONST memory
 316 bytes of DATA  memory

Errors: none
Warnings: none

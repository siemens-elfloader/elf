##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    30/Aug/2009  15:36:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\nsd\gui.c                                     #
#    Command line    =  C:\arm\nsd\gui.c -D NEWSGOLD -D ELKA -lC             #
#                       C:\arm\nsd\Release_ELKA\List\ -o                     #
#                       C:\arm\nsd\Release_ELKA\Obj\ -s9 --no_unroll         #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\nsd\Release_ELKA\List\gui.lst                 #
#    Object file     =  C:\arm\nsd\Release_ELKA\Obj\gui.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\nsd\gui.c
      1          #include "..\inc\swilib.h"
      2          
      3          #pragma inline
      4          void patch_header(const HEADER_DESC* head)
      5          {
      6            ((HEADER_DESC*)head)->rc.x=0;
      7            ((HEADER_DESC*)head)->rc.y=YDISP;
      8            ((HEADER_DESC*)head)->rc.x2=ScreenW()-1;
      9            ((HEADER_DESC*)head)->rc.y2=HeaderH()+YDISP-1;
     10          }
     11          
     12          //==============================================================================
     13          // Гуй
     14          //==============================================================================
     15          /*
     16          extern void kill_data(void *p, void (*func_p)(void *));
     17          
     18          const int minus11=-11;
     19          
     20          typedef struct
     21          {
     22            CSM_RAM csm;
     23            int gui_id;
     24          }MAIN_CSM;
     25          
     26          typedef struct
     27          {
     28            GUI gui;
     29            WSHDR *ws1;
     30            WSHDR *ws2;
     31            int i1;
     32          }MAIN_GUI;
     33          
     34          void method0(MAIN_GUI *data)
     35          {
     36            DrawRoundedFrame(0,0,ScreenH()-1,ScreenW()-1,0,0,0,
     37          			GetPaletteAdrByColorIndex(23),
     38          			GetPaletteAdrByColorIndex(23));
     39          }
     40          
     41          void method1(MAIN_GUI *data, void *(*malloc_adr)(int))
     42          {
     43            data->gui.state=1;
     44          }
     45          
     46          void method2(MAIN_GUI *data, void (*mfree_adr)(void *))
     47          {
     48            data->gui.state=0;
     49          }
     50          
     51          void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     52          {
     53            data->gui.state=2;
     54          }
     55          
     56          void method4(MAIN_GUI *data, void (*mfree_adr)(void *))
     57          {
     58            if (data->gui.state!=2) return;
     59            data->gui.state=1;
     60          }
     61          
     62          int method5(MAIN_GUI *data, GUI_MSG *msg)
     63          {
     64            DirectRedrawGUI();
     65            
     66            if (msg->gbsmsg->msg==KEY_DOWN)
     67            {
     68              switch(msg->gbsmsg->submess)
     69              {
     70              case RIGHT_SOFT:
     71                return(1); 
     72              }//Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
     73            }
     74            return(0);
     75          }
     76          
     77          void method7(MAIN_GUI *data, void (*mfree_adr)(void *))
     78          {
     79            kill_data(data, mfree_adr);
     80          }
     81          
     82          int method8(void){return(0);}
     83          
     84          int method9(void){return(0);}
     85          
     86          const void * const gui_methods[11]={
     87            (void *)method0,	//Redraw
     88            (void *)method1,	//Create
     89            (void *)method2,	//Close
     90            (void *)method3,	//Focus
     91            (void *)method4,	//Unfocus
     92            (void *)method5,	//OnKey
     93            0,
     94            (void *)method7,	//Destroy
     95            (void *)method8,
     96            (void *)method9,
     97            0
     98          };
     99          
    100          const RECT Canvas={0,0,131,175};
    101          
    102          void maincsm_oncreate(CSM_RAM *data)
    103          {
    104            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
    105            MAIN_CSM*csm=(MAIN_CSM*)data;
    106            zeromem(main_gui,sizeof(MAIN_GUI));
    107            main_gui->gui.canvas=(void *)(&Canvas);
    108            //main_gui->gui.flag30=2;
    109            main_gui->gui.methods=(void *)gui_methods;
    110            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
    111            csm->csm.state=0;
    112            csm->csm.unk1=0;
    113            csm->gui_id=CreateGUI(main_gui);
    114          }
    115          
    116          void ELF_KILLER(void)
    117          {
    118            extern void *ELF_BEGIN;
    119            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
    120          }
    121          
    122          void maincsm_onclose(CSM_RAM *csm)
    123          {
    124            //SUBPROC((void *)ELF_KILLER);
    125          }
    126          
    127          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    128          {
    129            MAIN_CSM *csm=(MAIN_CSM*)data;
    130            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
    131            {
    132              csm->csm.state=-3;
    133            }
    134            return(1);
    135          }
    136          
    137          unsigned short maincsm_name_body[140];
    138          
    139          const struct
    140          {
    141            CSM_DESC maincsm;
    142            WSHDR maincsm_name;
    143          }MAINCSM =
    144          {
    145            {
    146              maincsm_onmessage,
    147              maincsm_oncreate,
    148          #ifdef NEWSGOLD
    149          0,
    150          0,
    151          0,
    152          0,
    153          #endif
    154          maincsm_onclose,
    155          sizeof(MAIN_CSM),
    156          1,
    157          &minus11
    158            },
    159            {
    160              maincsm_name_body,
    161              NAMECSM_MAGIC1,
    162              NAMECSM_MAGIC2,
    163              0x0,
    164              139
    165            }
    166          };
    167          
    168          void UpdateCSMname(void)
    169          {
    170            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"KeyMaster");
    171          }
    172          
    173          void ShowRedBtnMenu()
    174          {
    175            char dummy[sizeof(MAIN_CSM)];
    176            UpdateCSMname();
    177            LockSched();
    178            CreateCSM(&MAINCSM.maincsm,dummy,0);
    179            UnlockSched();
    180          }
    181          */
    182          //
    183          //==============================================================================
    184          // Uptime counter
    185          //==============================================================================
    186          
    187          

   \                                 In segment DATA_Z, align 4, align-sorted
    188          TDate date;
   \                     `date`:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    189          TTime time; 
   \                     time:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    190          int sh;
   \                     sh:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    191          int sm;
   \                     sm:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    192          int ss;
   \                     ss:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    193          int sd;
   \                     sd:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    194          int nh;
   \                     nh:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    195          int nm;
   \                     nm:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    196          int ns;
   \                     ns:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    197          int nd;
   \                     nd:
   \   00000000                      DS8 4
    198          

   \                                 In segment DATA_Z, align 1, align-sorted
    199          char resstr;
   \                     resstr:
   \   00000000                      DS8 1
    200          
    201          
    202          //==============================================================================
    203          // Меню
    204          //==============================================================================
    205          #define MENU_ITEMS_NUM 8
    206          

   \                                 In segment DATA_Z, align 4, align-sorted
    207          char hdr[64];
   \                     hdr:
   \   00000000                      DS8 64

   \                                 In segment DATA_Z, align 1, align-sorted
    208          char hdr2;
   \                     hdr2:
   \   00000000                      DS8 1

   \                                 In segment DATA_C, align 4, align-sorted
    209          static const HEADER_DESC rb_menuhdr = {0, 0,NULL,NULL,NULL, (int) hdr, LGP_NULL};
   \                     rb_menuhdr:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, hdr, 2147483647
   \              ....FFFFFF7F
    210          

   \                                 In segment CODE, align 4, keep-with-next
    211          static void mp1()
    212          {
   \                     mp1:
   \   00000000   00402DE9           PUSH     {LR}
    213            SetProfile(0);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   B70000EF           SWI      +183
    214            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    215          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          static void mp2()
    218          {
   \                     mp2:
   \   00000000   00402DE9           PUSH     {LR}
    219            SetProfile(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   B70000EF           SWI      +183
    220            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    221          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    222          

   \                                 In segment CODE, align 4, keep-with-next
    223          static void mp3()
    224          {
   \                     mp3:
   \   00000000   00402DE9           PUSH     {LR}
    225            SetProfile(2);
   \   00000004   0200A0E3           MOV      R0,#+2
   \   00000008   B70000EF           SWI      +183
    226            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    227          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    228          

   \                                 In segment CODE, align 4, keep-with-next
    229          static void mp4()
    230          {
   \                     mp4:
   \   00000000   00402DE9           PUSH     {LR}
    231            SetProfile(3);
   \   00000004   0300A0E3           MOV      R0,#+3
   \   00000008   B70000EF           SWI      +183
    232            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    233          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    234          

   \                                 In segment CODE, align 4, keep-with-next
    235          static void mp5()
    236          {
   \                     mp5:
   \   00000000   00402DE9           PUSH     {LR}
    237            SetProfile(4);
   \   00000004   0400A0E3           MOV      R0,#+4
   \   00000008   B70000EF           SWI      +183
    238            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    239          }
   \   00000014   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
    240          static void mp6()
    241          {
   \                     mp6:
   \   00000000   00402DE9           PUSH     {LR}
    242            SetProfile(5);
   \   00000004   0500A0E3           MOV      R0,#+5
   \   00000008   B70000EF           SWI      +183
    243            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    244          }
   \   00000014   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
    245          static void mp7()
    246          {
   \                     mp7:
   \   00000000   00402DE9           PUSH     {LR}
    247            SetProfile(6);
   \   00000004   0600A0E3           MOV      R0,#+6
   \   00000008   B70000EF           SWI      +183
    248            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    249          }
   \   00000014   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
    250          static void mp8()
    251          {
   \                     mp8:
   \   00000000   00402DE9           PUSH     {LR}
    252            SetProfile(7);
   \   00000004   0700A0E3           MOV      R0,#+7
   \   00000008   B70000EF           SWI      +183
    253            GeneralFuncF1(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   3B0100EF           SWI      +315
    254          }
   \   00000014   0080BDE8           POP      {PC}             ;; return

   \                                 In segment DATA_C, align 4, align-sorted
    255          static const char * const menutexts[MENU_ITEMS_NUM]=
   \                     menutexts:
   \   00000000   ............       DC32 `?<Constant "0">`, `?<Constant "1">`, `?<Constant "2">`
   \              ............
   \   0000000C   ............       DC32 `?<Constant "3">`, `?<Constant "4">`, `?<Constant "5">`
   \              ............
   \   00000018   ............       DC32 `?<Constant "6">`, `?<Constant "7">`
   \              ....        
    256          {
    257            "0",
    258            "1",
    259            "2",
    260            "3",
    261            "4",
    262            "5",
    263            "6",
    264            "7"
    265           
    266          };
    267          

   \                                 In segment DATA_I, align 4, align-sorted
    268          static const void *menuprocs[MENU_ITEMS_NUM]=
   \                     menuprocs:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for menuprocs>`
    269          {
    270            (void *)mp1,
    271            (void *)mp2,
    272            (void *)mp3,
    273            (void *)mp4,
    274            (void *)mp5,
    275            (void *)mp6,
    276            (void *)mp7,
    277            (void *)mp8,
    278          };
    279          

   \                                 In segment DATA_C, align 4, align-sorted
    280          static const int menusoftkeys[] = {0,1,2};
   \                     menusoftkeys:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_C, align 4, align-sorted
    281          static const SOFTKEY_DESC menu_sk[]=
   \                     menu_sk:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515
    282          {
    283            {0x0018, 0x0000, (int)"Выбрать"},
    284            {0x0001, 0x0000, (int)"Закрыть"},
    285            {0x003D, 0x0000, (int)LGP_DOIT_PIC}
    286          };
    287          

   \                                 In segment DATA_C, align 4, align-sorted
    288          static const SOFTKEYSTAB menu_skt =
   \                     menu_skt:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        
    289          {
    290            menu_sk, 0
    291          };
    292          

   \                                 In segment CODE, align 4, keep-with-next
    293          int rb_menu_onkey(void *data, GUI_MSG *msg)
    294          {
   \                     rb_menu_onkey:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
    295          //  count_uptime();
    296            TTime t;
    297            TDate d;
    298            GetDateTime(&d,&t);
    299            sprintf(&hdr2,"Меню  %02d:%02d",t.hour,t.min);
   \   0000000C   ........           LDR      R6,??DataTable7  ;; hdr2
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   08008DE2           ADD      R0,SP,#+8
   \   0000001C   B40000EF           SWI      +180
   \   00000020   0020DDE5           LDRB     R2,[SP, #+0]
   \   00000024   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000028   ........           LDR      R1,??DataTable9  ;; `?<Constant "\\314\\345\\355\\376  %02d:%02d">`
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   160000EF           SWI      +22
    300            strncpy(hdr,&hdr2,63);
   \   00000034   ........           LDR      R0,??DataTable10  ;; hdr
   \   00000038   3F20A0E3           MOV      R2,#+63
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   160100EF           SWI      +278
    301            
    302            if ((msg->keys==0x18)||(msg->keys==0x3D))
   \   00000044   F200D5E1           LDRSH    R0,[R5, #+2]
   \   00000048   180050E3           CMP      R0,#+24
   \   0000004C   3D005013           CMPNE    R0,#+61
   \   00000050   0400001A           BNE      ??rb_menu_onkey_0
    303            {
    304              ((void (*)(void))(menuprocs[GetCurMenuItem(data)]))();
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   8F0100EF           SWI      +399
   \   0000005C   10109FE5           LDR      R1,??rb_menu_onkey_1  ;; menuprocs
   \   00000060   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000064   30FF2FE1           BLX      R0
    305            }  
    306            return(0);
   \                     ??rb_menu_onkey_0:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   10D08DE2           ADD      SP,SP,#+16
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??rb_menu_onkey_1:
   \   00000074   ........           DC32     menuprocs
    307          }
    308          

   \                                 In segment CODE, align 4, keep-with-next
    309          void rb_menu_ghook(void *data, int cmd)
    310          {
   \                     rb_menu_ghook:
   \   00000000   00402DE9           PUSH     {LR}
    311            if (cmd==0x0A)
   \   00000004   0A0051E3           CMP      R1,#+10
   \   00000008   0080BD18           POPNE    {PC}
    312            {
    313              DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    314            }
    315          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    316          

   \                                 In segment CODE, align 4, keep-with-next
    317          void rb_menu_iconhndl(void *data, int curitem, void *unk)
    318          {
   \                     rb_menu_iconhndl:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    319            TTime t;
    320            TDate d;
    321            GetDateTime(&d,&t);
    322            sprintf(&hdr2,"Меню  %02d:%02d",t.hour,t.min);
   \   00000004   ........           LDR      R6,??DataTable7  ;; hdr2
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   08008DE2           ADD      R0,SP,#+8
   \   0000001C   B40000EF           SWI      +180
   \   00000020   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000024   0020DDE5           LDRB     R2,[SP, #+0]
   \   00000028   ........           LDR      R1,??DataTable9  ;; `?<Constant "\\314\\345\\355\\376  %02d:%02d">`
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   160000EF           SWI      +22
    323            strncpy(hdr,&hdr2,63);
   \   00000034   ........           LDR      R0,??DataTable10  ;; hdr
   \   00000038   3F20A0E3           MOV      R2,#+63
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   160100EF           SWI      +278
    324          //  count_uptime();
    325            
    326            WSHDR *ws;
    327            WSHDR *ws2;
    328            void *item=AllocMLMenuItem(data);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   190200EF           SWI      +537
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   7C009FE5           LDR      R0,??rb_menu_iconhndl_0+0x8  ;; menutexts
   \   00000054   057190E7           LDR      R7,[R0, +R5, LSL #+2]
   \   00000058   0700A0E1           MOV      R0,R7
    329            ws=AllocMenuWS(data,strlen(menutexts[curitem]));
   \   0000005C   1B0000EF           SWI      +27
   \   00000060   0010A0E1           MOV      R1,R0
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   980100EF           SWI      +408
   \   0000006C   0080A0E1           MOV      R8,R0
    330            ws2=AllocMenuWS(data,strlen(menutexts[curitem]));
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   1B0000EF           SWI      +27
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   980100EF           SWI      +408
   \   00000084   0090A0E1           MOV      R9,R0
    331            wsprintf(ws, "%t", menutexts[curitem]);
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   0E1F8FE2           ADR      R1,??rb_menu_iconhndl_0  ;; "%t"
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   240100EF           SWI      +292
    332            wsprintf(ws2, "%s", resstr);
   \   00000098   ........           LDR      R0,??DataTable8  ;; resstr
   \   0000009C   0B1F8FE2           ADR      R1,??rb_menu_iconhndl_0+0x4  ;; "%s"
   \   000000A0   0020D0E5           LDRB     R2,[R0, #+0]
   \   000000A4   0900A0E1           MOV      R0,R9
   \   000000A8   240100EF           SWI      +292
    333          
    334            SetMLMenuItemText(data, item, ws, ws2, curitem);
   \   000000AC   20002DE9           PUSH     {R5}
   \   000000B0   0930A0E1           MOV      R3,R9
   \   000000B4   0820A0E1           MOV      R2,R8
   \   000000B8   0610A0E1           MOV      R1,R6
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   180200EF           SWI      +536
    335          }
   \   000000C4   14D08DE2           ADD      SP,SP,#+20
   \   000000C8   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??rb_menu_iconhndl_0:
   \   000000CC   25740000           DC8      "%t",+0
   \   000000D0   25730000           DC8      "%s",+0
   \   000000D4   ........           DC32     menutexts
    336          

   \                                 In segment DATA_C, align 4, align-sorted
    337          static const ML_MENU_DESC rb_menu=
   \                     rb_menu:
   \   00000000   08000000....       DC32 8, rb_menu_onkey, rb_menu_ghook, 0H, menusoftkeys, menu_skt, 16
   \              ............
   \              00000000....
   \              ............
   \              10000000    
   \   0000001C   ........0000       DC32 rb_menu_iconhndl, 0H, 0H, 8, 1
   \              000000000000
   \              080000000100
   \              0000        
    338          {
    339            8,rb_menu_onkey,rb_menu_ghook,NULL,
    340            menusoftkeys,
    341            &menu_skt,
    342            0x10,
    343            rb_menu_iconhndl,
    344            NULL,   //Items
    345            NULL,   //Procs
    346            MENU_ITEMS_NUM,   //n
    347            1 //Добавочных строк  
    348          };
    349          

   \                                 In segment CODE, align 4, keep-with-next
    350          void CreateRBMenu(void)
    351          {
   \                     CreateRBMenu:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    352            patch_header(&rb_menuhdr);
   \   00000004   94409FE5           LDR      R4,??CreateRBMenu_0+0x4  ;; rb_menuhdr
   \   00000008   10D04DE2           SUB      SP,SP,#+16
    353            sprintf(&resstr,"");;
    354            TTime t;
    355            TDate d;
    356            GetDateTime(&d,&t);
    357            sprintf(&hdr2,"Меню  %02d:%02d",t.hour,t.min);
   \   0000000C   ........           LDR      R5,??DataTable7  ;; hdr2
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   B000C4E1           STRH     R0,[R4, #+0]
   \   00000018   1800A0E3           MOV      R0,#+24
   \   0000001C   B200C4E1           STRH     R0,[R4, #+2]
   \   00000020   888100EF           SWI      +33160
   \   00000024   010040E2           SUB      R0,R0,#+1
   \   00000028   B400C4E1           STRH     R0,[R4, #+4]
   \   0000002C   8A8100EF           SWI      +33162
   \   00000030   170080E2           ADD      R0,R0,#+23
   \   00000034   B600C4E1           STRH     R0,[R4, #+6]
   \   00000038   ........           LDR      R0,??DataTable8  ;; resstr
   \   0000003C   161F8FE2           ADR      R1,??CreateRBMenu_0  ;; ""
   \   00000040   160000EF           SWI      +22
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   08008DE2           ADD      R0,SP,#+8
   \   0000004C   B40000EF           SWI      +180
   \   00000050   0020DDE5           LDRB     R2,[SP, #+0]
   \   00000054   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000058   ........           LDR      R1,??DataTable9  ;; `?<Constant "\\314\\345\\355\\376  %02d:%02d">`
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   160000EF           SWI      +22
    358            strncpy(hdr,&hdr2,63);
   \   00000064   ........           LDR      R0,??DataTable10  ;; hdr
   \   00000068   3F20A0E3           MOV      R2,#+63
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   160100EF           SWI      +278
    359            CreateMultiLinesMenu(0,0,&rb_menu,&rb_menuhdr,0,MENU_ITEMS_NUM);
   \   00000074   28209FE5           LDR      R2,??CreateRBMenu_0+0x8  ;; rb_menu
   \   00000078   0800A0E3           MOV      R0,#+8
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0430A0E1           MOV      R3,R4
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   170200EF           SWI      +535
    360          }
   \   00000094   18D08DE2           ADD      SP,SP,#+24
   \   00000098   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CreateRBMenu_0:
   \   0000009C   00000000           DC8      "",+0,+0,+0
   \   000000A0   ........           DC32     rb_menuhdr
   \   000000A4   ........           DC32     rb_menu

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     hdr2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     resstr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     `?<Constant "\\314\\345\\355\\376  %02d:%02d">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     hdr

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menuprocs>`:
   \   00000000   ............       DC32 mp1, mp2, mp3, mp4, mp5, mp6, mp7, mp8
   \              ............
   \              ............
   \              ............
   \              ............
   \              ....        

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "2">`:
   \   00000000   3200               DC8 "2"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "1">`:
   \   00000000   3100               DC8 "1"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "0">`:
   \   00000000   3000               DC8 "0"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\314\\345\\355\\376  %02d:%02d">`:
   \   00000000   CCE5EDFE2020       DC8 "\314\345\355\376  %02d:%02d"
   \              253032643A25
   \              30326400    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\307\\340\\352\\360\\373\\362\\374">`:
   \   00000000   C7E0EAF0FBF2       DC8 "\307\340\352\360\373\362\374"
   \              FC00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`:
   \   00000000   C2FBE1F0E0F2       DC8 "\302\373\341\360\340\362\374"
   \              FC00        

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "7">`:
   \   00000000   3700               DC8 "7"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "6">`:
   \   00000000   3600               DC8 "6"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "5">`:
   \   00000000   3500               DC8 "5"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "4">`:
   \   00000000   3400               DC8 "4"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "3">`:
   \   00000000   3300               DC8 "3"

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     CreateRBMenu        36
     mp1                  4
     mp2                  4
     mp3                  4
     mp4                  4
     mp5                  4
     mp6                  4
     mp7                  4
     mp8                  4
     rb_menu_ghook        4
     rb_menu_iconhndl    48
     rb_menu_onkey       32


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     date                              8
     time                              8
     sh                                4
     sm                                4
     ss                                4
     sd                                4
     nh                                4
     nm                                4
     ns                                4
     nd                                4
     resstr                            1
     hdr                              64
     hdr2                              1
     rb_menuhdr                       20
     mp1                              24
     mp2                              24
     mp3                              24
     mp4                              24
     mp5                              24
     mp6                              24
     mp7                              24
     mp8                              24
     menutexts                        32
     menuprocs                        32
     menusoftkeys                     12
     menu_sk                          24
     menu_skt                          8
     rb_menu_onkey                   120
     rb_menu_ghook                    20
     rb_menu_iconhndl                216
     rb_menu                          48
     CreateRBMenu                    168
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable10                     4
     ?<Initializer for menuprocs>     32
     ?<Constant "">                    1
     ?<Constant "2">                   2
     ?<Constant "1">                   2
     ?<Constant "0">                   2
     ?<Constant "%s">                  3
     ?<Constant "%t">                  3
     ?<Constant "\314\345\355\376  %02d:%02d">
                                      16
     ?<Constant "\307\340\352\360\373\362\374">
                                       8
     ?<Constant "\302\373\341\360\340\362\374">
                                       8
     ?<Constant "7">                   2
     ?<Constant "6">                   2
     ?<Constant "5">                   2
     ?<Constant "4">                   2
     ?<Constant "3">                   2
      Others                          72

 
 780 bytes in segment CODE
 199 bytes in segment DATA_C
  32 bytes in segment DATA_I
  32 bytes in segment DATA_ID
 114 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 732 bytes of CODE  memory (+ 72 bytes shared)
 231 bytes of CONST memory
 146 bytes of DATA  memory

Errors: none
Warnings: none

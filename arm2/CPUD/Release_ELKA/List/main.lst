##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    24/Sep/2010  19:57:37 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\CPUD\main.c                                   #
#    Command line    =  C:\arm\CPUD\main.c -D NEWSGOLD -D ELKA -lC           #
#                       C:\arm\CPUD\Release_ELKA\List\ -o                    #
#                       C:\arm\CPUD\Release_ELKA\Obj\ -s9 --no_inline        #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None                                           #
#    List file       =  C:\arm\CPUD\Release_ELKA\List\main.lst               #
#    Object file     =  C:\arm\CPUD\Release_ELKA\Obj\main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\CPUD\main.c
      1          #include "..\inc\swilib.h"

     typedef size_t png_size_t;
             ^
"C:\arm\inc\pngconf.h",1097  Error[Pe020]: identifier "size_t" is undefined

  int CRYPTO_set_mem_functions(void *(*m)(size_t),void *(*r)(void *,size_t), void (*f)(void *));
                                          ^
"C:\arm\inc\crypto.h",298  Error[Pe092]: identifier-list parameters may only
          be used in a function definition

  int CRYPTO_set_mem_functions(void *(*m)(size_t),void *(*r)(void *,size_t), void (*f)(void *));
                                                                    ^
"C:\arm\inc\crypto.h",298  Error[Pe020]: identifier "size_t" is undefined

  int CRYPTO_set_locked_mem_functions(void *(*m)(size_t), void (*free_func)(void *));
                                                 ^
"C:\arm\inc\crypto.h",299  Error[Pe092]: identifier-list parameters may only
          be used in a function definition

  void CRYPTO_get_mem_functions(void *(**m)(size_t),void *(**r)(void *, size_t), void (**f)(void *));
                                            ^
"C:\arm\inc\crypto.h",301  Error[Pe092]: identifier-list parameters may only
          be used in a function definition

  void CRYPTO_get_mem_functions(void *(**m)(size_t),void *(**r)(void *, size_t), void (**f)(void *));
                                                                        ^
"C:\arm\inc\crypto.h",301  Error[Pe020]: identifier "size_t" is undefined

  void CRYPTO_get_locked_mem_functions(void *(**m)(size_t), void (**f)(void *));
                                                   ^
"C:\arm\inc\crypto.h",302  Error[Pe092]: identifier-list parameters may only
          be used in a function definition

  __swi __arm void *calloc(size_t nelem, size_t elsize);
                           ^
"C:\arm\inc\swilib.h",1616  Error[Pe020]: identifier "size_t" is undefined

  __swi __arm void *calloc(size_t nelem, size_t elsize);
                                         ^
"C:\arm\inc\swilib.h",1616  Error[Pe020]: identifier "size_t" is undefined
      2          /*
      3          #include "..\inc\cfg_items.h"
      4          #include "conf_loader.h"
      5          */
      6          CSM_DESC icsmd;
      7          
      8          extern void kill_data(void *p, void (*func_p)(void *));
      9          
     10          const int minus11=-11;
     11          
     12          typedef struct
     13          {
     14            CSM_RAM csm;
     15          }MAIN_CSM;
     16          
     17          CSM_RAM *under_idle;
     18          
     19          GBSTMR mytmr;
     20          /*
     21          extern const int Mode1;
     22          extern const int Mode2;
     23          extern const int Mode3;
     24          extern const int Mode4;
     25          extern const int Mode5;
     26          extern const int Mode6;
     27          extern const int Mode7;
     28          extern const int Mode8;
     29          extern const int Welcome;
     30          extern const int global;
     31          extern const unsigned int hiusg;
     32          extern const unsigned int lousg;
     33          extern const unsigned int lowakku;
     34          
     35          void ShowWelcome(void)
     36          {
     37            if(Welcome==1)
     38              ShowMSG(1,(int)"CPUD started!");
     39          }
     40          
     41          void Check(void);
     42          */
     43          #pragma swi_number=0x221
     44          __swi __arm int SetCpuClockLow();
                                 ^
Error[Pe147]: declaration is incompatible with "void SetCpuClockLow()"
          (declared at line 3524 of "C:\arm\CPUD\..\inc\swilib.h")
     45          
     46          #pragma swi_number=0x222
     47          __swi __arm int SetCpuClockTempHi();
                                 ^
Error[Pe147]: declaration is incompatible with "void SetCpuClockTempHi()"
          (declared at line 3527 of "C:\arm\CPUD\..\inc\swilib.h")
     48          
     49          #pragma swi_number=0x0C5
     50          __swi __arm int IsIdleUiOnTop();
                                 ^
Error[Pe147]: declaration is incompatible with "char IsIdleUiOnTop(void)"
          (declared at line 1736 of "C:\arm\CPUD\..\inc\swilib.h")
     51          /*
     52          void Auto(void)
     53          {  
     54            if(lowakku>0)
     55            {
     56              int cap_akku = *RamCap();
     57              if(cap_akku>lowakku)
     58              {
     59          #ifdef NEWSGOLD
     60              if(IsIdleUiOnTop()==1)
     61          #else
     62              int result= * RamStby();
     63              if(result==1)
     64          #endif
     65                 {
     66                  SetCpuClockLow(2);
     67                  GBS_StartTimerProc(&mytmr, 64, Check);
     68                 }
     69              else
     70                 {
     71                  SetCpuClockTempHi(2);
     72                  GBS_StartTimerProc(&mytmr, 64, Check);
     73                 }
     74              }
     75              else
     76                 {
     77                  SetCpuClockLow(2);
     78                  GBS_StartTimerProc(&mytmr, 64, Check);
     79                 }
     80            }
     81            else
     82              {
     83          #ifdef NEWSGOLD
     84              if(IsIdleUiOnTop()==1)
     85          #else
     86              int result= * RamStby();
     87              if(result==1)
     88          #endif
     89                 {
     90                  SetCpuClockLow(2);
     91                  GBS_StartTimerProc(&mytmr, 64, Check);
     92                 }
     93              else
     94                 {
     95                  SetCpuClockTempHi(2);
     96                  GBS_StartTimerProc(&mytmr, 64, Check);
     97                 }
     98              }
     99          }
    100          
    101          void set52(void)
    102          {
    103             SetCpuClockLow(2);
    104             GBS_StartTimerProc(&mytmr, 32, Check);
    105          }
    106          
    107          void set208(void)
    108          {
    109             SetCpuClockTempHi(2);
    110             GBS_StartTimerProc(&mytmr, 32, Check);
    111          }
    112          
    113          void Off(void)
    114          {
    115             GBS_StartTimerProc(&mytmr, 32, Check);
    116          }
    117          
    118          int zet;
    119          GBSTMR mytmr2;
    120          
    121          void evil_add(void)
    122          {
    123            if (zet>0)
    124            {
    125              SetCpuClockTempHi(2);
    126              zet--;
    127             GBS_StartTimerProc(&mytmr2, 32, evil_add);
    128            }
    129          }
    130          
    131          void evil_add2(void)
    132          {
    133            if (zet>0)
    134            {
    135              SetCpuClockLow(2);
    136              zet--;
    137             GBS_StartTimerProc(&mytmr2, 32, evil_add);
    138            }
    139          }
    140              
    141          
    142          void Smart(void)
    143          {
    144             int load=GetCPULoad();
    145             int clk=GetCPUClock();
    146               
    147                 if (load>hiusg)
    148                   {
    149                      if (clk<=52)SetCpuClockTempHi(2);
    150          #ifdef ELKA
    151                      if (clk<=104)SetCpuClockTempHi(2);
    152                      zet=33;
    153                      GBS_StartTimerProc(&mytmr2, 32, evil_add);
    154          #endif
    155                   }
    156                 else 
    157                   {
    158                      if (load<lousg)
    159                      if(clk==104)SetCpuClockLow(2);
    160          #ifdef ELKA
    161                      if(clk==208)SetCpuClockLow(2);
    162                      zet=33;
    163                      GBS_StartTimerProc(&mytmr2, 32, evil_add2);
    164          #endif
    165                   }
    166             
    167                 GBS_StartTimerProc(&mytmr, 216*5, Check);
    168          }
    169          
    170          void Check(void)
    171          {
    172            char Mode;
    173          if(global)
    174            Mode = Mode1;
    175          else
    176           {
    177            char profile = GetProfile();
    178          if(profile==0)
    179            Mode = Mode1;
    180          if(profile==1)
    181            Mode = Mode2;
    182          if(profile==2)
    183            Mode = Mode3;
    184          if(profile==3)
    185            Mode = Mode4;
    186          if(profile==4)
    187            Mode = Mode5;
    188          if(profile==5)
    189            Mode = Mode6;
    190          if(profile==6)
    191            Mode = Mode7;
    192          if(profile==7)
    193            Mode = Mode8;
    194           }
    195            
    196            if(Mode==0)
    197               {Auto();}
    198            if(Mode==1)
    199               {set52();}
    200            if(Mode==2)
    201               {set208();}
    202            if(Mode==3)
    203               {Smart();}
    204          }
    205          */
    206          void Check2()
    207          {
    208            if(IsIdleUiOnTop()) SetCpuClockLow(2);
    209            else
    210            SetCpuClockTempHi(2);
    211            GBS_StartTimerProc(&mytmr, 40, Check2);
    212          }
    213          
    214          #pragma inline=forced
    215          int toupper(int c)
    216          {
    217            if ((c>='a')&&(c<='z')) c+='A'-'a';
    218            return(c);
    219          }
    220          #pragma inline
    221          int strcmp_nocase(const char *s1,const char *s2)
    222          {
    223            int i;
    224            int c;
    225            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    226            return(i);
    227          }
    228          
    229          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    230          {
    231            Check2();
    232            /*
    233            if(msg->msg == MSG_RECONFIGURE_REQ) 
    234            {
    235              extern const char *successed_config_filename;
    236              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
    237              {
    238                ShowMSG(1,(int)"CPUD config updated!");
    239                InitConfig();
    240              }
    241            }
    242          //  SetCpuClockTempHi(2);
    243            */
    244            return (1);  
    245            
    246          }
    247          
    248          static void maincsm_oncreate(CSM_RAM *data)
    249          {
    250          
    251          }
    252          
    253          static void Killer(void)
    254          {
    255            extern void *ELF_BEGIN;
    256            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
    257          }
    258          
    259          static void maincsm_onclose(CSM_RAM *csm)
    260          {
    261            GBS_DelTimer(&mytmr);
    262          //  GBS_DelTimer(&mytmr2);
    263            SUBPROC((void *)Killer);
    264          }
    265          
    266          static unsigned short maincsm_name_body[140];
    267          
    268          static const struct
    269          {
    270            CSM_DESC maincsm;
    271            WSHDR maincsm_name;
    272          }MAINCSM =
    273          {
    274            {
    275            maincsm_onmessage,
    276            maincsm_oncreate,
    277          #ifdef NEWSGOLD
    278            0,
    279            0,
    280            0,
    281            0,
    282          #endif
    283            maincsm_onclose,
    284            sizeof(MAIN_CSM),
    285            1,
    286            &minus11
    287            },
    288            {
    289              maincsm_name_body,
    290              NAMECSM_MAGIC1,
    291              NAMECSM_MAGIC2,
    292              0x0,
    293              139
    294            }
    295          };
    296          
    297          static void UpdateCSMname(void)
    298          {
    299            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"CPUD-Mini");
    300          }
    301          
    302          int main(void)
    303          {
    304          //  InitConfig();
    305          
    306            CSM_RAM *save_cmpc;
    307            char dummy[sizeof(MAIN_CSM)];
    308            UpdateCSMname(); 
    309            
    310            LockSched();
    311            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
    312            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
    313            CreateCSM(&MAINCSM.maincsm,dummy,0);
    314            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
    315            UnlockSched(); 
    316          //  ShowWelcome();
    317            
    318          //  Check();
    319            Check2();
    320            return 0;
    321          }

Errors: 12
Warnings: none

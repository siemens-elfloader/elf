//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Mar/2011  10:39:09 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vkcom\frmbtord.c                             /
//    Command line    =  C:\arm\vkcom\frmbtord.c -D NEWSGOLD -D ELKA -lA     /
//                       C:\arm\vkcom\Release_ELKA\List\ -o                  /
//                       C:\arm\vkcom\Release_ELKA\Obj\ -s9 --cpu_mode arm   /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vkcom\Release_ELKA\List\frmbtord.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME frmbtord

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??InitFrameBitOrder??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC BitOrderOfMR1020
        PUBLIC BitOrderOfMR1220
        PUBLIC BitOrderOfMR475
        PUBLIC BitOrderOfMR515
        PUBLIC BitOrderOfMR590
        PUBLIC BitOrderOfMR670
        PUBLIC BitOrderOfMR740
        PUBLIC BitOrderOfMR795
        PUBLIC InitFrameBitOrder
        FUNCTION InitFrameBitOrder,0201H
        PUBLIC bit_Byte_Number
        PUBLIC table0__7
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
InitFrameBitOrder   SYMBOL "InitFrameBitOrder"
??InitFrameBitOrder??rT SYMBOL "??rT", InitFrameBitOrder

// C:\arm\vkcom\frmbtord.c
//    1 #include "frmbtord.tab"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
// short const __data BitOrderOfMR475[95]
BitOrderOfMR475:
        DATA
        DC16 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25
        DC16 26, 27, 28, 48, 49, 61, 62, 82, 83, 47, 46, 45, 44, 81, 80, 79, 78
        DC16 17, 18, 20, 22, 77, 76, 75, 74, 29, 30, 43, 42, 41, 40, 38, 39, 16
        DC16 19, 21, 50, 51, 59, 60, 63, 64, 72, 73, 84, 85, 93, 94, 32, 33, 35
        DC16 36, 53, 54, 56, 57, 66, 67, 69, 70, 87, 88, 90, 91, 34, 55, 68, 89
        DC16 37, 58, 71, 92, 31, 52, 65, 86
        DC8 0, 0
// short const __data BitOrderOfMR515[103]
BitOrderOfMR515:
        DC16 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 23, 24, 25
        DC16 26, 27, 46, 65, 84, 45, 44, 43, 64, 63, 62, 83, 82, 81, 102, 101
        DC16 100, 42, 61, 80, 99, 28, 47, 66, 85, 18, 41, 60, 79, 98, 29, 48
        DC16 67, 17, 20, 22, 40, 59, 78, 97, 21, 30, 49, 68, 86, 19, 16, 87, 39
        DC16 38, 58, 57, 77, 35, 54, 73, 92, 76, 96, 95, 36, 55, 74, 93, 32, 51
        DC16 33, 52, 70, 71, 89, 90, 31, 50, 69, 88, 37, 56, 75, 94, 34, 53, 72
        DC16 91
        DC8 0, 0
// short const __data BitOrderOfMR590[118]
BitOrderOfMR590:
        DC16 0, 1, 4, 5, 3, 6, 7, 2, 13, 15, 8, 9, 11, 12, 14, 10, 16, 28, 74
        DC16 29, 75, 27, 73, 26, 72, 30, 76, 51, 97, 50, 71, 96, 117, 31, 77
        DC16 52, 98, 49, 70, 95, 116, 53, 99, 32, 78, 33, 79, 48, 69, 94, 115
        DC16 47, 68, 93, 114, 46, 67, 92, 113, 19, 21, 23, 22, 18, 17, 20, 24
        DC16 111, 43, 89, 110, 64, 65, 44, 90, 25, 45, 66, 91, 112, 54, 100, 40
        DC16 61, 86, 107, 39, 60, 85, 106, 36, 57, 82, 103, 35, 56, 81, 102, 34
        DC16 55, 80, 101, 42, 63, 88, 109, 41, 62, 87, 108, 38, 59, 84, 105, 37
        DC16 58, 83, 104
// short const __data BitOrderOfMR670[134]
BitOrderOfMR670:
        DC16 0, 1, 4, 3, 5, 6, 13, 7, 2, 8, 9, 11, 15, 12, 14, 10, 28, 82, 29
        DC16 83, 27, 81, 26, 80, 30, 84, 16, 55, 109, 56, 110, 31, 85, 57, 111
        DC16 48, 73, 102, 127, 32, 86, 51, 76, 105, 130, 52, 77, 106, 131, 58
        DC16 112, 33, 87, 19, 23, 53, 78, 107, 132, 21, 22, 18, 17, 20, 24, 25
        DC16 50, 75, 104, 129, 47, 72, 101, 126, 54, 79, 108, 133, 46, 71, 100
        DC16 125, 128, 103, 74, 49, 45, 70, 99, 124, 42, 67, 96, 121, 39, 64
        DC16 93, 118, 38, 63, 92, 117, 35, 60, 89, 114, 34, 59, 88, 113, 44, 69
        DC16 98, 123, 43, 68, 97, 122, 41, 66, 95, 120, 40, 65, 94, 119, 37, 62
        DC16 91, 116, 36, 61, 90, 115
// short const __data BitOrderOfMR740[148]
BitOrderOfMR740:
        DC16 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 87
        DC16 27, 88, 28, 89, 29, 90, 30, 91, 51, 80, 112, 141, 52, 81, 113, 142
        DC16 54, 83, 115, 144, 55, 84, 116, 145, 58, 119, 59, 120, 21, 22, 23
        DC16 17, 18, 19, 31, 60, 92, 121, 56, 85, 117, 146, 20, 24, 25, 50, 79
        DC16 111, 140, 57, 86, 118, 147, 49, 78, 110, 139, 48, 77, 53, 82, 114
        DC16 143, 109, 138, 47, 76, 108, 137, 32, 33, 61, 62, 93, 94, 122, 123
        DC16 41, 42, 43, 44, 45, 46, 70, 71, 72, 73, 74, 75, 102, 103, 104, 105
        DC16 106, 107, 131, 132, 133, 134, 135, 136, 34, 63, 95, 124, 35, 64
        DC16 96, 125, 36, 65, 97, 126, 37, 66, 98, 127, 38, 67, 99, 128, 39, 68
        DC16 100, 129, 40, 69, 101, 130
// short const __data BitOrderOfMR795[159]
BitOrderOfMR795:
        DC16 8, 7, 6, 5, 4, 3, 2, 14, 16, 9, 10, 12, 13, 15, 11, 17, 20, 22, 24
        DC16 23, 19, 18, 21, 56, 88, 122, 154, 57, 89, 123, 155, 58, 90, 124
        DC16 156, 52, 84, 118, 150, 53, 85, 119, 151, 27, 93, 28, 94, 29, 95
        DC16 30, 96, 31, 97, 61, 127, 62, 128, 63, 129, 59, 91, 125, 157, 32
        DC16 98, 64, 130, 1, 0, 25, 26, 33, 99, 34, 100, 65, 131, 66, 132, 54
        DC16 86, 120, 152, 60, 92, 126, 158, 55, 87, 121, 153, 117, 116, 115
        DC16 46, 78, 112, 144, 43, 75, 109, 141, 40, 72, 106, 138, 36, 68, 102
        DC16 134, 114, 149, 148, 147, 146, 83, 82, 81, 80, 51, 50, 49, 48, 47
        DC16 45, 44, 42, 39, 35, 79, 77, 76, 74, 71, 67, 113, 111, 110, 108
        DC16 105, 101, 145, 143, 142, 140, 137, 133, 41, 73, 107, 139, 37, 69
        DC16 103, 135, 38, 70, 104, 136
        DC8 0, 0
// short const __data BitOrderOfMR1020[204]
BitOrderOfMR1020:
        DC16 7, 6, 5, 4, 3, 2, 1, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 26, 27
        DC16 28, 29, 30, 31, 115, 116, 117, 118, 119, 120, 72, 73, 161, 162, 65
        DC16 68, 69, 108, 111, 112, 154, 157, 158, 197, 200, 201, 32, 33, 121
        DC16 122, 74, 75, 163, 164, 66, 109, 155, 198, 19, 23, 21, 22, 18, 17
        DC16 20, 24, 25, 37, 36, 35, 34, 80, 79, 78, 77, 126, 125, 124, 123
        DC16 169, 168, 167, 166, 70, 67, 71, 113, 110, 114, 159, 156, 160, 202
        DC16 199, 203, 76, 165, 81, 82, 92, 91, 93, 83, 95, 85, 84, 94, 101
        DC16 102, 96, 104, 86, 103, 87, 97, 127, 128, 138, 137, 139, 129, 141
        DC16 131, 130, 140, 147, 148, 142, 150, 132, 149, 133, 143, 170, 171
        DC16 181, 180, 182, 172, 184, 174, 173, 183, 190, 191, 185, 193, 175
        DC16 192, 176, 186, 38, 39, 49, 48, 50, 40, 52, 42, 41, 51, 58, 59, 53
        DC16 61, 43, 60, 44, 54, 194, 179, 189, 196, 177, 195, 178, 187, 188
        DC16 151, 136, 146, 153, 134, 152, 135, 144, 145, 105, 90, 100, 107, 88
        DC16 106, 89, 98, 99, 62, 47, 57, 64, 45, 63, 46, 55, 56
// short const __data BitOrderOfMR1220[244]
BitOrderOfMR1220:
        DC16 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17
        DC16 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 38, 141, 39, 142, 40, 143
        DC16 41, 144, 42, 145, 43, 146, 44, 147, 45, 148, 46, 149, 47, 97, 150
        DC16 200, 48, 98, 151, 201, 49, 99, 152, 202, 86, 136, 189, 239, 87
        DC16 137, 190, 240, 88, 138, 191, 241, 91, 194, 92, 195, 93, 196, 94
        DC16 197, 95, 198, 29, 30, 31, 32, 33, 34, 35, 50, 100, 153, 203, 89
        DC16 139, 192, 242, 51, 101, 154, 204, 55, 105, 158, 208, 90, 140, 193
        DC16 243, 59, 109, 162, 212, 63, 113, 166, 216, 67, 117, 170, 220, 36
        DC16 37, 54, 53, 52, 58, 57, 56, 62, 61, 60, 66, 65, 64, 70, 69, 68
        DC16 104, 103, 102, 108, 107, 106, 112, 111, 110, 116, 115, 114, 120
        DC16 119, 118, 157, 156, 155, 161, 160, 159, 165, 164, 163, 169, 168
        DC16 167, 173, 172, 171, 207, 206, 205, 211, 210, 209, 215, 214, 213
        DC16 219, 218, 217, 223, 222, 221, 73, 72, 71, 76, 75, 74, 79, 78, 77
        DC16 82, 81, 80, 85, 84, 83, 123, 122, 121, 126, 125, 124, 129, 128
        DC16 127, 132, 131, 130, 135, 134, 133, 176, 175, 174, 179, 178, 177
        DC16 182, 181, 180, 185, 184, 183, 188, 187, 186, 226, 225, 224, 229
        DC16 228, 227, 232, 231, 230, 235, 234, 233, 238, 237, 236, 96, 199

        RSEG DATA_I:DATA:SORT:NOROOT(2)
// short __data bit_Byte_Number[16][2]
bit_Byte_Number:
        DS8 64
        REQUIRE `?<Initializer for bit_Byte_Number>`
//    2 
//    3 short* table0__7[8] ;
table0__7:
        DS8 32
        REQUIRE `?<Initializer for table0__7>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitFrameBitOrder??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE InitFrameBitOrder
//    4 
//    5 /*
//    6  *	Function		:	InitFrameBitOrder
//    7  *--------------------------------------------------------------------------------
//    8  *	Purpose 		:	Inititate table0~table7 of reordering 
//    9  *	Entry			:	
//   10  *
//   11  *	Return			:	void 
//   12  *	External Ref.	:	
//   13  *	Summary			:	
//   14  *	Flowchart		:	
//   15  *--------------------------------------------------------------------------------
//   16  *	Note			:	
//   17  *--------------------------------------------------------------------------------
//   18  */
//   19 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function InitFrameBitOrder
        ARM
//   20 void InitFrameBitOrder()
//   21 {
//   22 	int i ; 
//   23 	for( i = 0 ; i < 16; i  ++ )
InitFrameBitOrder:
        LDR      R0,??InitFrameBitOrder_0  ;; bit_Byte_Number
        MOV      R1,#+0
//   24 		bit_Byte_Number[i][1] = (bit_Byte_Number[i][0]+7)/8 ;		
??InitFrameBitOrder_1:
        ADD      R2,R0,R1, LSL #+2
        LDRSH    R3,[R2, #+0]
        ADD      R1,R1,#+1
        CMP      R1,#+16
        ADD      R3,R3,#+7
        ASR      R12,R3,#+2
        ADD      R3,R3,R12, LSR #+29
        ASR      R3,R3,#+3
        STRH     R3,[R2, #+2]
        BLT      ??InitFrameBitOrder_1
//   25 	
//   26 	table0__7[0] =(short*) BitOrderOfMR475 ;
        LDR      R1,??InitFrameBitOrder_0+0x4  ;; BitOrderOfMR475
        STR      R1,[R0, #+64]
//   27 	table0__7[1] =(short*) BitOrderOfMR515 ;
        ADD      R2,R1,#+192
        STR      R2,[R0, #+68]
//   28 	table0__7[2] =(short*) BitOrderOfMR590 ;
        ADD      R2,R1,#+400
        STR      R2,[R0, #+72]
//   29 	table0__7[3] =(short*) BitOrderOfMR670 ;
        ADD      R2,R1,#+636
        STR      R2,[R0, #+76]
//   30 	table0__7[4] =(short*) BitOrderOfMR740 ;
        ADD      R2,R1,#+904
        STR      R2,[R0, #+80]
//   31 	table0__7[5] =(short*) BitOrderOfMR795 ;
        ADD      R2,R1,#+1200
        STR      R2,[R0, #+84]
//   32 	table0__7[6] =(short*) BitOrderOfMR1020 ;
        ADD      R2,R1,#+1520
        STR      R2,[R0, #+88]
//   33 	table0__7[7] =(short*) BitOrderOfMR1220 ;
        MOV      R2,#+136
        ORR      R2,R2,#0x700
        ADD      R1,R2,R1
        STR      R1,[R0, #+92]
//   34 }
        BX       LR               ;; return
        DATA
??InitFrameBitOrder_0:
        DC32     bit_Byte_Number
        DC32     BitOrderOfMR475
        CFI EndBlock cfiBlock1

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for bit_Byte_Number>`:
        DATA
        DC16 95, 0, 103, 0, 118, 0, 134, 0, 148, 0, 159, 0, 204, 0, 244, 0, 39
        DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for table0__7>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
//   35 
//   36 
//   37 
//   38 
//   39 
//   40 
// 
//   136 bytes in segment CODE
// 2 416 bytes in segment DATA_C
//    96 bytes in segment DATA_I
//    96 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
//   132 bytes of CODE  memory (+ 16 bytes shared)
// 2 512 bytes of CONST memory
//    96 bytes of DATA  memory
//
//Errors: none
//Warnings: none

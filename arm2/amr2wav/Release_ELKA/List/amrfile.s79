//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Mar/2011  10:39:08 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vkcom\amrfile.c                              /
//    Command line    =  C:\arm\vkcom\amrfile.c -D NEWSGOLD -D ELKA -lA      /
//                       C:\arm\vkcom\Release_ELKA\List\ -o                  /
//                       C:\arm\vkcom\Release_ELKA\Obj\ -s9 --cpu_mode arm   /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vkcom\Release_ELKA\List\amrfile.s79          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME amrfile

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??CloseAmrFile??rT
        MULTWEAK ??CreateAmrFile??rT
??DataTable0 EQU 0
??DataTable2 EQU 0
        MULTWEAK ??InitFrameBitOrder??rA
        MULTWEAK ??OpenAmrFile??rT
        MULTWEAK ??ReadOneFrameBlock??rT
        MULTWEAK ??WriteOneFrameBlock??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC CloseAmrFile
        FUNCTION CloseAmrFile,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC CreateAmrFile
        FUNCTION CreateAmrFile,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC OpenAmrFile
        FUNCTION OpenAmrFile,0203H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC ReadOneFrameBlock
        FUNCTION ReadOneFrameBlock,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC WriteOneFrameBlock
        FUNCTION WriteOneFrameBlock,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC amrStr
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
InitFrameBitOrder   SYMBOL "InitFrameBitOrder"
CloseAmrFile        SYMBOL "CloseAmrFile"
??CloseAmrFile??rT  SYMBOL "??rT", CloseAmrFile
CreateAmrFile       SYMBOL "CreateAmrFile"
??CreateAmrFile??rT SYMBOL "??rT", CreateAmrFile
??InitFrameBitOrder??rA SYMBOL "??rA", InitFrameBitOrder
OpenAmrFile         SYMBOL "OpenAmrFile"
??OpenAmrFile??rT   SYMBOL "??rT", OpenAmrFile
ReadOneFrameBlock   SYMBOL "ReadOneFrameBlock"
??ReadOneFrameBlock??rT SYMBOL "??rT", ReadOneFrameBlock
WriteOneFrameBlock  SYMBOL "WriteOneFrameBlock"
??WriteOneFrameBlock??rT SYMBOL "??rT", WriteOneFrameBlock

        EXTERN InitFrameBitOrder
        FUNCTION InitFrameBitOrder,0200H
        EXTERN bit_Byte_Number

// C:\arm\vkcom\amrfile.c
//    1 #include "..\inc\swilib.h"
//    2 #include "amrfile.h"
//    3 #include "frmbtord.h"
//    4 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    5 const char* amrStr[4] = { "#!AMR\n" , "#!AMR-WB\n" , "#!AMR_MC1.0\n" , "#!AMR-WB_MC1.0\n" } ;
amrStr:
        DS8 16
        REQUIRE `?<Initializer for amrStr>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OpenAmrFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OpenAmrFile

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OpenAmrFile
        ARM
//    6 AMRStruct* OpenAmrFile(char* AmrName , unsigned int* pid , int isIdFile , int offsetForIdFile ) 
//    7 {
OpenAmrFile:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+16
        CFI CFA R13+52
        MOV      R6,R2
        MOV      R4,R3
//    8 	char buf[15] ;	
//    9 	//unsigned long bytes ;
//   10 	
//   11 	int		fd = -1 ;
//   12 	AMRStruct* AmrStruct = 0  ;
        MOV      R5,#+0
        MOV      R9,#+0
//   13 	enum AmrFileType AmrType ;
//   14 	short n ;
//   15 	
//   16 fd = fopen(AmrName,A_ReadOnly+A_BIN,P_READ,0);
        MOV      R3,R5
        MOV      R2,#+128
        MOV      R1,#+32768
        SWI      +10
        MOV      R7,R0
//   17 
//   18 
//   19 	if( fd == -1 )
        CMN      R7,#+1
        BEQ      ??OpenAmrFile_0
//   20 		goto error ;
//   21 
//   22 	//bytes = fread( buf , 1 , 15 , fp ) ;
//   23 	//bytes = fread( fd , buf , 15,0) ;
//   24         fread( fd , buf , 15,0) ;
        MOV      R3,#+0
        MOV      R2,#+15
//   25 	AmrType =  AMR_NB_SC ;
        LDR      R10,??DataTable1  ;; amrStr
        MOV      R1,SP
        SWI      +11
        MOV      R8,R5
??OpenAmrFile_1:
        ADD      R11,R10,R8, LSL #+2
        LDR      R0,[R11, #+0]
//   26 	while ( AmrType < AMR_TYPE_NUM )
//   27 	{
//   28 		if( memcmp( buf , amrStr[AmrType] ,  strlen( amrStr[AmrType] ) ) == 0 )
        SWI      +27
        LDR      R1,[R11, #+0]
        MOV      R2,R0
        MOV      R0,SP
        SWI      +284
        CMP      R0,#+0
        BEQ      ??OpenAmrFile_2
//   29 			break ;
//   30 		AmrType ++  ;
        ADD      R8,R8,#+1
        AND      R8,R8,#0xFF
//   31 	}
        CMP      R8,#+4
        BCC      ??OpenAmrFile_1
//   32 	
//   33 	if( AmrType >= AMR_TYPE_NUM )
??OpenAmrFile_2:
        MOV      R0,R8
        CMP      R0,#+4
        BCS      ??OpenAmrFile_0
        LDR      R0,[R10, +R0, LSL #+2]
        CMP      R6,#+0
        BNE      ??OpenAmrFile_3
//   34 		goto error ;
//   35 	
//   36 	//fseek( fp , strlen( amrStr[AmrType] )  , SEEK_SET );
//   37 	if( !isIdFile  )
//   38 		lseek( fd , strlen( amrStr[AmrType] )  , SEEK_SET ,0,0);
        SWI      +27
        MOV      R1,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R3,R0
        MOV      R2,R0
        B        ??OpenAmrFile_4
        CFI CFA R13+52
//   39 	else 
//   40 		lseek( fd , strlen( amrStr[AmrType] ) + offsetForIdFile  , SEEK_SET,0,0 );
??OpenAmrFile_3:
        SWI      +27
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+56
        MOV      R3,R1
        MOV      R2,R1
        ADD      R1,R4,R0
??OpenAmrFile_4:
        MOV      R0,R7
        SWI      +15
        ADD      SP,SP,#+4
        CFI CFA R13+52
//   41 
//   42 	AmrStruct = (AMRStruct*)malloc( sizeof( AMRStruct ) ) ;
        MOV      R0,#+280
        SWI      +20
        MOVS     R9,R0
//   43 	if( !AmrStruct )
        BEQ      ??OpenAmrFile_0
//   44 		goto error ;
//   45 	memset( AmrStruct , 0 , sizeof( AMRStruct ) ) ;
        MOV      R2,#+280
        MOV      R1,#+0
        SWI      +187
//   46 	AmrStruct->AmrType = AmrType ;
        STRB     R8,[R9, #+0]
//   47 	//AmrStruct->fp  = fp ; 
//   48 	AmrStruct->fd  = fd ; 
        STR      R7,[R9, #+12]
//   49 	if( AmrType >=  AMR_NB_MC )
        CMP      R8,#+2
        BCC      ??OpenAmrFile_5
//   50 	{
//   51 		//fread( &(AmrStruct->nChannels ) , 2 , 1 , fp )  ;
//   52 		//fread( &(AmrStruct->nChannels ) , 2 , 1 , fp )  ;
//   53 		fread( fd , &(AmrStruct->nChannels ) , 2  ,0)  ;
        MOV      R3,#+0
        MOV      R2,#+2
        ADD      R1,R9,#+16
        MOV      R0,R7
        SWI      +11
//   54 		fread( fd , &(AmrStruct->nChannels ) , 2 ,0 )  ;
        MOV      R3,R5
        MOV      R2,#+2
        ADD      R1,R9,#+16
        MOV      R0,R7
        SWI      +11
//   55 
//   56 		AmrStruct->Channel_Struct = AmrStruct->Channel_Struct ;
        LDRB     R0,[R9, #+236]
        STRB     R0,[R9, #+236]
//   57 		if( AmrStruct->nChannels < 4 )
        LDRSH    R0,[R9, #+16]
        CMP      R0,#+4
        BGE      ??OpenAmrFile_6
//   58 			AmrStruct->Channel_Struct ++ ;
        LDRB     R0,[R9, #+236]
        ADD      R0,R0,#+1
        STRB     R0,[R9, #+236]
        B        ??OpenAmrFile_6
//   59 	}
//   60 	else
//   61 	{
//   62 		AmrStruct->nChannels = 1  ;
??OpenAmrFile_5:
        MOV      R0,#+1
        STRH     R0,[R9, #+16]
//   63 		AmrStruct->Channel_Struct = SINGLE_CHANNEL ;
        STRB     R5,[R9, #+236]
//   64 	}
//   65 	AmrStruct->ChannelBuffer[0]  = AmrStruct->BufferPointer ;
??OpenAmrFile_6:
        ADD      R0,R9,#+44
        STR      R0,[R9, #+20]
//   66 	for( n = 1  ; n <  AmrStruct->nChannels ; n ++ )
        LDRSH    R1,[R9, #+16]
        MOV      R0,#+1
        CMP      R1,#+2
        BGE      ??OpenAmrFile_7
        B        ??OpenAmrFile_8
//   67 		AmrStruct->ChannelBuffer[n] = AmrStruct->ChannelBuffer[n-1] + MAXBYTESOFONFRAME ;	
??OpenAmrFile_9:
        SUB      R2,R0,#+1
        ADD      R2,R9,R2, LSL #+2
        LDR      R2,[R2, #+20]
        ADD      R1,R9,R0, LSL #+2
        ADD      R2,R2,#+32
        STR      R2,[R1, #+20]
        ADD      R0,R0,#+1
        MOV      R0,R0, LSL #+16
        MOV      R0,R0, ASR #+16
??OpenAmrFile_7:
        LDRSH    R1,[R9, #+16]
        CMP      R0,R1
        BLT      ??OpenAmrFile_9
//   68 
//   69 	if( (AmrType == AMR_WB_SC ) || (AmrType == AMR_WB_MC) )
??OpenAmrFile_8:
        CMP      R8,#+1
        CMPNE    R8,#+3
//   70 		AmrStruct->SampleRate = 16000 ;
        MOVEQ    R0,#+16000
//   71 	else
//   72 		AmrStruct->SampleRate = 8000 ;
        MOVNE    R0,#+8000
        STR      R0,[R9, #+4]
//   73 
//   74 	InitFrameBitOrder() ;
        _BLF     InitFrameBitOrder,??InitFrameBitOrder??rA
//   75 	return AmrStruct ;
        MOV      R0,R9
        ADD      SP,SP,#+16
        CFI CFA R13+36
        POP      {R4-R11,PC}
        CFI CFA R13+52
//   76 
//   77 error: 
//   78 	   if( fd )
??OpenAmrFile_0:
        CMP      R7,#+0
        BEQ      ??OpenAmrFile_10
//   79 		   fclose( fd ,0) ;
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +13
//   80 		//if( fp )
//   81 		 //  fclose( fp ) ;
//   82 	   if( !AmrStruct )
??OpenAmrFile_10:
        CMP      R9,#+0
        BNE      ??OpenAmrFile_11
//   83 		   mfree( AmrStruct ) ;
        MOV      R0,#+0
        SWI      +21
//   84 	   return 0 ;	
??OpenAmrFile_11:
        MOV      R0,#+0
        ADD      SP,SP,#+16
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock1
//   85 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateAmrFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE CreateAmrFile
//   86 
//   87 
//   88 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function CreateAmrFile
        ARM
//   89 AMRStruct* CreateAmrFile(char* AmrName , enum AmrFileType amrfiletype , enum ChannelStruct channelstruct , int bCreateFile ) 
//   90 {
CreateAmrFile:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+4
        CFI CFA R13+32
        MOV      R4,R1
        MOV      R5,R2
        MOVS     R6,R3
//   91 	int fp = 0  ; 	
        MOV      R7,#+0
//   92 unsigned long bytes ;
//   93 	AMRStruct* AmrStruct = 0  ;
        MOV      R8,#+0
//   94 	if( bCreateFile )
        BEQ      ??CreateAmrFile_0
//   95 	{
//   96                 fp = fopen(AmrName,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,0);
        MOV      R3,#+0
        MOV      R2,#+256
        MOV      R1,#+1
        ORR      R1,R1,#0x8300
        SWI      +10
        MOV      R7,R0
//   97 		if( fp ==-1) 
        CMN      R7,#+1
        BEQ      ??CreateAmrFile_1
//   98 			goto error  ; 
//   99 	}
//  100 
//  101 	AmrStruct =(AMRStruct*) malloc( sizeof( AMRStruct ) ) ;
??CreateAmrFile_0:
        MOV      R0,#+280
        SWI      +20
        MOVS     R8,R0
//  102 	if( ! AmrStruct )
        BEQ      ??CreateAmrFile_1
//  103 		goto error  ; 
//  104 	memset( AmrStruct , 0 , sizeof( AMRStruct ) ) ;
        MOV      R2,#+280
        MOV      R1,#+0
        SWI      +187
        LDR      R1,??DataTable1  ;; amrStr
        ADD      R0,R8,#+250
        ADD      R9,R1,R4, LSL #+2
        LDR      R1,[R9, #+0]
//  105 
//  106 	strcpy( (char*)AmrStruct->AmrFileHead ,  amrStr[ amrfiletype] ) ;
        SWI      +26
//  107 	AmrStruct->AmrFileHeadLength = strlen( amrStr[ amrfiletype] ) ;
        LDR      R0,[R9, #+0]
        SWI      +27
        STR      R0,[R8, #+276]
//  108 	if ( (amrfiletype == AMR_NB_MC)  || (amrfiletype == AMR_WB_MC) )
        CMP      R4,#+2
        CMPNE    R4,#+3
        BNE      ??CreateAmrFile_2
//  109 	{
//  110 		bytes = channelstruct ;
        MOV      R1,R5
        STR      R1,[SP, #+0]
//  111 		memcpy( AmrStruct->AmrFileHead + strlen( amrStr[ amrfiletype] ),   &bytes , 4  );
        LDR      R0,[R9, #+0]
        SWI      +27
        MOV      R2,#+4
        MOV      R1,SP
        ADD      R0,R0,R8
        ADD      R0,R0,#+250
        SWI      +286
//  112 		AmrStruct->AmrFileHeadLength += 4 ;
        LDR      R0,[R8, #+276]
        ADD      R0,R0,#+4
        STR      R0,[R8, #+276]
//  113 	}
//  114 
//  115 	if( bCreateFile )
??CreateAmrFile_2:
        CMP      R6,#+0
        BEQ      ??CreateAmrFile_3
//  116 	{
//  117 		bytes = fwrite( fp,AmrStruct->AmrFileHead  , AmrStruct->AmrFileHeadLength , 0 ) ;
        LDR      R2,[R8, #+276]
        MOV      R3,#+0
        ADD      R1,R8,#+250
        MOV      R0,R7
        SWI      +12
        STR      R0,[SP, #+0]
//  118 		if( bytes != AmrStruct->AmrFileHeadLength ) 
        LDR      R1,[R8, #+276]
        CMP      R0,R1
        BNE      ??CreateAmrFile_1
//  119 			goto error;
//  120 	}
//  121 
//  122 	AmrStruct->AmrType =  amrfiletype ; 
??CreateAmrFile_3:
        STRB     R4,[R8, #+0]
//  123 	AmrStruct->fp = fp ; 
        STR      R7,[R8, #+8]
//  124 	AmrStruct->Channel_Struct = channelstruct ;
        STRB     R5,[R8, #+236]
//  125 	AmrStruct->nChannels = channelstruct + 1 ;
        ADD      R0,R5,#+1
        STRH     R0,[R8, #+16]
//  126 	AmrStruct->ChannelBuffer[0] = AmrStruct->BufferPointer ; 
        ADD      R0,R8,#+44
        STR      R0,[R8, #+20]
//  127 	for( bytes = 1 ; bytes <   AmrStruct->nChannels  ; bytes ++ )
        MOV      R1,#+1
        STR      R1,[SP, #+0]
        LDRH     R0,[R8, #+16]
        CMP      R0,#+2
        BCS      ??CreateAmrFile_4
        _BLF     InitFrameBitOrder,??InitFrameBitOrder??rA
        MOV      R0,R8
        POP      {R1,R4-R9,PC}
//  128 		AmrStruct->ChannelBuffer[bytes] = AmrStruct->ChannelBuffer[bytes-1] + MAXBYTESOFONFRAME ;
??CreateAmrFile_5:
        LDR      R1,[SP, #+0]
        ADD      R0,R8,R0, LSL #+2
        SUB      R1,R1,#+1
        ADD      R1,R8,R1, LSL #+2
        LDR      R1,[R1, #+20]
        ADD      R1,R1,#+32
        STR      R1,[R0, #+20]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+0]
??CreateAmrFile_4:
        LDRSH    R1,[R8, #+16]
        LDR      R0,[SP, #+0]
        CMP      R0,R1
        BCC      ??CreateAmrFile_5
//  129 	 
//  130 	InitFrameBitOrder();
        _BLF     InitFrameBitOrder,??InitFrameBitOrder??rA
//  131 	return  AmrStruct ;
        MOV      R0,R8
        POP      {R1,R4-R9,PC}
//  132 error:
//  133 	if( fp )
??CreateAmrFile_1:
        CMP      R7,#+0
        BEQ      ??CreateAmrFile_6
//  134 		fclose( fp ,0) ;
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +13
//  135 	if( AmrStruct )
??CreateAmrFile_6:
        CMP      R8,#+0
        BEQ      ??CreateAmrFile_7
//  136 		mfree( AmrStruct ) ;
        MOV      R0,R8
        SWI      +21
//  137 	return 0 ;
??CreateAmrFile_7:
        MOV      R0,#+0
        POP      {R1,R4-R9,PC}    ;; return
        CFI EndBlock cfiBlock3
//  138 
//  139 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     amrStr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadOneFrameBlock??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ReadOneFrameBlock
//  140 
//  141 
//  142 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ReadOneFrameBlock
        ARM
//  143 short ReadOneFrameBlock( AMRStruct* AmrStruct  ) 
//  144 {
ReadOneFrameBlock:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
//  145 	unsigned long bytes ;
//  146 	int frametype  ;
//  147 	int  nF  ;
//  148 
//  149 	for(  nF  = 0 ; nF < AmrStruct->nChannels ;  nF ++ )
        MOV      R5,#+0
        B        ??ReadOneFrameBlock_0
//  150 	{
//  151 		bytes  = fread( AmrStruct->fd , AmrStruct->ChannelBuffer[nF] , 1  ,0 );
//  152 		if( bytes <= 0 )return 0 ;		
//  153 		frametype  =  (AmrStruct->ChannelBuffer[nF][0] >> 3 )&15 ;
??ReadOneFrameBlock_1:
        LDR      R0,[R6, #+20]
        MOV      R1,#+15
        LDRB     R0,[R0, #+0]
//  154 		bytes  = fread(  AmrStruct->fd ,  &AmrStruct->ChannelBuffer[nF][1] ,  bit_Byte_Number[frametype][1] ,0);
        MOV      R3,#+0
        AND      R0,R1,R0, ASR #+3
        LDR      R1,??DataTable3  ;; bit_Byte_Number
        ADD      R7,R1,R0, LSL #+2
        LDR      R0,[R6, #+20]
        LDRSH    R2,[R7, #+2]
        ADD      R1,R0,#+1
        LDR      R0,[R4, #+12]
        SWI      +11
//  155 		if( bytes != bit_Byte_Number[frametype][1] )return 0 ;
        LDRSH    R1,[R7, #+2]
        CMP      R0,R1
        BNE      ??ReadOneFrameBlock_2
        ADD      R5,R5,#+1
??ReadOneFrameBlock_0:
        LDRSH    R0,[R4, #+16]
        CMP      R5,R0
        BGE      ??ReadOneFrameBlock_3
        LDR      R0,[R4, #+12]
        ADD      R6,R4,R5, LSL #+2
        LDR      R1,[R6, #+20]
        MOV      R3,#+0
        MOV      R2,#+1
        SWI      +11
        CMP      R0,#+0
        BNE      ??ReadOneFrameBlock_1
??ReadOneFrameBlock_2:
        MOV      R0,#+0
        POP      {R4-R7,PC}
//  156 		
//  157 	}
//  158 	return 1 ;
??ReadOneFrameBlock_3:
        MOV      R0,#+1
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock5
//  159 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??WriteOneFrameBlock??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE WriteOneFrameBlock
//  160 
//  161 
//  162 
//  163 
//  164 /*
//  165  *	Function		:	WriteOneFrameBlock
//  166  *--------------------------------------------------------------------------------
//  167  *	Purpose 		:	Write the bytes  of one frame block  from amr file
//  168  *	Entry			:	AmrStruct -- AMRStruct , The struct to collect amr file information 
//  169  *
//  170  *	Return			:	short
//  171  *						1, if success
//  172  *						0, if Fail
//  173  *	External Ref.	:	
//  174  *	Summary			:	
//  175  *	Flowchart		:	
//  176  *--------------------------------------------------------------------------------
//  177  *	Note			:	
//  178  *--------------------------------------------------------------------------------
//  179  */
//  180 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function WriteOneFrameBlock
        ARM
//  181 short WriteOneFrameBlock( AMRStruct* AmrStruct  ) 
//  182 {
WriteOneFrameBlock:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
//  183 	unsigned long bytes ;
//  184 	int frametype  ;
//  185 	int  nF  ;
//  186 
//  187 	for(  nF  = 0 ; nF < AmrStruct->nChannels ;  nF ++ )
        MOV      R5,#+0
        B        ??WriteOneFrameBlock_0
//  188 	{
//  189 		bytes  = fwrite(AmrStruct->fp, AmrStruct->ChannelBuffer[nF] , 1 , 0 );
//  190 		if( bytes <= 0 )
//  191 			return 0 ;
//  192 
//  193 		frametype  =  (AmrStruct->ChannelBuffer[nF][0] >> 3 )&15 ;
??WriteOneFrameBlock_1:
        LDR      R0,[R6, #+20]
        MOV      R1,#+15
        LDRB     R0,[R0, #+0]
//  194 		bytes  = fwrite(AmrStruct->fp, &AmrStruct->ChannelBuffer[nF][1]  , bit_Byte_Number[frametype][1] ,0  );
        MOV      R3,#+0
        AND      R0,R1,R0, ASR #+3
        LDR      R1,??DataTable3  ;; bit_Byte_Number
        ADD      R7,R1,R0, LSL #+2
        LDR      R0,[R6, #+20]
        LDRSH    R2,[R7, #+2]
        ADD      R1,R0,#+1
        LDR      R0,[R4, #+8]
        SWI      +12
//  195 		if( bytes != bit_Byte_Number[frametype][1] )//error
        LDRSH    R1,[R7, #+2]
        CMP      R0,R1
        BNE      ??WriteOneFrameBlock_2
        ADD      R5,R5,#+1
??WriteOneFrameBlock_0:
        LDRSH    R0,[R4, #+16]
        CMP      R5,R0
        BGE      ??WriteOneFrameBlock_3
        LDR      R0,[R4, #+8]
        ADD      R6,R4,R5, LSL #+2
        LDR      R1,[R6, #+20]
        MOV      R3,#+0
        MOV      R2,#+1
        SWI      +12
        CMP      R0,#+0
        BNE      ??WriteOneFrameBlock_1
??WriteOneFrameBlock_2:
        MOV      R0,#+0
        POP      {R4-R7,PC}
//  196 		{
//  197 //			
//  198 			return 0 ;
//  199 		}
//  200 	}
//  201 	return 1 ;
??WriteOneFrameBlock_3:
        MOV      R0,#+1
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock7
//  202 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     bit_Byte_Number

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??CloseAmrFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE CloseAmrFile
//  203 
//  204 
//  205 
//  206 
//  207 /*
//  208  *	Function		:	CloseAmrFile
//  209  *--------------------------------------------------------------------------------
//  210  *	Purpose 		:	Close amrfile
//  211  *	Entry			:	AmrStruct -- AMRStruct , The struct to collect amr file information 
//  212  *
//  213  *	Return			:	short
//  214  *						1, if success
//  215  *						0, if Fail
//  216  *	External Ref.	:	
//  217  *	Summary			:	
//  218  *	Flowchart		:	
//  219  *--------------------------------------------------------------------------------
//  220  *	Note			:	
//  221  *--------------------------------------------------------------------------------
//  222  */
//  223 
//  224 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function CloseAmrFile
        ARM
//  225 short CloseAmrFile( AMRStruct* AmrStruct ) 
//  226 {
CloseAmrFile:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  227 	if(AmrStruct->fp) fclose( AmrStruct->fp ,0) ; 
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        BEQ      ??CloseAmrFile_0
        MOV      R1,#+0
        SWI      +13
//  228 	if( AmrStruct->fd ) fclose( AmrStruct->fd ,0) ; 
??CloseAmrFile_0:
        LDR      R0,[R4, #+12]
        CMP      R0,#+0
        BEQ      ??CloseAmrFile_1
        MOV      R1,#+0
        SWI      +13
//  229 	mfree( AmrStruct ) ; 
??CloseAmrFile_1:
        MOV      R0,R4
        SWI      +21
//  230 	return 0  ;
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9
//  231 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??InitFrameBitOrder??rA:
        LDR      R12,??Subroutine5_0  ;; InitFrameBitOrder
        BX       R12
        DATA
??Subroutine5_0:
        DC32     InitFrameBitOrder
        CFI EndBlock cfiBlock10

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for amrStr>`:
        DATA
        DC32 `?<Constant "#!AMR\\n">`, `?<Constant "#!AMR-WB\\n">`
        DC32 `?<Constant "#!AMR_MC1.0\\n">`, `?<Constant "#!AMR-WB_MC1.0\\n">`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "#!AMR\\n">`:
        DATA
        DC8 "#!AMR\012"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "#!AMR-WB\\n">`:
        DATA
        DC8 "#!AMR-WB\012"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "#!AMR_MC1.0\\n">`:
        DATA
        DC8 "#!AMR_MC1.0\012"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "#!AMR-WB_MC1.0\\n">`:
        DATA
        DC8 "#!AMR-WB_MC1.0\012"

        END
//  232 
// 
// 1 292 bytes in segment CODE
//    52 bytes in segment DATA_C
//    16 bytes in segment DATA_I
//    16 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 1 260 bytes of CODE  memory (+ 44 bytes shared)
//    68 bytes of CONST memory
//    16 bytes of DATA  memory
//
//Errors: none
//Warnings: none

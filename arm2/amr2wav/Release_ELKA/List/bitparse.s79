//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Mar/2011  10:39:09 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vkcom\bitparse.c                             /
//    Command line    =  C:\arm\vkcom\bitparse.c -D NEWSGOLD -D ELKA -lA     /
//                       C:\arm\vkcom\Release_ELKA\List\ -o                  /
//                       C:\arm\vkcom\Release_ELKA\Obj\ -s9 --cpu_mode arm   /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vkcom\Release_ELKA\List\bitparse.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME bitparse

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??CombineOneFrameBits??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
        MULTWEAK ??ParseOneFrameBits??rT
        PUBLIC CombineOneFrameBits
        FUNCTION CombineOneFrameBits,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC ParseOneFrameBits
        FUNCTION ParseOneFrameBits,0203H
        LOCFRAME CSTACK, 20, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
CombineOneFrameBits SYMBOL "CombineOneFrameBits"
??CombineOneFrameBits??rT SYMBOL "??rT", CombineOneFrameBits
ParseOneFrameBits   SYMBOL "ParseOneFrameBits"
??ParseOneFrameBits??rT SYMBOL "??rT", ParseOneFrameBits

        EXTERN bit_Byte_Number
        EXTERN table0__7


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ParseOneFrameBits??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ParseOneFrameBits
// C:\arm\vkcom\bitparse.c
//    1 #include "..\inc\swilib.h"
//    2 
//    3 #include "amrfile.h"
//    4 #include "typedef.h"
//    5 #include "frmbtord.h"
//    6 #include "interf_enc.h"
//    7 
//    8 
//    9 
//   10 
//   11 
//   12 
//   13 enum RXFrameType { RX_SPEECH_GOOD = 0,
//   14                    RX_SPEECH_DEGRADED,
//   15                    RX_ONSET,
//   16                    RX_SPEECH_BAD,
//   17                    RX_SID_FIRST,
//   18                    RX_SID_UPDATE,
//   19                    RX_SID_BAD,
//   20                    RX_NO_DATA,
//   21                    RX_N_FRAMETYPES     /* number of frame types */
//   22 };
//   23 
//   24 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ParseOneFrameBits
        ARM
//   25 short ParseOneFrameBits( Word16* serial, AMRStruct* AmrStruct, short nChannel ) 
//   26 {
ParseOneFrameBits:
        PUSH     {R4-R8}
        CFI R8 Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   27 	Word16* serialTmp ;
//   28 	unsigned char* buf;	
//   29 	int frametype , quality , mode , RX_Type ;
//   30 	int i ;
//   31 	if( nChannel >= AmrStruct->nChannels  )
        LDRSH    R3,[R1, #+16]
        CMP      R2,R3
        BGE      ??ParseOneFrameBits_0
//   32 		return 1 ;
//   33 	buf = AmrStruct->ChannelBuffer[ nChannel] ;
??ParseOneFrameBits_1:
        ADD      R3,R1,R2, LSL #+2
        LDR      R3,[R3, #+20]
//   34 	frametype  = (buf[0] >>3 ) &15 ;
        MOV      R5,#+15
        LDRB     R4,[R3, #+0]
//   35 	quality = (buf[0] >> 2 )&1 ;
        MOV      R6,#+1
//   36 	if(  (frametype >=0 ) && (frametype<=7)  )
        ADD      R12,R1,R2, LSL #+1
        AND      R4,R5,R4, ASR #+3
        LDRB     R5,[R3, #+0]
        MOV      R2,#+234
        ORR      R2,R2,#0x100
        AND      R5,R6,R5, ASR #+2
        CMP      R4,#+0
        BMI      ??ParseOneFrameBits_2
        CMP      R4,#+8
        BGE      ??ParseOneFrameBits_2
//   37 	{
//   38 		short* tableX ;
//   39 		int bit = 0 ;
//   40 		int k ; 		
//   41 		int allbytes ;
//   42 
//   43 		if( quality == 1 ) 
        CMP      R5,#+1
//   44 			RX_Type = RX_SPEECH_GOOD ; 
        MOVEQ    R5,#+0
//   45 		else
//   46 			RX_Type = RX_SPEECH_DEGRADED; 
        MOVNE    R5,#+1
//   47 		mode = frametype ;
//   48 		serial[0] =  RX_Type ; // RX Type
        STRH     R5,[R0, #+0]
//   49 		serial[1+MAX_SERIAL_SIZE] = mode ; //Mode indication 
//   50 		AmrStruct->CurrMode[ nChannel ] = mode ;
//   51 
//   52 		serialTmp = serial + 1 ; 
//   53 		tableX = table0__7[mode] ;
        LDR      R5,??DataTable2  ;; bit_Byte_Number
        STRH     R4,[R2, +R0]
        LDR      R2,??DataTable3  ;; table0__7
        STRH     R4,[R12, #+238]
        LDR      R2,[R2, +R4, LSL #+2]
        ADD      R12,R5,R4, LSL #+2
        LDRSH    R4,[R12, #+0]
        MOV      R1,#+0
        ADD      R0,R0,#+2
        ASR      R5,R4,#+2
        ADD      R4,R4,R5, LSR #+29
        ASR      R5,R4,#+3
//   54 		allbytes = bit_Byte_Number[mode][0]/8;
//   55 		buf ++ ;
        ADD      R3,R3,#+1
//   56 		for( i = 0 ; i <  allbytes ; i ++ )
        MOV      R4,#+0
        CMP      R5,#+1
        MOV      R8,R6
        BGE      ??ParseOneFrameBits_3
        B        ??ParseOneFrameBits_4
//   57 		{
//   58 			serialTmp [ tableX[bit++] ] =  (buf[i] >> 7) & 1  ;			
??ParseOneFrameBits_5:
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        LSR      R7,R7,#+7
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   59 			serialTmp [ tableX[bit++] ] = (buf[i] >> 6) & 1  ;
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        AND      R7,R8,R7, ASR #+6
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   60 			serialTmp [ tableX[bit++] ] = (buf[i] >> 5) & 1  ;
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        AND      R7,R8,R7, ASR #+5
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   61 			serialTmp [ tableX[bit++] ] = (buf[i] >> 4) & 1  ;
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        AND      R7,R8,R7, ASR #+4
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   62 			serialTmp [ tableX[bit++] ] = (buf[i] >> 3) & 1  ;
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        AND      R7,R8,R7, ASR #+3
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   63 			serialTmp [ tableX[bit++] ] = (buf[i] >> 2) & 1  ;
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        AND      R7,R8,R7, ASR #+2
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   64 			serialTmp [ tableX[bit++] ] = (buf[i] >> 1) & 1  ;
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        AND      R7,R8,R7, ASR #+1
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   65 			serialTmp [ tableX[bit++] ] = buf[i] & 1 ;
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        AND      R7,R7,#0x1
        ADD      R1,R1,#+1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
//   66 		}
        ADD      R4,R4,#+1
??ParseOneFrameBits_3:
        CMP      R4,R5
        BLT      ??ParseOneFrameBits_5
//   67 		for( k = 7 ; k > 7-bit_Byte_Number[mode][0]%8 ; k -- )
??ParseOneFrameBits_4:
        MOV      R5,#+7
        B        ??ParseOneFrameBits_6
//   68 			serialTmp [ tableX[bit++] ] = (buf[i] >> k) & 1  ;
??ParseOneFrameBits_7:
        LDRB     R7,[R4, +R3]
        ADD      R6,R2,R1, LSL #+1
        LDRSH    R6,[R6, #+0]
        ASR      R7,R7,R5
        AND      R7,R7,#0x1
        ADD      R6,R0,R6, LSL #+1
        STRH     R7,[R6, #+0]
        ADD      R1,R1,#+1
        SUB      R5,R5,#+1
??ParseOneFrameBits_6:
        LDRSH    R6,[R12, #+0]
        RSB      R7,R6,#+7
        ASR      R8,R6,#+2
        ADD      R6,R6,R8, LSR #+29
        ASR      R6,R6,#+3
        ADD      R6,R7,R6, LSL #+3
        CMP      R6,R5
        BLT      ??ParseOneFrameBits_7
//   69 		return 1 ;
??ParseOneFrameBits_0:
        POP      {R4-R8}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI CFA R13+0
        MOV      R0,#+1
        BX       LR
        CFI R4 Frame(CFA, -20)
        CFI R5 Frame(CFA, -16)
        CFI R6 Frame(CFA, -12)
        CFI R7 Frame(CFA, -8)
        CFI R8 Frame(CFA, -4)
        CFI CFA R13+20
//   70 	}
//   71 	else if( frametype == 8 ) //SID Frame
??ParseOneFrameBits_2:
        CMP      R4,#+8
        BNE      ??ParseOneFrameBits_8
//   72 	{
//   73 		int STI;  
//   74 		int bit = 0 ;
//   75 		//printf("Encounter SID\n") ;		
//   76 		STI = buf[4]& 0x10 ; 
//   77 		if(STI==0 )
        LDRB     R4,[R3, #+4]
        MOV      R1,#+0
//   78 			RX_Type = RX_SID_FIRST ;
//   79 		else
//   80 			RX_Type = RX_SID_UPDATE ;			
//   81 		mode = (buf[4]>>1)&7; //((buf[4]>>3)&1)|((buf[4]>>1)&2)|((buf[4]<<1)&4) ;		
        MOV      R6,#+7
        TST      R4,#0x10
        MOVEQ    R5,#+4
        MOVNE    R5,#+5
        AND      R4,R6,R4, ASR #+1
//   82 
//   83 		serial[0] =  RX_Type ; // RX Type
        STRH     R5,[R0, #+0]
//   84 		serial[1+MAX_SERIAL_SIZE] = mode ; //Mode indication 
        STRH     R4,[R2, +R0]
//   85 		AmrStruct->CurrMode[ nChannel ] = mode ;
        STRH     R4,[R12, #+238]
//   86 		serialTmp = serial + 1 ; 
        ADD      R0,R0,#+2
//   87 		for( i = 0 ; i < 4 ; i ++ )
        MOV      R4,#+0
        MOV      R6,#+1
//   88 		{
//   89 			serialTmp [ bit++ ] = (buf[i] >> 7) & 1  ;
??ParseOneFrameBits_9:
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        LSR      R5,R5,#+7
        STRH     R5,[R2, #+0]
//   90 			serialTmp [ bit++ ] = (buf[i] >> 6) & 1  ;
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        AND      R5,R6,R5, ASR #+6
        STRH     R5,[R2, #+0]
//   91 			serialTmp [ bit++ ] = (buf[i] >> 5) & 1  ;
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        AND      R5,R6,R5, ASR #+5
        STRH     R5,[R2, #+0]
//   92 			serialTmp [ bit++ ] = (buf[i] >> 4) & 1  ;
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        AND      R5,R6,R5, ASR #+4
        STRH     R5,[R2, #+0]
//   93 			serialTmp [ bit++ ] = (buf[i] >> 3) & 1  ;
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        AND      R5,R6,R5, ASR #+3
        STRH     R5,[R2, #+0]
//   94 			serialTmp [ bit++ ] = (buf[i] >> 2) & 1  ;
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        AND      R5,R6,R5, ASR #+2
        STRH     R5,[R2, #+0]
//   95 			serialTmp [ bit++ ] = (buf[i] >> 1) & 1  ;
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        AND      R5,R6,R5, ASR #+1
        STRH     R5,[R2, #+0]
//   96 			serialTmp [ bit++ ] = buf[i] & 1 ;
        LDRB     R5,[R4, +R3]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        AND      R5,R5,#0x1
        STRH     R5,[R2, #+0]
//   97 		}
        ADD      R4,R4,#+1
        CMP      R4,#+4
        BLT      ??ParseOneFrameBits_9
//   98 		serialTmp [ bit++ ] =  (buf[4] >> 7) & 1  ;			
        LDRB     R4,[R3, #+4]
        ADD      R2,R0,R1, LSL #+1
        ADD      R1,R1,#+1
        LSR      R4,R4,#+7
        STRH     R4,[R2, #+0]
//   99 		serialTmp [ bit++ ] = (buf[4] >> 6) & 1  ;
        ADD      R0,R0,R1, LSL #+1
        LDRB     R1,[R3, #+4]
        AND      R1,R6,R1, ASR #+6
        STRH     R1,[R0, #+0]
//  100 		serialTmp [ bit++ ] = (buf[4] >> 5) & 1  ;
        LDRB     R1,[R3, #+4]
        AND      R1,R6,R1, ASR #+5
        STRH     R1,[R0, #+2]
//  101 		return 1 ;
        B        ??ParseOneFrameBits_0
//  102 	}
//  103 	else if( frametype == 15 )
??ParseOneFrameBits_8:
        CMP      R4,#+15
        BNE      ??ParseOneFrameBits_10
//  104 	{
//  105 		serial[0] = RX_NO_DATA;
        MOV      R1,#+7
        STRH     R1,[R0, #+0]
//  106 		serial[1+MAX_SERIAL_SIZE] = AmrStruct->CurrMode[ nChannel ] ;
        LDRSH    R1,[R12, #+238]
        STRH     R1,[R2, +R0]
//  107 		return 1 ;
        B        ??ParseOneFrameBits_0
//  108 	}
//  109 	else
//  110 	{	
//  111 		return 0 ;
??ParseOneFrameBits_10:
        POP      {R4-R8}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI CFA R13+0
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//  112 		//while (1 )
//  113 		{
//  114 			///printf("Error\n" ) ;
//  115 			//i = 0 ;
//  116 			//i ++   ;
//  117 		}
//  118 	}
//  119 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??CombineOneFrameBits??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE CombineOneFrameBits
//  120 
//  121 
//  122 
//  123 /*
//  124  *	Function		:	CombineOneFrameBits
//  125  *--------------------------------------------------------------------------------
//  126  *	Purpose 		:	Get the bits of one frame ,1bit to 1 byte
//  127  *	Entry			:	serial -- Word16* , The buffer to fill frame bits in  
//  128  *							The length is SERIAL_FRAMESIZE (1+MAX_SERIAL_SIZE+5)	
//  129  *						AmrStruct -- AMRStruct*  , The amr file manager
//  130  *						nChannel--short , # of channel
//  131  *
//  132  *	Return			:	short
//  133  *						1, if success
//  134  *						0, if Fail
//  135  *	External Ref.	:	CurrMode--int , to store current mode
//  136  *	Summary			:	
//  137  *	Flowchart		:	
//  138  *--------------------------------------------------------------------------------
//  139  *	Note			:	
//  140  *--------------------------------------------------------------------------------
//  141  */
//  142 
//  143 
//  144 enum TXFrameType { TX_SPEECH_GOOD = 0,
//  145                    TX_SID_FIRST,
//  146                    TX_SID_UPDATE,
//  147                    TX_NO_DATA,
//  148                    TX_SPEECH_DEGRADED,
//  149                    TX_SPEECH_BAD,
//  150                    TX_SID_BAD,
//  151                    TX_ONSET,
//  152                    TX_N_FRAMETYPES     /* number of frame types */
//  153 };
//  154 
//  155 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function CombineOneFrameBits
        ARM
//  156 short CombineOneFrameBits(
//  157 	Word16* serial,
//  158 	AMRStruct* AmrStruct,	
//  159 	enum TXFrameType tx_type,
//  160 	enum Mode mode,
//  161 	short nChannel
//  162 	)
//  163 {	
CombineOneFrameBits:
        PUSH     {R4-R6}
        CFI R6 Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  164 	unsigned char* buf ;
//  165 	short bit , i ; 
//  166 	short* table ;
//  167 	Word16*	serialTmp ;
//  168 
//  169 	if( nChannel >= AmrStruct->nChannels )
        LDRSH    R12,[R1, #+16]
        LDRSH    R4,[SP, #+12]
        CMP      R4,R12
        BLT      ??CombineOneFrameBits_1
//  170 		return 0 ;
??CombineOneFrameBits_2:
        POP      {R4-R6}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI CFA R13+0
        MOV      R0,#+0
        BX       LR
        CFI R4 Frame(CFA, -12)
        CFI R5 Frame(CFA, -8)
        CFI R6 Frame(CFA, -4)
        CFI CFA R13+12
//  171 	buf =  AmrStruct->ChannelBuffer [ nChannel ] ;
??CombineOneFrameBits_1:
        ADD      R1,R1,R4, LSL #+2
        LDR      R1,[R1, #+20]
//  172 	switch( tx_type )
        LSL      R4,R3,#+1
        MOV      R12,#+68
        MOV      R5,R2
        CMP      R5,#+6
        BHI      ??CombineOneFrameBits_2
        ADR      R6,??CombineOneFrameBits_0
        MOV      R5,R5, LSL #+1
        LDRSH    R6,[R6, R5]
        ADD      PC,PC,R6, LSL #+2
        DATA
??CombineOneFrameBits_0:
        DC16     +3,+103,+110,+208
        DC16     +3,+3,+110,+0
        ARM
//  173 	{
//  174 		case TX_SPEECH_GOOD :			
//  175 		case TX_SPEECH_DEGRADED:
//  176 		case TX_SPEECH_BAD:
//  177 			if( tx_type == TX_SPEECH_GOOD )
//  178 				buf[0] = (mode << 3)|4 ;
//  179 			else
//  180 				buf[0] = ( mode << 3) ;
//  181 			bit = 1 ;
//  182 			i = 0 ; 
//  183 			table = table0__7[ mode ] ;
??CombineOneFrameBits_3:
        LDR      R5,??DataTable2  ;; bit_Byte_Number
        LSL      R4,R3,#+3
        CMP      R2,#+0
        ORREQ    R2,R4,#0x4
        STRBNE   R4,[R1, #+0]
        LDR      R4,??DataTable3  ;; table0__7
        STRBEQ   R2,[R1, #+0]
        LDR      R4,[R4, +R3, LSL #+2]
        ADD      R3,R5,R3, LSL #+2
        LDRSH    R5,[R3, #+0]
        MOV      R12,#+1
        MOV      R2,#+0
        CMP      R5,#+1
        BLT      ??CombineOneFrameBits_4
//  184 //			serialTmp = serial + 1 ; 
//  185 			serialTmp = serial ; 
//  186 			while(  i < bit_Byte_Number[mode][0] )
??CombineOneFrameBits_5:
        LDRSH    R5,[R3, #+0]
        CMP      R2,R5
        BGE      ??CombineOneFrameBits_4
//  187 			{				
//  188 				buf[bit]  = serialTmp[table[i++]]<<7 ;
        ADD      R5,R4,R2, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R2,R2,#+1
        MOV      R2,R2, LSL #+16
        ADD      R5,R0,R5, LSL #+1
        LDRSH    R5,[R5, #+0]
        MOV      R2,R2, ASR #+16
//  189 				buf[bit] |= serialTmp[table[i++]]<<6 ;
        ADD      R6,R4,R2, LSL #+1
        LSL      R5,R5,#+7
        STRB     R5,[R12, +R1]
        LDRSH    R6,[R6, #+0]
        LDRB     R5,[R12, +R1]
        ADD      R2,R2,#+1
        ADD      R6,R0,R6, LSL #+1
        LDRSH    R6,[R6, #+0]
        MOV      R2,R2, LSL #+16
        MOV      R2,R2, ASR #+16
        ORR      R5,R5,R6, LSL #+6
        STRB     R5,[R12, +R1]
//  190 				buf[bit] |= serialTmp[table[i++]]<<5 ;
        LDRB     R5,[R12, +R1]
        ADD      R6,R4,R2, LSL #+1
        LDRSH    R6,[R6, #+0]
        ADD      R2,R2,#+1
        MOV      R2,R2, LSL #+16
        ADD      R6,R0,R6, LSL #+1
        LDRSH    R6,[R6, #+0]
        MOV      R2,R2, ASR #+16
        ORR      R5,R5,R6, LSL #+5
        STRB     R5,[R12, +R1]
//  191 				buf[bit] |= serialTmp[table[i++]]<<4 ;
        LDRB     R5,[R12, +R1]
        ADD      R6,R4,R2, LSL #+1
        LDRSH    R6,[R6, #+0]
        ADD      R2,R2,#+1
        MOV      R2,R2, LSL #+16
        ADD      R6,R0,R6, LSL #+1
        LDRSH    R6,[R6, #+0]
        MOV      R2,R2, ASR #+16
        ORR      R5,R5,R6, LSL #+4
        STRB     R5,[R12, +R1]
//  192 				buf[bit] |= serialTmp[table[i++]]<<3 ;
        LDRB     R5,[R12, +R1]
        ADD      R6,R4,R2, LSL #+1
        LDRSH    R6,[R6, #+0]
        ADD      R2,R2,#+1
        MOV      R2,R2, LSL #+16
        ADD      R6,R0,R6, LSL #+1
        LDRSH    R6,[R6, #+0]
        MOV      R2,R2, ASR #+16
        ORR      R5,R5,R6, LSL #+3
        STRB     R5,[R12, +R1]
//  193 				buf[bit] |= serialTmp[table[i++]]<<2 ;
        LDRB     R5,[R12, +R1]
        ADD      R6,R4,R2, LSL #+1
        LDRSH    R6,[R6, #+0]
        ADD      R2,R2,#+1
        MOV      R2,R2, LSL #+16
        ADD      R6,R0,R6, LSL #+1
        LDRSH    R6,[R6, #+0]
        MOV      R2,R2, ASR #+16
        ORR      R5,R5,R6, LSL #+2
        STRB     R5,[R12, +R1]
//  194 				buf[bit] |= serialTmp[table[i++]]<<1 ;
        LDRB     R5,[R12, +R1]
        ADD      R6,R4,R2, LSL #+1
        LDRSH    R6,[R6, #+0]
        ADD      R2,R2,#+1
        MOV      R2,R2, LSL #+16
        ADD      R6,R0,R6, LSL #+1
        LDRSH    R6,[R6, #+0]
        MOV      R2,R2, ASR #+16
        ORR      R5,R5,R6, LSL #+1
        STRB     R5,[R12, +R1]
//  195 				buf[bit] |= serialTmp[table[i++]] ;
        LDRB     R5,[R12, +R1]
        ADD      R6,R4,R2, LSL #+1
        LDRSH    R6,[R6, #+0]
        ADD      R2,R2,#+1
        MOV      R2,R2, LSL #+16
        ADD      R6,R0,R6, LSL #+1
        LDRSH    R6,[R6, #+0]
        MOV      R2,R2, ASR #+16
        ORR      R5,R6,R5
        STRB     R5,[R12, +R1]
//  196 				bit ++ ;
        ADD      R12,R12,#+1
        MOV      R12,R12, LSL #+16
        MOV      R12,R12, ASR #+16
        B        ??CombineOneFrameBits_5
//  197 			}
//  198 			break; 
//  199 
//  200 		case TX_SID_FIRST:
//  201 			buf[0] = (8 << 3)|4 ;
??CombineOneFrameBits_6:
        STRB     R12,[R1, #+0]
//  202 			buf[4] = mode<<1 ;
        STRB     R4,[R1, #+4]
//  203 			buf[1] = buf[2] = buf[3] = 0 ;
        MOV      R0,#+0
        STRB     R0,[R1, #+3]
        STRB     R0,[R1, #+2]
        STRB     R0,[R1, #+1]
        B        ??CombineOneFrameBits_4
//  204 			break;
//  205 		case TX_SID_UPDATE:        
//  206 		case TX_SID_BAD:
//  207 			if( tx_type == TX_SID_UPDATE ) 
??CombineOneFrameBits_7:
        CMP      R2,#+2
//  208 				buf[0] = (8 << 3)|4 ;
        STRBEQ   R12,[R1, #+0]
//  209 			else
//  210 				buf[0] = (8 << 3);
        MOVNE    R2,#+64
        STRBNE   R2,[R1, #+0]
//  211 			buf[4] = (mode<<1)|0x10 ;
        ORR      R2,R4,#0x10
        STRB     R2,[R1, #+4]
//  212 			bit = 1 ;			
        MOV      R3,#+1
//  213 			for( i = 0 ; i < 3 ; i ++ )
        MOV      R2,#+0
//  214 			{				
//  215 				buf[i] = (serial[bit++]<<7) ;
??CombineOneFrameBits_8:
        ADD      R4,R0,R3, LSL #+1
        LDRSH    R4,[R4, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        LSL      R4,R4,#+7
        STRB     R4,[R2, +R1]
//  216 				buf[i] |= (serial[bit++]<<6) ;
        LDRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
        ADD      R5,R0,R3, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        ORR      R4,R4,R5, LSL #+6
        STRB     R4,[R2, +R1]
//  217 				buf[i] |= (serial[bit++]<<5) ;
        LDRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
        ADD      R5,R0,R3, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        ORR      R4,R4,R5, LSL #+5
        STRB     R4,[R2, +R1]
//  218 				buf[i] |= (serial[bit++]<<4) ;
        LDRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
        ADD      R5,R0,R3, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        ORR      R4,R4,R5, LSL #+4
        STRB     R4,[R2, +R1]
//  219 				buf[i] |= (serial[bit++]<<3) ;
        LDRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
        ADD      R5,R0,R3, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        ORR      R4,R4,R5, LSL #+3
        STRB     R4,[R2, +R1]
//  220 				buf[i] |= (serial[bit++]<<2) ;
        LDRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
        ADD      R5,R0,R3, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        ORR      R4,R4,R5, LSL #+2
        STRB     R4,[R2, +R1]
//  221 				buf[i] |= (serial[bit++]<<1) ;
        LDRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
        ADD      R5,R0,R3, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        ORR      R4,R4,R5, LSL #+1
        STRB     R4,[R2, +R1]
//  222 				buf[i] |= serial[bit++] ;
        LDRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
        ADD      R5,R0,R3, LSL #+1
        LDRSH    R5,[R5, #+0]
        ADD      R3,R3,#+1
        MOV      R3,R3, LSL #+16
        ORR      R4,R5,R4
        STRB     R4,[R2, +R1]
        MOV      R3,R3, ASR #+16
//  223 			}
        ADD      R2,R2,#+1
        CMP      R2,#+3
        BLT      ??CombineOneFrameBits_8
//  224 			buf[4] |= serial[bit++]<<7 ;
        LDRB     R2,[R1, #+4]
        ADD      R4,R0,R3, LSL #+1
        LDRSH    R4,[R4, #+0]
        ADD      R12,R3,#+1
        MOV      R12,R12, LSL #+16
        ORR      R2,R2,R4, LSL #+7
        STRB     R2,[R1, #+4]
//  225 			buf[4] |= serial[bit++]<<6 ;
        LDRB     R2,[R1, #+4]
        MOV      R12,R12, ASR #+16
        ADD      R3,R0,R12, LSL #+1
        LDRSH    R3,[R3, #+0]
        ORR      R2,R2,R3, LSL #+6
        STRB     R2,[R1, #+4]
//  226 			buf[4] |= serial[bit++]<<5 ;			
        LDRB     R2,[R1, #+4]
        ADD      R3,R12,#+1
        MOV      R3,R3, LSL #+16
        MOV      R3,R3, ASR #+16
        ADD      R0,R0,R3, LSL #+1
        LDRSH    R0,[R0, #+0]
        ORR      R0,R2,R0, LSL #+5
        STRB     R0,[R1, #+4]
??CombineOneFrameBits_4:
        POP      {R4-R6}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI CFA R13+0
        MOV      R0,#+1
        BX       LR
        CFI R4 Frame(CFA, -12)
        CFI R5 Frame(CFA, -8)
        CFI R6 Frame(CFA, -4)
        CFI CFA R13+12
//  227 			break;
//  228 		case TX_NO_DATA:
//  229 			buf[0] = (15<<1) ;
??CombineOneFrameBits_9:
        MOV      R0,#+30
        STRB     R0,[R1, #+0]
//  230 			break;
//  231 		case TX_ONSET: //I don't know this type
//  232 		default:
//  233 			return 0 ;
//  234 			
//  235 	}
//  236 	return 1 ;
??CombineOneFrameBits_10:
        B        ??CombineOneFrameBits_4
        CFI EndBlock cfiBlock3
//  237 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     bit_Byte_Number

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     table0__7

        END
// 
// 1 752 bytes in segment CODE
// 
// 1 744 bytes of CODE memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none

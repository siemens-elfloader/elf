//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Mar/2011  10:39:21 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vkcom\wavefile.c                             /
//    Command line    =  C:\arm\vkcom\wavefile.c -D NEWSGOLD -D ELKA -lA     /
//                       C:\arm\vkcom\Release_ELKA\List\ -o                  /
//                       C:\arm\vkcom\Release_ELKA\Obj\ -s9 --cpu_mode arm   /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vkcom\Release_ELKA\List\wavefile.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME wavefile

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        EXTERN ??div32_a

        MULTWEAK ??CloseWaveFile??rT
        MULTWEAK ??CreateWaveFile??rT
        MULTWEAK ??OpenWaveFile??rT
        MULTWEAK ??ReadCombineSamplesWaveFile??rT
        MULTWEAK ??ReadSeparateWaveFile??rT
        MULTWEAK ??WriteCombineSamplesWaveFile??rT
        MULTWEAK ??WriteSeparateWaveFile??rT
        MULTWEAK ??rA??div32_a
        PUBLIC CloseWaveFile
        FUNCTION CloseWaveFile,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC CreateWaveFile
        FUNCTION CreateWaveFile,0203H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC OpenWaveFile
        FUNCTION OpenWaveFile,0203H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC ReadCombineSamplesWaveFile
        FUNCTION ReadCombineSamplesWaveFile,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC ReadSeparateWaveFile
        FUNCTION ReadSeparateWaveFile,0203H
        LOCFRAME CSTACK, 140, STACK
        PUBLIC WriteCombineSamplesWaveFile
        FUNCTION WriteCombineSamplesWaveFile,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC WriteSeparateWaveFile
        FUNCTION WriteSeparateWaveFile,0203H
        LOCFRAME CSTACK, 136, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
CloseWaveFile       SYMBOL "CloseWaveFile"
??CloseWaveFile??rT SYMBOL "??rT", CloseWaveFile
CreateWaveFile      SYMBOL "CreateWaveFile"
??CreateWaveFile??rT SYMBOL "??rT", CreateWaveFile
OpenWaveFile        SYMBOL "OpenWaveFile"
??OpenWaveFile??rT  SYMBOL "??rT", OpenWaveFile
ReadCombineSamplesWaveFile SYMBOL "ReadCombineSamplesWaveFile"
??ReadCombineSamplesWaveFile??rT SYMBOL "??rT", ReadCombineSamplesWaveFile
ReadSeparateWaveFile SYMBOL "ReadSeparateWaveFile"
??ReadSeparateWaveFile??rT SYMBOL "??rT", ReadSeparateWaveFile
WriteCombineSamplesWaveFile SYMBOL "WriteCombineSamplesWaveFile"
??WriteCombineSamplesWaveFile??rT SYMBOL "??rT", WriteCombineSamplesWaveFile
WriteSeparateWaveFile SYMBOL "WriteSeparateWaveFile"
??WriteSeparateWaveFile??rT SYMBOL "??rT", WriteSeparateWaveFile


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OpenWaveFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OpenWaveFile
// C:\arm\vkcom\wavefile.c
//    1 #include "..\inc\swilib.h"
//    2 
//    3 
//    4 /****************************************************
//    5 **************Wave file format***********************
//    6 	  __________________________
//    7 	| RIFF WAVE Chunk	   |
//    8 	|   groupID  = 'RIFF'      |
//    9 	|   riffType = 'WAVE'      |
//   10 	|    __________________    |
//   11 	|   | Format Chunk     |   |
//   12 	|   |	ckID = 'fmt '  |   |
//   13 	|   |__________________|   |
//   14 	|    __________________    |
//   15 	|   | Sound Data Chunk |   |
//   16 	|   |	ckID = 'data'  |   |
//   17 	|   |__________________|   |
//   18 	|__________________________|
//   19 
//   20 ****************************************************/
//   21 
//   22 
//   23 
//   24 
//   25 #include "wavefile.h"
//   26 
//   27 
//   28 /*
//   29  *	Function		:	OpenWaveFile
//   30  *--------------------------------------------------------------------------------
//   31  *	Purpose 		:	Open a wave file 
//   32  *	Entry			:	WavName -- wave file name 
//   33  *
//   34  *	Return			:	WavStruct -- WAVStruct*
//   35  *						The struct to collect wave file information 
//   36  *						
//   37  *	External Ref.	:	
//   38  *	Summary			:	
//   39  *	Flowchart		:	
//   40  *--------------------------------------------------------------------------------
//   41  *	Note			:	
//   42  *--------------------------------------------------------------------------------
//   43  */
//   44 
//   45 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OpenWaveFile
        ARM
//   46 WAVStruct* OpenWaveFile( char* WavName ) 
//   47 {
OpenWaveFile:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+8
        CFI CFA R13+28
//   48 	int			fp = 0  ; 
//   49 	char			buf4[5] ;
//   50 	WAVStruct*		WavStruct = 0 ; 
        MOV      R4,#+0
        MOV      R5,#+0
//   51 	unsigned long	bytes ;
//   52         fp = fopen(WavName,A_ReadOnly+A_BIN,P_READ,0);
        MOV      R3,R4
        MOV      R2,#+128
        MOV      R1,#+32768
        SWI      +10
        MOV      R6,R0
//   53 	if( fp ==-1)
        CMN      R6,#+1
        BEQ      ??OpenWaveFile_0
//   54 		goto error;
//   55 
//   56 	WavStruct = malloc( sizeof( WAVStruct ) ) ;
        MOV      R0,#+52
        SWI      +20
        MOVS     R5,R0
//   57 	if(!WavStruct )
        BEQ      ??OpenWaveFile_0
//   58 		goto error;
//   59 	memset( WavStruct , 0 ,  sizeof( WAVStruct )  ) ; 
        MOV      R2,#+52
        MOV      R1,#+0
        SWI      +187
//   60 	bytes = fread(fp, &(WavStruct->riff)  , sizeof( WAVInfo ) , 0 ) ;
        MOV      R3,R4
        MOV      R2,#+44
        ADD      R1,R5,#+8
        MOV      R0,R6
        SWI      +11
//   61 	if( bytes != sizeof( WAVInfo ) )
        CMP      R0,#+44
        BNE      ??OpenWaveFile_0
//   62 		goto error;
//   63 	
//   64 	strcpy( buf4 , "RIFF" ) ;
        LDR      R7,??OpenWaveFile_1  ;; `?<Constant "RIFF">`
        MOV      R0,SP
        MOV      R1,R7
        SWI      +26
//   65 	if( memcmp( WavStruct->riff.riffHead , buf4 ,4  ) != 0  )
        MOV      R2,#+4
        MOV      R1,SP
        ADD      R0,R5,#+8
        SWI      +284
        CMP      R0,#+0
        BNE      ??OpenWaveFile_0
//   66 		goto error;
//   67 	strcpy( buf4 , "WAVE" ) ;
        ADD      R1,R7,#+8
        MOV      R0,SP
        SWI      +26
//   68 	if( memcmp( WavStruct->riff.riffType, buf4,  4 ) != 0  )
        MOV      R2,#+4
        MOV      R1,SP
        ADD      R0,R5,#+16
        SWI      +284
        CMP      R0,#+0
        BNE      ??OpenWaveFile_0
//   69 		goto error;	
//   70 	strcpy( buf4 , "fmt " ) ;
        ADD      R1,R7,#+16
        MOV      R0,SP
        SWI      +26
//   71 	if( memcmp( WavStruct->foramt.chunkID, buf4, 4 ) != 0  )
        MOV      R2,#+4
        MOV      R1,SP
        ADD      R0,R5,#+20
        SWI      +284
        CMP      R0,#+0
//   72 		goto error;
//   73 	if( WavStruct->foramt.wFormatTag != WAVE_FORMAT_PCM )
        LDRSHEQ  R0,[R5, #+28]
        CMPEQ    R0,#+1
        BNE      ??OpenWaveFile_0
//   74 		goto error;
//   75 
//   76 	WavStruct->fp = fp ; 
        STR      R6,[R5, #+0]
//   77 	WavStruct->IsWrite = 0 ;
        STRH     R4,[R5, #+4]
//   78 	return WavStruct ;
        MOV      R0,R5
        POP      {R1,R2,R4-R7,PC}
//   79 error:if( fp )
??OpenWaveFile_0:
        CMP      R6,#+0
        BEQ      ??OpenWaveFile_2
//   80 		  fclose( fp ,0) ;
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +13
//   81 	if( WavStruct )
??OpenWaveFile_2:
        CMP      R5,#+0
        BEQ      ??OpenWaveFile_3
//   82 		mfree( WavStruct ) ;
        MOV      R0,R5
        SWI      +21
//   83 	return 0 ;
??OpenWaveFile_3:
        MOV      R0,#+0
        POP      {R1,R2,R4-R7,PC}  ;; return
        DATA
??OpenWaveFile_1:
        DC32     `?<Constant "RIFF">`
        CFI EndBlock cfiBlock1
//   84 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateWaveFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE CreateWaveFile
//   85 
//   86 
//   87 /*
//   88  *	Function		:	CreateWaveFile
//   89  *--------------------------------------------------------------------------------
//   90  *	Purpose 		:	Create a wave file to writing
//   91  *	Entry			:	WavName -- wave file name 
//   92  *
//   93  *	Return			:	WavStruct -- WAVStruct*
//   94  *						The struct to collect wave file information 
//   95  *						
//   96  *	External Ref.	:	
//   97  *	Summary			:	
//   98  *	Flowchart		:	
//   99  *--------------------------------------------------------------------------------
//  100  *	Note			:	
//  101  *--------------------------------------------------------------------------------
//  102  */
//  103 
//  104 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function CreateWaveFile
        ARM
//  105 WAVStruct* CreateWaveFile( char* WavName , short nChannel , short sampleBits , long sampleRate  ) 
//  106 {
CreateWaveFile:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R2
        MOV      R8,R1
        MOV      R5,R3
//  107 	int		fp = 0  ; 
//  108 	WAVStruct*		WavStruct = 0 ; 
//  109 	unsigned long	bytes ;
//  110         fp = fopen(WavName,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,0);
        MOV      R3,#+0
        MOV      R2,#+256
        MOV      R1,#+1
        ORR      R1,R1,#0x8300
        SWI      +10
        MOVS     R6,R0
//  111 	if( !fp )
        BEQ      ??CreateWaveFile_0
//  112 		goto error;
//  113 
//  114 	WavStruct = malloc( sizeof( WAVStruct ) ) ;
        MOV      R0,#+52
        SWI      +20
        MOVS     R7,R0
//  115 	if(!WavStruct )
        BEQ      ??CreateWaveFile_1
//  116 		goto error;
//  117 	memset( WavStruct , 0 , sizeof( WAVStruct ) ) ;
        MOV      R2,#+52
        MOV      R1,#+0
        SWI      +187
//  118 	WavStruct->riff.riffHead[0] = 'R';
        MOV      R0,#+82
        STRB     R0,[R7, #+8]
//  119 	WavStruct->riff.riffHead[1] = 'I';
        MOV      R0,#+73
        STRB     R0,[R7, #+9]
//  120 	WavStruct->riff.riffHead[2] = 'F';
        MOV      R0,#+70
        STRB     R0,[R7, #+10]
//  121 	WavStruct->riff.riffHead[3] = 'F';
        STRB     R0,[R7, #+11]
//  122 	WavStruct->riff.riffType[0] = 'W';
        MOV      R0,#+87
        STRB     R0,[R7, #+16]
//  123 	WavStruct->riff.riffType[1] = 'A';
        MOV      R0,#+65
        STRB     R0,[R7, #+17]
//  124 	WavStruct->riff.riffType[2] = 'V';
        MOV      R0,#+86
        STRB     R0,[R7, #+18]
//  125 	WavStruct->riff.riffType[3] = 'E';
        MOV      R0,#+69
        STRB     R0,[R7, #+19]
//  126 	
//  127 	WavStruct->foramt.chunkID[0]= 'f';
        MOV      R0,#+102
        STRB     R0,[R7, #+20]
//  128 	WavStruct->foramt.chunkID[1]= 'm';
        MOV      R0,#+109
        STRB     R0,[R7, #+21]
//  129 	WavStruct->foramt.chunkID[2]= 't';
        MOV      R0,#+116
        STRB     R0,[R7, #+22]
//  130 	WavStruct->foramt.chunkID[3]= ' ';
        MOV      R1,#+32
        STRB     R1,[R7, #+23]
//  131 	WavStruct->foramt.chunkSize = sizeof(FormatChunk) - 8 ;
        MOV      R1,#+16
        STR      R1,[R7, #+24]
//  132 	WavStruct->riff.length =  20 + WavStruct->foramt.chunkSize ;
        MOV      R1,#+36
        STR      R1,[R7, #+12]
//  133 	WavStruct->foramt.wFormatTag =  WAVE_FORMAT_PCM ;
//  134 	WavStruct->foramt.wChannels =  nChannel  ;
//  135 	WavStruct->foramt.dwSamplesPerSec = sampleRate ;
//  136 	WavStruct->foramt.dwAvgBytesPerSec = sampleRate*sampleBits*nChannel/8 ;
        MOV      R1,R4
        MUL      R2,R1,R5
//  137 	WavStruct->foramt.wBlockAlign = sampleBits*nChannel/8;
        MUL      R1,R8,R1
        MUL      R2,R8,R2
        MOV      R9,#+1
        STRH     R9,[R7, #+28]
        STRH     R8,[R7, #+30]
        STR      R5,[R7, #+32]
        ASR      R3,R2,#+2
        ADD      R2,R2,R3, LSR #+29
        ASR      R2,R2,#+3
        STR      R2,[R7, #+36]
        ASR      R2,R1,#+2
        ADD      R1,R1,R2, LSR #+29
        ASR      R1,R1,#+3
        STRH     R1,[R7, #+40]
//  138 	WavStruct->foramt.wBitsPerSample = sampleBits ;
        STRH     R4,[R7, #+42]
//  139 	WavStruct->data.chunkID[0] = 'd';
        MOV      R1,#+100
        STRB     R1,[R7, #+44]
//  140 	WavStruct->data.chunkID[1] = 'a';
        MOV      R1,#+97
        STRB     R1,[R7, #+45]
//  141 	WavStruct->data.chunkID[2] = 't';
        STRB     R0,[R7, #+46]
//  142 	WavStruct->data.chunkID[3] = 'a';
        STRB     R1,[R7, #+47]
//  143 
//  144 	bytes = fwrite(fp, &WavStruct->riff  , sizeof( WAVInfo ) ,  0 ) ;
//  145 	if( bytes != sizeof( WAVInfo ) )goto error;
        MOV      R3,#+0
        MOV      R2,#+44
        ADD      R1,R7,#+8
        MOV      R0,R6
        SWI      +12
        CMP      R0,#+44
        BNE      ??CreateWaveFile_1
//  146 		
//  147 	WavStruct->fp = fp ; 
        STR      R6,[R7, #+0]
//  148 	WavStruct->IsWrite = 1  ;
        STRH     R9,[R7, #+4]
//  149 	return WavStruct ;
        MOV      R0,R7
        POP      {R4-R9,PC}
//  150 error:
//  151   if( fp )fclose( fp,0 ) ;
??CreateWaveFile_1:
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +13
//  152  if( WavStruct ) mfree( WavStruct ) ;
        CMP      R7,#+0
        BEQ      ??CreateWaveFile_0
        MOV      R0,R7
        SWI      +21
//  153 	return 0 ;
??CreateWaveFile_0:
        MOV      R0,#+0
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock3
//  154 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??WriteCombineSamplesWaveFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE WriteCombineSamplesWaveFile
//  155 
//  156 
//  157 
//  158 /*
//  159  *	Function		:	WriteCombineSamplesWaveFile
//  160  *--------------------------------------------------------------------------------
//  161  *	Purpose 		:	write sample into file 
//  162  *	Entry			:	WavStruct -- WAVStruct*
//  163  *						The struct to collect wave file information 
//  164  *						samples -- unsigned char* , to store sample data with format:
//  165  *						data of all channels in one sample is stored in the same location
//  166  *						for example : two channels ,16bit/channel is placed as :
//  167  *						l-ch-by0 , l-ch-by1;r-ch-by0, r-ch-by1;l-ch-by0,l-ch-by1;r-ch-by0,r-ch-by1
//  168  *	Return			:	
//  169  *						
//  170  *	External Ref.	:	
//  171  *	Summary			:	
//  172  *	Flowchart		:	
//  173  *--------------------------------------------------------------------------------
//  174  *	Note			:	
//  175  *--------------------------------------------------------------------------------
//  176  */
//  177 
//  178 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function WriteCombineSamplesWaveFile
        ARM
//  179 short WriteCombineSamplesWaveFile( WAVStruct* WavStruct , unsigned char* samples , long sampleNum ) 
//  180 {
WriteCombineSamplesWaveFile:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  181 	long bytes ;
//  182 	long sampleBytes = sampleNum * WavStruct->foramt.wBlockAlign  ;		
//  183 	bytes = fwrite(WavStruct->fp, samples , sampleBytes ,0 ) ;
        MOV      R3,#+0
        MOV      R4,R0
        LDRH     R0,[R4, #+40]
        MUL      R5,R0,R2
        LDR      R0,[R4, #+0]
        MOV      R2,R5
        SWI      +12
//  184 	WavStruct->data.chunkSize += bytes ;
        LDR      R1,[R4, #+48]
//  185 	if( bytes != sampleBytes )
        CMP      R0,R5
        ADD      R1,R0,R1
        STR      R1,[R4, #+48]
//  186 		return 0 ;
        MOVNE    R0,#+0
        POPNE    {R4,R5,PC}
//  187 	else
//  188 		return 1 ;
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock5
//  189 
//  190 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??WriteSeparateWaveFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE WriteSeparateWaveFile
//  191 
//  192 
//  193 /*
//  194  *	Function		:	WriteSeparateWaveFile
//  195  *--------------------------------------------------------------------------------
//  196  *	Purpose 		:	write sample into file 
//  197  *	Entry			:	WavStruct -- WAVStruct*
//  198  *							The struct to collect wave file information 
//  199  *						samples -- unsigned char** , to a pointer group that has nChannel unsigned char
//  200  *									buffer to store each channel samples	
//  201  *						data of each channels is stored separate
//  202  *						for example : two channels ,16bit/channel is placed as :
//  203  *						samples[0] is left channel data , samples[1] is right channel data
//  204  *	Return			:
//  205  *						
//  206  *	External Ref.	:	
//  207  *	Summary			:	
//  208  *	Flowchart		:	
//  209  *--------------------------------------------------------------------------------
//  210  *	Note			:	
//  211  *--------------------------------------------------------------------------------
//  212  */
//  213 
//  214 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function WriteSeparateWaveFile
        ARM
//  215 short WriteSeparateWaveFile( WAVStruct* WavStruct , unsigned char** samples , long  sampleNum , short nChannel ) 
//  216 {
WriteSeparateWaveFile:
        PUSH     {R2,R4,R5,R7-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+36
        SUB      SP,SP,#+96
        CFI CFA R13+132
        MOV      R4,R0
//  217 	long bytes ;
//  218 	unsigned char buf0[48] ;
//  219 	unsigned char* buf ;
//  220 	unsigned char* samplesTmp[12] ;
//  221 	long bytesEachChannel;
//  222 	int n , k ; 
//  223 	
//  224 	if( nChannel != WavStruct->foramt.wChannels ) 
        LDRH     R0,[R4, #+30]
        MOV      R5,R3
        CMP      R5,R0
//  225 		return 0 ; 
        MOVNE    R0,#+0
        BNE      ??WriteSeparateWaveFile_0
//  226 	memcpy( samplesTmp , samples , nChannel*sizeof( unsigned char* ) ) ;	
        LSL      R2,R5,#+2
        ADD      R0,SP,#+48
        SWI      +286
//  227 	bytesEachChannel = WavStruct->foramt.wBitsPerSample/8 ;
        LDRH     R0,[R4, #+42]
//  228 	
//  229 	buf = buf0 ;
        MOV      R8,SP
//  230 	for( n = 0 ; n < sampleNum ; n ++  )
        MOV      R9,#+0
        LSR      R7,R0,#+3
        LDR      R0,[SP, #+96]
        CMP      R0,#+1
        BGE      ??WriteSeparateWaveFile_1
//  231 	{		
//  232 		for( k = 0 ; k < nChannel ; k ++ )
//  233 		{
//  234 			memcpy( buf , samplesTmp[k]  , bytesEachChannel ) ;
//  235 			samplesTmp[k] += bytesEachChannel ;
//  236 			buf += bytesEachChannel ;
//  237 		}
//  238 		buf = buf0 ;
//  239 		bytes = fwrite(WavStruct->fp , buf  , WavStruct->foramt.wBlockAlign , 0) ;
//  240 		WavStruct->data.chunkSize += bytes ;
//  241 	}
//  242 		
//  243 	return 1 ;
??WriteSeparateWaveFile_2:
        MOV      R0,#+1
??WriteSeparateWaveFile_0:
        ADD      SP,SP,#+100      ;; stack cleaning
        CFI CFA R13+32
        POP      {R4,R5,R7-R11,PC}
        CFI CFA R13+132
??WriteSeparateWaveFile_3:
        ADD      R0,SP,#+48
        ADD      R11,R0,R10, LSL #+2
        LDR      R1,[R11, #+0]
        MOV      R2,R7
        MOV      R0,R8
        SWI      +286
        LDR      R0,[R11, #+0]
        ADD      R8,R7,R8
        ADD      R0,R7,R0
        STR      R0,[R11, #+0]
        ADD      R10,R10,#+1
??WriteSeparateWaveFile_4:
        CMP      R10,R5
        BLT      ??WriteSeparateWaveFile_3
??WriteSeparateWaveFile_5:
        LDRH     R2,[R4, #+40]
        LDR      R0,[R4, #+0]
        MOV      R8,SP
        MOV      R3,#+0
        MOV      R1,SP
        SWI      +12
        LDR      R1,[R4, #+48]
        ADD      R9,R9,#+1
        ADD      R0,R0,R1
        STR      R0,[R4, #+48]
??WriteSeparateWaveFile_1:
        LDR      R0,[SP, #+96]
        CMP      R9,R0
        BGE      ??WriteSeparateWaveFile_2
        MOV      R10,#+0
        CMP      R5,#+1
        BGE      ??WriteSeparateWaveFile_4
        B        ??WriteSeparateWaveFile_5
        CFI EndBlock cfiBlock7
//  244 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadCombineSamplesWaveFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ReadCombineSamplesWaveFile
//  245 
//  246 
//  247 
//  248 
//  249 /*
//  250  *	Function		:	ReadCombineSamplesWaveFile
//  251  *--------------------------------------------------------------------------------
//  252  *	Purpose 		:	Read sample into file 
//  253  *	Entry			:	WavStruct -- WAVStruct*
//  254  *						The struct to collect wave file information 
//  255  *						samples -- unsigned char* , to store sample data with format:
//  256  *						data of all channels in one sample is stored in the same location
//  257  *						for example : two channels ,16bit/channel is placed as :
//  258  *						l-ch-by0 , l-ch-by1;r-ch-by0, r-ch-by1;l-ch-by0,l-ch-by1;r-ch-by0,r-ch-by1
//  259  *	Return			:	
//  260  *						
//  261  *	External Ref.	:	
//  262  *	Summary			:	
//  263  *	Flowchart		:	
//  264  *--------------------------------------------------------------------------------
//  265  *	Note			:	
//  266  *--------------------------------------------------------------------------------
//  267  */
//  268 
//  269 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ReadCombineSamplesWaveFile
        ARM
//  270 short ReadCombineSamplesWaveFile( WAVStruct* WavStruct , unsigned char* samples , long* sampleNum ) 
//  271 {
ReadCombineSamplesWaveFile:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R2
//  272 	long bytes ;
//  273 	long sampleBytes = *sampleNum * WavStruct->foramt.wBlockAlign  ;		
        LDRH     R2,[R4, #+40]
        LDR      R0,[R5, #+0]
//  274 	bytes = fread( WavStruct->fp,samples  , sampleBytes ,0 ) ;
        MOV      R3,#+0
        MUL      R6,R2,R0
        LDR      R0,[R4, #+0]
        MOV      R2,R6
        SWI      +11
//  275 	if( bytes < sampleBytes )
        CMP      R0,R6
        BGE      ??ReadCombineSamplesWaveFile_0
//  276 		* sampleNum = bytes/WavStruct->foramt.wBlockAlign ; 	
        LDRH     R1,[R4, #+40]
        _BLF     ??div32_a,??rA??div32_a
        STR      R1,[R5, #+0]
//  277 	return 1 ;
??ReadCombineSamplesWaveFile_0:
        MOV      R0,#+1
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock9
//  278 
//  279 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadSeparateWaveFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ReadSeparateWaveFile
//  280 
//  281 
//  282 
//  283 /*
//  284  *	Function		:	ReadSeparateWaveFile
//  285  *--------------------------------------------------------------------------------
//  286  *	Purpose 		:	Read sample into file 
//  287  *	Entry			:	WavStruct -- WAVStruct*
//  288  *							The struct to collect wave file information 
//  289  *						samples -- unsigned char** , to a pointer group that has nChannel unsigned char
//  290  *									buffer to store each channel samples	
//  291  *						data of each channels is stored separate
//  292  *						for example : two channels ,16bit/channel is placed as :
//  293  *						samples[0] is left channel data , samples[1] is right channel data
//  294  *	Return			:
//  295  *						
//  296  *	External Ref.	:	
//  297  *	Summary			:	
//  298  *	Flowchart		:	
//  299  *--------------------------------------------------------------------------------
//  300  *	Note			:	
//  301  *--------------------------------------------------------------------------------
//  302  */
//  303 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ReadSeparateWaveFile
        ARM
//  304 short ReadSeparateWaveFile( WAVStruct* WavStruct , unsigned char** samples , long  *sampleNum , short nChannel ) 
//  305 {
ReadSeparateWaveFile:
        PUSH     {R3-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        SUB      SP,SP,#+100
        CFI CFA R13+140
        MOV      R5,R2
//  306 	long bytes ;
//  307 	unsigned char buf0[48] ;
//  308 	unsigned char* buf ;
//  309 	unsigned char* samplesTmp[12] ;
//  310 	long bytesEachChannel;
//  311 	int n , k ; 
//  312 	long  sampleNum1 = *sampleNum ;
        LDR      R2,[R5, #+0]
        MOV      R4,R0
        STR      R2,[SP, #+0]
//  313 	
//  314 	if( nChannel != WavStruct->foramt.wChannels ) 
        LDRH     R0,[R4, #+30]
        MOV      R6,R3
        CMP      R6,R0
        BNE      ??ReadSeparateWaveFile_0
//  315 		return 0 ; 
//  316 	memcpy( samplesTmp , samples , nChannel*sizeof( unsigned char* ) ) ;	
        LSL      R2,R3,#+2
        ADD      R0,SP,#+52
        SWI      +286
//  317 	bytesEachChannel = WavStruct->foramt.wBitsPerSample/8 ;
        LDRH     R0,[R4, #+42]
//  318 
//  319 /*/////////////////////////////////////////////// 
//  320 	buf = samples[0] ;
//  321 	bytes = fread( buf , WavStruct->foramt.wBlockAlign ,  sampleNum1 , WavStruct->fp ) ;
//  322 	(*sampleNum ) = bytes ;
//  323 	if( *sampleNum  == sampleNum1 )
//  324 		return 1 ;
//  325 	else
//  326 		return 0 ;
//  327 */
//  328 
//  329 	*sampleNum = 0 ;
//  330 	for( n = 0 ; n < sampleNum1 ; n ++  )
        MOV      R8,#+0
        LSR      R7,R0,#+3
        MOV      R0,#+0
        B        ??ReadSeparateWaveFile_1
//  331 	{
//  332 		buf = buf0 ;
//  333 		bytes = fread(WavStruct->fp, buf  , WavStruct->foramt.wBlockAlign , 0 ) ;
//  334 		if( bytes != WavStruct->foramt.wBlockAlign )
//  335 			return 0 ;
//  336 		for( k = 0 ; k < nChannel ; k ++ )
//  337 		{
//  338 			memcpy( samplesTmp[k]  , buf   , bytesEachChannel ) ;
??ReadSeparateWaveFile_2:
        ADD      R0,SP,#+52
        ADD      R11,R0,R9, LSL #+2
        LDR      R0,[R11, #+0]
        MOV      R2,R7
        MOV      R1,R10
        SWI      +286
//  339 			samplesTmp[k] += bytesEachChannel ;
        LDR      R0,[R11, #+0]
//  340 			buf += bytesEachChannel ;
        ADD      R10,R7,R10
        ADD      R0,R7,R0
        STR      R0,[R11, #+0]
//  341 		}
        ADD      R9,R9,#+1
??ReadSeparateWaveFile_3:
        CMP      R9,R6
        BLT      ??ReadSeparateWaveFile_2
//  342 		(*sampleNum )++ ;
??ReadSeparateWaveFile_4:
        LDR      R0,[R5, #+0]
        ADD      R8,R8,#+1
        ADD      R0,R0,#+1
??ReadSeparateWaveFile_1:
        STR      R0,[R5, #+0]
        LDR      R0,[SP, #+0]
        CMP      R8,R0
        BGE      ??ReadSeparateWaveFile_5
        LDRH     R2,[R4, #+40]
        LDR      R0,[R4, #+0]
        ADD      R10,SP,#+4
        MOV      R3,#+0
        ADD      R1,SP,#+4
        SWI      +11
        LDRH     R1,[R4, #+40]
        CMP      R0,R1
        BNE      ??ReadSeparateWaveFile_0
        LDRSH    R0,[SP, #+100]
        MOV      R9,#+0
        CMP      R0,#+1
        BGE      ??ReadSeparateWaveFile_3
        B        ??ReadSeparateWaveFile_4
//  343 		//WavStruct->data.chunkSize += bytes ;
//  344 	}
//  345 	if( *sampleNum  == sampleNum1 )
??ReadSeparateWaveFile_5:
        LDR      R0,[R5, #+0]
        LDR      R1,[SP, #+0]
        CMP      R0,R1
//  346 		return 1 ;
        MOVEQ    R0,#+1
        BEQ      ??ReadSeparateWaveFile_6
//  347 	else
//  348 		return 0 ;
??ReadSeparateWaveFile_0:
        MOV      R0,#+0
??ReadSeparateWaveFile_6:
        ADD      SP,SP,#+104      ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock11
//  349 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??CloseWaveFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE CloseWaveFile
//  350 
//  351 
//  352 
//  353 
//  354 /*
//  355  *	Function		:	CloseWaveFile
//  356  *--------------------------------------------------------------------------------
//  357  *	Purpose 		:	Close a wave file
//  358  *	Entry			:	WavName -- wave file name 
//  359  *
//  360  *	Return			:	WavStruct -- WAVStruct*
//  361  *						The struct to collect wave file information 
//  362  *						
//  363  *	External Ref.	:	
//  364  *	Summary			:	
//  365  *	Flowchart		:	
//  366  *--------------------------------------------------------------------------------
//  367  *	Note			:	
//  368  *--------------------------------------------------------------------------------
//  369  */
//  370 
//  371 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function CloseWaveFile
        ARM
//  372 short CloseWaveFile( WAVStruct* WavStruct )
//  373 {
CloseWaveFile:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  374 	if( !WavStruct->IsWrite )
        LDRSH    R1,[R4, #+4]
        LDR      R0,[R4, #+0]
        CMP      R1,#+0
        BNE      ??CloseWaveFile_0
//  375 	{
//  376 		fclose( WavStruct->fp,0) ;
        SWI      +13
//  377 		mfree( WavStruct ) ;
        MOV      R0,R4
        SWI      +21
        MOV      R0,#+1
        POP      {R4,PC}
//  378 	}
//  379 	else
//  380 	{
//  381 		WavStruct->riff.length += WavStruct->data.chunkSize ;
??CloseWaveFile_0:
        LDR      R1,[R4, #+12]
        LDR      R2,[R4, #+48]
//  382 		lseek( WavStruct->fp , 0 , SEEK_SET,0,0 ) ;
        MOV      R3,#+0
        ADD      R1,R2,R1
        STR      R1,[R4, #+12]
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+12
        MOV      R2,R1
        SWI      +15
//  383 		fwrite( WavStruct->fp,&(WavStruct->riff)  , sizeof(WAVInfo) , 0  ) ;
        LDR      R0,[R4, #+0]
        MOV      R3,#+0
        MOV      R2,#+44
        ADD      R1,R4,#+8
        SWI      +12
//  384 		fclose( WavStruct->fp,0) ;
        LDR      R0,[R4, #+0]
        MOV      R1,#+0
        SWI      +13
//  385 		mfree( WavStruct ) ;
        MOV      R0,R4
        SWI      +21
        ADD      SP,SP,#+4
        CFI CFA R13+8
//  386 	}
//  387 	return 1 ;
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13
//  388 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine7_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine7_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock14

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "RIFF">`:
        DATA
        DC8 "RIFF"
        DC8 0, 0, 0
        DC8 "WAVE"
        DC8 0, 0, 0
        DC8 "fmt "
        DC8 0, 0, 0

        END
//  389 
//  390 
// 
// 1 384 bytes in segment CODE
//    24 bytes in segment DATA_C
// 
// 1 344 bytes of CODE  memory (+ 40 bytes shared)
//    24 bytes of CONST memory
//
//Errors: none
//Warnings: none
